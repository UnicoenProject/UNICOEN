// $ANTLR 3.2 Sep 23, 2009 12:02:23 cs.g 2010-03-22 18:25:16

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162


	using System.Collections.Generic;
	using System.Text;
	using System.Xml.Linq;


using System;
using Antlr.Runtime;
	using OpenCodeProcessorFramework.Languages.Common.Antlr;
	using IList 		= System.Collections.IList;
using ArrayList 	= System.Collections.ArrayList;
using Stack 		= Antlr.Runtime.Collections.StackList;

using IDictionary	= System.Collections.IDictionary;
using Hashtable 	= System.Collections.Hashtable;

using Antlr.Runtime.Tree;

public partial class csParser : Parser, IXParser
{
    public static readonly string[] tokenNames = new string[] 
	{
        "<invalid>", 
		"<EOR>", 
		"<DOWN>", 
		"<UP>", 
		"ASSIGNMENT", 
		"BLOCK", 
		"CAST_EXPRESSION", 
		"CLASS_DECL", 
		"DELEGATE_DECL", 
		"ELSE", 
		"ENUM_DECL", 
		"EXPRESSION", 
		"FIELD_DECL", 
		"IF", 
		"INTERFACE_DECL", 
		"INVOCATION_EXPRESSION", 
		"LOCAL_VARIABLE_DECLARATOR", 
		"MEMBER_ACCESS", 
		"METHOD_DECL", 
		"NAMESPACE_DECL", 
		"NAMESPACE_OR_TYPE_NAME", 
		"PREDEFINED_TYPE", 
		"PROPERTY_DECLARATION", 
		"QID_PART", 
		"RETURN_TYPE", 
		"UNARY_EXPRESSION", 
		"USING_DIRECTIVE", 
		"TELEMENT", 
		"TMEMBER", 
		"TINVOCATION", 
		"IDENTIFIER", 
		"Real_literal", 
		"NUMBER", 
		"Hex_number", 
		"Character_literal", 
		"STRINGLITERAL", 
		"Verbatim_string_literal", 
		"TRUE", 
		"FALSE", 
		"NULL", 
		"DOT", 
		"PTR", 
		"MINUS", 
		"GT", 
		"USING", 
		"ENUM", 
		"GET", 
		"SET", 
		"ELIF", 
		"ENDIF", 
		"DEFINE", 
		"UNDEF", 
		"SEMI", 
		"RPAREN", 
		"WS", 
		"TS", 
		"DOC_LINE_COMMENT", 
		"LINE_COMMENT", 
		"COMMENT", 
		"EscapeSequence", 
		"Verbatim_string_literal_character", 
		"Decimal_digits", 
		"INTEGER_TYPE_SUFFIX", 
		"Decimal_integer_literal", 
		"GooBallIdentifier", 
		"GooBall", 
		"IdentifierStart", 
		"IdentifierPart", 
		"Exponent_part", 
		"Real_type_suffix", 
		"Pragma", 
		"PP_CONDITIONAL", 
		"PREPROCESSOR_DIRECTIVE", 
		"IF_TOKEN", 
		"DEFINE_TOKEN", 
		"ELSE_TOKEN", 
		"ENDIF_TOKEN", 
		"UNDEF_TOKEN", 
		"PP_EXPRESSION", 
		"PP_OR_EXPRESSION", 
		"PP_AND_EXPRESSION", 
		"PP_EQUALITY_EXPRESSION", 
		"PP_UNARY_EXPRESSION", 
		"PP_PRIMARY_EXPRESSION", 
		"HEX_DIGIT", 
		"HEX_DIGITS", 
		"DECIMAL_DIGIT", 
		"Sign", 
		"'namespace'", 
		"'::'", 
		"'this'", 
		"'base'", 
		"'{'", 
		"'}'", 
		"'extern'", 
		"'alias'", 
		"'='", 
		"'['", 
		"','", 
		"']'", 
		"':'", 
		"'assembly'", 
		"'module'", 
		"'field'", 
		"'event'", 
		"'method'", 
		"'param'", 
		"'property'", 
		"'return'", 
		"'type'", 
		"'('", 
		"'*'", 
		"'?'", 
		"'void'", 
		"'sbyte'", 
		"'byte'", 
		"'short'", 
		"'ushort'", 
		"'int'", 
		"'uint'", 
		"'long'", 
		"'ulong'", 
		"'char'", 
		"'<'", 
		"'+'", 
		"'!'", 
		"'~'", 
		"'++'", 
		"'--'", 
		"'&'", 
		"'out'", 
		"'ref'", 
		"'bool'", 
		"'decimal'", 
		"'double'", 
		"'float'", 
		"'object'", 
		"'string'", 
		"'new'", 
		"'sizeof'", 
		"'typeof'", 
		"'checked'", 
		"'unchecked'", 
		"'default'", 
		"'delegate'", 
		"'in'", 
		"'/'", 
		"'%'", 
		"'<<'", 
		"'<='", 
		"'>='", 
		"'is'", 
		"'as'", 
		"'=='", 
		"'!='", 
		"'^'", 
		"'|'", 
		"'&&'", 
		"'||'", 
		"'??'", 
		"'+='", 
		"'-='", 
		"'*='", 
		"'/='", 
		"'%='", 
		"'&='", 
		"'|='", 
		"'^='", 
		"'<<='", 
		"'=>'", 
		"'public'", 
		"'protected'", 
		"'internal'", 
		"'private'", 
		"'unsafe'", 
		"'from'", 
		"'into'", 
		"'join'", 
		"'on'", 
		"'equals'", 
		"'let'", 
		"'orderby'", 
		"'ascending'", 
		"'descending'", 
		"'select'", 
		"'group'", 
		"'by'", 
		"'where'", 
		"'partial'", 
		"'class'", 
		"'abstract'", 
		"'sealed'", 
		"'static'", 
		"'struct'", 
		"'const'", 
		"'readonly'", 
		"'volatile'", 
		"'virtual'", 
		"'override'", 
		"'__arglist'", 
		"'params'", 
		"'add'", 
		"'remove'", 
		"'operator'", 
		"'implicit'", 
		"'explicit'", 
		"'interface'", 
		"'fixed'", 
		"'var'", 
		"'dynamic'", 
		"'stackalloc'", 
		"'switch'", 
		"'case'", 
		"'while'", 
		"'do'", 
		"'for'", 
		"'foreach'", 
		"'break'", 
		"'continue'", 
		"'goto'", 
		"'throw'", 
		"'try'", 
		"'catch'", 
		"'finally'", 
		"'lock'", 
		"'yield'", 
		"'pragma'"
    };

    public const int DECIMAL_DIGIT = 86;
    public const int T__159 = 159;
    public const int T__158 = 158;
    public const int Character_literal = 34;
    public const int T__160 = 160;
    public const int T__167 = 167;
    public const int T__168 = 168;
    public const int EOF = -1;
    public const int T__165 = 165;
    public const int T__166 = 166;
    public const int T__163 = 163;
    public const int T__164 = 164;
    public const int T__161 = 161;
    public const int T__162 = 162;
    public const int ELSE_TOKEN = 75;
    public const int T__93 = 93;
    public const int T__94 = 94;
    public const int RPAREN = 53;
    public const int T__91 = 91;
    public const int T__92 = 92;
    public const int T__148 = 148;
    public const int T__147 = 147;
    public const int T__90 = 90;
    public const int T__149 = 149;
    public const int USING = 44;
    public const int PP_AND_EXPRESSION = 80;
    public const int GET = 46;
    public const int Sign = 87;
    public const int NAMESPACE_DECL = 19;
    public const int T__154 = 154;
    public const int T__155 = 155;
    public const int T__156 = 156;
    public const int T__157 = 157;
    public const int T__99 = 99;
    public const int T__150 = 150;
    public const int T__98 = 98;
    public const int T__151 = 151;
    public const int T__97 = 97;
    public const int T__152 = 152;
    public const int T__96 = 96;
    public const int T__153 = 153;
    public const int T__95 = 95;
    public const int T__139 = 139;
    public const int T__138 = 138;
    public const int T__137 = 137;
    public const int ENUM_DECL = 10;
    public const int T__136 = 136;
    public const int ELSE = 9;
    public const int NUMBER = 32;
    public const int Decimal_integer_literal = 63;
    public const int DEFINE_TOKEN = 74;
    public const int T__141 = 141;
    public const int T__142 = 142;
    public const int T__140 = 140;
    public const int T__145 = 145;
    public const int T__89 = 89;
    public const int T__146 = 146;
    public const int T__88 = 88;
    public const int UNDEF_TOKEN = 77;
    public const int T__143 = 143;
    public const int T__144 = 144;
    public const int T__126 = 126;
    public const int ENDIF_TOKEN = 76;
    public const int T__125 = 125;
    public const int T__128 = 128;
    public const int T__127 = 127;
    public const int WS = 54;
    public const int T__129 = 129;
    public const int PP_PRIMARY_EXPRESSION = 83;
    public const int GT = 43;
    public const int INVOCATION_EXPRESSION = 15;
    public const int PP_EQUALITY_EXPRESSION = 81;
    public const int T__130 = 130;
    public const int T__131 = 131;
    public const int T__132 = 132;
    public const int T__133 = 133;
    public const int PROPERTY_DECLARATION = 22;
    public const int T__134 = 134;
    public const int T__135 = 135;
    public const int T__215 = 215;
    public const int T__216 = 216;
    public const int CAST_EXPRESSION = 6;
    public const int T__213 = 213;
    public const int T__214 = 214;
    public const int T__219 = 219;
    public const int T__217 = 217;
    public const int T__218 = 218;
    public const int T__118 = 118;
    public const int T__119 = 119;
    public const int T__116 = 116;
    public const int T__117 = 117;
    public const int T__114 = 114;
    public const int T__115 = 115;
    public const int T__124 = 124;
    public const int T__123 = 123;
    public const int T__122 = 122;
    public const int T__121 = 121;
    public const int T__120 = 120;
    public const int T__223 = 223;
    public const int UNARY_EXPRESSION = 25;
    public const int T__222 = 222;
    public const int T__221 = 221;
    public const int T__220 = 220;
    public const int T__202 = 202;
    public const int T__203 = 203;
    public const int T__204 = 204;
    public const int T__205 = 205;
    public const int T__206 = 206;
    public const int T__207 = 207;
    public const int T__208 = 208;
    public const int T__209 = 209;
    public const int T__107 = 107;
    public const int T__108 = 108;
    public const int PREPROCESSOR_DIRECTIVE = 72;
    public const int T__109 = 109;
    public const int TELEMENT = 27;
    public const int T__103 = 103;
    public const int T__104 = 104;
    public const int TMEMBER = 28;
    public const int T__105 = 105;
    public const int T__106 = 106;
    public const int T__111 = 111;
    public const int T__110 = 110;
    public const int T__113 = 113;
    public const int T__112 = 112;
    public const int T__210 = 210;
    public const int T__212 = 212;
    public const int RETURN_TYPE = 24;
    public const int T__211 = 211;
    public const int TS = 55;
    public const int FIELD_DECL = 12;
    public const int HEX_DIGIT = 84;
    public const int DELEGATE_DECL = 8;
    public const int SET = 47;
    public const int T__102 = 102;
    public const int T__101 = 101;
    public const int T__100 = 100;
    public const int MINUS = 42;
    public const int SEMI = 52;
    public const int Hex_number = 33;
    public const int NAMESPACE_OR_TYPE_NAME = 20;
    public const int T__224 = 224;
    public const int MEMBER_ACCESS = 17;
    public const int T__225 = 225;
    public const int ENUM = 45;
    public const int T__226 = 226;
    public const int STRINGLITERAL = 35;
    public const int BLOCK = 5;
    public const int ASSIGNMENT = 4;
    public const int PP_UNARY_EXPRESSION = 82;
    public const int PP_OR_EXPRESSION = 79;
    public const int ENDIF = 49;
    public const int LOCAL_VARIABLE_DECLARATOR = 16;
    public const int COMMENT = 58;
    public const int LINE_COMMENT = 57;
    public const int NULL = 39;
    public const int IdentifierStart = 66;
    public const int Verbatim_string_literal = 36;
    public const int IF_TOKEN = 73;
    public const int ELIF = 48;
    public const int T__200 = 200;
    public const int T__201 = 201;
    public const int PREDEFINED_TYPE = 21;
    public const int PP_CONDITIONAL = 71;
    public const int USING_DIRECTIVE = 26;
    public const int FALSE = 38;
    public const int INTEGER_TYPE_SUFFIX = 62;
    public const int EscapeSequence = 59;
    public const int Real_literal = 31;
    public const int PP_EXPRESSION = 78;
    public const int CLASS_DECL = 7;
    public const int GooBall = 65;
    public const int METHOD_DECL = 18;
    public const int QID_PART = 23;
    public const int DEFINE = 50;
    public const int IF = 13;
    public const int Exponent_part = 68;
    public const int T__199 = 199;
    public const int T__198 = 198;
    public const int T__197 = 197;
    public const int T__196 = 196;
    public const int T__195 = 195;
    public const int T__194 = 194;
    public const int T__193 = 193;
    public const int T__192 = 192;
    public const int T__191 = 191;
    public const int T__190 = 190;
    public const int IDENTIFIER = 30;
    public const int UNDEF = 51;
    public const int DOT = 40;
    public const int EXPRESSION = 11;
    public const int IdentifierPart = 67;
    public const int T__184 = 184;
    public const int T__183 = 183;
    public const int T__186 = 186;
    public const int T__185 = 185;
    public const int T__188 = 188;
    public const int T__187 = 187;
    public const int DOC_LINE_COMMENT = 56;
    public const int T__189 = 189;
    public const int GooBallIdentifier = 64;
    public const int T__180 = 180;
    public const int T__182 = 182;
    public const int Pragma = 70;
    public const int T__181 = 181;
    public const int Verbatim_string_literal_character = 60;
    public const int TRUE = 37;
    public const int PTR = 41;
    public const int T__175 = 175;
    public const int T__174 = 174;
    public const int T__173 = 173;
    public const int INTERFACE_DECL = 14;
    public const int T__172 = 172;
    public const int T__179 = 179;
    public const int T__178 = 178;
    public const int Decimal_digits = 61;
    public const int T__177 = 177;
    public const int T__176 = 176;
    public const int T__171 = 171;
    public const int T__170 = 170;
    public const int Real_type_suffix = 69;
    public const int HEX_DIGITS = 85;
    public const int TINVOCATION = 29;
    public const int T__169 = 169;

    // delegates
    // delegators



        public csParser(ITokenStream input)
    		: this(input, new RecognizerSharedState()) {
        }

        public csParser(ITokenStream input, RecognizerSharedState state)
    		: base(input, state) {
            InitializeCyclicDFAs();
            this.state.ruleMemo = new Hashtable[1138+1];
             
             
        }
        
    protected ITreeAdaptor adaptor = new CommonTreeAdaptor();

    public ITreeAdaptor TreeAdaptor
    {
        get { return this.adaptor; }
        set {
    	this.adaptor = value;
    	}
    }

    override public string[] TokenNames {
		get { return csParser.tokenNames; }
    }

    override public string GrammarFileName {
		get { return "cs.g"; }
    }


    	private readonly IList<XElement> Elements = new List<XElement>();
    	public IList<XElement> ElementList { get { return Elements; } }
    	public string LeaveElementName { get; set; }


    public class compilation_unit_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "compilation_unit"
    // cs.g:80:1: compilation_unit : ( using_directives )? ( global_attributes )? ( namespace_declaration )? namespace_body ;
    public csParser.compilation_unit_return compilation_unit() // throws RecognitionException [1]
    {   
        csParser.compilation_unit_return retval = new csParser.compilation_unit_return();
        retval.Start = input.LT(1);
        int compilation_unit_StartIndex = input.Index();
        object root_0 = null;

        csParser.using_directives_return using_directives1 = default(csParser.using_directives_return);

        csParser.global_attributes_return global_attributes2 = default(csParser.global_attributes_return);

        csParser.namespace_declaration_return namespace_declaration3 = default(csParser.namespace_declaration_return);

        csParser.namespace_body_return namespace_body4 = default(csParser.namespace_body_return);



         const string elementName = "compilation_unit"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 1) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:88:1: ( ( using_directives )? ( global_attributes )? ( namespace_declaration )? namespace_body )
            // cs.g:90:2: ( using_directives )? ( global_attributes )? ( namespace_declaration )? namespace_body
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:90:2: ( using_directives )?
            	int alt1 = 2;
            	alt1 = dfa1.Predict(input);
            	switch (alt1) 
            	{
            	    case 1 :
            	        // cs.g:0:0: using_directives
            	        {
            	        	PushFollow(FOLLOW_using_directives_in_compilation_unit224);
            	        	using_directives1 = using_directives();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, using_directives1.Tree);

            	        }
            	        break;

            	}

            	// cs.g:91:2: ( global_attributes )?
            	int alt2 = 2;
            	int LA2_0 = input.LA(1);

            	if ( (LA2_0 == 97) )
            	{
            	    int LA2_1 = input.LA(2);

            	    if ( ((LA2_1 >= 101 && LA2_1 <= 102)) )
            	    {
            	        int LA2_3 = input.LA(3);

            	        if ( (LA2_3 == 100) )
            	        {
            	            alt2 = 1;
            	        }
            	    }
            	}
            	switch (alt2) 
            	{
            	    case 1 :
            	        // cs.g:0:0: global_attributes
            	        {
            	        	PushFollow(FOLLOW_global_attributes_in_compilation_unit231);
            	        	global_attributes2 = global_attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, global_attributes2.Tree);

            	        }
            	        break;

            	}

            	// cs.g:92:2: ( namespace_declaration )?
            	int alt3 = 2;
            	alt3 = dfa3.Predict(input);
            	switch (alt3) 
            	{
            	    case 1 :
            	        // cs.g:0:0: namespace_declaration
            	        {
            	        	PushFollow(FOLLOW_namespace_declaration_in_compilation_unit238);
            	        	namespace_declaration3 = namespace_declaration();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_declaration3.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_namespace_body_in_compilation_unit243);
            	namespace_body4 = namespace_body();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_body4.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 1, compilation_unit_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "compilation_unit"

    public class namespace_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "namespace_declaration"
    // cs.g:95:1: namespace_declaration : 'namespace' qualified_identifier namespace_block ( ';' )? ;
    public csParser.namespace_declaration_return namespace_declaration() // throws RecognitionException [1]
    {   
        csParser.namespace_declaration_return retval = new csParser.namespace_declaration_return();
        retval.Start = input.LT(1);
        int namespace_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal5 = null;
        IToken char_literal8 = null;
        csParser.qualified_identifier_return qualified_identifier6 = default(csParser.qualified_identifier_return);

        csParser.namespace_block_return namespace_block7 = default(csParser.namespace_block_return);


        object string_literal5_tree=null;
        object char_literal8_tree=null;

         const string elementName = "namespace_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 2) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:98:1: ( 'namespace' qualified_identifier namespace_block ( ';' )? )
            // cs.g:99:2: 'namespace' qualified_identifier namespace_block ( ';' )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal5=(IToken)Match(input,88,FOLLOW_88_in_namespace_declaration264); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal5_tree = (object)adaptor.Create(string_literal5);
            		adaptor.AddChild(root_0, string_literal5_tree);
            	}
            	PushFollow(FOLLOW_qualified_identifier_in_namespace_declaration268);
            	qualified_identifier6 = qualified_identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, qualified_identifier6.Tree);
            	PushFollow(FOLLOW_namespace_block_in_namespace_declaration272);
            	namespace_block7 = namespace_block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_block7.Tree);
            	// cs.g:99:57: ( ';' )?
            	int alt4 = 2;
            	int LA4_0 = input.LA(1);

            	if ( (LA4_0 == SEMI) )
            	{
            	    alt4 = 1;
            	}
            	switch (alt4) 
            	{
            	    case 1 :
            	        // cs.g:0:0: ';'
            	        {
            	        	char_literal8=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_namespace_declaration276); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal8_tree = (object)adaptor.Create(char_literal8);
            	        		adaptor.AddChild(root_0, char_literal8_tree);
            	        	}

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 2, namespace_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "namespace_declaration"

    public class qualified_identifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "qualified_identifier"
    // cs.g:101:1: qualified_identifier : identifier ( '.' identifier )* ;
    public csParser.qualified_identifier_return qualified_identifier() // throws RecognitionException [1]
    {   
        csParser.qualified_identifier_return retval = new csParser.qualified_identifier_return();
        retval.Start = input.LT(1);
        int qualified_identifier_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal10 = null;
        csParser.identifier_return identifier9 = default(csParser.identifier_return);

        csParser.identifier_return identifier11 = default(csParser.identifier_return);


        object char_literal10_tree=null;

         const string elementName = "qualified_identifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 3) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:104:1: ( identifier ( '.' identifier )* )
            // cs.g:105:2: identifier ( '.' identifier )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_identifier_in_qualified_identifier299);
            	identifier9 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier9.Tree);
            	// cs.g:105:13: ( '.' identifier )*
            	do 
            	{
            	    int alt5 = 2;
            	    int LA5_0 = input.LA(1);

            	    if ( (LA5_0 == DOT) )
            	    {
            	        alt5 = 1;
            	    }


            	    switch (alt5) 
            		{
            			case 1 :
            			    // cs.g:105:14: '.' identifier
            			    {
            			    	char_literal10=(IToken)Match(input,DOT,FOLLOW_DOT_in_qualified_identifier302); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal10_tree = (object)adaptor.Create(char_literal10);
            			    		adaptor.AddChild(root_0, char_literal10_tree);
            			    	}
            			    	PushFollow(FOLLOW_identifier_in_qualified_identifier304);
            			    	identifier11 = identifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier11.Tree);

            			    }
            			    break;

            			default:
            			    goto loop5;
            	    }
            	} while (true);

            	loop5:
            		;	// Stops C# compiler whining that label 'loop5' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 3, qualified_identifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "qualified_identifier"

    public class qid_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "qid"
    // cs.g:107:1: qid : qid_start ( qid_part )* ;
    public csParser.qid_return qid() // throws RecognitionException [1]
    {   
        csParser.qid_return retval = new csParser.qid_return();
        retval.Start = input.LT(1);
        int qid_StartIndex = input.Index();
        object root_0 = null;

        csParser.qid_start_return qid_start12 = default(csParser.qid_start_return);

        csParser.qid_part_return qid_part13 = default(csParser.qid_part_return);



         const string elementName = "qid"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 4) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:110:1: ( qid_start ( qid_part )* )
            // cs.g:111:2: qid_start ( qid_part )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_qid_start_in_qid327);
            	qid_start12 = qid_start();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, qid_start12.Tree);
            	// cs.g:111:12: ( qid_part )*
            	do 
            	{
            	    int alt6 = 2;
            	    int LA6_0 = input.LA(1);

            	    if ( ((LA6_0 >= DOT && LA6_0 <= PTR)) )
            	    {
            	        alt6 = 1;
            	    }


            	    switch (alt6) 
            		{
            			case 1 :
            			    // cs.g:0:0: qid_part
            			    {
            			    	PushFollow(FOLLOW_qid_part_in_qid329);
            			    	qid_part13 = qid_part();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, qid_part13.Tree);

            			    }
            			    break;

            			default:
            			    goto loop6;
            	    }
            	} while (true);

            	loop6:
            		;	// Stops C# compiler whining that label 'loop6' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 4, qid_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "qid"

    public class qid_start_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "qid_start"
    // cs.g:112:1: qid_start : ( identifier ( '::' identifier )? ( generic_argument_list )? | 'this' | 'base' | predefined_type | literal );
    public csParser.qid_start_return qid_start() // throws RecognitionException [1]
    {   
        csParser.qid_start_return retval = new csParser.qid_start_return();
        retval.Start = input.LT(1);
        int qid_start_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal15 = null;
        IToken string_literal18 = null;
        IToken string_literal19 = null;
        csParser.identifier_return identifier14 = default(csParser.identifier_return);

        csParser.identifier_return identifier16 = default(csParser.identifier_return);

        csParser.generic_argument_list_return generic_argument_list17 = default(csParser.generic_argument_list_return);

        csParser.predefined_type_return predefined_type20 = default(csParser.predefined_type_return);

        csParser.literal_return literal21 = default(csParser.literal_return);


        object string_literal15_tree=null;
        object string_literal18_tree=null;
        object string_literal19_tree=null;

         const string elementName = "qid_start"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 5) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:115:1: ( identifier ( '::' identifier )? ( generic_argument_list )? | 'this' | 'base' | predefined_type | literal )
            int alt9 = 5;
            switch ( input.LA(1) ) 
            {
            case IDENTIFIER:
            case SET:
            case 95:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 109:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 199:
            case 201:
            case 202:
            case 208:
            case 225:
            case 226:
            	{
                alt9 = 1;
                }
                break;
            case 90:
            	{
                alt9 = 2;
                }
                break;
            case 91:
            	{
                alt9 = 3;
                }
                break;
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            	{
                alt9 = 4;
                }
                break;
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case STRINGLITERAL:
            case Verbatim_string_literal:
            case TRUE:
            case FALSE:
            case NULL:
            	{
                alt9 = 5;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d9s0 =
            	        new NoViableAltException("", 9, 0, input);

            	    throw nvae_d9s0;
            }

            switch (alt9) 
            {
                case 1 :
                    // cs.g:116:2: identifier ( '::' identifier )? ( generic_argument_list )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_identifier_in_qid_start350);
                    	identifier14 = identifier();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier14.Tree);
                    	// cs.g:116:13: ( '::' identifier )?
                    	int alt7 = 2;
                    	int LA7_0 = input.LA(1);

                    	if ( (LA7_0 == 89) )
                    	{
                    	    alt7 = 1;
                    	}
                    	switch (alt7) 
                    	{
                    	    case 1 :
                    	        // cs.g:116:14: '::' identifier
                    	        {
                    	        	string_literal15=(IToken)Match(input,89,FOLLOW_89_in_qid_start353); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{string_literal15_tree = (object)adaptor.Create(string_literal15);
                    	        		adaptor.AddChild(root_0, string_literal15_tree);
                    	        	}
                    	        	PushFollow(FOLLOW_identifier_in_qid_start355);
                    	        	identifier16 = identifier();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier16.Tree);

                    	        }
                    	        break;

                    	}

                    	// cs.g:116:32: ( generic_argument_list )?
                    	int alt8 = 2;
                    	alt8 = dfa8.Predict(input);
                    	switch (alt8) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: generic_argument_list
                    	        {
                    	        	PushFollow(FOLLOW_generic_argument_list_in_qid_start359);
                    	        	generic_argument_list17 = generic_argument_list();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_argument_list17.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:117:4: 'this'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal18=(IToken)Match(input,90,FOLLOW_90_in_qid_start365); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal18_tree = (object)adaptor.Create(string_literal18);
                    		adaptor.AddChild(root_0, string_literal18_tree);
                    	}

                    }
                    break;
                case 3 :
                    // cs.g:118:4: 'base'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal19=(IToken)Match(input,91,FOLLOW_91_in_qid_start370); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal19_tree = (object)adaptor.Create(string_literal19);
                    		adaptor.AddChild(root_0, string_literal19_tree);
                    	}

                    }
                    break;
                case 4 :
                    // cs.g:119:4: predefined_type
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_predefined_type_in_qid_start375);
                    	predefined_type20 = predefined_type();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type20.Tree);

                    }
                    break;
                case 5 :
                    // cs.g:120:4: literal
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_literal_in_qid_start380);
                    	literal21 = literal();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, literal21.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 5, qid_start_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "qid_start"

    public class qid_part_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "qid_part"
    // cs.g:121:1: qid_part : access_operator identifier ( generic_argument_list )? ;
    public csParser.qid_part_return qid_part() // throws RecognitionException [1]
    {   
        csParser.qid_part_return retval = new csParser.qid_part_return();
        retval.Start = input.LT(1);
        int qid_part_StartIndex = input.Index();
        object root_0 = null;

        csParser.access_operator_return access_operator22 = default(csParser.access_operator_return);

        csParser.identifier_return identifier23 = default(csParser.identifier_return);

        csParser.generic_argument_list_return generic_argument_list24 = default(csParser.generic_argument_list_return);



         const string elementName = "qid_part"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 6) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:124:1: ( access_operator identifier ( generic_argument_list )? )
            // cs.g:125:2: access_operator identifier ( generic_argument_list )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_access_operator_in_qid_part402);
            	access_operator22 = access_operator();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_operator22.Tree);
            	PushFollow(FOLLOW_identifier_in_qid_part406);
            	identifier23 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier23.Tree);
            	// cs.g:125:33: ( generic_argument_list )?
            	int alt10 = 2;
            	alt10 = dfa10.Predict(input);
            	switch (alt10) 
            	{
            	    case 1 :
            	        // cs.g:0:0: generic_argument_list
            	        {
            	        	PushFollow(FOLLOW_generic_argument_list_in_qid_part410);
            	        	generic_argument_list24 = generic_argument_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_argument_list24.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 6, qid_part_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "qid_part"

    public class namespace_block_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "namespace_block"
    // cs.g:128:1: namespace_block : '{' namespace_body '}' ;
    public csParser.namespace_block_return namespace_block() // throws RecognitionException [1]
    {   
        csParser.namespace_block_return retval = new csParser.namespace_block_return();
        retval.Start = input.LT(1);
        int namespace_block_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal25 = null;
        IToken char_literal27 = null;
        csParser.namespace_body_return namespace_body26 = default(csParser.namespace_body_return);


        object char_literal25_tree=null;
        object char_literal27_tree=null;

         const string elementName = "namespace_block"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 7) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:131:1: ( '{' namespace_body '}' )
            // cs.g:132:2: '{' namespace_body '}'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal25=(IToken)Match(input,92,FOLLOW_92_in_namespace_block433); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal25_tree = (object)adaptor.Create(char_literal25);
            		adaptor.AddChild(root_0, char_literal25_tree);
            	}
            	PushFollow(FOLLOW_namespace_body_in_namespace_block437);
            	namespace_body26 = namespace_body();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_body26.Tree);
            	char_literal27=(IToken)Match(input,93,FOLLOW_93_in_namespace_block441); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal27_tree = (object)adaptor.Create(char_literal27);
            		adaptor.AddChild(root_0, char_literal27_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 7, namespace_block_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "namespace_block"

    public class namespace_body_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "namespace_body"
    // cs.g:133:1: namespace_body : ( extern_alias_directives )? ( using_directives )? ( namespace_member_declarations )? ;
    public csParser.namespace_body_return namespace_body() // throws RecognitionException [1]
    {   
        csParser.namespace_body_return retval = new csParser.namespace_body_return();
        retval.Start = input.LT(1);
        int namespace_body_StartIndex = input.Index();
        object root_0 = null;

        csParser.extern_alias_directives_return extern_alias_directives28 = default(csParser.extern_alias_directives_return);

        csParser.using_directives_return using_directives29 = default(csParser.using_directives_return);

        csParser.namespace_member_declarations_return namespace_member_declarations30 = default(csParser.namespace_member_declarations_return);



         const string elementName = "namespace_body"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 8) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:136:1: ( ( extern_alias_directives )? ( using_directives )? ( namespace_member_declarations )? )
            // cs.g:137:2: ( extern_alias_directives )? ( using_directives )? ( namespace_member_declarations )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:137:2: ( extern_alias_directives )?
            	int alt11 = 2;
            	int LA11_0 = input.LA(1);

            	if ( (LA11_0 == 94) )
            	{
            	    alt11 = 1;
            	}
            	switch (alt11) 
            	{
            	    case 1 :
            	        // cs.g:0:0: extern_alias_directives
            	        {
            	        	PushFollow(FOLLOW_extern_alias_directives_in_namespace_body461);
            	        	extern_alias_directives28 = extern_alias_directives();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, extern_alias_directives28.Tree);

            	        }
            	        break;

            	}

            	// cs.g:137:29: ( using_directives )?
            	int alt12 = 2;
            	int LA12_0 = input.LA(1);

            	if ( (LA12_0 == USING) )
            	{
            	    alt12 = 1;
            	}
            	switch (alt12) 
            	{
            	    case 1 :
            	        // cs.g:0:0: using_directives
            	        {
            	        	PushFollow(FOLLOW_using_directives_in_namespace_body466);
            	        	using_directives29 = using_directives();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, using_directives29.Tree);

            	        }
            	        break;

            	}

            	// cs.g:137:49: ( namespace_member_declarations )?
            	int alt13 = 2;
            	int LA13_0 = input.LA(1);

            	if ( (LA13_0 == ENUM || LA13_0 == 88 || LA13_0 == 97 || LA13_0 == 138 || LA13_0 == 144 || (LA13_0 >= 170 && LA13_0 <= 174) || (LA13_0 >= 188 && LA13_0 <= 193) || LA13_0 == 206) )
            	{
            	    alt13 = 1;
            	}
            	switch (alt13) 
            	{
            	    case 1 :
            	        // cs.g:0:0: namespace_member_declarations
            	        {
            	        	PushFollow(FOLLOW_namespace_member_declarations_in_namespace_body471);
            	        	namespace_member_declarations30 = namespace_member_declarations();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_member_declarations30.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 8, namespace_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "namespace_body"

    public class extern_alias_directives_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "extern_alias_directives"
    // cs.g:138:1: extern_alias_directives : ( extern_alias_directive )+ ;
    public csParser.extern_alias_directives_return extern_alias_directives() // throws RecognitionException [1]
    {   
        csParser.extern_alias_directives_return retval = new csParser.extern_alias_directives_return();
        retval.Start = input.LT(1);
        int extern_alias_directives_StartIndex = input.Index();
        object root_0 = null;

        csParser.extern_alias_directive_return extern_alias_directive31 = default(csParser.extern_alias_directive_return);



         const string elementName = "extern_alias_directives"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 9) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:141:1: ( ( extern_alias_directive )+ )
            // cs.g:142:2: ( extern_alias_directive )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:142:2: ( extern_alias_directive )+
            	int cnt14 = 0;
            	do 
            	{
            	    int alt14 = 2;
            	    int LA14_0 = input.LA(1);

            	    if ( (LA14_0 == 94) )
            	    {
            	        alt14 = 1;
            	    }


            	    switch (alt14) 
            		{
            			case 1 :
            			    // cs.g:0:0: extern_alias_directive
            			    {
            			    	PushFollow(FOLLOW_extern_alias_directive_in_extern_alias_directives492);
            			    	extern_alias_directive31 = extern_alias_directive();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, extern_alias_directive31.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt14 >= 1 ) goto loop14;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee14 =
            		                new EarlyExitException(14, input);
            		            throw eee14;
            	    }
            	    cnt14++;
            	} while (true);

            	loop14:
            		;	// Stops C# compiler whining that label 'loop14' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 9, extern_alias_directives_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "extern_alias_directives"

    public class extern_alias_directive_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "extern_alias_directive"
    // cs.g:143:1: extern_alias_directive : 'extern' 'alias' identifier ';' ;
    public csParser.extern_alias_directive_return extern_alias_directive() // throws RecognitionException [1]
    {   
        csParser.extern_alias_directive_return retval = new csParser.extern_alias_directive_return();
        retval.Start = input.LT(1);
        int extern_alias_directive_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal32 = null;
        IToken string_literal33 = null;
        IToken char_literal35 = null;
        csParser.identifier_return identifier34 = default(csParser.identifier_return);


        object string_literal32_tree=null;
        object string_literal33_tree=null;
        object char_literal35_tree=null;

         const string elementName = "extern_alias_directive"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 10) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:146:1: ( 'extern' 'alias' identifier ';' )
            // cs.g:147:2: 'extern' 'alias' identifier ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal32=(IToken)Match(input,94,FOLLOW_94_in_extern_alias_directive513); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal32_tree = (object)adaptor.Create(string_literal32);
            		adaptor.AddChild(root_0, string_literal32_tree);
            	}
            	string_literal33=(IToken)Match(input,95,FOLLOW_95_in_extern_alias_directive517); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal33_tree = (object)adaptor.Create(string_literal33);
            		adaptor.AddChild(root_0, string_literal33_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_extern_alias_directive521);
            	identifier34 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier34.Tree);
            	char_literal35=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_extern_alias_directive524); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal35_tree = (object)adaptor.Create(char_literal35);
            		adaptor.AddChild(root_0, char_literal35_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 10, extern_alias_directive_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "extern_alias_directive"

    public class using_directives_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "using_directives"
    // cs.g:148:1: using_directives : ( using_directive )+ ;
    public csParser.using_directives_return using_directives() // throws RecognitionException [1]
    {   
        csParser.using_directives_return retval = new csParser.using_directives_return();
        retval.Start = input.LT(1);
        int using_directives_StartIndex = input.Index();
        object root_0 = null;

        csParser.using_directive_return using_directive36 = default(csParser.using_directive_return);



         const string elementName = "using_directives"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 11) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:151:1: ( ( using_directive )+ )
            // cs.g:152:2: ( using_directive )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:152:2: ( using_directive )+
            	int cnt15 = 0;
            	do 
            	{
            	    int alt15 = 2;
            	    int LA15_0 = input.LA(1);

            	    if ( (LA15_0 == USING) )
            	    {
            	        int LA15_2 = input.LA(2);

            	        if ( (synpred18_cs()) )
            	        {
            	            alt15 = 1;
            	        }


            	    }


            	    switch (alt15) 
            		{
            			case 1 :
            			    // cs.g:0:0: using_directive
            			    {
            			    	PushFollow(FOLLOW_using_directive_in_using_directives544);
            			    	using_directive36 = using_directive();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, using_directive36.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt15 >= 1 ) goto loop15;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee15 =
            		                new EarlyExitException(15, input);
            		            throw eee15;
            	    }
            	    cnt15++;
            	} while (true);

            	loop15:
            		;	// Stops C# compiler whining that label 'loop15' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 11, using_directives_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "using_directives"

    public class using_directive_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "using_directive"
    // cs.g:153:1: using_directive : ( using_alias_directive | using_namespace_directive ) ;
    public csParser.using_directive_return using_directive() // throws RecognitionException [1]
    {   
        csParser.using_directive_return retval = new csParser.using_directive_return();
        retval.Start = input.LT(1);
        int using_directive_StartIndex = input.Index();
        object root_0 = null;

        csParser.using_alias_directive_return using_alias_directive37 = default(csParser.using_alias_directive_return);

        csParser.using_namespace_directive_return using_namespace_directive38 = default(csParser.using_namespace_directive_return);



         const string elementName = "using_directive"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 12) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:156:1: ( ( using_alias_directive | using_namespace_directive ) )
            // cs.g:157:2: ( using_alias_directive | using_namespace_directive )
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:157:2: ( using_alias_directive | using_namespace_directive )
            	int alt16 = 2;
            	int LA16_0 = input.LA(1);

            	if ( (LA16_0 == USING) )
            	{
            	    int LA16_1 = input.LA(2);

            	    if ( (LA16_1 == IDENTIFIER) )
            	    {
            	        int LA16_2 = input.LA(3);

            	        if ( (LA16_2 == 96) )
            	        {
            	            alt16 = 1;
            	        }
            	        else if ( (LA16_2 == DOT || LA16_2 == SEMI || LA16_2 == 89 || LA16_2 == 123) )
            	        {
            	            alt16 = 2;
            	        }
            	        else 
            	        {
            	            if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	            NoViableAltException nvae_d16s2 =
            	                new NoViableAltException("", 16, 2, input);

            	            throw nvae_d16s2;
            	        }
            	    }
            	    else if ( (LA16_1 == SET || LA16_1 == 95 || (LA16_1 >= 101 && LA16_1 <= 107) || LA16_1 == 109 || (LA16_1 >= 175 && LA16_1 <= 187) || LA16_1 == 199 || (LA16_1 >= 201 && LA16_1 <= 202) || LA16_1 == 208 || (LA16_1 >= 225 && LA16_1 <= 226)) )
            	    {
            	        int LA16_3 = input.LA(3);

            	        if ( (LA16_3 == 96) )
            	        {
            	            alt16 = 1;
            	        }
            	        else if ( (LA16_3 == DOT || LA16_3 == SEMI || LA16_3 == 89 || LA16_3 == 123) )
            	        {
            	            alt16 = 2;
            	        }
            	        else 
            	        {
            	            if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	            NoViableAltException nvae_d16s3 =
            	                new NoViableAltException("", 16, 3, input);

            	            throw nvae_d16s3;
            	        }
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d16s1 =
            	            new NoViableAltException("", 16, 1, input);

            	        throw nvae_d16s1;
            	    }
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d16s0 =
            	        new NoViableAltException("", 16, 0, input);

            	    throw nvae_d16s0;
            	}
            	switch (alt16) 
            	{
            	    case 1 :
            	        // cs.g:157:3: using_alias_directive
            	        {
            	        	PushFollow(FOLLOW_using_alias_directive_in_using_directive566);
            	        	using_alias_directive37 = using_alias_directive();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, using_alias_directive37.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // cs.g:158:4: using_namespace_directive
            	        {
            	        	PushFollow(FOLLOW_using_namespace_directive_in_using_directive571);
            	        	using_namespace_directive38 = using_namespace_directive();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, using_namespace_directive38.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 12, using_directive_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "using_directive"

    public class using_alias_directive_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "using_alias_directive"
    // cs.g:160:1: using_alias_directive : 'using' identifier '=' namespace_or_type_name ';' ;
    public csParser.using_alias_directive_return using_alias_directive() // throws RecognitionException [1]
    {   
        csParser.using_alias_directive_return retval = new csParser.using_alias_directive_return();
        retval.Start = input.LT(1);
        int using_alias_directive_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal39 = null;
        IToken char_literal41 = null;
        IToken char_literal43 = null;
        csParser.identifier_return identifier40 = default(csParser.identifier_return);

        csParser.namespace_or_type_name_return namespace_or_type_name42 = default(csParser.namespace_or_type_name_return);


        object string_literal39_tree=null;
        object char_literal41_tree=null;
        object char_literal43_tree=null;

         const string elementName = "using_alias_directive"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 13) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:163:1: ( 'using' identifier '=' namespace_or_type_name ';' )
            // cs.g:164:2: 'using' identifier '=' namespace_or_type_name ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal39=(IToken)Match(input,USING,FOLLOW_USING_in_using_alias_directive593); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal39_tree = (object)adaptor.Create(string_literal39);
            		adaptor.AddChild(root_0, string_literal39_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_using_alias_directive597);
            	identifier40 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier40.Tree);
            	char_literal41=(IToken)Match(input,96,FOLLOW_96_in_using_alias_directive601); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal41_tree = (object)adaptor.Create(char_literal41);
            		adaptor.AddChild(root_0, char_literal41_tree);
            	}
            	PushFollow(FOLLOW_namespace_or_type_name_in_using_alias_directive605);
            	namespace_or_type_name42 = namespace_or_type_name();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_or_type_name42.Tree);
            	char_literal43=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_using_alias_directive609); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal43_tree = (object)adaptor.Create(char_literal43);
            		adaptor.AddChild(root_0, char_literal43_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 13, using_alias_directive_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "using_alias_directive"

    public class using_namespace_directive_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "using_namespace_directive"
    // cs.g:165:1: using_namespace_directive : 'using' namespace_name ';' ;
    public csParser.using_namespace_directive_return using_namespace_directive() // throws RecognitionException [1]
    {   
        csParser.using_namespace_directive_return retval = new csParser.using_namespace_directive_return();
        retval.Start = input.LT(1);
        int using_namespace_directive_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal44 = null;
        IToken char_literal46 = null;
        csParser.namespace_name_return namespace_name45 = default(csParser.namespace_name_return);


        object string_literal44_tree=null;
        object char_literal46_tree=null;

         const string elementName = "using_namespace_directive"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 14) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:168:1: ( 'using' namespace_name ';' )
            // cs.g:169:2: 'using' namespace_name ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal44=(IToken)Match(input,USING,FOLLOW_USING_in_using_namespace_directive629); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal44_tree = (object)adaptor.Create(string_literal44);
            		adaptor.AddChild(root_0, string_literal44_tree);
            	}
            	PushFollow(FOLLOW_namespace_name_in_using_namespace_directive633);
            	namespace_name45 = namespace_name();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_name45.Tree);
            	char_literal46=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_using_namespace_directive637); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal46_tree = (object)adaptor.Create(char_literal46);
            		adaptor.AddChild(root_0, char_literal46_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 14, using_namespace_directive_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "using_namespace_directive"

    public class namespace_member_declarations_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "namespace_member_declarations"
    // cs.g:170:1: namespace_member_declarations : ( namespace_member_declaration )+ ;
    public csParser.namespace_member_declarations_return namespace_member_declarations() // throws RecognitionException [1]
    {   
        csParser.namespace_member_declarations_return retval = new csParser.namespace_member_declarations_return();
        retval.Start = input.LT(1);
        int namespace_member_declarations_StartIndex = input.Index();
        object root_0 = null;

        csParser.namespace_member_declaration_return namespace_member_declaration47 = default(csParser.namespace_member_declaration_return);



         const string elementName = "namespace_member_declarations"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 15) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:173:1: ( ( namespace_member_declaration )+ )
            // cs.g:174:2: ( namespace_member_declaration )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:174:2: ( namespace_member_declaration )+
            	int cnt17 = 0;
            	do 
            	{
            	    int alt17 = 2;
            	    int LA17_0 = input.LA(1);

            	    if ( (LA17_0 == ENUM || LA17_0 == 88 || LA17_0 == 97 || LA17_0 == 138 || LA17_0 == 144 || (LA17_0 >= 170 && LA17_0 <= 174) || (LA17_0 >= 188 && LA17_0 <= 193) || LA17_0 == 206) )
            	    {
            	        alt17 = 1;
            	    }


            	    switch (alt17) 
            		{
            			case 1 :
            			    // cs.g:0:0: namespace_member_declaration
            			    {
            			    	PushFollow(FOLLOW_namespace_member_declaration_in_namespace_member_declarations657);
            			    	namespace_member_declaration47 = namespace_member_declaration();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_member_declaration47.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt17 >= 1 ) goto loop17;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee17 =
            		                new EarlyExitException(17, input);
            		            throw eee17;
            	    }
            	    cnt17++;
            	} while (true);

            	loop17:
            		;	// Stops C# compiler whining that label 'loop17' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 15, namespace_member_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "namespace_member_declarations"

    public class namespace_member_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "namespace_member_declaration"
    // cs.g:175:1: namespace_member_declaration : ( namespace_declaration | type_declaration );
    public csParser.namespace_member_declaration_return namespace_member_declaration() // throws RecognitionException [1]
    {   
        csParser.namespace_member_declaration_return retval = new csParser.namespace_member_declaration_return();
        retval.Start = input.LT(1);
        int namespace_member_declaration_StartIndex = input.Index();
        object root_0 = null;

        csParser.namespace_declaration_return namespace_declaration48 = default(csParser.namespace_declaration_return);

        csParser.type_declaration_return type_declaration49 = default(csParser.type_declaration_return);



         const string elementName = "namespace_member_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 16) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:178:1: ( namespace_declaration | type_declaration )
            int alt18 = 2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0 == 88) )
            {
                alt18 = 1;
            }
            else if ( (LA18_0 == ENUM || LA18_0 == 97 || LA18_0 == 138 || LA18_0 == 144 || (LA18_0 >= 170 && LA18_0 <= 174) || (LA18_0 >= 188 && LA18_0 <= 193) || LA18_0 == 206) )
            {
                alt18 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d18s0 =
                    new NoViableAltException("", 18, 0, input);

                throw nvae_d18s0;
            }
            switch (alt18) 
            {
                case 1 :
                    // cs.g:179:2: namespace_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_namespace_declaration_in_namespace_member_declaration678);
                    	namespace_declaration48 = namespace_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_declaration48.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:180:4: type_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_type_declaration_in_namespace_member_declaration683);
                    	type_declaration49 = type_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_declaration49.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 16, namespace_member_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "namespace_member_declaration"

    public class type_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "type_declaration"
    // cs.g:181:1: type_declaration : ( class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration );
    public csParser.type_declaration_return type_declaration() // throws RecognitionException [1]
    {   
        csParser.type_declaration_return retval = new csParser.type_declaration_return();
        retval.Start = input.LT(1);
        int type_declaration_StartIndex = input.Index();
        object root_0 = null;

        csParser.class_declaration_return class_declaration50 = default(csParser.class_declaration_return);

        csParser.struct_declaration_return struct_declaration51 = default(csParser.struct_declaration_return);

        csParser.interface_declaration_return interface_declaration52 = default(csParser.interface_declaration_return);

        csParser.enum_declaration_return enum_declaration53 = default(csParser.enum_declaration_return);

        csParser.delegate_declaration_return delegate_declaration54 = default(csParser.delegate_declaration_return);



         const string elementName = "type_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 17) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:184:1: ( class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration )
            int alt19 = 5;
            alt19 = dfa19.Predict(input);
            switch (alt19) 
            {
                case 1 :
                    // cs.g:185:2: class_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_class_declaration_in_type_declaration703);
                    	class_declaration50 = class_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_declaration50.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:186:4: struct_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_struct_declaration_in_type_declaration708);
                    	struct_declaration51 = struct_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_declaration51.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:187:4: interface_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_interface_declaration_in_type_declaration713);
                    	interface_declaration52 = interface_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_declaration52.Tree);

                    }
                    break;
                case 4 :
                    // cs.g:188:4: enum_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_enum_declaration_in_type_declaration718);
                    	enum_declaration53 = enum_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, enum_declaration53.Tree);

                    }
                    break;
                case 5 :
                    // cs.g:189:4: delegate_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_delegate_declaration_in_type_declaration723);
                    	delegate_declaration54 = delegate_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, delegate_declaration54.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 17, type_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_declaration"

    public class qualified_alias_member_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "qualified_alias_member"
    // cs.g:190:1: qualified_alias_member : identifier '::' identifier ( generic_argument_list )? ;
    public csParser.qualified_alias_member_return qualified_alias_member() // throws RecognitionException [1]
    {   
        csParser.qualified_alias_member_return retval = new csParser.qualified_alias_member_return();
        retval.Start = input.LT(1);
        int qualified_alias_member_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal56 = null;
        csParser.identifier_return identifier55 = default(csParser.identifier_return);

        csParser.identifier_return identifier57 = default(csParser.identifier_return);

        csParser.generic_argument_list_return generic_argument_list58 = default(csParser.generic_argument_list_return);


        object string_literal56_tree=null;

         const string elementName = "qualified_alias_member"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 18) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:193:1: ( identifier '::' identifier ( generic_argument_list )? )
            // cs.g:194:2: identifier '::' identifier ( generic_argument_list )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_identifier_in_qualified_alias_member743);
            	identifier55 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier55.Tree);
            	string_literal56=(IToken)Match(input,89,FOLLOW_89_in_qualified_alias_member747); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal56_tree = (object)adaptor.Create(string_literal56);
            		adaptor.AddChild(root_0, string_literal56_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_qualified_alias_member751);
            	identifier57 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier57.Tree);
            	// cs.g:194:35: ( generic_argument_list )?
            	int alt20 = 2;
            	int LA20_0 = input.LA(1);

            	if ( (LA20_0 == 123) )
            	{
            	    alt20 = 1;
            	}
            	switch (alt20) 
            	{
            	    case 1 :
            	        // cs.g:0:0: generic_argument_list
            	        {
            	        	PushFollow(FOLLOW_generic_argument_list_in_qualified_alias_member755);
            	        	generic_argument_list58 = generic_argument_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_argument_list58.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 18, qualified_alias_member_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "qualified_alias_member"

    public class namespace_name_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "namespace_name"
    // cs.g:197:1: namespace_name : namespace_or_type_name ;
    public csParser.namespace_name_return namespace_name() // throws RecognitionException [1]
    {   
        csParser.namespace_name_return retval = new csParser.namespace_name_return();
        retval.Start = input.LT(1);
        int namespace_name_StartIndex = input.Index();
        object root_0 = null;

        csParser.namespace_or_type_name_return namespace_or_type_name59 = default(csParser.namespace_or_type_name_return);



         const string elementName = "namespace_name"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 19) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:200:1: ( namespace_or_type_name )
            // cs.g:201:2: namespace_or_type_name
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_namespace_or_type_name_in_namespace_name778);
            	namespace_or_type_name59 = namespace_or_type_name();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_or_type_name59.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 19, namespace_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "namespace_name"

    public class type_name_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "type_name"
    // cs.g:202:1: type_name : namespace_or_type_name ;
    public csParser.type_name_return type_name() // throws RecognitionException [1]
    {   
        csParser.type_name_return retval = new csParser.type_name_return();
        retval.Start = input.LT(1);
        int type_name_StartIndex = input.Index();
        object root_0 = null;

        csParser.namespace_or_type_name_return namespace_or_type_name60 = default(csParser.namespace_or_type_name_return);



         const string elementName = "type_name"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 20) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:205:1: ( namespace_or_type_name )
            // cs.g:206:2: namespace_or_type_name
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_namespace_or_type_name_in_type_name798);
            	namespace_or_type_name60 = namespace_or_type_name();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_or_type_name60.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 20, type_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_name"

    public class namespace_or_type_name_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "namespace_or_type_name"
    // cs.g:207:1: namespace_or_type_name : id1= identifier (ga1= generic_argument_list )? ( '::' id2= identifier (ga2= generic_argument_list )? )? ( '.' id3= identifier (ga3= generic_argument_list )? )* ;
    public csParser.namespace_or_type_name_return namespace_or_type_name() // throws RecognitionException [1]
    {   
        csParser.namespace_or_type_name_return retval = new csParser.namespace_or_type_name_return();
        retval.Start = input.LT(1);
        int namespace_or_type_name_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal61 = null;
        IToken char_literal62 = null;
        csParser.identifier_return id1 = default(csParser.identifier_return);

        csParser.generic_argument_list_return ga1 = default(csParser.generic_argument_list_return);

        csParser.identifier_return id2 = default(csParser.identifier_return);

        csParser.generic_argument_list_return ga2 = default(csParser.generic_argument_list_return);

        csParser.identifier_return id3 = default(csParser.identifier_return);

        csParser.generic_argument_list_return ga3 = default(csParser.generic_argument_list_return);


        object string_literal61_tree=null;
        object char_literal62_tree=null;

         const string elementName = "namespace_or_type_name"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 21) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:210:1: (id1= identifier (ga1= generic_argument_list )? ( '::' id2= identifier (ga2= generic_argument_list )? )? ( '.' id3= identifier (ga3= generic_argument_list )? )* )
            // cs.g:211:2: id1= identifier (ga1= generic_argument_list )? ( '::' id2= identifier (ga2= generic_argument_list )? )? ( '.' id3= identifier (ga3= generic_argument_list )? )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_identifier_in_namespace_or_type_name822);
            	id1 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, id1.Tree);
            	// cs.g:211:25: (ga1= generic_argument_list )?
            	int alt21 = 2;
            	int LA21_0 = input.LA(1);

            	if ( (LA21_0 == 123) )
            	{
            	    alt21 = 1;
            	}
            	switch (alt21) 
            	{
            	    case 1 :
            	        // cs.g:0:0: ga1= generic_argument_list
            	        {
            	        	PushFollow(FOLLOW_generic_argument_list_in_namespace_or_type_name830);
            	        	ga1 = generic_argument_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ga1.Tree);

            	        }
            	        break;

            	}

            	// cs.g:211:51: ( '::' id2= identifier (ga2= generic_argument_list )? )?
            	int alt23 = 2;
            	int LA23_0 = input.LA(1);

            	if ( (LA23_0 == 89) )
            	{
            	    alt23 = 1;
            	}
            	switch (alt23) 
            	{
            	    case 1 :
            	        // cs.g:211:52: '::' id2= identifier (ga2= generic_argument_list )?
            	        {
            	        	string_literal61=(IToken)Match(input,89,FOLLOW_89_in_namespace_or_type_name835); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal61_tree = (object)adaptor.Create(string_literal61);
            	        		adaptor.AddChild(root_0, string_literal61_tree);
            	        	}
            	        	PushFollow(FOLLOW_identifier_in_namespace_or_type_name841);
            	        	id2 = identifier();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, id2.Tree);
            	        	// cs.g:211:80: (ga2= generic_argument_list )?
            	        	int alt22 = 2;
            	        	int LA22_0 = input.LA(1);

            	        	if ( (LA22_0 == 123) )
            	        	{
            	        	    alt22 = 1;
            	        	}
            	        	switch (alt22) 
            	        	{
            	        	    case 1 :
            	        	        // cs.g:0:0: ga2= generic_argument_list
            	        	        {
            	        	        	PushFollow(FOLLOW_generic_argument_list_in_namespace_or_type_name849);
            	        	        	ga2 = generic_argument_list();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ga2.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;

            	}

            	// cs.g:211:107: ( '.' id3= identifier (ga3= generic_argument_list )? )*
            	do 
            	{
            	    int alt25 = 2;
            	    int LA25_0 = input.LA(1);

            	    if ( (LA25_0 == DOT) )
            	    {
            	        int LA25_2 = input.LA(2);

            	        if ( (LA25_2 == IDENTIFIER || LA25_2 == SET || LA25_2 == 95 || (LA25_2 >= 101 && LA25_2 <= 107) || LA25_2 == 109 || (LA25_2 >= 175 && LA25_2 <= 187) || LA25_2 == 199 || (LA25_2 >= 201 && LA25_2 <= 202) || LA25_2 == 208 || (LA25_2 >= 225 && LA25_2 <= 226)) )
            	        {
            	            alt25 = 1;
            	        }


            	    }


            	    switch (alt25) 
            		{
            			case 1 :
            			    // cs.g:211:108: '.' id3= identifier (ga3= generic_argument_list )?
            			    {
            			    	char_literal62=(IToken)Match(input,DOT,FOLLOW_DOT_in_namespace_or_type_name855); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal62_tree = (object)adaptor.Create(char_literal62);
            			    		adaptor.AddChild(root_0, char_literal62_tree);
            			    	}
            			    	PushFollow(FOLLOW_identifier_in_namespace_or_type_name863);
            			    	id3 = identifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, id3.Tree);
            			    	// cs.g:211:137: (ga3= generic_argument_list )?
            			    	int alt24 = 2;
            			    	int LA24_0 = input.LA(1);

            			    	if ( (LA24_0 == 123) )
            			    	{
            			    	    alt24 = 1;
            			    	}
            			    	switch (alt24) 
            			    	{
            			    	    case 1 :
            			    	        // cs.g:0:0: ga3= generic_argument_list
            			    	        {
            			    	        	PushFollow(FOLLOW_generic_argument_list_in_namespace_or_type_name871);
            			    	        	ga3 = generic_argument_list();
            			    	        	state.followingStackPointer--;
            			    	        	if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ga3.Tree);

            			    	        }
            			    	        break;

            			    	}


            			    }
            			    break;

            			default:
            			    goto loop25;
            	    }
            	} while (true);

            	loop25:
            		;	// Stops C# compiler whining that label 'loop25' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 21, namespace_or_type_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "namespace_or_type_name"

    public class global_attributes_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "global_attributes"
    // cs.g:216:1: global_attributes : ( global_attribute )+ ;
    public csParser.global_attributes_return global_attributes() // throws RecognitionException [1]
    {   
        csParser.global_attributes_return retval = new csParser.global_attributes_return();
        retval.Start = input.LT(1);
        int global_attributes_StartIndex = input.Index();
        object root_0 = null;

        csParser.global_attribute_return global_attribute63 = default(csParser.global_attribute_return);



         const string elementName = "global_attributes"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 22) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:219:1: ( ( global_attribute )+ )
            // cs.g:220:2: ( global_attribute )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:220:2: ( global_attribute )+
            	int cnt26 = 0;
            	do 
            	{
            	    int alt26 = 2;
            	    int LA26_0 = input.LA(1);

            	    if ( (LA26_0 == 97) )
            	    {
            	        int LA26_2 = input.LA(2);

            	        if ( ((LA26_2 >= 101 && LA26_2 <= 102)) )
            	        {
            	            int LA26_3 = input.LA(3);

            	            if ( (LA26_3 == 100) )
            	            {
            	                alt26 = 1;
            	            }


            	        }


            	    }


            	    switch (alt26) 
            		{
            			case 1 :
            			    // cs.g:0:0: global_attribute
            			    {
            			    	PushFollow(FOLLOW_global_attribute_in_global_attributes915);
            			    	global_attribute63 = global_attribute();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, global_attribute63.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt26 >= 1 ) goto loop26;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee26 =
            		                new EarlyExitException(26, input);
            		            throw eee26;
            	    }
            	    cnt26++;
            	} while (true);

            	loop26:
            		;	// Stops C# compiler whining that label 'loop26' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 22, global_attributes_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "global_attributes"

    public class global_attribute_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "global_attribute"
    // cs.g:221:1: global_attribute : '[' global_attribute_target_specifier attribute_list ( ',' )? ']' ;
    public csParser.global_attribute_return global_attribute() // throws RecognitionException [1]
    {   
        csParser.global_attribute_return retval = new csParser.global_attribute_return();
        retval.Start = input.LT(1);
        int global_attribute_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal64 = null;
        IToken char_literal67 = null;
        IToken char_literal68 = null;
        csParser.global_attribute_target_specifier_return global_attribute_target_specifier65 = default(csParser.global_attribute_target_specifier_return);

        csParser.attribute_list_return attribute_list66 = default(csParser.attribute_list_return);


        object char_literal64_tree=null;
        object char_literal67_tree=null;
        object char_literal68_tree=null;

         const string elementName = "global_attribute"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 23) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:224:1: ( '[' global_attribute_target_specifier attribute_list ( ',' )? ']' )
            // cs.g:225:2: '[' global_attribute_target_specifier attribute_list ( ',' )? ']'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal64=(IToken)Match(input,97,FOLLOW_97_in_global_attribute936); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal64_tree = (object)adaptor.Create(char_literal64);
            		adaptor.AddChild(root_0, char_literal64_tree);
            	}
            	PushFollow(FOLLOW_global_attribute_target_specifier_in_global_attribute940);
            	global_attribute_target_specifier65 = global_attribute_target_specifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, global_attribute_target_specifier65.Tree);
            	PushFollow(FOLLOW_attribute_list_in_global_attribute944);
            	attribute_list66 = attribute_list();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_list66.Tree);
            	// cs.g:225:61: ( ',' )?
            	int alt27 = 2;
            	int LA27_0 = input.LA(1);

            	if ( (LA27_0 == 98) )
            	{
            	    alt27 = 1;
            	}
            	switch (alt27) 
            	{
            	    case 1 :
            	        // cs.g:0:0: ','
            	        {
            	        	char_literal67=(IToken)Match(input,98,FOLLOW_98_in_global_attribute948); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal67_tree = (object)adaptor.Create(char_literal67);
            	        		adaptor.AddChild(root_0, char_literal67_tree);
            	        	}

            	        }
            	        break;

            	}

            	char_literal68=(IToken)Match(input,99,FOLLOW_99_in_global_attribute953); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal68_tree = (object)adaptor.Create(char_literal68);
            		adaptor.AddChild(root_0, char_literal68_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 23, global_attribute_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "global_attribute"

    public class global_attribute_target_specifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "global_attribute_target_specifier"
    // cs.g:226:1: global_attribute_target_specifier : global_attribute_target ':' ;
    public csParser.global_attribute_target_specifier_return global_attribute_target_specifier() // throws RecognitionException [1]
    {   
        csParser.global_attribute_target_specifier_return retval = new csParser.global_attribute_target_specifier_return();
        retval.Start = input.LT(1);
        int global_attribute_target_specifier_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal70 = null;
        csParser.global_attribute_target_return global_attribute_target69 = default(csParser.global_attribute_target_return);


        object char_literal70_tree=null;

         const string elementName = "global_attribute_target_specifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 24) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:229:1: ( global_attribute_target ':' )
            // cs.g:230:2: global_attribute_target ':'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_global_attribute_target_in_global_attribute_target_specifier973);
            	global_attribute_target69 = global_attribute_target();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, global_attribute_target69.Tree);
            	char_literal70=(IToken)Match(input,100,FOLLOW_100_in_global_attribute_target_specifier977); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal70_tree = (object)adaptor.Create(char_literal70);
            		adaptor.AddChild(root_0, char_literal70_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 24, global_attribute_target_specifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "global_attribute_target_specifier"

    public class global_attribute_target_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "global_attribute_target"
    // cs.g:231:1: global_attribute_target : ( 'assembly' | 'module' );
    public csParser.global_attribute_target_return global_attribute_target() // throws RecognitionException [1]
    {   
        csParser.global_attribute_target_return retval = new csParser.global_attribute_target_return();
        retval.Start = input.LT(1);
        int global_attribute_target_StartIndex = input.Index();
        object root_0 = null;

        IToken set71 = null;

        object set71_tree=null;

         const string elementName = "global_attribute_target"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 25) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:234:1: ( 'assembly' | 'module' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set71 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= 101 && input.LA(1) <= 102) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set71));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 25, global_attribute_target_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "global_attribute_target"

    public class attributes_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "attributes"
    // cs.g:236:1: attributes : attribute_sections ;
    public csParser.attributes_return attributes() // throws RecognitionException [1]
    {   
        csParser.attributes_return retval = new csParser.attributes_return();
        retval.Start = input.LT(1);
        int attributes_StartIndex = input.Index();
        object root_0 = null;

        csParser.attribute_sections_return attribute_sections72 = default(csParser.attribute_sections_return);



         const string elementName = "attributes"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 26) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:239:1: ( attribute_sections )
            // cs.g:240:2: attribute_sections
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_attribute_sections_in_attributes1021);
            	attribute_sections72 = attribute_sections();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_sections72.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 26, attributes_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attributes"

    public class attribute_sections_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "attribute_sections"
    // cs.g:241:1: attribute_sections : ( attribute_section )+ ;
    public csParser.attribute_sections_return attribute_sections() // throws RecognitionException [1]
    {   
        csParser.attribute_sections_return retval = new csParser.attribute_sections_return();
        retval.Start = input.LT(1);
        int attribute_sections_StartIndex = input.Index();
        object root_0 = null;

        csParser.attribute_section_return attribute_section73 = default(csParser.attribute_section_return);



         const string elementName = "attribute_sections"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 27) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:244:1: ( ( attribute_section )+ )
            // cs.g:245:2: ( attribute_section )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:245:2: ( attribute_section )+
            	int cnt28 = 0;
            	do 
            	{
            	    int alt28 = 2;
            	    int LA28_0 = input.LA(1);

            	    if ( (LA28_0 == 97) )
            	    {
            	        alt28 = 1;
            	    }


            	    switch (alt28) 
            		{
            			case 1 :
            			    // cs.g:0:0: attribute_section
            			    {
            			    	PushFollow(FOLLOW_attribute_section_in_attribute_sections1041);
            			    	attribute_section73 = attribute_section();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_section73.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt28 >= 1 ) goto loop28;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee28 =
            		                new EarlyExitException(28, input);
            		            throw eee28;
            	    }
            	    cnt28++;
            	} while (true);

            	loop28:
            		;	// Stops C# compiler whining that label 'loop28' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 27, attribute_sections_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attribute_sections"

    public class attribute_section_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "attribute_section"
    // cs.g:246:1: attribute_section : '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' ;
    public csParser.attribute_section_return attribute_section() // throws RecognitionException [1]
    {   
        csParser.attribute_section_return retval = new csParser.attribute_section_return();
        retval.Start = input.LT(1);
        int attribute_section_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal74 = null;
        IToken char_literal77 = null;
        IToken char_literal78 = null;
        csParser.attribute_target_specifier_return attribute_target_specifier75 = default(csParser.attribute_target_specifier_return);

        csParser.attribute_list_return attribute_list76 = default(csParser.attribute_list_return);


        object char_literal74_tree=null;
        object char_literal77_tree=null;
        object char_literal78_tree=null;

         const string elementName = "attribute_section"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 28) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:249:1: ( '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' )
            // cs.g:250:2: '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal74=(IToken)Match(input,97,FOLLOW_97_in_attribute_section1062); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal74_tree = (object)adaptor.Create(char_literal74);
            		adaptor.AddChild(root_0, char_literal74_tree);
            	}
            	// cs.g:250:8: ( attribute_target_specifier )?
            	int alt29 = 2;
            	int LA29_0 = input.LA(1);

            	if ( ((LA29_0 >= 103 && LA29_0 <= 107) || LA29_0 == 109) )
            	{
            	    int LA29_1 = input.LA(2);

            	    if ( (LA29_1 == 100) )
            	    {
            	        alt29 = 1;
            	    }
            	}
            	else if ( (LA29_0 == 108) )
            	{
            	    alt29 = 1;
            	}
            	switch (alt29) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attribute_target_specifier
            	        {
            	        	PushFollow(FOLLOW_attribute_target_specifier_in_attribute_section1066);
            	        	attribute_target_specifier75 = attribute_target_specifier();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_target_specifier75.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_attribute_list_in_attribute_section1071);
            	attribute_list76 = attribute_list();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_list76.Tree);
            	// cs.g:250:55: ( ',' )?
            	int alt30 = 2;
            	int LA30_0 = input.LA(1);

            	if ( (LA30_0 == 98) )
            	{
            	    alt30 = 1;
            	}
            	switch (alt30) 
            	{
            	    case 1 :
            	        // cs.g:0:0: ','
            	        {
            	        	char_literal77=(IToken)Match(input,98,FOLLOW_98_in_attribute_section1075); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal77_tree = (object)adaptor.Create(char_literal77);
            	        		adaptor.AddChild(root_0, char_literal77_tree);
            	        	}

            	        }
            	        break;

            	}

            	char_literal78=(IToken)Match(input,99,FOLLOW_99_in_attribute_section1080); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal78_tree = (object)adaptor.Create(char_literal78);
            		adaptor.AddChild(root_0, char_literal78_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 28, attribute_section_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attribute_section"

    public class attribute_target_specifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "attribute_target_specifier"
    // cs.g:251:1: attribute_target_specifier : attribute_target ':' ;
    public csParser.attribute_target_specifier_return attribute_target_specifier() // throws RecognitionException [1]
    {   
        csParser.attribute_target_specifier_return retval = new csParser.attribute_target_specifier_return();
        retval.Start = input.LT(1);
        int attribute_target_specifier_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal80 = null;
        csParser.attribute_target_return attribute_target79 = default(csParser.attribute_target_return);


        object char_literal80_tree=null;

         const string elementName = "attribute_target_specifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 29) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:254:1: ( attribute_target ':' )
            // cs.g:255:2: attribute_target ':'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_attribute_target_in_attribute_target_specifier1100);
            	attribute_target79 = attribute_target();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_target79.Tree);
            	char_literal80=(IToken)Match(input,100,FOLLOW_100_in_attribute_target_specifier1104); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal80_tree = (object)adaptor.Create(char_literal80);
            		adaptor.AddChild(root_0, char_literal80_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 29, attribute_target_specifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attribute_target_specifier"

    public class attribute_target_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "attribute_target"
    // cs.g:256:1: attribute_target : ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' );
    public csParser.attribute_target_return attribute_target() // throws RecognitionException [1]
    {   
        csParser.attribute_target_return retval = new csParser.attribute_target_return();
        retval.Start = input.LT(1);
        int attribute_target_StartIndex = input.Index();
        object root_0 = null;

        IToken set81 = null;

        object set81_tree=null;

         const string elementName = "attribute_target"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 30) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:259:1: ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set81 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= 103 && input.LA(1) <= 109) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set81));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 30, attribute_target_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attribute_target"

    public class attribute_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "attribute_list"
    // cs.g:261:1: attribute_list : a+= attribute ( ',' a+= attribute )* ;
    public csParser.attribute_list_return attribute_list() // throws RecognitionException [1]
    {   
        csParser.attribute_list_return retval = new csParser.attribute_list_return();
        retval.Start = input.LT(1);
        int attribute_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal82 = null;
        IList list_a = null;
        csParser.attribute_return a = default(csParser.attribute_return);
         a = null;
        object char_literal82_tree=null;

         const string elementName = "attribute_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 31) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:264:1: (a+= attribute ( ',' a+= attribute )* )
            // cs.g:265:2: a+= attribute ( ',' a+= attribute )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_attribute_in_attribute_list1172);
            	a = attribute();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, a.Tree);
            	if (list_a == null) list_a = new ArrayList();
            	list_a.Add(a.Tree);

            	// cs.g:265:17: ( ',' a+= attribute )*
            	do 
            	{
            	    int alt31 = 2;
            	    int LA31_0 = input.LA(1);

            	    if ( (LA31_0 == 98) )
            	    {
            	        int LA31_1 = input.LA(2);

            	        if ( (LA31_1 == IDENTIFIER || LA31_1 == SET || LA31_1 == 95 || (LA31_1 >= 101 && LA31_1 <= 107) || LA31_1 == 109 || (LA31_1 >= 175 && LA31_1 <= 187) || LA31_1 == 199 || (LA31_1 >= 201 && LA31_1 <= 202) || LA31_1 == 208 || (LA31_1 >= 225 && LA31_1 <= 226)) )
            	        {
            	            alt31 = 1;
            	        }


            	    }


            	    switch (alt31) 
            		{
            			case 1 :
            			    // cs.g:265:18: ',' a+= attribute
            			    {
            			    	char_literal82=(IToken)Match(input,98,FOLLOW_98_in_attribute_list1175); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal82_tree = (object)adaptor.Create(char_literal82);
            			    		adaptor.AddChild(root_0, char_literal82_tree);
            			    	}
            			    	PushFollow(FOLLOW_attribute_in_attribute_list1181);
            			    	a = attribute();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, a.Tree);
            			    	if (list_a == null) list_a = new ArrayList();
            			    	list_a.Add(a.Tree);


            			    }
            			    break;

            			default:
            			    goto loop31;
            	    }
            	} while (true);

            	loop31:
            		;	// Stops C# compiler whining that label 'loop31' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 31, attribute_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attribute_list"

    public class attribute_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "attribute"
    // cs.g:267:1: attribute : type_name ( attribute_arguments )? ;
    public csParser.attribute_return attribute() // throws RecognitionException [1]
    {   
        csParser.attribute_return retval = new csParser.attribute_return();
        retval.Start = input.LT(1);
        int attribute_StartIndex = input.Index();
        object root_0 = null;

        csParser.type_name_return type_name83 = default(csParser.type_name_return);

        csParser.attribute_arguments_return attribute_arguments84 = default(csParser.attribute_arguments_return);



         const string elementName = "attribute"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 32) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:270:1: ( type_name ( attribute_arguments )? )
            // cs.g:271:2: type_name ( attribute_arguments )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_type_name_in_attribute1206);
            	type_name83 = type_name();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name83.Tree);
            	// cs.g:271:14: ( attribute_arguments )?
            	int alt32 = 2;
            	int LA32_0 = input.LA(1);

            	if ( (LA32_0 == 110) )
            	{
            	    alt32 = 1;
            	}
            	switch (alt32) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attribute_arguments
            	        {
            	        	PushFollow(FOLLOW_attribute_arguments_in_attribute1210);
            	        	attribute_arguments84 = attribute_arguments();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_arguments84.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 32, attribute_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attribute"

    public class attribute_arguments_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "attribute_arguments"
    // cs.g:272:1: attribute_arguments : ( '(' ( positional_argument_list )? ')' | '(' positional_argument_list ',' named_argument_list ')' | '(' named_argument_list ')' );
    public csParser.attribute_arguments_return attribute_arguments() // throws RecognitionException [1]
    {   
        csParser.attribute_arguments_return retval = new csParser.attribute_arguments_return();
        retval.Start = input.LT(1);
        int attribute_arguments_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal85 = null;
        IToken char_literal87 = null;
        IToken char_literal88 = null;
        IToken char_literal90 = null;
        IToken char_literal92 = null;
        IToken char_literal93 = null;
        IToken char_literal95 = null;
        csParser.positional_argument_list_return positional_argument_list86 = default(csParser.positional_argument_list_return);

        csParser.positional_argument_list_return positional_argument_list89 = default(csParser.positional_argument_list_return);

        csParser.named_argument_list_return named_argument_list91 = default(csParser.named_argument_list_return);

        csParser.named_argument_list_return named_argument_list94 = default(csParser.named_argument_list_return);


        object char_literal85_tree=null;
        object char_literal87_tree=null;
        object char_literal88_tree=null;
        object char_literal90_tree=null;
        object char_literal92_tree=null;
        object char_literal93_tree=null;
        object char_literal95_tree=null;

         const string elementName = "attribute_arguments"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 33) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:275:1: ( '(' ( positional_argument_list )? ')' | '(' positional_argument_list ',' named_argument_list ')' | '(' named_argument_list ')' )
            int alt34 = 3;
            int LA34_0 = input.LA(1);

            if ( (LA34_0 == 110) )
            {
                int LA34_1 = input.LA(2);

                if ( (synpred47_cs()) )
                {
                    alt34 = 1;
                }
                else if ( (synpred48_cs()) )
                {
                    alt34 = 2;
                }
                else if ( (true) )
                {
                    alt34 = 3;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d34s1 =
                        new NoViableAltException("", 34, 1, input);

                    throw nvae_d34s1;
                }
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d34s0 =
                    new NoViableAltException("", 34, 0, input);

                throw nvae_d34s0;
            }
            switch (alt34) 
            {
                case 1 :
                    // cs.g:276:2: '(' ( positional_argument_list )? ')'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal85=(IToken)Match(input,110,FOLLOW_110_in_attribute_arguments1231); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal85_tree = (object)adaptor.Create(char_literal85);
                    		adaptor.AddChild(root_0, char_literal85_tree);
                    	}
                    	// cs.g:276:8: ( positional_argument_list )?
                    	int alt33 = 2;
                    	int LA33_0 = input.LA(1);

                    	if ( ((LA33_0 >= IDENTIFIER && LA33_0 <= NULL) || LA33_0 == MINUS || LA33_0 == SET || (LA33_0 >= 90 && LA33_0 <= 91) || LA33_0 == 95 || (LA33_0 >= 101 && LA33_0 <= 107) || (LA33_0 >= 109 && LA33_0 <= 111) || (LA33_0 >= 114 && LA33_0 <= 122) || (LA33_0 >= 124 && LA33_0 <= 129) || (LA33_0 >= 132 && LA33_0 <= 144) || (LA33_0 >= 175 && LA33_0 <= 187) || LA33_0 == 199 || (LA33_0 >= 201 && LA33_0 <= 202) || LA33_0 == 208 || (LA33_0 >= 225 && LA33_0 <= 226)) )
                    	{
                    	    alt33 = 1;
                    	}
                    	switch (alt33) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: positional_argument_list
                    	        {
                    	        	PushFollow(FOLLOW_positional_argument_list_in_attribute_arguments1235);
                    	        	positional_argument_list86 = positional_argument_list();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, positional_argument_list86.Tree);

                    	        }
                    	        break;

                    	}

                    	char_literal87=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_attribute_arguments1239); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal87_tree = (object)adaptor.Create(char_literal87);
                    		adaptor.AddChild(root_0, char_literal87_tree);
                    	}

                    }
                    break;
                case 2 :
                    // cs.g:277:4: '(' positional_argument_list ',' named_argument_list ')'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal88=(IToken)Match(input,110,FOLLOW_110_in_attribute_arguments1245); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal88_tree = (object)adaptor.Create(char_literal88);
                    		adaptor.AddChild(root_0, char_literal88_tree);
                    	}
                    	PushFollow(FOLLOW_positional_argument_list_in_attribute_arguments1249);
                    	positional_argument_list89 = positional_argument_list();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, positional_argument_list89.Tree);
                    	char_literal90=(IToken)Match(input,98,FOLLOW_98_in_attribute_arguments1253); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal90_tree = (object)adaptor.Create(char_literal90);
                    		adaptor.AddChild(root_0, char_literal90_tree);
                    	}
                    	PushFollow(FOLLOW_named_argument_list_in_attribute_arguments1257);
                    	named_argument_list91 = named_argument_list();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, named_argument_list91.Tree);
                    	char_literal92=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_attribute_arguments1261); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal92_tree = (object)adaptor.Create(char_literal92);
                    		adaptor.AddChild(root_0, char_literal92_tree);
                    	}

                    }
                    break;
                case 3 :
                    // cs.g:278:4: '(' named_argument_list ')'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal93=(IToken)Match(input,110,FOLLOW_110_in_attribute_arguments1267); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal93_tree = (object)adaptor.Create(char_literal93);
                    		adaptor.AddChild(root_0, char_literal93_tree);
                    	}
                    	PushFollow(FOLLOW_named_argument_list_in_attribute_arguments1271);
                    	named_argument_list94 = named_argument_list();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, named_argument_list94.Tree);
                    	char_literal95=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_attribute_arguments1275); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal95_tree = (object)adaptor.Create(char_literal95);
                    		adaptor.AddChild(root_0, char_literal95_tree);
                    	}

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 33, attribute_arguments_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attribute_arguments"

    public class positional_argument_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "positional_argument_list"
    // cs.g:279:1: positional_argument_list : pa+= positional_argument ( ',' pa+= positional_argument )* ;
    public csParser.positional_argument_list_return positional_argument_list() // throws RecognitionException [1]
    {   
        csParser.positional_argument_list_return retval = new csParser.positional_argument_list_return();
        retval.Start = input.LT(1);
        int positional_argument_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal96 = null;
        IList list_pa = null;
        csParser.positional_argument_return pa = default(csParser.positional_argument_return);
         pa = null;
        object char_literal96_tree=null;

         const string elementName = "positional_argument_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 34) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:282:1: (pa+= positional_argument ( ',' pa+= positional_argument )* )
            // cs.g:283:2: pa+= positional_argument ( ',' pa+= positional_argument )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_positional_argument_in_positional_argument_list1299);
            	pa = positional_argument();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, pa.Tree);
            	if (list_pa == null) list_pa = new ArrayList();
            	list_pa.Add(pa.Tree);

            	// cs.g:283:28: ( ',' pa+= positional_argument )*
            	do 
            	{
            	    int alt35 = 2;
            	    int LA35_0 = input.LA(1);

            	    if ( (LA35_0 == 98) )
            	    {
            	        int LA35_2 = input.LA(2);

            	        if ( (synpred49_cs()) )
            	        {
            	            alt35 = 1;
            	        }


            	    }


            	    switch (alt35) 
            		{
            			case 1 :
            			    // cs.g:283:29: ',' pa+= positional_argument
            			    {
            			    	char_literal96=(IToken)Match(input,98,FOLLOW_98_in_positional_argument_list1302); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal96_tree = (object)adaptor.Create(char_literal96);
            			    		adaptor.AddChild(root_0, char_literal96_tree);
            			    	}
            			    	PushFollow(FOLLOW_positional_argument_in_positional_argument_list1308);
            			    	pa = positional_argument();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, pa.Tree);
            			    	if (list_pa == null) list_pa = new ArrayList();
            			    	list_pa.Add(pa.Tree);


            			    }
            			    break;

            			default:
            			    goto loop35;
            	    }
            	} while (true);

            	loop35:
            		;	// Stops C# compiler whining that label 'loop35' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 34, positional_argument_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "positional_argument_list"

    public class positional_argument_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "positional_argument"
    // cs.g:285:1: positional_argument : attribute_argument_expression ;
    public csParser.positional_argument_return positional_argument() // throws RecognitionException [1]
    {   
        csParser.positional_argument_return retval = new csParser.positional_argument_return();
        retval.Start = input.LT(1);
        int positional_argument_StartIndex = input.Index();
        object root_0 = null;

        csParser.attribute_argument_expression_return attribute_argument_expression97 = default(csParser.attribute_argument_expression_return);



         const string elementName = "positional_argument"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 35) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:288:1: ( attribute_argument_expression )
            // cs.g:289:2: attribute_argument_expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_attribute_argument_expression_in_positional_argument1332);
            	attribute_argument_expression97 = attribute_argument_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_argument_expression97.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 35, positional_argument_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "positional_argument"

    public class named_argument_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "named_argument_list"
    // cs.g:290:1: named_argument_list : na+= named_argument ( ',' na+= named_argument )* ;
    public csParser.named_argument_list_return named_argument_list() // throws RecognitionException [1]
    {   
        csParser.named_argument_list_return retval = new csParser.named_argument_list_return();
        retval.Start = input.LT(1);
        int named_argument_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal98 = null;
        IList list_na = null;
        csParser.named_argument_return na = default(csParser.named_argument_return);
         na = null;
        object char_literal98_tree=null;

         const string elementName = "named_argument_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 36) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:293:1: (na+= named_argument ( ',' na+= named_argument )* )
            // cs.g:294:2: na+= named_argument ( ',' na+= named_argument )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_named_argument_in_named_argument_list1356);
            	na = named_argument();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, na.Tree);
            	if (list_na == null) list_na = new ArrayList();
            	list_na.Add(na.Tree);

            	// cs.g:294:23: ( ',' na+= named_argument )*
            	do 
            	{
            	    int alt36 = 2;
            	    int LA36_0 = input.LA(1);

            	    if ( (LA36_0 == 98) )
            	    {
            	        alt36 = 1;
            	    }


            	    switch (alt36) 
            		{
            			case 1 :
            			    // cs.g:294:24: ',' na+= named_argument
            			    {
            			    	char_literal98=(IToken)Match(input,98,FOLLOW_98_in_named_argument_list1359); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal98_tree = (object)adaptor.Create(char_literal98);
            			    		adaptor.AddChild(root_0, char_literal98_tree);
            			    	}
            			    	PushFollow(FOLLOW_named_argument_in_named_argument_list1365);
            			    	na = named_argument();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, na.Tree);
            			    	if (list_na == null) list_na = new ArrayList();
            			    	list_na.Add(na.Tree);


            			    }
            			    break;

            			default:
            			    goto loop36;
            	    }
            	} while (true);

            	loop36:
            		;	// Stops C# compiler whining that label 'loop36' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 36, named_argument_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "named_argument_list"

    public class named_argument_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "named_argument"
    // cs.g:296:1: named_argument : identifier '=' attribute_argument_expression ;
    public csParser.named_argument_return named_argument() // throws RecognitionException [1]
    {   
        csParser.named_argument_return retval = new csParser.named_argument_return();
        retval.Start = input.LT(1);
        int named_argument_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal100 = null;
        csParser.identifier_return identifier99 = default(csParser.identifier_return);

        csParser.attribute_argument_expression_return attribute_argument_expression101 = default(csParser.attribute_argument_expression_return);


        object char_literal100_tree=null;

         const string elementName = "named_argument"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 37) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:299:1: ( identifier '=' attribute_argument_expression )
            // cs.g:300:2: identifier '=' attribute_argument_expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_identifier_in_named_argument1389);
            	identifier99 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier99.Tree);
            	char_literal100=(IToken)Match(input,96,FOLLOW_96_in_named_argument1393); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal100_tree = (object)adaptor.Create(char_literal100);
            		adaptor.AddChild(root_0, char_literal100_tree);
            	}
            	PushFollow(FOLLOW_attribute_argument_expression_in_named_argument1397);
            	attribute_argument_expression101 = attribute_argument_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attribute_argument_expression101.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 37, named_argument_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "named_argument"

    public class attribute_argument_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "attribute_argument_expression"
    // cs.g:301:1: attribute_argument_expression : expression ;
    public csParser.attribute_argument_expression_return attribute_argument_expression() // throws RecognitionException [1]
    {   
        csParser.attribute_argument_expression_return retval = new csParser.attribute_argument_expression_return();
        retval.Start = input.LT(1);
        int attribute_argument_expression_StartIndex = input.Index();
        object root_0 = null;

        csParser.expression_return expression102 = default(csParser.expression_return);



         const string elementName = "attribute_argument_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 38) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:304:1: ( expression )
            // cs.g:305:2: expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_expression_in_attribute_argument_expression1417);
            	expression102 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression102.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 38, attribute_argument_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attribute_argument_expression"

    public class type_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "type"
    // cs.g:310:1: type : ( ( type_name | predefined_type ) rank_specifiers ( '*' )* | type_name ( '*' )+ | type_name '?' | type_name | predefined_type ( '*' )+ | predefined_type '?' | predefined_type | 'void' ( '*' )+ );
    public csParser.type_return type() // throws RecognitionException [1]
    {   
        csParser.type_return retval = new csParser.type_return();
        retval.Start = input.LT(1);
        int type_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal106 = null;
        IToken char_literal108 = null;
        IToken char_literal110 = null;
        IToken char_literal113 = null;
        IToken char_literal115 = null;
        IToken string_literal117 = null;
        IToken char_literal118 = null;
        csParser.type_name_return type_name103 = default(csParser.type_name_return);

        csParser.predefined_type_return predefined_type104 = default(csParser.predefined_type_return);

        csParser.rank_specifiers_return rank_specifiers105 = default(csParser.rank_specifiers_return);

        csParser.type_name_return type_name107 = default(csParser.type_name_return);

        csParser.type_name_return type_name109 = default(csParser.type_name_return);

        csParser.type_name_return type_name111 = default(csParser.type_name_return);

        csParser.predefined_type_return predefined_type112 = default(csParser.predefined_type_return);

        csParser.predefined_type_return predefined_type114 = default(csParser.predefined_type_return);

        csParser.predefined_type_return predefined_type116 = default(csParser.predefined_type_return);


        object char_literal106_tree=null;
        object char_literal108_tree=null;
        object char_literal110_tree=null;
        object char_literal113_tree=null;
        object char_literal115_tree=null;
        object string_literal117_tree=null;
        object char_literal118_tree=null;

         const string elementName = "type"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 39) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:313:1: ( ( type_name | predefined_type ) rank_specifiers ( '*' )* | type_name ( '*' )+ | type_name '?' | type_name | predefined_type ( '*' )+ | predefined_type '?' | predefined_type | 'void' ( '*' )+ )
            int alt42 = 8;
            alt42 = dfa42.Predict(input);
            switch (alt42) 
            {
                case 1 :
                    // cs.g:314:2: ( type_name | predefined_type ) rank_specifiers ( '*' )*
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:314:2: ( type_name | predefined_type )
                    	int alt37 = 2;
                    	int LA37_0 = input.LA(1);

                    	if ( (LA37_0 == IDENTIFIER || LA37_0 == SET || LA37_0 == 95 || (LA37_0 >= 101 && LA37_0 <= 107) || LA37_0 == 109 || (LA37_0 >= 175 && LA37_0 <= 187) || LA37_0 == 199 || (LA37_0 >= 201 && LA37_0 <= 202) || LA37_0 == 208 || (LA37_0 >= 225 && LA37_0 <= 226)) )
                    	{
                    	    alt37 = 1;
                    	}
                    	else if ( ((LA37_0 >= 114 && LA37_0 <= 122) || (LA37_0 >= 132 && LA37_0 <= 137)) )
                    	{
                    	    alt37 = 2;
                    	}
                    	else 
                    	{
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    NoViableAltException nvae_d37s0 =
                    	        new NoViableAltException("", 37, 0, input);

                    	    throw nvae_d37s0;
                    	}
                    	switch (alt37) 
                    	{
                    	    case 1 :
                    	        // cs.g:314:3: type_name
                    	        {
                    	        	PushFollow(FOLLOW_type_name_in_type1443);
                    	        	type_name103 = type_name();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name103.Tree);

                    	        }
                    	        break;
                    	    case 2 :
                    	        // cs.g:314:19: predefined_type
                    	        {
                    	        	PushFollow(FOLLOW_predefined_type_in_type1451);
                    	        	predefined_type104 = predefined_type();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type104.Tree);

                    	        }
                    	        break;

                    	}

                    	PushFollow(FOLLOW_rank_specifiers_in_type1456);
                    	rank_specifiers105 = rank_specifiers();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rank_specifiers105.Tree);
                    	// cs.g:314:56: ( '*' )*
                    	do 
                    	{
                    	    int alt38 = 2;
                    	    int LA38_0 = input.LA(1);

                    	    if ( (LA38_0 == 111) )
                    	    {
                    	        alt38 = 1;
                    	    }


                    	    switch (alt38) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: '*'
                    			    {
                    			    	char_literal106=(IToken)Match(input,111,FOLLOW_111_in_type1460); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{char_literal106_tree = (object)adaptor.Create(char_literal106);
                    			    		adaptor.AddChild(root_0, char_literal106_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    goto loop38;
                    	    }
                    	} while (true);

                    	loop38:
                    		;	// Stops C# compiler whining that label 'loop38' has no statements


                    }
                    break;
                case 2 :
                    // cs.g:315:4: type_name ( '*' )+
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_type_name_in_type1466);
                    	type_name107 = type_name();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name107.Tree);
                    	// cs.g:315:14: ( '*' )+
                    	int cnt39 = 0;
                    	do 
                    	{
                    	    int alt39 = 2;
                    	    int LA39_0 = input.LA(1);

                    	    if ( (LA39_0 == 111) )
                    	    {
                    	        alt39 = 1;
                    	    }


                    	    switch (alt39) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: '*'
                    			    {
                    			    	char_literal108=(IToken)Match(input,111,FOLLOW_111_in_type1468); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{char_literal108_tree = (object)adaptor.Create(char_literal108);
                    			    		adaptor.AddChild(root_0, char_literal108_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt39 >= 1 ) goto loop39;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee39 =
                    		                new EarlyExitException(39, input);
                    		            throw eee39;
                    	    }
                    	    cnt39++;
                    	} while (true);

                    	loop39:
                    		;	// Stops C# compiler whining that label 'loop39' has no statements


                    }
                    break;
                case 3 :
                    // cs.g:316:4: type_name '?'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_type_name_in_type1474);
                    	type_name109 = type_name();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name109.Tree);
                    	char_literal110=(IToken)Match(input,112,FOLLOW_112_in_type1476); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal110_tree = (object)adaptor.Create(char_literal110);
                    		adaptor.AddChild(root_0, char_literal110_tree);
                    	}

                    }
                    break;
                case 4 :
                    // cs.g:317:4: type_name
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_type_name_in_type1481);
                    	type_name111 = type_name();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name111.Tree);

                    }
                    break;
                case 5 :
                    // cs.g:318:4: predefined_type ( '*' )+
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_predefined_type_in_type1486);
                    	predefined_type112 = predefined_type();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type112.Tree);
                    	// cs.g:318:20: ( '*' )+
                    	int cnt40 = 0;
                    	do 
                    	{
                    	    int alt40 = 2;
                    	    int LA40_0 = input.LA(1);

                    	    if ( (LA40_0 == 111) )
                    	    {
                    	        alt40 = 1;
                    	    }


                    	    switch (alt40) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: '*'
                    			    {
                    			    	char_literal113=(IToken)Match(input,111,FOLLOW_111_in_type1488); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{char_literal113_tree = (object)adaptor.Create(char_literal113);
                    			    		adaptor.AddChild(root_0, char_literal113_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt40 >= 1 ) goto loop40;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee40 =
                    		                new EarlyExitException(40, input);
                    		            throw eee40;
                    	    }
                    	    cnt40++;
                    	} while (true);

                    	loop40:
                    		;	// Stops C# compiler whining that label 'loop40' has no statements


                    }
                    break;
                case 6 :
                    // cs.g:319:4: predefined_type '?'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_predefined_type_in_type1494);
                    	predefined_type114 = predefined_type();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type114.Tree);
                    	char_literal115=(IToken)Match(input,112,FOLLOW_112_in_type1496); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal115_tree = (object)adaptor.Create(char_literal115);
                    		adaptor.AddChild(root_0, char_literal115_tree);
                    	}

                    }
                    break;
                case 7 :
                    // cs.g:320:4: predefined_type
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_predefined_type_in_type1501);
                    	predefined_type116 = predefined_type();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type116.Tree);

                    }
                    break;
                case 8 :
                    // cs.g:321:4: 'void' ( '*' )+
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal117=(IToken)Match(input,113,FOLLOW_113_in_type1506); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal117_tree = (object)adaptor.Create(string_literal117);
                    		adaptor.AddChild(root_0, string_literal117_tree);
                    	}
                    	// cs.g:321:13: ( '*' )+
                    	int cnt41 = 0;
                    	do 
                    	{
                    	    int alt41 = 2;
                    	    int LA41_0 = input.LA(1);

                    	    if ( (LA41_0 == 111) )
                    	    {
                    	        alt41 = 1;
                    	    }


                    	    switch (alt41) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: '*'
                    			    {
                    			    	char_literal118=(IToken)Match(input,111,FOLLOW_111_in_type1510); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{char_literal118_tree = (object)adaptor.Create(char_literal118);
                    			    		adaptor.AddChild(root_0, char_literal118_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt41 >= 1 ) goto loop41;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee41 =
                    		                new EarlyExitException(41, input);
                    		            throw eee41;
                    	    }
                    	    cnt41++;
                    	} while (true);

                    	loop41:
                    		;	// Stops C# compiler whining that label 'loop41' has no statements


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 39, type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type"

    public class non_nullable_type_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "non_nullable_type"
    // cs.g:322:1: non_nullable_type : ( ( type_name | predefined_type ) rank_specifiers ( '*' )* | type_name ( '*' )+ | type_name | predefined_type ( '*' )+ | predefined_type | 'void' ( '*' )+ );
    public csParser.non_nullable_type_return non_nullable_type() // throws RecognitionException [1]
    {   
        csParser.non_nullable_type_return retval = new csParser.non_nullable_type_return();
        retval.Start = input.LT(1);
        int non_nullable_type_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal122 = null;
        IToken char_literal124 = null;
        IToken char_literal127 = null;
        IToken string_literal129 = null;
        IToken char_literal130 = null;
        csParser.type_name_return type_name119 = default(csParser.type_name_return);

        csParser.predefined_type_return predefined_type120 = default(csParser.predefined_type_return);

        csParser.rank_specifiers_return rank_specifiers121 = default(csParser.rank_specifiers_return);

        csParser.type_name_return type_name123 = default(csParser.type_name_return);

        csParser.type_name_return type_name125 = default(csParser.type_name_return);

        csParser.predefined_type_return predefined_type126 = default(csParser.predefined_type_return);

        csParser.predefined_type_return predefined_type128 = default(csParser.predefined_type_return);


        object char_literal122_tree=null;
        object char_literal124_tree=null;
        object char_literal127_tree=null;
        object string_literal129_tree=null;
        object char_literal130_tree=null;

         const string elementName = "non_nullable_type"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 40) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:325:1: ( ( type_name | predefined_type ) rank_specifiers ( '*' )* | type_name ( '*' )+ | type_name | predefined_type ( '*' )+ | predefined_type | 'void' ( '*' )+ )
            int alt48 = 6;
            alt48 = dfa48.Predict(input);
            switch (alt48) 
            {
                case 1 :
                    // cs.g:326:2: ( type_name | predefined_type ) rank_specifiers ( '*' )*
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:326:2: ( type_name | predefined_type )
                    	int alt43 = 2;
                    	int LA43_0 = input.LA(1);

                    	if ( (LA43_0 == IDENTIFIER || LA43_0 == SET || LA43_0 == 95 || (LA43_0 >= 101 && LA43_0 <= 107) || LA43_0 == 109 || (LA43_0 >= 175 && LA43_0 <= 187) || LA43_0 == 199 || (LA43_0 >= 201 && LA43_0 <= 202) || LA43_0 == 208 || (LA43_0 >= 225 && LA43_0 <= 226)) )
                    	{
                    	    alt43 = 1;
                    	}
                    	else if ( ((LA43_0 >= 114 && LA43_0 <= 122) || (LA43_0 >= 132 && LA43_0 <= 137)) )
                    	{
                    	    alt43 = 2;
                    	}
                    	else 
                    	{
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    NoViableAltException nvae_d43s0 =
                    	        new NoViableAltException("", 43, 0, input);

                    	    throw nvae_d43s0;
                    	}
                    	switch (alt43) 
                    	{
                    	    case 1 :
                    	        // cs.g:326:3: type_name
                    	        {
                    	        	PushFollow(FOLLOW_type_name_in_non_nullable_type1532);
                    	        	type_name119 = type_name();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name119.Tree);

                    	        }
                    	        break;
                    	    case 2 :
                    	        // cs.g:326:19: predefined_type
                    	        {
                    	        	PushFollow(FOLLOW_predefined_type_in_non_nullable_type1540);
                    	        	predefined_type120 = predefined_type();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type120.Tree);

                    	        }
                    	        break;

                    	}

                    	PushFollow(FOLLOW_rank_specifiers_in_non_nullable_type1545);
                    	rank_specifiers121 = rank_specifiers();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rank_specifiers121.Tree);
                    	// cs.g:326:56: ( '*' )*
                    	do 
                    	{
                    	    int alt44 = 2;
                    	    alt44 = dfa44.Predict(input);
                    	    switch (alt44) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: '*'
                    			    {
                    			    	char_literal122=(IToken)Match(input,111,FOLLOW_111_in_non_nullable_type1549); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{char_literal122_tree = (object)adaptor.Create(char_literal122);
                    			    		adaptor.AddChild(root_0, char_literal122_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    goto loop44;
                    	    }
                    	} while (true);

                    	loop44:
                    		;	// Stops C# compiler whining that label 'loop44' has no statements


                    }
                    break;
                case 2 :
                    // cs.g:327:4: type_name ( '*' )+
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_type_name_in_non_nullable_type1555);
                    	type_name123 = type_name();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name123.Tree);
                    	// cs.g:327:14: ( '*' )+
                    	int cnt45 = 0;
                    	do 
                    	{
                    	    int alt45 = 2;
                    	    alt45 = dfa45.Predict(input);
                    	    switch (alt45) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: '*'
                    			    {
                    			    	char_literal124=(IToken)Match(input,111,FOLLOW_111_in_non_nullable_type1557); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{char_literal124_tree = (object)adaptor.Create(char_literal124);
                    			    		adaptor.AddChild(root_0, char_literal124_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt45 >= 1 ) goto loop45;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee45 =
                    		                new EarlyExitException(45, input);
                    		            throw eee45;
                    	    }
                    	    cnt45++;
                    	} while (true);

                    	loop45:
                    		;	// Stops C# compiler whining that label 'loop45' has no statements


                    }
                    break;
                case 3 :
                    // cs.g:328:4: type_name
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_type_name_in_non_nullable_type1563);
                    	type_name125 = type_name();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name125.Tree);

                    }
                    break;
                case 4 :
                    // cs.g:329:4: predefined_type ( '*' )+
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_predefined_type_in_non_nullable_type1568);
                    	predefined_type126 = predefined_type();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type126.Tree);
                    	// cs.g:329:20: ( '*' )+
                    	int cnt46 = 0;
                    	do 
                    	{
                    	    int alt46 = 2;
                    	    alt46 = dfa46.Predict(input);
                    	    switch (alt46) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: '*'
                    			    {
                    			    	char_literal127=(IToken)Match(input,111,FOLLOW_111_in_non_nullable_type1570); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{char_literal127_tree = (object)adaptor.Create(char_literal127);
                    			    		adaptor.AddChild(root_0, char_literal127_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt46 >= 1 ) goto loop46;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee46 =
                    		                new EarlyExitException(46, input);
                    		            throw eee46;
                    	    }
                    	    cnt46++;
                    	} while (true);

                    	loop46:
                    		;	// Stops C# compiler whining that label 'loop46' has no statements


                    }
                    break;
                case 5 :
                    // cs.g:330:4: predefined_type
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_predefined_type_in_non_nullable_type1576);
                    	predefined_type128 = predefined_type();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type128.Tree);

                    }
                    break;
                case 6 :
                    // cs.g:331:4: 'void' ( '*' )+
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal129=(IToken)Match(input,113,FOLLOW_113_in_non_nullable_type1581); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal129_tree = (object)adaptor.Create(string_literal129);
                    		adaptor.AddChild(root_0, string_literal129_tree);
                    	}
                    	// cs.g:331:13: ( '*' )+
                    	int cnt47 = 0;
                    	do 
                    	{
                    	    int alt47 = 2;
                    	    alt47 = dfa47.Predict(input);
                    	    switch (alt47) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: '*'
                    			    {
                    			    	char_literal130=(IToken)Match(input,111,FOLLOW_111_in_non_nullable_type1585); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{char_literal130_tree = (object)adaptor.Create(char_literal130);
                    			    		adaptor.AddChild(root_0, char_literal130_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt47 >= 1 ) goto loop47;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee47 =
                    		                new EarlyExitException(47, input);
                    		            throw eee47;
                    	    }
                    	    cnt47++;
                    	} while (true);

                    	loop47:
                    		;	// Stops C# compiler whining that label 'loop47' has no statements


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 40, non_nullable_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "non_nullable_type"

    public class type_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "type_list"
    // cs.g:332:1: type_list : type ( ',' type )* ;
    public csParser.type_list_return type_list() // throws RecognitionException [1]
    {   
        csParser.type_list_return retval = new csParser.type_list_return();
        retval.Start = input.LT(1);
        int type_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal132 = null;
        csParser.type_return type131 = default(csParser.type_return);

        csParser.type_return type133 = default(csParser.type_return);


        object char_literal132_tree=null;

         const string elementName = "type_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 41) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:335:1: ( type ( ',' type )* )
            // cs.g:336:2: type ( ',' type )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_type_in_type_list1606);
            	type131 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type131.Tree);
            	// cs.g:336:7: ( ',' type )*
            	do 
            	{
            	    int alt49 = 2;
            	    int LA49_0 = input.LA(1);

            	    if ( (LA49_0 == 98) )
            	    {
            	        alt49 = 1;
            	    }


            	    switch (alt49) 
            		{
            			case 1 :
            			    // cs.g:336:8: ',' type
            			    {
            			    	char_literal132=(IToken)Match(input,98,FOLLOW_98_in_type_list1609); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal132_tree = (object)adaptor.Create(char_literal132);
            			    		adaptor.AddChild(root_0, char_literal132_tree);
            			    	}
            			    	PushFollow(FOLLOW_type_in_type_list1611);
            			    	type133 = type();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type133.Tree);

            			    }
            			    break;

            			default:
            			    goto loop49;
            	    }
            	} while (true);

            	loop49:
            		;	// Stops C# compiler whining that label 'loop49' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 41, type_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_list"

    public class class_type_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "class_type"
    // cs.g:337:1: class_type : type ;
    public csParser.class_type_return class_type() // throws RecognitionException [1]
    {   
        csParser.class_type_return retval = new csParser.class_type_return();
        retval.Start = input.LT(1);
        int class_type_StartIndex = input.Index();
        object root_0 = null;

        csParser.type_return type134 = default(csParser.type_return);



         const string elementName = "class_type"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 42) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:340:1: ( type )
            // cs.g:341:2: type
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_type_in_class_type1633);
            	type134 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type134.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 42, class_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "class_type"

    public class non_array_type_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "non_array_type"
    // cs.g:342:1: non_array_type : type ;
    public csParser.non_array_type_return non_array_type() // throws RecognitionException [1]
    {   
        csParser.non_array_type_return retval = new csParser.non_array_type_return();
        retval.Start = input.LT(1);
        int non_array_type_StartIndex = input.Index();
        object root_0 = null;

        csParser.type_return type135 = default(csParser.type_return);



         const string elementName = "non_array_type"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 43) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:345:1: ( type )
            // cs.g:346:2: type
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_type_in_non_array_type1652);
            	type135 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type135.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 43, non_array_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "non_array_type"

    public class array_type_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "array_type"
    // cs.g:347:1: array_type : type ;
    public csParser.array_type_return array_type() // throws RecognitionException [1]
    {   
        csParser.array_type_return retval = new csParser.array_type_return();
        retval.Start = input.LT(1);
        int array_type_StartIndex = input.Index();
        object root_0 = null;

        csParser.type_return type136 = default(csParser.type_return);



         const string elementName = "array_type"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 44) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:350:1: ( type )
            // cs.g:351:2: type
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_type_in_array_type1671);
            	type136 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type136.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 44, array_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "array_type"

    public class integral_type_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "integral_type"
    // cs.g:352:1: integral_type : ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' );
    public csParser.integral_type_return integral_type() // throws RecognitionException [1]
    {   
        csParser.integral_type_return retval = new csParser.integral_type_return();
        retval.Start = input.LT(1);
        int integral_type_StartIndex = input.Index();
        object root_0 = null;

        IToken set137 = null;

        object set137_tree=null;

         const string elementName = "integral_type"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 45) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:355:1: ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set137 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= 114 && input.LA(1) <= 122) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set137));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 45, integral_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "integral_type"

    public class unmanaged_type_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "unmanaged_type"
    // cs.g:357:1: unmanaged_type : type ;
    public csParser.unmanaged_type_return unmanaged_type() // throws RecognitionException [1]
    {   
        csParser.unmanaged_type_return retval = new csParser.unmanaged_type_return();
        retval.Start = input.LT(1);
        int unmanaged_type_StartIndex = input.Index();
        object root_0 = null;

        csParser.type_return type138 = default(csParser.type_return);



         const string elementName = "unmanaged_type"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 46) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:360:1: ( type )
            // cs.g:361:2: type
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_type_in_unmanaged_type1742);
            	type138 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type138.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 46, unmanaged_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unmanaged_type"

    public class pointer_type_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "pointer_type"
    // cs.g:362:1: pointer_type : type ;
    public csParser.pointer_type_return pointer_type() // throws RecognitionException [1]
    {   
        csParser.pointer_type_return retval = new csParser.pointer_type_return();
        retval.Start = input.LT(1);
        int pointer_type_StartIndex = input.Index();
        object root_0 = null;

        csParser.type_return type139 = default(csParser.type_return);



         const string elementName = "pointer_type"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 47) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:365:1: ( type )
            // cs.g:366:2: type
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_type_in_pointer_type1761);
            	type139 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type139.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 47, pointer_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "pointer_type"

    public class rank_specifiers_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "rank_specifiers"
    // cs.g:367:1: rank_specifiers : ( rank_specifier )+ ;
    public csParser.rank_specifiers_return rank_specifiers() // throws RecognitionException [1]
    {   
        csParser.rank_specifiers_return retval = new csParser.rank_specifiers_return();
        retval.Start = input.LT(1);
        int rank_specifiers_StartIndex = input.Index();
        object root_0 = null;

        csParser.rank_specifier_return rank_specifier140 = default(csParser.rank_specifier_return);



         const string elementName = "rank_specifiers"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 48) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:370:1: ( ( rank_specifier )+ )
            // cs.g:371:2: ( rank_specifier )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:371:2: ( rank_specifier )+
            	int cnt50 = 0;
            	do 
            	{
            	    int alt50 = 2;
            	    int LA50_0 = input.LA(1);

            	    if ( (LA50_0 == 97) )
            	    {
            	        int LA50_2 = input.LA(2);

            	        if ( ((LA50_2 >= 98 && LA50_2 <= 99)) )
            	        {
            	            alt50 = 1;
            	        }


            	    }


            	    switch (alt50) 
            		{
            			case 1 :
            			    // cs.g:0:0: rank_specifier
            			    {
            			    	PushFollow(FOLLOW_rank_specifier_in_rank_specifiers1780);
            			    	rank_specifier140 = rank_specifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rank_specifier140.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt50 >= 1 ) goto loop50;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee50 =
            		                new EarlyExitException(50, input);
            		            throw eee50;
            	    }
            	    cnt50++;
            	} while (true);

            	loop50:
            		;	// Stops C# compiler whining that label 'loop50' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 48, rank_specifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "rank_specifiers"

    public class rank_specifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "rank_specifier"
    // cs.g:372:1: rank_specifier : '[' ( dim_separators )? ']' ;
    public csParser.rank_specifier_return rank_specifier() // throws RecognitionException [1]
    {   
        csParser.rank_specifier_return retval = new csParser.rank_specifier_return();
        retval.Start = input.LT(1);
        int rank_specifier_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal141 = null;
        IToken char_literal143 = null;
        csParser.dim_separators_return dim_separators142 = default(csParser.dim_separators_return);


        object char_literal141_tree=null;
        object char_literal143_tree=null;

         const string elementName = "rank_specifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 49) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:375:1: ( '[' ( dim_separators )? ']' )
            // cs.g:376:2: '[' ( dim_separators )? ']'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal141=(IToken)Match(input,97,FOLLOW_97_in_rank_specifier1809); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal141_tree = (object)adaptor.Create(char_literal141);
            		adaptor.AddChild(root_0, char_literal141_tree);
            	}
            	// cs.g:376:8: ( dim_separators )?
            	int alt51 = 2;
            	int LA51_0 = input.LA(1);

            	if ( (LA51_0 == 98) )
            	{
            	    alt51 = 1;
            	}
            	switch (alt51) 
            	{
            	    case 1 :
            	        // cs.g:0:0: dim_separators
            	        {
            	        	PushFollow(FOLLOW_dim_separators_in_rank_specifier1813);
            	        	dim_separators142 = dim_separators();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, dim_separators142.Tree);

            	        }
            	        break;

            	}

            	char_literal143=(IToken)Match(input,99,FOLLOW_99_in_rank_specifier1818); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal143_tree = (object)adaptor.Create(char_literal143);
            		adaptor.AddChild(root_0, char_literal143_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 49, rank_specifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "rank_specifier"

    public class dim_separators_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "dim_separators"
    // cs.g:377:1: dim_separators : ( ',' )+ ;
    public csParser.dim_separators_return dim_separators() // throws RecognitionException [1]
    {   
        csParser.dim_separators_return retval = new csParser.dim_separators_return();
        retval.Start = input.LT(1);
        int dim_separators_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal144 = null;

        object char_literal144_tree=null;

         const string elementName = "dim_separators"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 50) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:380:1: ( ( ',' )+ )
            // cs.g:381:2: ( ',' )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:381:2: ( ',' )+
            	int cnt52 = 0;
            	do 
            	{
            	    int alt52 = 2;
            	    int LA52_0 = input.LA(1);

            	    if ( (LA52_0 == 98) )
            	    {
            	        alt52 = 1;
            	    }


            	    switch (alt52) 
            		{
            			case 1 :
            			    // cs.g:0:0: ','
            			    {
            			    	char_literal144=(IToken)Match(input,98,FOLLOW_98_in_dim_separators1838); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal144_tree = (object)adaptor.Create(char_literal144);
            			    		adaptor.AddChild(root_0, char_literal144_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt52 >= 1 ) goto loop52;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee52 =
            		                new EarlyExitException(52, input);
            		            throw eee52;
            	    }
            	    cnt52++;
            	} while (true);

            	loop52:
            		;	// Stops C# compiler whining that label 'loop52' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 50, dim_separators_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "dim_separators"

    public class generic_argument_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "generic_argument_list"
    // cs.g:382:1: generic_argument_list : '<' type_arguments '>' ;
    public csParser.generic_argument_list_return generic_argument_list() // throws RecognitionException [1]
    {   
        csParser.generic_argument_list_return retval = new csParser.generic_argument_list_return();
        retval.Start = input.LT(1);
        int generic_argument_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal145 = null;
        IToken char_literal147 = null;
        csParser.type_arguments_return type_arguments146 = default(csParser.type_arguments_return);


        object char_literal145_tree=null;
        object char_literal147_tree=null;

         const string elementName = "generic_argument_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 51) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:385:1: ( '<' type_arguments '>' )
            // cs.g:386:2: '<' type_arguments '>'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal145=(IToken)Match(input,123,FOLLOW_123_in_generic_argument_list1859); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal145_tree = (object)adaptor.Create(char_literal145);
            		adaptor.AddChild(root_0, char_literal145_tree);
            	}
            	PushFollow(FOLLOW_type_arguments_in_generic_argument_list1863);
            	type_arguments146 = type_arguments();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_arguments146.Tree);
            	char_literal147=(IToken)Match(input,GT,FOLLOW_GT_in_generic_argument_list1867); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal147_tree = (object)adaptor.Create(char_literal147);
            		adaptor.AddChild(root_0, char_literal147_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 51, generic_argument_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "generic_argument_list"

    public class type_arguments_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "type_arguments"
    // cs.g:387:1: type_arguments : ta+= type_argument ( ',' ta+= type_argument )* ;
    public csParser.type_arguments_return type_arguments() // throws RecognitionException [1]
    {   
        csParser.type_arguments_return retval = new csParser.type_arguments_return();
        retval.Start = input.LT(1);
        int type_arguments_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal148 = null;
        IList list_ta = null;
        csParser.type_argument_return ta = default(csParser.type_argument_return);
         ta = null;
        object char_literal148_tree=null;

         const string elementName = "type_arguments"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 52) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:390:1: (ta+= type_argument ( ',' ta+= type_argument )* )
            // cs.g:391:2: ta+= type_argument ( ',' ta+= type_argument )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_type_argument_in_type_arguments1891);
            	ta = type_argument();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ta.Tree);
            	if (list_ta == null) list_ta = new ArrayList();
            	list_ta.Add(ta.Tree);

            	// cs.g:391:22: ( ',' ta+= type_argument )*
            	do 
            	{
            	    int alt53 = 2;
            	    int LA53_0 = input.LA(1);

            	    if ( (LA53_0 == 98) )
            	    {
            	        alt53 = 1;
            	    }


            	    switch (alt53) 
            		{
            			case 1 :
            			    // cs.g:391:23: ',' ta+= type_argument
            			    {
            			    	char_literal148=(IToken)Match(input,98,FOLLOW_98_in_type_arguments1894); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal148_tree = (object)adaptor.Create(char_literal148);
            			    		adaptor.AddChild(root_0, char_literal148_tree);
            			    	}
            			    	PushFollow(FOLLOW_type_argument_in_type_arguments1900);
            			    	ta = type_argument();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ta.Tree);
            			    	if (list_ta == null) list_ta = new ArrayList();
            			    	list_ta.Add(ta.Tree);


            			    }
            			    break;

            			default:
            			    goto loop53;
            	    }
            	} while (true);

            	loop53:
            		;	// Stops C# compiler whining that label 'loop53' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 52, type_arguments_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_arguments"

    public class type_argument_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "type_argument"
    // cs.g:393:1: type_argument : type ;
    public csParser.type_argument_return type_argument() // throws RecognitionException [1]
    {   
        csParser.type_argument_return retval = new csParser.type_argument_return();
        retval.Start = input.LT(1);
        int type_argument_StartIndex = input.Index();
        object root_0 = null;

        csParser.type_return type149 = default(csParser.type_return);



         const string elementName = "type_argument"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 53) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:396:1: ( type )
            // cs.g:397:2: type
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_type_in_type_argument1925);
            	type149 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type149.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 53, type_argument_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_argument"

    public class type_variable_name_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "type_variable_name"
    // cs.g:398:1: type_variable_name : identifier ;
    public csParser.type_variable_name_return type_variable_name() // throws RecognitionException [1]
    {   
        csParser.type_variable_name_return retval = new csParser.type_variable_name_return();
        retval.Start = input.LT(1);
        int type_variable_name_StartIndex = input.Index();
        object root_0 = null;

        csParser.identifier_return identifier150 = default(csParser.identifier_return);



         const string elementName = "type_variable_name"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 54) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:401:1: ( identifier )
            // cs.g:402:2: identifier
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_identifier_in_type_variable_name1945);
            	identifier150 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier150.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 54, type_variable_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_variable_name"

    public class expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "expression"
    // cs.g:406:1: expression : ( non_assignment_expression | assignment );
    public csParser.expression_return expression() // throws RecognitionException [1]
    {   
        csParser.expression_return retval = new csParser.expression_return();
        retval.Start = input.LT(1);
        int expression_StartIndex = input.Index();
        object root_0 = null;

        csParser.non_assignment_expression_return non_assignment_expression151 = default(csParser.non_assignment_expression_return);

        csParser.assignment_return assignment152 = default(csParser.assignment_return);



         const string elementName = "expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 55) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:409:1: ( non_assignment_expression | assignment )
            int alt54 = 2;
            alt54 = dfa54.Predict(input);
            switch (alt54) 
            {
                case 1 :
                    // cs.g:410:2: non_assignment_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_non_assignment_expression_in_expression1968);
                    	non_assignment_expression151 = non_assignment_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, non_assignment_expression151.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:411:4: assignment
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_assignment_in_expression1973);
                    	assignment152 = assignment();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignment152.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 55, expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public class unary_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "unary_expression"
    // cs.g:412:1: unary_expression : ( cast_expression | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | '*' unary_expression | pre_increment_expression | pre_decrement_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | pointer_indirection_expression | addressof_expression );
    public csParser.unary_expression_return unary_expression() // throws RecognitionException [1]
    {   
        csParser.unary_expression_return retval = new csParser.unary_expression_return();
        retval.Start = input.LT(1);
        int unary_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal154 = null;
        IToken char_literal156 = null;
        IToken char_literal158 = null;
        IToken char_literal160 = null;
        IToken char_literal162 = null;
        IToken string_literal167 = null;
        IToken string_literal168 = null;
        csParser.cast_expression_return cast_expression153 = default(csParser.cast_expression_return);

        csParser.unary_expression_return unary_expression155 = default(csParser.unary_expression_return);

        csParser.unary_expression_return unary_expression157 = default(csParser.unary_expression_return);

        csParser.unary_expression_return unary_expression159 = default(csParser.unary_expression_return);

        csParser.unary_expression_return unary_expression161 = default(csParser.unary_expression_return);

        csParser.unary_expression_return unary_expression163 = default(csParser.unary_expression_return);

        csParser.pre_increment_expression_return pre_increment_expression164 = default(csParser.pre_increment_expression_return);

        csParser.pre_decrement_expression_return pre_decrement_expression165 = default(csParser.pre_decrement_expression_return);

        csParser.primary_or_array_creation_expression_return primary_or_array_creation_expression166 = default(csParser.primary_or_array_creation_expression_return);

        csParser.pointer_indirection_expression_return pointer_indirection_expression169 = default(csParser.pointer_indirection_expression_return);

        csParser.addressof_expression_return addressof_expression170 = default(csParser.addressof_expression_return);


        object char_literal154_tree=null;
        object char_literal156_tree=null;
        object char_literal158_tree=null;
        object char_literal160_tree=null;
        object char_literal162_tree=null;
        object string_literal167_tree=null;
        object string_literal168_tree=null;

         const string elementName = "unary_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 56) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:415:1: ( cast_expression | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | '*' unary_expression | pre_increment_expression | pre_decrement_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | pointer_indirection_expression | addressof_expression )
            int alt57 = 11;
            alt57 = dfa57.Predict(input);
            switch (alt57) 
            {
                case 1 :
                    // cs.g:416:2: cast_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_cast_expression_in_unary_expression1993);
                    	cast_expression153 = cast_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, cast_expression153.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:417:4: '+' unary_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal154=(IToken)Match(input,124,FOLLOW_124_in_unary_expression2002); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal154_tree = (object)adaptor.Create(char_literal154);
                    		adaptor.AddChild(root_0, char_literal154_tree);
                    	}
                    	PushFollow(FOLLOW_unary_expression_in_unary_expression2006);
                    	unary_expression155 = unary_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression155.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:418:4: '-' unary_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal156=(IToken)Match(input,MINUS,FOLLOW_MINUS_in_unary_expression2012); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal156_tree = (object)adaptor.Create(char_literal156);
                    		adaptor.AddChild(root_0, char_literal156_tree);
                    	}
                    	PushFollow(FOLLOW_unary_expression_in_unary_expression2016);
                    	unary_expression157 = unary_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression157.Tree);

                    }
                    break;
                case 4 :
                    // cs.g:419:4: '!' unary_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal158=(IToken)Match(input,125,FOLLOW_125_in_unary_expression2022); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal158_tree = (object)adaptor.Create(char_literal158);
                    		adaptor.AddChild(root_0, char_literal158_tree);
                    	}
                    	PushFollow(FOLLOW_unary_expression_in_unary_expression2026);
                    	unary_expression159 = unary_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression159.Tree);

                    }
                    break;
                case 5 :
                    // cs.g:420:4: '~' unary_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal160=(IToken)Match(input,126,FOLLOW_126_in_unary_expression2032); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal160_tree = (object)adaptor.Create(char_literal160);
                    		adaptor.AddChild(root_0, char_literal160_tree);
                    	}
                    	PushFollow(FOLLOW_unary_expression_in_unary_expression2036);
                    	unary_expression161 = unary_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression161.Tree);

                    }
                    break;
                case 6 :
                    // cs.g:421:4: '*' unary_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal162=(IToken)Match(input,111,FOLLOW_111_in_unary_expression2042); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal162_tree = (object)adaptor.Create(char_literal162);
                    		adaptor.AddChild(root_0, char_literal162_tree);
                    	}
                    	PushFollow(FOLLOW_unary_expression_in_unary_expression2046);
                    	unary_expression163 = unary_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression163.Tree);

                    }
                    break;
                case 7 :
                    // cs.g:422:4: pre_increment_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_pre_increment_expression_in_unary_expression2051);
                    	pre_increment_expression164 = pre_increment_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, pre_increment_expression164.Tree);

                    }
                    break;
                case 8 :
                    // cs.g:423:4: pre_decrement_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_pre_decrement_expression_in_unary_expression2057);
                    	pre_decrement_expression165 = pre_decrement_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, pre_decrement_expression165.Tree);

                    }
                    break;
                case 9 :
                    // cs.g:424:4: primary_or_array_creation_expression ( '++' )? ( '--' )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_primary_or_array_creation_expression_in_unary_expression2063);
                    	primary_or_array_creation_expression166 = primary_or_array_creation_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_or_array_creation_expression166.Tree);
                    	// cs.g:424:43: ( '++' )?
                    	int alt55 = 2;
                    	alt55 = dfa55.Predict(input);
                    	switch (alt55) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: '++'
                    	        {
                    	        	string_literal167=(IToken)Match(input,127,FOLLOW_127_in_unary_expression2067); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{string_literal167_tree = (object)adaptor.Create(string_literal167);
                    	        		adaptor.AddChild(root_0, string_literal167_tree);
                    	        	}

                    	        }
                    	        break;

                    	}

                    	// cs.g:424:51: ( '--' )?
                    	int alt56 = 2;
                    	alt56 = dfa56.Predict(input);
                    	switch (alt56) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: '--'
                    	        {
                    	        	string_literal168=(IToken)Match(input,128,FOLLOW_128_in_unary_expression2072); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{string_literal168_tree = (object)adaptor.Create(string_literal168);
                    	        		adaptor.AddChild(root_0, string_literal168_tree);
                    	        	}

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 10 :
                    // cs.g:425:4: pointer_indirection_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_pointer_indirection_expression_in_unary_expression2078);
                    	pointer_indirection_expression169 = pointer_indirection_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, pointer_indirection_expression169.Tree);

                    }
                    break;
                case 11 :
                    // cs.g:426:4: addressof_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_addressof_expression_in_unary_expression2083);
                    	addressof_expression170 = addressof_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, addressof_expression170.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 56, unary_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unary_expression"

    public class pre_increment_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "pre_increment_expression"
    // cs.g:427:1: pre_increment_expression : '++' unary_expression ;
    public csParser.pre_increment_expression_return pre_increment_expression() // throws RecognitionException [1]
    {   
        csParser.pre_increment_expression_return retval = new csParser.pre_increment_expression_return();
        retval.Start = input.LT(1);
        int pre_increment_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal171 = null;
        csParser.unary_expression_return unary_expression172 = default(csParser.unary_expression_return);


        object string_literal171_tree=null;

         const string elementName = "pre_increment_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 57) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:430:1: ( '++' unary_expression )
            // cs.g:431:2: '++' unary_expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal171=(IToken)Match(input,127,FOLLOW_127_in_pre_increment_expression2103); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal171_tree = (object)adaptor.Create(string_literal171);
            		adaptor.AddChild(root_0, string_literal171_tree);
            	}
            	PushFollow(FOLLOW_unary_expression_in_pre_increment_expression2107);
            	unary_expression172 = unary_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression172.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 57, pre_increment_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "pre_increment_expression"

    public class pre_decrement_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "pre_decrement_expression"
    // cs.g:432:1: pre_decrement_expression : '--' unary_expression ;
    public csParser.pre_decrement_expression_return pre_decrement_expression() // throws RecognitionException [1]
    {   
        csParser.pre_decrement_expression_return retval = new csParser.pre_decrement_expression_return();
        retval.Start = input.LT(1);
        int pre_decrement_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal173 = null;
        csParser.unary_expression_return unary_expression174 = default(csParser.unary_expression_return);


        object string_literal173_tree=null;

         const string elementName = "pre_decrement_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 58) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:435:1: ( '--' unary_expression )
            // cs.g:436:2: '--' unary_expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal173=(IToken)Match(input,128,FOLLOW_128_in_pre_decrement_expression2127); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal173_tree = (object)adaptor.Create(string_literal173);
            		adaptor.AddChild(root_0, string_literal173_tree);
            	}
            	PushFollow(FOLLOW_unary_expression_in_pre_decrement_expression2131);
            	unary_expression174 = unary_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression174.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 58, pre_decrement_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "pre_decrement_expression"

    public class pointer_indirection_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "pointer_indirection_expression"
    // cs.g:437:1: pointer_indirection_expression : '*' unary_expression ;
    public csParser.pointer_indirection_expression_return pointer_indirection_expression() // throws RecognitionException [1]
    {   
        csParser.pointer_indirection_expression_return retval = new csParser.pointer_indirection_expression_return();
        retval.Start = input.LT(1);
        int pointer_indirection_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal175 = null;
        csParser.unary_expression_return unary_expression176 = default(csParser.unary_expression_return);


        object char_literal175_tree=null;

         const string elementName = "pointer_indirection_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 59) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:440:1: ( '*' unary_expression )
            // cs.g:441:2: '*' unary_expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal175=(IToken)Match(input,111,FOLLOW_111_in_pointer_indirection_expression2151); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal175_tree = (object)adaptor.Create(char_literal175);
            		adaptor.AddChild(root_0, char_literal175_tree);
            	}
            	PushFollow(FOLLOW_unary_expression_in_pointer_indirection_expression2155);
            	unary_expression176 = unary_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression176.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 59, pointer_indirection_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "pointer_indirection_expression"

    public class addressof_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "addressof_expression"
    // cs.g:442:1: addressof_expression : '&' unary_expression ;
    public csParser.addressof_expression_return addressof_expression() // throws RecognitionException [1]
    {   
        csParser.addressof_expression_return retval = new csParser.addressof_expression_return();
        retval.Start = input.LT(1);
        int addressof_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal177 = null;
        csParser.unary_expression_return unary_expression178 = default(csParser.unary_expression_return);


        object char_literal177_tree=null;

         const string elementName = "addressof_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 60) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:445:1: ( '&' unary_expression )
            // cs.g:446:2: '&' unary_expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal177=(IToken)Match(input,129,FOLLOW_129_in_addressof_expression2175); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal177_tree = (object)adaptor.Create(char_literal177);
            		adaptor.AddChild(root_0, char_literal177_tree);
            	}
            	PushFollow(FOLLOW_unary_expression_in_addressof_expression2179);
            	unary_expression178 = unary_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression178.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 60, addressof_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "addressof_expression"

    public class non_assignment_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "non_assignment_expression"
    // cs.g:447:1: non_assignment_expression : ( conditional_expression | lambda_expression | query_expression );
    public csParser.non_assignment_expression_return non_assignment_expression() // throws RecognitionException [1]
    {   
        csParser.non_assignment_expression_return retval = new csParser.non_assignment_expression_return();
        retval.Start = input.LT(1);
        int non_assignment_expression_StartIndex = input.Index();
        object root_0 = null;

        csParser.conditional_expression_return conditional_expression179 = default(csParser.conditional_expression_return);

        csParser.lambda_expression_return lambda_expression180 = default(csParser.lambda_expression_return);

        csParser.query_expression_return query_expression181 = default(csParser.query_expression_return);



         const string elementName = "non_assignment_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 61) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:450:1: ( conditional_expression | lambda_expression | query_expression )
            int alt58 = 3;
            alt58 = dfa58.Predict(input);
            switch (alt58) 
            {
                case 1 :
                    // cs.g:451:2: conditional_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_conditional_expression_in_non_assignment_expression2199);
                    	conditional_expression179 = conditional_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, conditional_expression179.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:452:4: lambda_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_lambda_expression_in_non_assignment_expression2204);
                    	lambda_expression180 = lambda_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, lambda_expression180.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:453:4: query_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_query_expression_in_non_assignment_expression2209);
                    	query_expression181 = query_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, query_expression181.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 61, non_assignment_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "non_assignment_expression"

    public class assignment_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "assignment"
    // cs.g:454:1: assignment : unary_expression assignment_operator expression ;
    public csParser.assignment_return assignment() // throws RecognitionException [1]
    {   
        csParser.assignment_return retval = new csParser.assignment_return();
        retval.Start = input.LT(1);
        int assignment_StartIndex = input.Index();
        object root_0 = null;

        csParser.unary_expression_return unary_expression182 = default(csParser.unary_expression_return);

        csParser.assignment_operator_return assignment_operator183 = default(csParser.assignment_operator_return);

        csParser.expression_return expression184 = default(csParser.expression_return);



         const string elementName = "assignment"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 62) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:457:1: ( unary_expression assignment_operator expression )
            // cs.g:458:2: unary_expression assignment_operator expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_unary_expression_in_assignment2228);
            	unary_expression182 = unary_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression182.Tree);
            	PushFollow(FOLLOW_assignment_operator_in_assignment2232);
            	assignment_operator183 = assignment_operator();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignment_operator183.Tree);
            	PushFollow(FOLLOW_expression_in_assignment2236);
            	expression184 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression184.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 62, assignment_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "assignment"

    public class variable_reference_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "variable_reference"
    // cs.g:460:1: variable_reference : expression ;
    public csParser.variable_reference_return variable_reference() // throws RecognitionException [1]
    {   
        csParser.variable_reference_return retval = new csParser.variable_reference_return();
        retval.Start = input.LT(1);
        int variable_reference_StartIndex = input.Index();
        object root_0 = null;

        csParser.expression_return expression185 = default(csParser.expression_return);



         const string elementName = "variable_reference"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 63) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:463:1: ( expression )
            // cs.g:464:2: expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_expression_in_variable_reference2257);
            	expression185 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression185.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 63, variable_reference_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variable_reference"

    public class argument_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "argument_list"
    // cs.g:466:1: argument_list : a+= argument ( ',' a+= argument )* ;
    public csParser.argument_list_return argument_list() // throws RecognitionException [1]
    {   
        csParser.argument_list_return retval = new csParser.argument_list_return();
        retval.Start = input.LT(1);
        int argument_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal186 = null;
        IList list_a = null;
        csParser.argument_return a = default(csParser.argument_return);
         a = null;
        object char_literal186_tree=null;

         const string elementName = "argument_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 64) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:469:1: (a+= argument ( ',' a+= argument )* )
            // cs.g:470:2: a+= argument ( ',' a+= argument )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_argument_in_argument_list2283);
            	a = argument();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, a.Tree);
            	if (list_a == null) list_a = new ArrayList();
            	list_a.Add(a.Tree);

            	// cs.g:470:16: ( ',' a+= argument )*
            	do 
            	{
            	    int alt59 = 2;
            	    int LA59_0 = input.LA(1);

            	    if ( (LA59_0 == 98) )
            	    {
            	        alt59 = 1;
            	    }


            	    switch (alt59) 
            		{
            			case 1 :
            			    // cs.g:470:17: ',' a+= argument
            			    {
            			    	char_literal186=(IToken)Match(input,98,FOLLOW_98_in_argument_list2286); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal186_tree = (object)adaptor.Create(char_literal186);
            			    		adaptor.AddChild(root_0, char_literal186_tree);
            			    	}
            			    	PushFollow(FOLLOW_argument_in_argument_list2292);
            			    	a = argument();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, a.Tree);
            			    	if (list_a == null) list_a = new ArrayList();
            			    	list_a.Add(a.Tree);


            			    }
            			    break;

            			default:
            			    goto loop59;
            	    }
            	} while (true);

            	loop59:
            		;	// Stops C# compiler whining that label 'loop59' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 64, argument_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "argument_list"

    public class argument_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "argument"
    // cs.g:472:1: argument : ( argument_name argument_value | argument_value );
    public csParser.argument_return argument() // throws RecognitionException [1]
    {   
        csParser.argument_return retval = new csParser.argument_return();
        retval.Start = input.LT(1);
        int argument_StartIndex = input.Index();
        object root_0 = null;

        csParser.argument_name_return argument_name187 = default(csParser.argument_name_return);

        csParser.argument_value_return argument_value188 = default(csParser.argument_value_return);

        csParser.argument_value_return argument_value189 = default(csParser.argument_value_return);



         const string elementName = "argument"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 65) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:475:1: ( argument_name argument_value | argument_value )
            int alt60 = 2;
            switch ( input.LA(1) ) 
            {
            case IDENTIFIER:
            	{
                int LA60_1 = input.LA(2);

                if ( (LA60_1 == EOF || LA60_1 == IDENTIFIER || (LA60_1 >= DOT && LA60_1 <= GT) || LA60_1 == SET || LA60_1 == RPAREN || LA60_1 == 89 || (LA60_1 >= 95 && LA60_1 <= 98) || (LA60_1 >= 101 && LA60_1 <= 107) || (LA60_1 >= 109 && LA60_1 <= 112) || (LA60_1 >= 123 && LA60_1 <= 124) || (LA60_1 >= 127 && LA60_1 <= 129) || (LA60_1 >= 146 && LA60_1 <= 169) || (LA60_1 >= 175 && LA60_1 <= 187) || LA60_1 == 199 || (LA60_1 >= 201 && LA60_1 <= 202) || LA60_1 == 208 || (LA60_1 >= 225 && LA60_1 <= 226)) )
                {
                    alt60 = 2;
                }
                else if ( (LA60_1 == 100) )
                {
                    alt60 = 1;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d60s1 =
                        new NoViableAltException("", 60, 1, input);

                    throw nvae_d60s1;
                }
                }
                break;
            case 175:
            	{
                int LA60_2 = input.LA(2);

                if ( (LA60_2 == EOF || LA60_2 == IDENTIFIER || (LA60_2 >= DOT && LA60_2 <= GT) || LA60_2 == SET || LA60_2 == RPAREN || LA60_2 == 89 || (LA60_2 >= 95 && LA60_2 <= 98) || (LA60_2 >= 101 && LA60_2 <= 107) || (LA60_2 >= 109 && LA60_2 <= 124) || (LA60_2 >= 127 && LA60_2 <= 129) || (LA60_2 >= 132 && LA60_2 <= 137) || (LA60_2 >= 146 && LA60_2 <= 169) || (LA60_2 >= 175 && LA60_2 <= 187) || LA60_2 == 199 || (LA60_2 >= 201 && LA60_2 <= 202) || LA60_2 == 208 || (LA60_2 >= 225 && LA60_2 <= 226)) )
                {
                    alt60 = 2;
                }
                else if ( (LA60_2 == 100) )
                {
                    alt60 = 1;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d60s2 =
                        new NoViableAltException("", 60, 2, input);

                    throw nvae_d60s2;
                }
                }
                break;
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case STRINGLITERAL:
            case Verbatim_string_literal:
            case TRUE:
            case FALSE:
            case NULL:
            case MINUS:
            case 90:
            case 91:
            case 110:
            case 111:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            	{
                alt60 = 2;
                }
                break;
            case SET:
            case 95:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 109:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 199:
            case 201:
            case 202:
            case 208:
            case 225:
            case 226:
            	{
                int LA60_4 = input.LA(2);

                if ( (LA60_4 == EOF || LA60_4 == IDENTIFIER || (LA60_4 >= DOT && LA60_4 <= GT) || LA60_4 == SET || LA60_4 == RPAREN || LA60_4 == 89 || (LA60_4 >= 95 && LA60_4 <= 98) || (LA60_4 >= 101 && LA60_4 <= 107) || (LA60_4 >= 109 && LA60_4 <= 112) || (LA60_4 >= 123 && LA60_4 <= 124) || (LA60_4 >= 127 && LA60_4 <= 129) || (LA60_4 >= 146 && LA60_4 <= 169) || (LA60_4 >= 175 && LA60_4 <= 187) || LA60_4 == 199 || (LA60_4 >= 201 && LA60_4 <= 202) || LA60_4 == 208 || (LA60_4 >= 225 && LA60_4 <= 226)) )
                {
                    alt60 = 2;
                }
                else if ( (LA60_4 == 100) )
                {
                    alt60 = 1;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d60s4 =
                        new NoViableAltException("", 60, 4, input);

                    throw nvae_d60s4;
                }
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d60s0 =
            	        new NoViableAltException("", 60, 0, input);

            	    throw nvae_d60s0;
            }

            switch (alt60) 
            {
                case 1 :
                    // cs.g:476:2: argument_name argument_value
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_argument_name_in_argument2315);
                    	argument_name187 = argument_name();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argument_name187.Tree);
                    	PushFollow(FOLLOW_argument_value_in_argument2319);
                    	argument_value188 = argument_value();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argument_value188.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:477:4: argument_value
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_argument_value_in_argument2324);
                    	argument_value189 = argument_value();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argument_value189.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 65, argument_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "argument"

    public class argument_name_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "argument_name"
    // cs.g:478:1: argument_name : identifier ':' ;
    public csParser.argument_name_return argument_name() // throws RecognitionException [1]
    {   
        csParser.argument_name_return retval = new csParser.argument_name_return();
        retval.Start = input.LT(1);
        int argument_name_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal191 = null;
        csParser.identifier_return identifier190 = default(csParser.identifier_return);


        object char_literal191_tree=null;

         const string elementName = "argument_name"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 66) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:481:1: ( identifier ':' )
            // cs.g:482:2: identifier ':'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_identifier_in_argument_name2343);
            	identifier190 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier190.Tree);
            	char_literal191=(IToken)Match(input,100,FOLLOW_100_in_argument_name2347); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal191_tree = (object)adaptor.Create(char_literal191);
            		adaptor.AddChild(root_0, char_literal191_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 66, argument_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "argument_name"

    public class argument_value_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "argument_value"
    // cs.g:483:1: argument_value : ( expression | ref_variable_reference | 'out' variable_reference );
    public csParser.argument_value_return argument_value() // throws RecognitionException [1]
    {   
        csParser.argument_value_return retval = new csParser.argument_value_return();
        retval.Start = input.LT(1);
        int argument_value_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal194 = null;
        csParser.expression_return expression192 = default(csParser.expression_return);

        csParser.ref_variable_reference_return ref_variable_reference193 = default(csParser.ref_variable_reference_return);

        csParser.variable_reference_return variable_reference195 = default(csParser.variable_reference_return);


        object string_literal194_tree=null;

         const string elementName = "argument_value"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 67) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:486:1: ( expression | ref_variable_reference | 'out' variable_reference )
            int alt61 = 3;
            switch ( input.LA(1) ) 
            {
            case IDENTIFIER:
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case STRINGLITERAL:
            case Verbatim_string_literal:
            case TRUE:
            case FALSE:
            case NULL:
            case MINUS:
            case SET:
            case 90:
            case 91:
            case 95:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 109:
            case 110:
            case 111:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 199:
            case 201:
            case 202:
            case 208:
            case 225:
            case 226:
            	{
                alt61 = 1;
                }
                break;
            case 131:
            	{
                alt61 = 2;
                }
                break;
            case 130:
            	{
                alt61 = 3;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d61s0 =
            	        new NoViableAltException("", 61, 0, input);

            	    throw nvae_d61s0;
            }

            switch (alt61) 
            {
                case 1 :
                    // cs.g:487:2: expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_expression_in_argument_value2366);
                    	expression192 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression192.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:488:4: ref_variable_reference
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_ref_variable_reference_in_argument_value2372);
                    	ref_variable_reference193 = ref_variable_reference();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ref_variable_reference193.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:489:4: 'out' variable_reference
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal194=(IToken)Match(input,130,FOLLOW_130_in_argument_value2378); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal194_tree = (object)adaptor.Create(string_literal194);
                    		adaptor.AddChild(root_0, string_literal194_tree);
                    	}
                    	PushFollow(FOLLOW_variable_reference_in_argument_value2382);
                    	variable_reference195 = variable_reference();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_reference195.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 67, argument_value_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "argument_value"

    public class ref_variable_reference_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "ref_variable_reference"
    // cs.g:490:1: ref_variable_reference : ( 'ref' '(' ( ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )? | 'void' ( '*' )+ ( rank_specifiers )? ) ')' ref_variable_reference | 'ref' variable_reference );
    public csParser.ref_variable_reference_return ref_variable_reference() // throws RecognitionException [1]
    {   
        csParser.ref_variable_reference_return retval = new csParser.ref_variable_reference_return();
        retval.Start = input.LT(1);
        int ref_variable_reference_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal196 = null;
        IToken char_literal197 = null;
        IToken char_literal200 = null;
        IToken string_literal202 = null;
        IToken char_literal203 = null;
        IToken char_literal205 = null;
        IToken string_literal207 = null;
        csParser.namespace_or_type_name_return namespace_or_type_name198 = default(csParser.namespace_or_type_name_return);

        csParser.predefined_type_return predefined_type199 = default(csParser.predefined_type_return);

        csParser.rank_specifiers_return rank_specifiers201 = default(csParser.rank_specifiers_return);

        csParser.rank_specifiers_return rank_specifiers204 = default(csParser.rank_specifiers_return);

        csParser.ref_variable_reference_return ref_variable_reference206 = default(csParser.ref_variable_reference_return);

        csParser.variable_reference_return variable_reference208 = default(csParser.variable_reference_return);


        object string_literal196_tree=null;
        object char_literal197_tree=null;
        object char_literal200_tree=null;
        object string_literal202_tree=null;
        object char_literal203_tree=null;
        object char_literal205_tree=null;
        object string_literal207_tree=null;

         const string elementName = "ref_variable_reference"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 68) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:493:1: ( 'ref' '(' ( ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )? | 'void' ( '*' )+ ( rank_specifiers )? ) ')' ref_variable_reference | 'ref' variable_reference )
            int alt68 = 2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0 == 131) )
            {
                int LA68_1 = input.LA(2);

                if ( (synpred111_cs()) )
                {
                    alt68 = 1;
                }
                else if ( (true) )
                {
                    alt68 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d68s1 =
                        new NoViableAltException("", 68, 1, input);

                    throw nvae_d68s1;
                }
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d68s0 =
                    new NoViableAltException("", 68, 0, input);

                throw nvae_d68s0;
            }
            switch (alt68) 
            {
                case 1 :
                    // cs.g:494:2: 'ref' '(' ( ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )? | 'void' ( '*' )+ ( rank_specifiers )? ) ')' ref_variable_reference
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal196=(IToken)Match(input,131,FOLLOW_131_in_ref_variable_reference2402); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal196_tree = (object)adaptor.Create(string_literal196);
                    		adaptor.AddChild(root_0, string_literal196_tree);
                    	}
                    	char_literal197=(IToken)Match(input,110,FOLLOW_110_in_ref_variable_reference2404); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal197_tree = (object)adaptor.Create(char_literal197);
                    		adaptor.AddChild(root_0, char_literal197_tree);
                    	}
                    	// cs.g:495:3: ( ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )? | 'void' ( '*' )+ ( rank_specifiers )? )
                    	int alt67 = 2;
                    	int LA67_0 = input.LA(1);

                    	if ( (LA67_0 == IDENTIFIER || LA67_0 == SET || LA67_0 == 95 || (LA67_0 >= 101 && LA67_0 <= 107) || LA67_0 == 109 || (LA67_0 >= 114 && LA67_0 <= 122) || (LA67_0 >= 132 && LA67_0 <= 137) || (LA67_0 >= 175 && LA67_0 <= 187) || LA67_0 == 199 || (LA67_0 >= 201 && LA67_0 <= 202) || LA67_0 == 208 || (LA67_0 >= 225 && LA67_0 <= 226)) )
                    	{
                    	    alt67 = 1;
                    	}
                    	else if ( (LA67_0 == 113) )
                    	{
                    	    alt67 = 2;
                    	}
                    	else 
                    	{
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    NoViableAltException nvae_d67s0 =
                    	        new NoViableAltException("", 67, 0, input);

                    	    throw nvae_d67s0;
                    	}
                    	switch (alt67) 
                    	{
                    	    case 1 :
                    	        // cs.g:495:4: ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )?
                    	        {
                    	        	// cs.g:495:4: ( namespace_or_type_name | predefined_type )
                    	        	int alt62 = 2;
                    	        	int LA62_0 = input.LA(1);

                    	        	if ( (LA62_0 == IDENTIFIER || LA62_0 == SET || LA62_0 == 95 || (LA62_0 >= 101 && LA62_0 <= 107) || LA62_0 == 109 || (LA62_0 >= 175 && LA62_0 <= 187) || LA62_0 == 199 || (LA62_0 >= 201 && LA62_0 <= 202) || LA62_0 == 208 || (LA62_0 >= 225 && LA62_0 <= 226)) )
                    	        	{
                    	        	    alt62 = 1;
                    	        	}
                    	        	else if ( ((LA62_0 >= 114 && LA62_0 <= 122) || (LA62_0 >= 132 && LA62_0 <= 137)) )
                    	        	{
                    	        	    alt62 = 2;
                    	        	}
                    	        	else 
                    	        	{
                    	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	        	    NoViableAltException nvae_d62s0 =
                    	        	        new NoViableAltException("", 62, 0, input);

                    	        	    throw nvae_d62s0;
                    	        	}
                    	        	switch (alt62) 
                    	        	{
                    	        	    case 1 :
                    	        	        // cs.g:495:7: namespace_or_type_name
                    	        	        {
                    	        	        	PushFollow(FOLLOW_namespace_or_type_name_in_ref_variable_reference2414);
                    	        	        	namespace_or_type_name198 = namespace_or_type_name();
                    	        	        	state.followingStackPointer--;
                    	        	        	if (state.failed) return retval;
                    	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_or_type_name198.Tree);

                    	        	        }
                    	        	        break;
                    	        	    case 2 :
                    	        	        // cs.g:495:36: predefined_type
                    	        	        {
                    	        	        	PushFollow(FOLLOW_predefined_type_in_ref_variable_reference2422);
                    	        	        	predefined_type199 = predefined_type();
                    	        	        	state.followingStackPointer--;
                    	        	        	if (state.failed) return retval;
                    	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type199.Tree);

                    	        	        }
                    	        	        break;

                    	        	}

                    	        	// cs.g:495:56: ( '*' )*
                    	        	do 
                    	        	{
                    	        	    int alt63 = 2;
                    	        	    int LA63_0 = input.LA(1);

                    	        	    if ( (LA63_0 == 111) )
                    	        	    {
                    	        	        alt63 = 1;
                    	        	    }


                    	        	    switch (alt63) 
                    	        		{
                    	        			case 1 :
                    	        			    // cs.g:0:0: '*'
                    	        			    {
                    	        			    	char_literal200=(IToken)Match(input,111,FOLLOW_111_in_ref_variable_reference2428); if (state.failed) return retval;
                    	        			    	if ( state.backtracking == 0 )
                    	        			    	{char_literal200_tree = (object)adaptor.Create(char_literal200);
                    	        			    		adaptor.AddChild(root_0, char_literal200_tree);
                    	        			    	}

                    	        			    }
                    	        			    break;

                    	        			default:
                    	        			    goto loop63;
                    	        	    }
                    	        	} while (true);

                    	        	loop63:
                    	        		;	// Stops C# compiler whining that label 'loop63' has no statements

                    	        	// cs.g:495:63: ( rank_specifiers )?
                    	        	int alt64 = 2;
                    	        	int LA64_0 = input.LA(1);

                    	        	if ( (LA64_0 == 97) )
                    	        	{
                    	        	    alt64 = 1;
                    	        	}
                    	        	switch (alt64) 
                    	        	{
                    	        	    case 1 :
                    	        	        // cs.g:0:0: rank_specifiers
                    	        	        {
                    	        	        	PushFollow(FOLLOW_rank_specifiers_in_ref_variable_reference2433);
                    	        	        	rank_specifiers201 = rank_specifiers();
                    	        	        	state.followingStackPointer--;
                    	        	        	if (state.failed) return retval;
                    	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rank_specifiers201.Tree);

                    	        	        }
                    	        	        break;

                    	        	}


                    	        }
                    	        break;
                    	    case 2 :
                    	        // cs.g:496:5: 'void' ( '*' )+ ( rank_specifiers )?
                    	        {
                    	        	string_literal202=(IToken)Match(input,113,FOLLOW_113_in_ref_variable_reference2440); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{string_literal202_tree = (object)adaptor.Create(string_literal202);
                    	        		adaptor.AddChild(root_0, string_literal202_tree);
                    	        	}
                    	        	// cs.g:496:14: ( '*' )+
                    	        	int cnt65 = 0;
                    	        	do 
                    	        	{
                    	        	    int alt65 = 2;
                    	        	    int LA65_0 = input.LA(1);

                    	        	    if ( (LA65_0 == 111) )
                    	        	    {
                    	        	        alt65 = 1;
                    	        	    }


                    	        	    switch (alt65) 
                    	        		{
                    	        			case 1 :
                    	        			    // cs.g:0:0: '*'
                    	        			    {
                    	        			    	char_literal203=(IToken)Match(input,111,FOLLOW_111_in_ref_variable_reference2444); if (state.failed) return retval;
                    	        			    	if ( state.backtracking == 0 )
                    	        			    	{char_literal203_tree = (object)adaptor.Create(char_literal203);
                    	        			    		adaptor.AddChild(root_0, char_literal203_tree);
                    	        			    	}

                    	        			    }
                    	        			    break;

                    	        			default:
                    	        			    if ( cnt65 >= 1 ) goto loop65;
                    	        			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	        		            EarlyExitException eee65 =
                    	        		                new EarlyExitException(65, input);
                    	        		            throw eee65;
                    	        	    }
                    	        	    cnt65++;
                    	        	} while (true);

                    	        	loop65:
                    	        		;	// Stops C# compiler whining that label 'loop65' has no statements

                    	        	// cs.g:496:21: ( rank_specifiers )?
                    	        	int alt66 = 2;
                    	        	int LA66_0 = input.LA(1);

                    	        	if ( (LA66_0 == 97) )
                    	        	{
                    	        	    alt66 = 1;
                    	        	}
                    	        	switch (alt66) 
                    	        	{
                    	        	    case 1 :
                    	        	        // cs.g:0:0: rank_specifiers
                    	        	        {
                    	        	        	PushFollow(FOLLOW_rank_specifiers_in_ref_variable_reference2449);
                    	        	        	rank_specifiers204 = rank_specifiers();
                    	        	        	state.followingStackPointer--;
                    	        	        	if (state.failed) return retval;
                    	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rank_specifiers204.Tree);

                    	        	        }
                    	        	        break;

                    	        	}


                    	        }
                    	        break;

                    	}

                    	char_literal205=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_ref_variable_reference2458); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal205_tree = (object)adaptor.Create(char_literal205);
                    		adaptor.AddChild(root_0, char_literal205_tree);
                    	}
                    	PushFollow(FOLLOW_ref_variable_reference_in_ref_variable_reference2462);
                    	ref_variable_reference206 = ref_variable_reference();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ref_variable_reference206.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:498:4: 'ref' variable_reference
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal207=(IToken)Match(input,131,FOLLOW_131_in_ref_variable_reference2467); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal207_tree = (object)adaptor.Create(string_literal207);
                    		adaptor.AddChild(root_0, string_literal207_tree);
                    	}
                    	PushFollow(FOLLOW_variable_reference_in_ref_variable_reference2469);
                    	variable_reference208 = variable_reference();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_reference208.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 68, ref_variable_reference_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "ref_variable_reference"

    public class primary_or_array_creation_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "primary_or_array_creation_expression"
    // cs.g:500:1: primary_or_array_creation_expression : ( primary_expression | array_creation_expression );
    public csParser.primary_or_array_creation_expression_return primary_or_array_creation_expression() // throws RecognitionException [1]
    {   
        csParser.primary_or_array_creation_expression_return retval = new csParser.primary_or_array_creation_expression_return();
        retval.Start = input.LT(1);
        int primary_or_array_creation_expression_StartIndex = input.Index();
        object root_0 = null;

        csParser.primary_expression_return primary_expression209 = default(csParser.primary_expression_return);

        csParser.array_creation_expression_return array_creation_expression210 = default(csParser.array_creation_expression_return);



         const string elementName = "primary_or_array_creation_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 69) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:503:1: ( primary_expression | array_creation_expression )
            int alt69 = 2;
            alt69 = dfa69.Predict(input);
            switch (alt69) 
            {
                case 1 :
                    // cs.g:504:2: primary_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_primary_expression_in_primary_or_array_creation_expression2489);
                    	primary_expression209 = primary_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_expression209.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:505:4: array_creation_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_array_creation_expression_in_primary_or_array_creation_expression2495);
                    	array_creation_expression210 = array_creation_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, array_creation_expression210.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 69, primary_or_array_creation_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "primary_or_array_creation_expression"

    public class texpr_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "texpr"
    // cs.g:507:1: texpr : tmember ;
    public csParser.texpr_return texpr() // throws RecognitionException [1]
    {   
        csParser.texpr_return retval = new csParser.texpr_return();
        retval.Start = input.LT(1);
        int texpr_StartIndex = input.Index();
        object root_0 = null;

        csParser.tmember_return tmember211 = default(csParser.tmember_return);



         const string elementName = "texpr"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 70) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:510:1: ( tmember )
            // cs.g:511:2: tmember
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_tmember_in_texpr2516);
            	tmember211 = tmember();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, tmember211.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 70, texpr_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "texpr"

    public class tinvocation_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "tinvocation"
    // cs.g:516:1: tinvocation : tmember ( tinvocation_part )? ;
    public csParser.tinvocation_return tinvocation() // throws RecognitionException [1]
    {   
        csParser.tinvocation_return retval = new csParser.tinvocation_return();
        retval.Start = input.LT(1);
        int tinvocation_StartIndex = input.Index();
        object root_0 = null;

        csParser.tmember_return tmember212 = default(csParser.tmember_return);

        csParser.tinvocation_part_return tinvocation_part213 = default(csParser.tinvocation_part_return);



         const string elementName = "tinvocation"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 71) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:519:1: ( tmember ( tinvocation_part )? )
            // cs.g:520:2: tmember ( tinvocation_part )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_tmember_in_tinvocation2540);
            	tmember212 = tmember();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, tmember212.Tree);
            	// cs.g:520:12: ( tinvocation_part )?
            	int alt70 = 2;
            	int LA70_0 = input.LA(1);

            	if ( (LA70_0 == 110) )
            	{
            	    alt70 = 1;
            	}
            	switch (alt70) 
            	{
            	    case 1 :
            	        // cs.g:0:0: tinvocation_part
            	        {
            	        	PushFollow(FOLLOW_tinvocation_part_in_tinvocation2544);
            	        	tinvocation_part213 = tinvocation_part();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, tinvocation_part213.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 71, tinvocation_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "tinvocation"

    public class tinvocation_part_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "tinvocation_part"
    // cs.g:521:1: tinvocation_part : ( ( arguments )+ ( access_operator tinvocation ) | ( arguments )+ telement_part | ( arguments )+ );
    public csParser.tinvocation_part_return tinvocation_part() // throws RecognitionException [1]
    {   
        csParser.tinvocation_part_return retval = new csParser.tinvocation_part_return();
        retval.Start = input.LT(1);
        int tinvocation_part_StartIndex = input.Index();
        object root_0 = null;

        csParser.arguments_return arguments214 = default(csParser.arguments_return);

        csParser.access_operator_return access_operator215 = default(csParser.access_operator_return);

        csParser.tinvocation_return tinvocation216 = default(csParser.tinvocation_return);

        csParser.arguments_return arguments217 = default(csParser.arguments_return);

        csParser.telement_part_return telement_part218 = default(csParser.telement_part_return);

        csParser.arguments_return arguments219 = default(csParser.arguments_return);



         const string elementName = "tinvocation_part"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 72) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:524:1: ( ( arguments )+ ( access_operator tinvocation ) | ( arguments )+ telement_part | ( arguments )+ )
            int alt74 = 3;
            int LA74_0 = input.LA(1);

            if ( (LA74_0 == 110) )
            {
                int LA74_1 = input.LA(2);

                if ( (synpred115_cs()) )
                {
                    alt74 = 1;
                }
                else if ( (synpred117_cs()) )
                {
                    alt74 = 2;
                }
                else if ( (true) )
                {
                    alt74 = 3;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d74s1 =
                        new NoViableAltException("", 74, 1, input);

                    throw nvae_d74s1;
                }
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d74s0 =
                    new NoViableAltException("", 74, 0, input);

                throw nvae_d74s0;
            }
            switch (alt74) 
            {
                case 1 :
                    // cs.g:525:2: ( arguments )+ ( access_operator tinvocation )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:525:2: ( arguments )+
                    	int cnt71 = 0;
                    	do 
                    	{
                    	    int alt71 = 2;
                    	    int LA71_0 = input.LA(1);

                    	    if ( (LA71_0 == 110) )
                    	    {
                    	        alt71 = 1;
                    	    }


                    	    switch (alt71) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: arguments
                    			    {
                    			    	PushFollow(FOLLOW_arguments_in_tinvocation_part2565);
                    			    	arguments214 = arguments();
                    			    	state.followingStackPointer--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arguments214.Tree);

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt71 >= 1 ) goto loop71;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee71 =
                    		                new EarlyExitException(71, input);
                    		            throw eee71;
                    	    }
                    	    cnt71++;
                    	} while (true);

                    	loop71:
                    		;	// Stops C# compiler whining that label 'loop71' has no statements

                    	// cs.g:525:15: ( access_operator tinvocation )
                    	// cs.g:525:16: access_operator tinvocation
                    	{
                    		PushFollow(FOLLOW_access_operator_in_tinvocation_part2571);
                    		access_operator215 = access_operator();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		PushFollow(FOLLOW_tinvocation_in_tinvocation_part2576);
                    		tinvocation216 = tinvocation();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, tinvocation216.Tree);

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:526:4: ( arguments )+ telement_part
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:526:4: ( arguments )+
                    	int cnt72 = 0;
                    	do 
                    	{
                    	    int alt72 = 2;
                    	    int LA72_0 = input.LA(1);

                    	    if ( (LA72_0 == 110) )
                    	    {
                    	        alt72 = 1;
                    	    }


                    	    switch (alt72) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: arguments
                    			    {
                    			    	PushFollow(FOLLOW_arguments_in_tinvocation_part2582);
                    			    	arguments217 = arguments();
                    			    	state.followingStackPointer--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arguments217.Tree);

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt72 >= 1 ) goto loop72;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee72 =
                    		                new EarlyExitException(72, input);
                    		            throw eee72;
                    	    }
                    	    cnt72++;
                    	} while (true);

                    	loop72:
                    		;	// Stops C# compiler whining that label 'loop72' has no statements

                    	PushFollow(FOLLOW_telement_part_in_tinvocation_part2587);
                    	telement_part218 = telement_part();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, telement_part218.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:527:4: ( arguments )+
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:527:4: ( arguments )+
                    	int cnt73 = 0;
                    	do 
                    	{
                    	    int alt73 = 2;
                    	    int LA73_0 = input.LA(1);

                    	    if ( (LA73_0 == 110) )
                    	    {
                    	        alt73 = 1;
                    	    }


                    	    switch (alt73) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: arguments
                    			    {
                    			    	PushFollow(FOLLOW_arguments_in_tinvocation_part2592);
                    			    	arguments219 = arguments();
                    			    	state.followingStackPointer--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arguments219.Tree);

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt73 >= 1 ) goto loop73;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee73 =
                    		                new EarlyExitException(73, input);
                    		            throw eee73;
                    	    }
                    	    cnt73++;
                    	} while (true);

                    	loop73:
                    		;	// Stops C# compiler whining that label 'loop73' has no statements


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 72, tinvocation_part_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "tinvocation_part"

    public class telement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "telement"
    // cs.g:529:1: telement : tmember ( telement_part )? ;
    public csParser.telement_return telement() // throws RecognitionException [1]
    {   
        csParser.telement_return retval = new csParser.telement_return();
        retval.Start = input.LT(1);
        int telement_StartIndex = input.Index();
        object root_0 = null;

        csParser.tmember_return tmember220 = default(csParser.tmember_return);

        csParser.telement_part_return telement_part221 = default(csParser.telement_part_return);



         const string elementName = "telement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 73) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:532:1: ( tmember ( telement_part )? )
            // cs.g:533:2: tmember ( telement_part )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_tmember_in_telement2619);
            	tmember220 = tmember();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, tmember220.Tree);
            	// cs.g:533:12: ( telement_part )?
            	int alt75 = 2;
            	int LA75_0 = input.LA(1);

            	if ( (LA75_0 == 97) )
            	{
            	    alt75 = 1;
            	}
            	switch (alt75) 
            	{
            	    case 1 :
            	        // cs.g:0:0: telement_part
            	        {
            	        	PushFollow(FOLLOW_telement_part_in_telement2623);
            	        	telement_part221 = telement_part();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, telement_part221.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 73, telement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "telement"

    public class telement_part_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "telement_part"
    // cs.g:534:1: telement_part : ( ( bracket_expression )+ ( access_operator telement ) | ( bracket_expression )+ tinvocation_part | ( bracket_expression )+ );
    public csParser.telement_part_return telement_part() // throws RecognitionException [1]
    {   
        csParser.telement_part_return retval = new csParser.telement_part_return();
        retval.Start = input.LT(1);
        int telement_part_StartIndex = input.Index();
        object root_0 = null;

        csParser.bracket_expression_return bracket_expression222 = default(csParser.bracket_expression_return);

        csParser.access_operator_return access_operator223 = default(csParser.access_operator_return);

        csParser.telement_return telement224 = default(csParser.telement_return);

        csParser.bracket_expression_return bracket_expression225 = default(csParser.bracket_expression_return);

        csParser.tinvocation_part_return tinvocation_part226 = default(csParser.tinvocation_part_return);

        csParser.bracket_expression_return bracket_expression227 = default(csParser.bracket_expression_return);



         const string elementName = "telement_part"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 74) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:537:1: ( ( bracket_expression )+ ( access_operator telement ) | ( bracket_expression )+ tinvocation_part | ( bracket_expression )+ )
            int alt79 = 3;
            int LA79_0 = input.LA(1);

            if ( (LA79_0 == 97) )
            {
                int LA79_1 = input.LA(2);

                if ( (synpred121_cs()) )
                {
                    alt79 = 1;
                }
                else if ( (synpred123_cs()) )
                {
                    alt79 = 2;
                }
                else if ( (true) )
                {
                    alt79 = 3;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d79s1 =
                        new NoViableAltException("", 79, 1, input);

                    throw nvae_d79s1;
                }
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d79s0 =
                    new NoViableAltException("", 79, 0, input);

                throw nvae_d79s0;
            }
            switch (alt79) 
            {
                case 1 :
                    // cs.g:538:2: ( bracket_expression )+ ( access_operator telement )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:538:2: ( bracket_expression )+
                    	int cnt76 = 0;
                    	do 
                    	{
                    	    int alt76 = 2;
                    	    int LA76_0 = input.LA(1);

                    	    if ( (LA76_0 == 97) )
                    	    {
                    	        alt76 = 1;
                    	    }


                    	    switch (alt76) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: bracket_expression
                    			    {
                    			    	PushFollow(FOLLOW_bracket_expression_in_telement_part2644);
                    			    	bracket_expression222 = bracket_expression();
                    			    	state.followingStackPointer--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bracket_expression222.Tree);

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt76 >= 1 ) goto loop76;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee76 =
                    		                new EarlyExitException(76, input);
                    		            throw eee76;
                    	    }
                    	    cnt76++;
                    	} while (true);

                    	loop76:
                    		;	// Stops C# compiler whining that label 'loop76' has no statements

                    	// cs.g:538:24: ( access_operator telement )
                    	// cs.g:538:25: access_operator telement
                    	{
                    		PushFollow(FOLLOW_access_operator_in_telement_part2650);
                    		access_operator223 = access_operator();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_operator223.Tree);
                    		PushFollow(FOLLOW_telement_in_telement_part2654);
                    		telement224 = telement();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, telement224.Tree);

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:539:4: ( bracket_expression )+ tinvocation_part
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:539:4: ( bracket_expression )+
                    	int cnt77 = 0;
                    	do 
                    	{
                    	    int alt77 = 2;
                    	    int LA77_0 = input.LA(1);

                    	    if ( (LA77_0 == 97) )
                    	    {
                    	        alt77 = 1;
                    	    }


                    	    switch (alt77) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: bracket_expression
                    			    {
                    			    	PushFollow(FOLLOW_bracket_expression_in_telement_part2660);
                    			    	bracket_expression225 = bracket_expression();
                    			    	state.followingStackPointer--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bracket_expression225.Tree);

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt77 >= 1 ) goto loop77;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee77 =
                    		                new EarlyExitException(77, input);
                    		            throw eee77;
                    	    }
                    	    cnt77++;
                    	} while (true);

                    	loop77:
                    		;	// Stops C# compiler whining that label 'loop77' has no statements

                    	PushFollow(FOLLOW_tinvocation_part_in_telement_part2665);
                    	tinvocation_part226 = tinvocation_part();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, tinvocation_part226.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:540:4: ( bracket_expression )+
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:540:4: ( bracket_expression )+
                    	int cnt78 = 0;
                    	do 
                    	{
                    	    int alt78 = 2;
                    	    int LA78_0 = input.LA(1);

                    	    if ( (LA78_0 == 97) )
                    	    {
                    	        alt78 = 1;
                    	    }


                    	    switch (alt78) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: bracket_expression
                    			    {
                    			    	PushFollow(FOLLOW_bracket_expression_in_telement_part2670);
                    			    	bracket_expression227 = bracket_expression();
                    			    	state.followingStackPointer--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bracket_expression227.Tree);

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt78 >= 1 ) goto loop78;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee78 =
                    		                new EarlyExitException(78, input);
                    		            throw eee78;
                    	    }
                    	    cnt78++;
                    	} while (true);

                    	loop78:
                    		;	// Stops C# compiler whining that label 'loop78' has no statements


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 74, telement_part_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "telement_part"

    public class tmember_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "tmember"
    // cs.g:542:1: tmember : identifier ( access_operator identifier )* ;
    public csParser.tmember_return tmember() // throws RecognitionException [1]
    {   
        csParser.tmember_return retval = new csParser.tmember_return();
        retval.Start = input.LT(1);
        int tmember_StartIndex = input.Index();
        object root_0 = null;

        csParser.identifier_return identifier228 = default(csParser.identifier_return);

        csParser.access_operator_return access_operator229 = default(csParser.access_operator_return);

        csParser.identifier_return identifier230 = default(csParser.identifier_return);



         const string elementName = "tmember"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 75) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:545:1: ( identifier ( access_operator identifier )* )
            // cs.g:546:2: identifier ( access_operator identifier )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_identifier_in_tmember2695);
            	identifier228 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier228.Tree);
            	// cs.g:546:15: ( access_operator identifier )*
            	do 
            	{
            	    int alt80 = 2;
            	    int LA80_0 = input.LA(1);

            	    if ( ((LA80_0 >= DOT && LA80_0 <= PTR)) )
            	    {
            	        alt80 = 1;
            	    }


            	    switch (alt80) 
            		{
            			case 1 :
            			    // cs.g:546:16: access_operator identifier
            			    {
            			    	PushFollow(FOLLOW_access_operator_in_tmember2700);
            			    	access_operator229 = access_operator();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_operator229.Tree);
            			    	PushFollow(FOLLOW_identifier_in_tmember2704);
            			    	identifier230 = identifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier230.Tree);

            			    }
            			    break;

            			default:
            			    goto loop80;
            	    }
            	} while (true);

            	loop80:
            		;	// Stops C# compiler whining that label 'loop80' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 75, tmember_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "tmember"

    public class primary_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "primary_expression"
    // cs.g:548:1: primary_expression : ( primary_expression_start ( primary_expression_part )* | delegate_creation_expression | anonymous_object_creation_expression | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );
    public csParser.primary_expression_return primary_expression() // throws RecognitionException [1]
    {   
        csParser.primary_expression_return retval = new csParser.primary_expression_return();
        retval.Start = input.LT(1);
        int primary_expression_StartIndex = input.Index();
        object root_0 = null;

        csParser.primary_expression_start_return primary_expression_start231 = default(csParser.primary_expression_start_return);

        csParser.primary_expression_part_return primary_expression_part232 = default(csParser.primary_expression_part_return);

        csParser.delegate_creation_expression_return delegate_creation_expression233 = default(csParser.delegate_creation_expression_return);

        csParser.anonymous_object_creation_expression_return anonymous_object_creation_expression234 = default(csParser.anonymous_object_creation_expression_return);

        csParser.sizeof_expression_return sizeof_expression235 = default(csParser.sizeof_expression_return);

        csParser.checked_expression_return checked_expression236 = default(csParser.checked_expression_return);

        csParser.unchecked_expression_return unchecked_expression237 = default(csParser.unchecked_expression_return);

        csParser.default_value_expression_return default_value_expression238 = default(csParser.default_value_expression_return);

        csParser.anonymous_method_expression_return anonymous_method_expression239 = default(csParser.anonymous_method_expression_return);



         const string elementName = "primary_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 76) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:551:1: ( primary_expression_start ( primary_expression_part )* | delegate_creation_expression | anonymous_object_creation_expression | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression )
            int alt82 = 8;
            alt82 = dfa82.Predict(input);
            switch (alt82) 
            {
                case 1 :
                    // cs.g:552:2: primary_expression_start ( primary_expression_part )*
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_primary_expression_start_in_primary_expression2730);
                    	primary_expression_start231 = primary_expression_start();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_expression_start231.Tree);
                    	// cs.g:552:29: ( primary_expression_part )*
                    	do 
                    	{
                    	    int alt81 = 2;
                    	    alt81 = dfa81.Predict(input);
                    	    switch (alt81) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: primary_expression_part
                    			    {
                    			    	PushFollow(FOLLOW_primary_expression_part_in_primary_expression2734);
                    			    	primary_expression_part232 = primary_expression_part();
                    			    	state.followingStackPointer--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_expression_part232.Tree);

                    			    }
                    			    break;

                    			default:
                    			    goto loop81;
                    	    }
                    	} while (true);

                    	loop81:
                    		;	// Stops C# compiler whining that label 'loop81' has no statements


                    }
                    break;
                case 2 :
                    // cs.g:553:4: delegate_creation_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_delegate_creation_expression_in_primary_expression2740);
                    	delegate_creation_expression233 = delegate_creation_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, delegate_creation_expression233.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:554:4: anonymous_object_creation_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_anonymous_object_creation_expression_in_primary_expression2749);
                    	anonymous_object_creation_expression234 = anonymous_object_creation_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, anonymous_object_creation_expression234.Tree);

                    }
                    break;
                case 4 :
                    // cs.g:555:4: sizeof_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_sizeof_expression_in_primary_expression2755);
                    	sizeof_expression235 = sizeof_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, sizeof_expression235.Tree);

                    }
                    break;
                case 5 :
                    // cs.g:556:4: checked_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_checked_expression_in_primary_expression2766);
                    	checked_expression236 = checked_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, checked_expression236.Tree);

                    }
                    break;
                case 6 :
                    // cs.g:557:4: unchecked_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_unchecked_expression_in_primary_expression2785);
                    	unchecked_expression237 = unchecked_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unchecked_expression237.Tree);

                    }
                    break;
                case 7 :
                    // cs.g:558:4: default_value_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_default_value_expression_in_primary_expression2802);
                    	default_value_expression238 = default_value_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, default_value_expression238.Tree);

                    }
                    break;
                case 8 :
                    // cs.g:559:4: anonymous_method_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_anonymous_method_expression_in_primary_expression2815);
                    	anonymous_method_expression239 = anonymous_method_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, anonymous_method_expression239.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 76, primary_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "primary_expression"

    public class primary_expression_start_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "primary_expression_start"
    // cs.g:561:1: primary_expression_start : ( ( predefined_type | identifier | literal ) ( generic_argument_list )? | 'this' ( bracket_expression )? | 'base' ( bracket_expression )? | identifier '::' identifier | paren_expression ( brackets_or_arguments )? | object_creation_expression | typeof_expression );
    public csParser.primary_expression_start_return primary_expression_start() // throws RecognitionException [1]
    {   
        csParser.primary_expression_start_return retval = new csParser.primary_expression_start_return();
        retval.Start = input.LT(1);
        int primary_expression_start_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal244 = null;
        IToken string_literal246 = null;
        IToken string_literal249 = null;
        csParser.predefined_type_return predefined_type240 = default(csParser.predefined_type_return);

        csParser.identifier_return identifier241 = default(csParser.identifier_return);

        csParser.literal_return literal242 = default(csParser.literal_return);

        csParser.generic_argument_list_return generic_argument_list243 = default(csParser.generic_argument_list_return);

        csParser.bracket_expression_return bracket_expression245 = default(csParser.bracket_expression_return);

        csParser.bracket_expression_return bracket_expression247 = default(csParser.bracket_expression_return);

        csParser.identifier_return identifier248 = default(csParser.identifier_return);

        csParser.identifier_return identifier250 = default(csParser.identifier_return);

        csParser.paren_expression_return paren_expression251 = default(csParser.paren_expression_return);

        csParser.brackets_or_arguments_return brackets_or_arguments252 = default(csParser.brackets_or_arguments_return);

        csParser.object_creation_expression_return object_creation_expression253 = default(csParser.object_creation_expression_return);

        csParser.typeof_expression_return typeof_expression254 = default(csParser.typeof_expression_return);


        object string_literal244_tree=null;
        object string_literal246_tree=null;
        object string_literal249_tree=null;

         const string elementName = "primary_expression_start"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 77) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:564:1: ( ( predefined_type | identifier | literal ) ( generic_argument_list )? | 'this' ( bracket_expression )? | 'base' ( bracket_expression )? | identifier '::' identifier | paren_expression ( brackets_or_arguments )? | object_creation_expression | typeof_expression )
            int alt88 = 7;
            alt88 = dfa88.Predict(input);
            switch (alt88) 
            {
                case 1 :
                    // cs.g:565:2: ( predefined_type | identifier | literal ) ( generic_argument_list )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:565:2: ( predefined_type | identifier | literal )
                    	int alt83 = 3;
                    	switch ( input.LA(1) ) 
                    	{
                    	case 114:
                    	case 115:
                    	case 116:
                    	case 117:
                    	case 118:
                    	case 119:
                    	case 120:
                    	case 121:
                    	case 122:
                    	case 132:
                    	case 133:
                    	case 134:
                    	case 135:
                    	case 136:
                    	case 137:
                    		{
                    	    alt83 = 1;
                    	    }
                    	    break;
                    	case IDENTIFIER:
                    	case SET:
                    	case 95:
                    	case 101:
                    	case 102:
                    	case 103:
                    	case 104:
                    	case 105:
                    	case 106:
                    	case 107:
                    	case 109:
                    	case 175:
                    	case 176:
                    	case 177:
                    	case 178:
                    	case 179:
                    	case 180:
                    	case 181:
                    	case 182:
                    	case 183:
                    	case 184:
                    	case 185:
                    	case 186:
                    	case 187:
                    	case 199:
                    	case 201:
                    	case 202:
                    	case 208:
                    	case 225:
                    	case 226:
                    		{
                    	    alt83 = 2;
                    	    }
                    	    break;
                    	case Real_literal:
                    	case NUMBER:
                    	case Hex_number:
                    	case Character_literal:
                    	case STRINGLITERAL:
                    	case Verbatim_string_literal:
                    	case TRUE:
                    	case FALSE:
                    	case NULL:
                    		{
                    	    alt83 = 3;
                    	    }
                    	    break;
                    		default:
                    		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		    NoViableAltException nvae_d83s0 =
                    		        new NoViableAltException("", 83, 0, input);

                    		    throw nvae_d83s0;
                    	}

                    	switch (alt83) 
                    	{
                    	    case 1 :
                    	        // cs.g:565:3: predefined_type
                    	        {
                    	        	PushFollow(FOLLOW_predefined_type_in_primary_expression_start2840);
                    	        	predefined_type240 = predefined_type();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type240.Tree);

                    	        }
                    	        break;
                    	    case 2 :
                    	        // cs.g:565:21: identifier
                    	        {
                    	        	PushFollow(FOLLOW_identifier_in_primary_expression_start2844);
                    	        	identifier241 = identifier();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier241.Tree);

                    	        }
                    	        break;
                    	    case 3 :
                    	        // cs.g:565:34: literal
                    	        {
                    	        	PushFollow(FOLLOW_literal_in_primary_expression_start2848);
                    	        	literal242 = literal();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, literal242.Tree);

                    	        }
                    	        break;

                    	}

                    	// cs.g:565:45: ( generic_argument_list )?
                    	int alt84 = 2;
                    	alt84 = dfa84.Predict(input);
                    	switch (alt84) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: generic_argument_list
                    	        {
                    	        	PushFollow(FOLLOW_generic_argument_list_in_primary_expression_start2853);
                    	        	generic_argument_list243 = generic_argument_list();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_argument_list243.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:566:4: 'this' ( bracket_expression )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal244=(IToken)Match(input,90,FOLLOW_90_in_primary_expression_start2859); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal244_tree = (object)adaptor.Create(string_literal244);
                    		adaptor.AddChild(root_0, string_literal244_tree);
                    	}
                    	// cs.g:566:14: ( bracket_expression )?
                    	int alt85 = 2;
                    	alt85 = dfa85.Predict(input);
                    	switch (alt85) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: bracket_expression
                    	        {
                    	        	PushFollow(FOLLOW_bracket_expression_in_primary_expression_start2864);
                    	        	bracket_expression245 = bracket_expression();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bracket_expression245.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 3 :
                    // cs.g:567:4: 'base' ( bracket_expression )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal246=(IToken)Match(input,91,FOLLOW_91_in_primary_expression_start2870); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal246_tree = (object)adaptor.Create(string_literal246);
                    		adaptor.AddChild(root_0, string_literal246_tree);
                    	}
                    	// cs.g:567:14: ( bracket_expression )?
                    	int alt86 = 2;
                    	alt86 = dfa86.Predict(input);
                    	switch (alt86) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: bracket_expression
                    	        {
                    	        	PushFollow(FOLLOW_bracket_expression_in_primary_expression_start2875);
                    	        	bracket_expression247 = bracket_expression();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bracket_expression247.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 4 :
                    // cs.g:568:4: identifier '::' identifier
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_identifier_in_primary_expression_start2881);
                    	identifier248 = identifier();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier248.Tree);
                    	string_literal249=(IToken)Match(input,89,FOLLOW_89_in_primary_expression_start2885); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal249_tree = (object)adaptor.Create(string_literal249);
                    		adaptor.AddChild(root_0, string_literal249_tree);
                    	}
                    	PushFollow(FOLLOW_identifier_in_primary_expression_start2889);
                    	identifier250 = identifier();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier250.Tree);

                    }
                    break;
                case 5 :
                    // cs.g:569:4: paren_expression ( brackets_or_arguments )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_paren_expression_in_primary_expression_start2894);
                    	paren_expression251 = paren_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, paren_expression251.Tree);
                    	// cs.g:569:23: ( brackets_or_arguments )?
                    	int alt87 = 2;
                    	alt87 = dfa87.Predict(input);
                    	switch (alt87) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: brackets_or_arguments
                    	        {
                    	        	PushFollow(FOLLOW_brackets_or_arguments_in_primary_expression_start2898);
                    	        	brackets_or_arguments252 = brackets_or_arguments();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, brackets_or_arguments252.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 6 :
                    // cs.g:570:4: object_creation_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_object_creation_expression_in_primary_expression_start2904);
                    	object_creation_expression253 = object_creation_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, object_creation_expression253.Tree);

                    }
                    break;
                case 7 :
                    // cs.g:571:4: typeof_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_typeof_expression_in_primary_expression_start2910);
                    	typeof_expression254 = typeof_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, typeof_expression254.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 77, primary_expression_start_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "primary_expression_start"

    public class primary_expression_part_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "primary_expression_part"
    // cs.g:573:1: primary_expression_part : ( access_identifier ( brackets_or_arguments )? | brackets_or_arguments );
    public csParser.primary_expression_part_return primary_expression_part() // throws RecognitionException [1]
    {   
        csParser.primary_expression_part_return retval = new csParser.primary_expression_part_return();
        retval.Start = input.LT(1);
        int primary_expression_part_StartIndex = input.Index();
        object root_0 = null;

        csParser.access_identifier_return access_identifier255 = default(csParser.access_identifier_return);

        csParser.brackets_or_arguments_return brackets_or_arguments256 = default(csParser.brackets_or_arguments_return);

        csParser.brackets_or_arguments_return brackets_or_arguments257 = default(csParser.brackets_or_arguments_return);



         const string elementName = "primary_expression_part"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 78) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:576:1: ( access_identifier ( brackets_or_arguments )? | brackets_or_arguments )
            int alt90 = 2;
            int LA90_0 = input.LA(1);

            if ( ((LA90_0 >= DOT && LA90_0 <= PTR)) )
            {
                alt90 = 1;
            }
            else if ( (LA90_0 == 97 || LA90_0 == 110) )
            {
                alt90 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d90s0 =
                    new NoViableAltException("", 90, 0, input);

                throw nvae_d90s0;
            }
            switch (alt90) 
            {
                case 1 :
                    // cs.g:577:4: access_identifier ( brackets_or_arguments )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_access_identifier_in_primary_expression_part2946);
                    	access_identifier255 = access_identifier();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_identifier255.Tree);
                    	// cs.g:577:24: ( brackets_or_arguments )?
                    	int alt89 = 2;
                    	alt89 = dfa89.Predict(input);
                    	switch (alt89) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: brackets_or_arguments
                    	        {
                    	        	PushFollow(FOLLOW_brackets_or_arguments_in_primary_expression_part2950);
                    	        	brackets_or_arguments256 = brackets_or_arguments();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, brackets_or_arguments256.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:578:4: brackets_or_arguments
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_brackets_or_arguments_in_primary_expression_part2956);
                    	brackets_or_arguments257 = brackets_or_arguments();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, brackets_or_arguments257.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 78, primary_expression_part_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "primary_expression_part"

    public class element_part_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "element_part"
    // cs.g:580:1: element_part : ( access_identifier ( bracket_expression )+ ( primary_expression_part )? | bracket_expression );
    public csParser.element_part_return element_part() // throws RecognitionException [1]
    {   
        csParser.element_part_return retval = new csParser.element_part_return();
        retval.Start = input.LT(1);
        int element_part_StartIndex = input.Index();
        object root_0 = null;

        csParser.access_identifier_return access_identifier258 = default(csParser.access_identifier_return);

        csParser.bracket_expression_return bracket_expression259 = default(csParser.bracket_expression_return);

        csParser.primary_expression_part_return primary_expression_part260 = default(csParser.primary_expression_part_return);

        csParser.bracket_expression_return bracket_expression261 = default(csParser.bracket_expression_return);



         const string elementName = "element_part"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 79) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:583:1: ( access_identifier ( bracket_expression )+ ( primary_expression_part )? | bracket_expression )
            int alt93 = 2;
            int LA93_0 = input.LA(1);

            if ( ((LA93_0 >= DOT && LA93_0 <= PTR)) )
            {
                alt93 = 1;
            }
            else if ( (LA93_0 == 97) )
            {
                alt93 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d93s0 =
                    new NoViableAltException("", 93, 0, input);

                throw nvae_d93s0;
            }
            switch (alt93) 
            {
                case 1 :
                    // cs.g:584:2: access_identifier ( bracket_expression )+ ( primary_expression_part )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_access_identifier_in_element_part2977);
                    	access_identifier258 = access_identifier();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_identifier258.Tree);
                    	// cs.g:584:22: ( bracket_expression )+
                    	int cnt91 = 0;
                    	do 
                    	{
                    	    int alt91 = 2;
                    	    int LA91_0 = input.LA(1);

                    	    if ( (LA91_0 == 97) )
                    	    {
                    	        int LA91_2 = input.LA(2);

                    	        if ( (synpred148_cs()) )
                    	        {
                    	            alt91 = 1;
                    	        }


                    	    }


                    	    switch (alt91) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: bracket_expression
                    			    {
                    			    	PushFollow(FOLLOW_bracket_expression_in_element_part2981);
                    			    	bracket_expression259 = bracket_expression();
                    			    	state.followingStackPointer--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bracket_expression259.Tree);

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt91 >= 1 ) goto loop91;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee91 =
                    		                new EarlyExitException(91, input);
                    		            throw eee91;
                    	    }
                    	    cnt91++;
                    	} while (true);

                    	loop91:
                    		;	// Stops C# compiler whining that label 'loop91' has no statements

                    	// cs.g:584:44: ( primary_expression_part )?
                    	int alt92 = 2;
                    	int LA92_0 = input.LA(1);

                    	if ( ((LA92_0 >= DOT && LA92_0 <= PTR) || LA92_0 == 97 || LA92_0 == 110) )
                    	{
                    	    alt92 = 1;
                    	}
                    	switch (alt92) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: primary_expression_part
                    	        {
                    	        	PushFollow(FOLLOW_primary_expression_part_in_element_part2986);
                    	        	primary_expression_part260 = primary_expression_part();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_expression_part260.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:585:4: bracket_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_bracket_expression_in_element_part2993);
                    	bracket_expression261 = bracket_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bracket_expression261.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 79, element_part_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "element_part"

    public class invocation_part_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "invocation_part"
    // cs.g:586:1: invocation_part : ( access_identifier arguments ( primary_expression_start )? | arguments );
    public csParser.invocation_part_return invocation_part() // throws RecognitionException [1]
    {   
        csParser.invocation_part_return retval = new csParser.invocation_part_return();
        retval.Start = input.LT(1);
        int invocation_part_StartIndex = input.Index();
        object root_0 = null;

        csParser.access_identifier_return access_identifier262 = default(csParser.access_identifier_return);

        csParser.arguments_return arguments263 = default(csParser.arguments_return);

        csParser.primary_expression_start_return primary_expression_start264 = default(csParser.primary_expression_start_return);

        csParser.arguments_return arguments265 = default(csParser.arguments_return);



         const string elementName = "invocation_part"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 80) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:589:1: ( access_identifier arguments ( primary_expression_start )? | arguments )
            int alt95 = 2;
            int LA95_0 = input.LA(1);

            if ( ((LA95_0 >= DOT && LA95_0 <= PTR)) )
            {
                alt95 = 1;
            }
            else if ( (LA95_0 == 110) )
            {
                alt95 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d95s0 =
                    new NoViableAltException("", 95, 0, input);

                throw nvae_d95s0;
            }
            switch (alt95) 
            {
                case 1 :
                    // cs.g:590:2: access_identifier arguments ( primary_expression_start )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_access_identifier_in_invocation_part3013);
                    	access_identifier262 = access_identifier();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_identifier262.Tree);
                    	PushFollow(FOLLOW_arguments_in_invocation_part3017);
                    	arguments263 = arguments();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arguments263.Tree);
                    	// cs.g:590:34: ( primary_expression_start )?
                    	int alt94 = 2;
                    	int LA94_0 = input.LA(1);

                    	if ( ((LA94_0 >= IDENTIFIER && LA94_0 <= NULL) || LA94_0 == SET || (LA94_0 >= 90 && LA94_0 <= 91) || LA94_0 == 95 || (LA94_0 >= 101 && LA94_0 <= 107) || (LA94_0 >= 109 && LA94_0 <= 110) || (LA94_0 >= 114 && LA94_0 <= 122) || (LA94_0 >= 132 && LA94_0 <= 138) || LA94_0 == 140 || (LA94_0 >= 175 && LA94_0 <= 187) || LA94_0 == 199 || (LA94_0 >= 201 && LA94_0 <= 202) || LA94_0 == 208 || (LA94_0 >= 225 && LA94_0 <= 226)) )
                    	{
                    	    alt94 = 1;
                    	}
                    	switch (alt94) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: primary_expression_start
                    	        {
                    	        	PushFollow(FOLLOW_primary_expression_start_in_invocation_part3021);
                    	        	primary_expression_start264 = primary_expression_start();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_expression_start264.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:591:4: arguments
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_arguments_in_invocation_part3028);
                    	arguments265 = arguments();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arguments265.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 80, invocation_part_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "invocation_part"

    public class member_part_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "member_part"
    // cs.g:593:1: member_part : access_identifier ;
    public csParser.member_part_return member_part() // throws RecognitionException [1]
    {   
        csParser.member_part_return retval = new csParser.member_part_return();
        retval.Start = input.LT(1);
        int member_part_StartIndex = input.Index();
        object root_0 = null;

        csParser.access_identifier_return access_identifier266 = default(csParser.access_identifier_return);



         const string elementName = "member_part"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 81) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:596:1: ( access_identifier )
            // cs.g:597:2: access_identifier
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_access_identifier_in_member_part3049);
            	access_identifier266 = access_identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_identifier266.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 81, member_part_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "member_part"

    public class access_identifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "access_identifier"
    // cs.g:598:1: access_identifier : access_operator identifier ( generic_argument_list )? ;
    public csParser.access_identifier_return access_identifier() // throws RecognitionException [1]
    {   
        csParser.access_identifier_return retval = new csParser.access_identifier_return();
        retval.Start = input.LT(1);
        int access_identifier_StartIndex = input.Index();
        object root_0 = null;

        csParser.access_operator_return access_operator267 = default(csParser.access_operator_return);

        csParser.identifier_return identifier268 = default(csParser.identifier_return);

        csParser.generic_argument_list_return generic_argument_list269 = default(csParser.generic_argument_list_return);



         const string elementName = "access_identifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 82) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:601:1: ( access_operator identifier ( generic_argument_list )? )
            // cs.g:602:2: access_operator identifier ( generic_argument_list )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_access_operator_in_access_identifier3069);
            	access_operator267 = access_operator();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_operator267.Tree);
            	PushFollow(FOLLOW_identifier_in_access_identifier3073);
            	identifier268 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier268.Tree);
            	// cs.g:602:33: ( generic_argument_list )?
            	int alt96 = 2;
            	alt96 = dfa96.Predict(input);
            	switch (alt96) 
            	{
            	    case 1 :
            	        // cs.g:0:0: generic_argument_list
            	        {
            	        	PushFollow(FOLLOW_generic_argument_list_in_access_identifier3077);
            	        	generic_argument_list269 = generic_argument_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_argument_list269.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 82, access_identifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "access_identifier"

    public class paren_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "paren_expression"
    // cs.g:603:1: paren_expression : '(' expression ')' ;
    public csParser.paren_expression_return paren_expression() // throws RecognitionException [1]
    {   
        csParser.paren_expression_return retval = new csParser.paren_expression_return();
        retval.Start = input.LT(1);
        int paren_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal270 = null;
        IToken char_literal272 = null;
        csParser.expression_return expression271 = default(csParser.expression_return);


        object char_literal270_tree=null;
        object char_literal272_tree=null;

         const string elementName = "paren_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 83) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:606:1: ( '(' expression ')' )
            // cs.g:607:2: '(' expression ')'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal270=(IToken)Match(input,110,FOLLOW_110_in_paren_expression3098); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal270_tree = (object)adaptor.Create(char_literal270);
            		adaptor.AddChild(root_0, char_literal270_tree);
            	}
            	PushFollow(FOLLOW_expression_in_paren_expression3102);
            	expression271 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression271.Tree);
            	char_literal272=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_paren_expression3106); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal272_tree = (object)adaptor.Create(char_literal272);
            		adaptor.AddChild(root_0, char_literal272_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 83, paren_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "paren_expression"

    public class brackets_or_arguments_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "brackets_or_arguments"
    // cs.g:608:1: brackets_or_arguments : ( ( bracket_expression )+ ( arguments )? | arguments ( bracket_expression )* );
    public csParser.brackets_or_arguments_return brackets_or_arguments() // throws RecognitionException [1]
    {   
        csParser.brackets_or_arguments_return retval = new csParser.brackets_or_arguments_return();
        retval.Start = input.LT(1);
        int brackets_or_arguments_StartIndex = input.Index();
        object root_0 = null;

        csParser.bracket_expression_return bracket_expression273 = default(csParser.bracket_expression_return);

        csParser.arguments_return arguments274 = default(csParser.arguments_return);

        csParser.arguments_return arguments275 = default(csParser.arguments_return);

        csParser.bracket_expression_return bracket_expression276 = default(csParser.bracket_expression_return);



         const string elementName = "brackets_or_arguments"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 84) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:611:1: ( ( bracket_expression )+ ( arguments )? | arguments ( bracket_expression )* )
            int alt100 = 2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0 == 97) )
            {
                alt100 = 1;
            }
            else if ( (LA100_0 == 110) )
            {
                alt100 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d100s0 =
                    new NoViableAltException("", 100, 0, input);

                throw nvae_d100s0;
            }
            switch (alt100) 
            {
                case 1 :
                    // cs.g:612:2: ( bracket_expression )+ ( arguments )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:612:2: ( bracket_expression )+
                    	int cnt97 = 0;
                    	do 
                    	{
                    	    int alt97 = 2;
                    	    int LA97_0 = input.LA(1);

                    	    if ( (LA97_0 == 97) )
                    	    {
                    	        int LA97_2 = input.LA(2);

                    	        if ( (synpred154_cs()) )
                    	        {
                    	            alt97 = 1;
                    	        }


                    	    }


                    	    switch (alt97) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: bracket_expression
                    			    {
                    			    	PushFollow(FOLLOW_bracket_expression_in_brackets_or_arguments3126);
                    			    	bracket_expression273 = bracket_expression();
                    			    	state.followingStackPointer--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bracket_expression273.Tree);

                    			    }
                    			    break;

                    			default:
                    			    if ( cnt97 >= 1 ) goto loop97;
                    			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    		            EarlyExitException eee97 =
                    		                new EarlyExitException(97, input);
                    		            throw eee97;
                    	    }
                    	    cnt97++;
                    	} while (true);

                    	loop97:
                    		;	// Stops C# compiler whining that label 'loop97' has no statements

                    	// cs.g:612:24: ( arguments )?
                    	int alt98 = 2;
                    	alt98 = dfa98.Predict(input);
                    	switch (alt98) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: arguments
                    	        {
                    	        	PushFollow(FOLLOW_arguments_in_brackets_or_arguments3131);
                    	        	arguments274 = arguments();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arguments274.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:613:4: arguments ( bracket_expression )*
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_arguments_in_brackets_or_arguments3137);
                    	arguments275 = arguments();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arguments275.Tree);
                    	// cs.g:613:16: ( bracket_expression )*
                    	do 
                    	{
                    	    int alt99 = 2;
                    	    alt99 = dfa99.Predict(input);
                    	    switch (alt99) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: bracket_expression
                    			    {
                    			    	PushFollow(FOLLOW_bracket_expression_in_brackets_or_arguments3141);
                    			    	bracket_expression276 = bracket_expression();
                    			    	state.followingStackPointer--;
                    			    	if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bracket_expression276.Tree);

                    			    }
                    			    break;

                    			default:
                    			    goto loop99;
                    	    }
                    	} while (true);

                    	loop99:
                    		;	// Stops C# compiler whining that label 'loop99' has no statements


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 84, brackets_or_arguments_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "brackets_or_arguments"

    public class access_operator_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "access_operator"
    // cs.g:614:1: access_operator : ( '.' | '->' );
    public csParser.access_operator_return access_operator() // throws RecognitionException [1]
    {   
        csParser.access_operator_return retval = new csParser.access_operator_return();
        retval.Start = input.LT(1);
        int access_operator_StartIndex = input.Index();
        object root_0 = null;

        IToken set277 = null;

        object set277_tree=null;

         const string elementName = "access_operator"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 85) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:617:1: ( '.' | '->' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set277 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= DOT && input.LA(1) <= PTR) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set277));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 85, access_operator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "access_operator"

    public class arguments_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "arguments"
    // cs.g:619:1: arguments : '(' ( argument_list )? ')' ;
    public csParser.arguments_return arguments() // throws RecognitionException [1]
    {   
        csParser.arguments_return retval = new csParser.arguments_return();
        retval.Start = input.LT(1);
        int arguments_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal278 = null;
        IToken char_literal280 = null;
        csParser.argument_list_return argument_list279 = default(csParser.argument_list_return);


        object char_literal278_tree=null;
        object char_literal280_tree=null;

         const string elementName = "arguments"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 86) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:622:1: ( '(' ( argument_list )? ')' )
            // cs.g:623:2: '(' ( argument_list )? ')'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal278=(IToken)Match(input,110,FOLLOW_110_in_arguments3188); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal278_tree = (object)adaptor.Create(char_literal278);
            		adaptor.AddChild(root_0, char_literal278_tree);
            	}
            	// cs.g:623:8: ( argument_list )?
            	int alt101 = 2;
            	int LA101_0 = input.LA(1);

            	if ( ((LA101_0 >= IDENTIFIER && LA101_0 <= NULL) || LA101_0 == MINUS || LA101_0 == SET || (LA101_0 >= 90 && LA101_0 <= 91) || LA101_0 == 95 || (LA101_0 >= 101 && LA101_0 <= 107) || (LA101_0 >= 109 && LA101_0 <= 111) || (LA101_0 >= 114 && LA101_0 <= 122) || (LA101_0 >= 124 && LA101_0 <= 144) || (LA101_0 >= 175 && LA101_0 <= 187) || LA101_0 == 199 || (LA101_0 >= 201 && LA101_0 <= 202) || LA101_0 == 208 || (LA101_0 >= 225 && LA101_0 <= 226)) )
            	{
            	    alt101 = 1;
            	}
            	switch (alt101) 
            	{
            	    case 1 :
            	        // cs.g:0:0: argument_list
            	        {
            	        	PushFollow(FOLLOW_argument_list_in_arguments3192);
            	        	argument_list279 = argument_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argument_list279.Tree);

            	        }
            	        break;

            	}

            	char_literal280=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_arguments3197); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal280_tree = (object)adaptor.Create(char_literal280);
            		adaptor.AddChild(root_0, char_literal280_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 86, arguments_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    public class bracket_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "bracket_expression"
    // cs.g:624:1: bracket_expression : '[' ( expression_list )? ']' ;
    public csParser.bracket_expression_return bracket_expression() // throws RecognitionException [1]
    {   
        csParser.bracket_expression_return retval = new csParser.bracket_expression_return();
        retval.Start = input.LT(1);
        int bracket_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal281 = null;
        IToken char_literal283 = null;
        csParser.expression_list_return expression_list282 = default(csParser.expression_list_return);


        object char_literal281_tree=null;
        object char_literal283_tree=null;

         const string elementName = "bracket_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 87) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:627:1: ( '[' ( expression_list )? ']' )
            // cs.g:628:2: '[' ( expression_list )? ']'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal281=(IToken)Match(input,97,FOLLOW_97_in_bracket_expression3217); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal281_tree = (object)adaptor.Create(char_literal281);
            		adaptor.AddChild(root_0, char_literal281_tree);
            	}
            	// cs.g:628:8: ( expression_list )?
            	int alt102 = 2;
            	int LA102_0 = input.LA(1);

            	if ( ((LA102_0 >= IDENTIFIER && LA102_0 <= NULL) || LA102_0 == MINUS || LA102_0 == SET || (LA102_0 >= 90 && LA102_0 <= 91) || LA102_0 == 95 || (LA102_0 >= 101 && LA102_0 <= 107) || (LA102_0 >= 109 && LA102_0 <= 111) || (LA102_0 >= 114 && LA102_0 <= 122) || (LA102_0 >= 124 && LA102_0 <= 129) || (LA102_0 >= 132 && LA102_0 <= 144) || (LA102_0 >= 175 && LA102_0 <= 187) || LA102_0 == 199 || (LA102_0 >= 201 && LA102_0 <= 202) || LA102_0 == 208 || (LA102_0 >= 225 && LA102_0 <= 226)) )
            	{
            	    alt102 = 1;
            	}
            	switch (alt102) 
            	{
            	    case 1 :
            	        // cs.g:0:0: expression_list
            	        {
            	        	PushFollow(FOLLOW_expression_list_in_bracket_expression3221);
            	        	expression_list282 = expression_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression_list282.Tree);

            	        }
            	        break;

            	}

            	char_literal283=(IToken)Match(input,99,FOLLOW_99_in_bracket_expression3226); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal283_tree = (object)adaptor.Create(char_literal283);
            		adaptor.AddChild(root_0, char_literal283_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 87, bracket_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "bracket_expression"

    public class member_access_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "member_access"
    // cs.g:630:1: member_access : identifier ( '.' primary_or_array_creation_expression )? ;
    public csParser.member_access_return member_access() // throws RecognitionException [1]
    {   
        csParser.member_access_return retval = new csParser.member_access_return();
        retval.Start = input.LT(1);
        int member_access_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal285 = null;
        csParser.identifier_return identifier284 = default(csParser.identifier_return);

        csParser.primary_or_array_creation_expression_return primary_or_array_creation_expression286 = default(csParser.primary_or_array_creation_expression_return);


        object char_literal285_tree=null;

         const string elementName = "member_access"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 88) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:633:1: ( identifier ( '.' primary_or_array_creation_expression )? )
            // cs.g:634:2: identifier ( '.' primary_or_array_creation_expression )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_identifier_in_member_access3247);
            	identifier284 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier284.Tree);
            	// cs.g:634:15: ( '.' primary_or_array_creation_expression )?
            	int alt103 = 2;
            	int LA103_0 = input.LA(1);

            	if ( (LA103_0 == DOT) )
            	{
            	    alt103 = 1;
            	}
            	switch (alt103) 
            	{
            	    case 1 :
            	        // cs.g:634:16: '.' primary_or_array_creation_expression
            	        {
            	        	char_literal285=(IToken)Match(input,DOT,FOLLOW_DOT_in_member_access3252); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal285_tree = (object)adaptor.Create(char_literal285);
            	        		adaptor.AddChild(root_0, char_literal285_tree);
            	        	}
            	        	PushFollow(FOLLOW_primary_or_array_creation_expression_in_member_access3256);
            	        	primary_or_array_creation_expression286 = primary_or_array_creation_expression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_or_array_creation_expression286.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 88, member_access_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "member_access"

    public class predefined_type_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "predefined_type"
    // cs.g:636:1: predefined_type : ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' );
    public csParser.predefined_type_return predefined_type() // throws RecognitionException [1]
    {   
        csParser.predefined_type_return retval = new csParser.predefined_type_return();
        retval.Start = input.LT(1);
        int predefined_type_StartIndex = input.Index();
        object root_0 = null;

        IToken set287 = null;

        object set287_tree=null;

         const string elementName = "predefined_type"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 89) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:639:1: ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set287 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= 114 && input.LA(1) <= 122) || (input.LA(1) >= 132 && input.LA(1) <= 137) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set287));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 89, predefined_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "predefined_type"

    public class invocation_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "invocation_expression"
    // cs.g:656:1: invocation_expression : access arguments ;
    public csParser.invocation_expression_return invocation_expression() // throws RecognitionException [1]
    {   
        csParser.invocation_expression_return retval = new csParser.invocation_expression_return();
        retval.Start = input.LT(1);
        int invocation_expression_StartIndex = input.Index();
        object root_0 = null;

        csParser.access_return access288 = default(csParser.access_return);

        csParser.arguments_return arguments289 = default(csParser.arguments_return);



         const string elementName = "invocation_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 90) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:659:1: ( access arguments )
            // cs.g:660:2: access arguments
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_access_in_invocation_expression3404);
            	access288 = access();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access288.Tree);
            	PushFollow(FOLLOW_arguments_in_invocation_expression3406);
            	arguments289 = arguments();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arguments289.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 90, invocation_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "invocation_expression"

    public class access_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "access"
    // cs.g:661:1: access : ( '(' expression ')' ( access | access_part ) | qid_start ( access_part )? );
    public csParser.access_return access() // throws RecognitionException [1]
    {   
        csParser.access_return retval = new csParser.access_return();
        retval.Start = input.LT(1);
        int access_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal290 = null;
        IToken char_literal292 = null;
        csParser.expression_return expression291 = default(csParser.expression_return);

        csParser.access_return access293 = default(csParser.access_return);

        csParser.access_part_return access_part294 = default(csParser.access_part_return);

        csParser.qid_start_return qid_start295 = default(csParser.qid_start_return);

        csParser.access_part_return access_part296 = default(csParser.access_part_return);


        object char_literal290_tree=null;
        object char_literal292_tree=null;

         const string elementName = "access"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 91) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:664:1: ( '(' expression ')' ( access | access_part ) | qid_start ( access_part )? )
            int alt106 = 2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0 == 110) )
            {
                alt106 = 1;
            }
            else if ( ((LA106_0 >= IDENTIFIER && LA106_0 <= NULL) || LA106_0 == SET || (LA106_0 >= 90 && LA106_0 <= 91) || LA106_0 == 95 || (LA106_0 >= 101 && LA106_0 <= 107) || LA106_0 == 109 || (LA106_0 >= 114 && LA106_0 <= 122) || (LA106_0 >= 132 && LA106_0 <= 137) || (LA106_0 >= 175 && LA106_0 <= 187) || LA106_0 == 199 || (LA106_0 >= 201 && LA106_0 <= 202) || LA106_0 == 208 || (LA106_0 >= 225 && LA106_0 <= 226)) )
            {
                alt106 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d106s0 =
                    new NoViableAltException("", 106, 0, input);

                throw nvae_d106s0;
            }
            switch (alt106) 
            {
                case 1 :
                    // cs.g:665:2: '(' expression ')' ( access | access_part )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal290=(IToken)Match(input,110,FOLLOW_110_in_access3426); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal290_tree = (object)adaptor.Create(char_literal290);
                    		adaptor.AddChild(root_0, char_literal290_tree);
                    	}
                    	PushFollow(FOLLOW_expression_in_access3428);
                    	expression291 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression291.Tree);
                    	char_literal292=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_access3430); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal292_tree = (object)adaptor.Create(char_literal292);
                    		adaptor.AddChild(root_0, char_literal292_tree);
                    	}
                    	// cs.g:665:21: ( access | access_part )
                    	int alt104 = 2;
                    	alt104 = dfa104.Predict(input);
                    	switch (alt104) 
                    	{
                    	    case 1 :
                    	        // cs.g:665:24: access
                    	        {
                    	        	PushFollow(FOLLOW_access_in_access3435);
                    	        	access293 = access();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access293.Tree);

                    	        }
                    	        break;
                    	    case 2 :
                    	        // cs.g:666:9: access_part
                    	        {
                    	        	PushFollow(FOLLOW_access_part_in_access3447);
                    	        	access_part294 = access_part();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_part294.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:667:4: qid_start ( access_part )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_qid_start_in_access3455);
                    	qid_start295 = qid_start();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, qid_start295.Tree);
                    	// cs.g:667:16: ( access_part )?
                    	int alt105 = 2;
                    	int LA105_0 = input.LA(1);

                    	if ( ((LA105_0 >= DOT && LA105_0 <= PTR) || LA105_0 == 97) )
                    	{
                    	    alt105 = 1;
                    	}
                    	else if ( (LA105_0 == 110) )
                    	{
                    	    int LA105_3 = input.LA(2);

                    	    if ( (synpred178_cs()) )
                    	    {
                    	        alt105 = 1;
                    	    }
                    	}
                    	switch (alt105) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: access_part
                    	        {
                    	        	PushFollow(FOLLOW_access_part_in_access3459);
                    	        	access_part296 = access_part();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_part296.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 91, access_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "access"

    public class access_part_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "access_part"
    // cs.g:669:1: access_part : ( qid_part ( access_part )? | bracket_expression ( access_part )? | arguments access_part );
    public csParser.access_part_return access_part() // throws RecognitionException [1]
    {   
        csParser.access_part_return retval = new csParser.access_part_return();
        retval.Start = input.LT(1);
        int access_part_StartIndex = input.Index();
        object root_0 = null;

        csParser.qid_part_return qid_part297 = default(csParser.qid_part_return);

        csParser.access_part_return access_part298 = default(csParser.access_part_return);

        csParser.bracket_expression_return bracket_expression299 = default(csParser.bracket_expression_return);

        csParser.access_part_return access_part300 = default(csParser.access_part_return);

        csParser.arguments_return arguments301 = default(csParser.arguments_return);

        csParser.access_part_return access_part302 = default(csParser.access_part_return);



         const string elementName = "access_part"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 92) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:672:1: ( qid_part ( access_part )? | bracket_expression ( access_part )? | arguments access_part )
            int alt109 = 3;
            switch ( input.LA(1) ) 
            {
            case DOT:
            case PTR:
            	{
                alt109 = 1;
                }
                break;
            case 97:
            	{
                alt109 = 2;
                }
                break;
            case 110:
            	{
                alt109 = 3;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d109s0 =
            	        new NoViableAltException("", 109, 0, input);

            	    throw nvae_d109s0;
            }

            switch (alt109) 
            {
                case 1 :
                    // cs.g:673:2: qid_part ( access_part )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_qid_part_in_access_part3481);
                    	qid_part297 = qid_part();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, qid_part297.Tree);
                    	// cs.g:673:11: ( access_part )?
                    	int alt107 = 2;
                    	int LA107_0 = input.LA(1);

                    	if ( ((LA107_0 >= DOT && LA107_0 <= PTR) || LA107_0 == 97) )
                    	{
                    	    alt107 = 1;
                    	}
                    	else if ( (LA107_0 == 110) )
                    	{
                    	    int LA107_3 = input.LA(2);

                    	    if ( (synpred179_cs()) )
                    	    {
                    	        alt107 = 1;
                    	    }
                    	}
                    	switch (alt107) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: access_part
                    	        {
                    	        	PushFollow(FOLLOW_access_part_in_access_part3483);
                    	        	access_part298 = access_part();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_part298.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:674:4: bracket_expression ( access_part )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_bracket_expression_in_access_part3493);
                    	bracket_expression299 = bracket_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bracket_expression299.Tree);
                    	// cs.g:674:23: ( access_part )?
                    	int alt108 = 2;
                    	int LA108_0 = input.LA(1);

                    	if ( ((LA108_0 >= DOT && LA108_0 <= PTR) || LA108_0 == 97) )
                    	{
                    	    alt108 = 1;
                    	}
                    	else if ( (LA108_0 == 110) )
                    	{
                    	    int LA108_3 = input.LA(2);

                    	    if ( (synpred181_cs()) )
                    	    {
                    	        alt108 = 1;
                    	    }
                    	}
                    	switch (alt108) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: access_part
                    	        {
                    	        	PushFollow(FOLLOW_access_part_in_access_part3495);
                    	        	access_part300 = access_part();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_part300.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 3 :
                    // cs.g:675:4: arguments access_part
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_arguments_in_access_part3505);
                    	arguments301 = arguments();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, arguments301.Tree);
                    	PushFollow(FOLLOW_access_part_in_access_part3507);
                    	access_part302 = access_part();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_part302.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 92, access_part_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "access_part"

    public class expression_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "expression_list"
    // cs.g:676:1: expression_list : e+= expression ( ',' e+= expression )* ;
    public csParser.expression_list_return expression_list() // throws RecognitionException [1]
    {   
        csParser.expression_list_return retval = new csParser.expression_list_return();
        retval.Start = input.LT(1);
        int expression_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal303 = null;
        IList list_e = null;
        csParser.expression_return e = default(csParser.expression_return);
         e = null;
        object char_literal303_tree=null;

         const string elementName = "expression_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 93) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:679:1: (e+= expression ( ',' e+= expression )* )
            // cs.g:680:2: e+= expression ( ',' e+= expression )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_expression_in_expression_list3542);
            	e = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, e.Tree);
            	if (list_e == null) list_e = new ArrayList();
            	list_e.Add(e.Tree);

            	// cs.g:680:19: ( ',' e+= expression )*
            	do 
            	{
            	    int alt110 = 2;
            	    int LA110_0 = input.LA(1);

            	    if ( (LA110_0 == 98) )
            	    {
            	        alt110 = 1;
            	    }


            	    switch (alt110) 
            		{
            			case 1 :
            			    // cs.g:680:20: ',' e+= expression
            			    {
            			    	char_literal303=(IToken)Match(input,98,FOLLOW_98_in_expression_list3546); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal303_tree = (object)adaptor.Create(char_literal303);
            			    		adaptor.AddChild(root_0, char_literal303_tree);
            			    	}
            			    	PushFollow(FOLLOW_expression_in_expression_list3552);
            			    	e = expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, e.Tree);
            			    	if (list_e == null) list_e = new ArrayList();
            			    	list_e.Add(e.Tree);


            			    }
            			    break;

            			default:
            			    goto loop110;
            	    }
            	} while (true);

            	loop110:
            		;	// Stops C# compiler whining that label 'loop110' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 93, expression_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "expression_list"

    public class object_creation_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "object_creation_expression"
    // cs.g:682:1: object_creation_expression : 'new' type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) ;
    public csParser.object_creation_expression_return object_creation_expression() // throws RecognitionException [1]
    {   
        csParser.object_creation_expression_return retval = new csParser.object_creation_expression_return();
        retval.Start = input.LT(1);
        int object_creation_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal304 = null;
        IToken char_literal306 = null;
        IToken char_literal308 = null;
        csParser.type_return type305 = default(csParser.type_return);

        csParser.argument_list_return argument_list307 = default(csParser.argument_list_return);

        csParser.object_or_collection_initializer_return object_or_collection_initializer309 = default(csParser.object_or_collection_initializer_return);

        csParser.object_or_collection_initializer_return object_or_collection_initializer310 = default(csParser.object_or_collection_initializer_return);


        object string_literal304_tree=null;
        object char_literal306_tree=null;
        object char_literal308_tree=null;

         const string elementName = "object_creation_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 94) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:685:1: ( 'new' type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) )
            // cs.g:686:2: 'new' type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal304=(IToken)Match(input,138,FOLLOW_138_in_object_creation_expression3576); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal304_tree = (object)adaptor.Create(string_literal304);
            		adaptor.AddChild(root_0, string_literal304_tree);
            	}
            	PushFollow(FOLLOW_type_in_object_creation_expression3580);
            	type305 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type305.Tree);
            	// cs.g:687:3: ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
            	int alt113 = 2;
            	int LA113_0 = input.LA(1);

            	if ( (LA113_0 == 110) )
            	{
            	    alt113 = 1;
            	}
            	else if ( (LA113_0 == 92) )
            	{
            	    alt113 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d113s0 =
            	        new NoViableAltException("", 113, 0, input);

            	    throw nvae_d113s0;
            	}
            	switch (alt113) 
            	{
            	    case 1 :
            	        // cs.g:687:5: '(' ( argument_list )? ')' ( object_or_collection_initializer )?
            	        {
            	        	char_literal306=(IToken)Match(input,110,FOLLOW_110_in_object_creation_expression3589); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal306_tree = (object)adaptor.Create(char_literal306);
            	        		adaptor.AddChild(root_0, char_literal306_tree);
            	        	}
            	        	// cs.g:687:11: ( argument_list )?
            	        	int alt111 = 2;
            	        	int LA111_0 = input.LA(1);

            	        	if ( ((LA111_0 >= IDENTIFIER && LA111_0 <= NULL) || LA111_0 == MINUS || LA111_0 == SET || (LA111_0 >= 90 && LA111_0 <= 91) || LA111_0 == 95 || (LA111_0 >= 101 && LA111_0 <= 107) || (LA111_0 >= 109 && LA111_0 <= 111) || (LA111_0 >= 114 && LA111_0 <= 122) || (LA111_0 >= 124 && LA111_0 <= 144) || (LA111_0 >= 175 && LA111_0 <= 187) || LA111_0 == 199 || (LA111_0 >= 201 && LA111_0 <= 202) || LA111_0 == 208 || (LA111_0 >= 225 && LA111_0 <= 226)) )
            	        	{
            	        	    alt111 = 1;
            	        	}
            	        	switch (alt111) 
            	        	{
            	        	    case 1 :
            	        	        // cs.g:0:0: argument_list
            	        	        {
            	        	        	PushFollow(FOLLOW_argument_list_in_object_creation_expression3593);
            	        	        	argument_list307 = argument_list();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argument_list307.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	char_literal308=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_object_creation_expression3598); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal308_tree = (object)adaptor.Create(char_literal308);
            	        		adaptor.AddChild(root_0, char_literal308_tree);
            	        	}
            	        	// cs.g:687:34: ( object_or_collection_initializer )?
            	        	int alt112 = 2;
            	        	int LA112_0 = input.LA(1);

            	        	if ( (LA112_0 == 92) )
            	        	{
            	        	    alt112 = 1;
            	        	}
            	        	switch (alt112) 
            	        	{
            	        	    case 1 :
            	        	        // cs.g:0:0: object_or_collection_initializer
            	        	        {
            	        	        	PushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression3602);
            	        	        	object_or_collection_initializer309 = object_or_collection_initializer();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, object_or_collection_initializer309.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 2 :
            	        // cs.g:688:7: object_or_collection_initializer
            	        {
            	        	PushFollow(FOLLOW_object_or_collection_initializer_in_object_creation_expression3613);
            	        	object_or_collection_initializer310 = object_or_collection_initializer();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, object_or_collection_initializer310.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 94, object_creation_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "object_creation_expression"

    public class object_or_collection_initializer_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "object_or_collection_initializer"
    // cs.g:690:1: object_or_collection_initializer : ( object_initializer | collection_initializer );
    public csParser.object_or_collection_initializer_return object_or_collection_initializer() // throws RecognitionException [1]
    {   
        csParser.object_or_collection_initializer_return retval = new csParser.object_or_collection_initializer_return();
        retval.Start = input.LT(1);
        int object_or_collection_initializer_StartIndex = input.Index();
        object root_0 = null;

        csParser.object_initializer_return object_initializer311 = default(csParser.object_initializer_return);

        csParser.collection_initializer_return collection_initializer312 = default(csParser.collection_initializer_return);



         const string elementName = "object_or_collection_initializer"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 95) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:693:1: ( object_initializer | collection_initializer )
            int alt114 = 2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0 == 92) )
            {
                switch ( input.LA(2) ) 
                {
                case IDENTIFIER:
                	{
                    int LA114_2 = input.LA(3);

                    if ( (LA114_2 == IDENTIFIER || (LA114_2 >= DOT && LA114_2 <= GT) || LA114_2 == SET || LA114_2 == 89 || LA114_2 == 93 || LA114_2 == 95 || (LA114_2 >= 97 && LA114_2 <= 98) || (LA114_2 >= 101 && LA114_2 <= 107) || (LA114_2 >= 109 && LA114_2 <= 112) || (LA114_2 >= 123 && LA114_2 <= 124) || (LA114_2 >= 127 && LA114_2 <= 129) || (LA114_2 >= 146 && LA114_2 <= 159) || LA114_2 == 169 || (LA114_2 >= 175 && LA114_2 <= 187) || LA114_2 == 199 || (LA114_2 >= 201 && LA114_2 <= 202) || LA114_2 == 208 || (LA114_2 >= 225 && LA114_2 <= 226)) )
                    {
                        alt114 = 2;
                    }
                    else if ( (LA114_2 == 96) )
                    {
                        alt114 = 1;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d114s2 =
                            new NoViableAltException("", 114, 2, input);

                        throw nvae_d114s2;
                    }
                    }
                    break;
                case 175:
                	{
                    int LA114_3 = input.LA(3);

                    if ( (LA114_3 == 96) )
                    {
                        alt114 = 1;
                    }
                    else if ( (LA114_3 == IDENTIFIER || (LA114_3 >= DOT && LA114_3 <= GT) || LA114_3 == SET || LA114_3 == 89 || LA114_3 == 93 || LA114_3 == 95 || (LA114_3 >= 97 && LA114_3 <= 98) || (LA114_3 >= 101 && LA114_3 <= 107) || (LA114_3 >= 109 && LA114_3 <= 124) || (LA114_3 >= 127 && LA114_3 <= 129) || (LA114_3 >= 132 && LA114_3 <= 137) || (LA114_3 >= 146 && LA114_3 <= 159) || LA114_3 == 169 || (LA114_3 >= 175 && LA114_3 <= 187) || LA114_3 == 199 || (LA114_3 >= 201 && LA114_3 <= 202) || LA114_3 == 208 || (LA114_3 >= 225 && LA114_3 <= 226)) )
                    {
                        alt114 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d114s3 =
                            new NoViableAltException("", 114, 3, input);

                        throw nvae_d114s3;
                    }
                    }
                    break;
                case 93:
                	{
                    alt114 = 1;
                    }
                    break;
                case Real_literal:
                case NUMBER:
                case Hex_number:
                case Character_literal:
                case STRINGLITERAL:
                case Verbatim_string_literal:
                case TRUE:
                case FALSE:
                case NULL:
                case MINUS:
                case 90:
                case 91:
                case 92:
                case 110:
                case 111:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                	{
                    alt114 = 2;
                    }
                    break;
                case SET:
                case 95:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 199:
                case 201:
                case 202:
                case 208:
                case 225:
                case 226:
                	{
                    int LA114_6 = input.LA(3);

                    if ( (LA114_6 == 96) )
                    {
                        alt114 = 1;
                    }
                    else if ( (LA114_6 == IDENTIFIER || (LA114_6 >= DOT && LA114_6 <= GT) || LA114_6 == SET || LA114_6 == 89 || LA114_6 == 93 || LA114_6 == 95 || (LA114_6 >= 97 && LA114_6 <= 98) || (LA114_6 >= 101 && LA114_6 <= 107) || (LA114_6 >= 109 && LA114_6 <= 112) || (LA114_6 >= 123 && LA114_6 <= 124) || (LA114_6 >= 127 && LA114_6 <= 129) || (LA114_6 >= 146 && LA114_6 <= 159) || LA114_6 == 169 || (LA114_6 >= 175 && LA114_6 <= 187) || LA114_6 == 199 || (LA114_6 >= 201 && LA114_6 <= 202) || LA114_6 == 208 || (LA114_6 >= 225 && LA114_6 <= 226)) )
                    {
                        alt114 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d114s6 =
                            new NoViableAltException("", 114, 6, input);

                        throw nvae_d114s6;
                    }
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d114s1 =
                	        new NoViableAltException("", 114, 1, input);

                	    throw nvae_d114s1;
                }

            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d114s0 =
                    new NoViableAltException("", 114, 0, input);

                throw nvae_d114s0;
            }
            switch (alt114) 
            {
                case 1 :
                    // cs.g:694:2: object_initializer
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_object_initializer_in_object_or_collection_initializer3636);
                    	object_initializer311 = object_initializer();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, object_initializer311.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:695:4: collection_initializer
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_collection_initializer_in_object_or_collection_initializer3642);
                    	collection_initializer312 = collection_initializer();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, collection_initializer312.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 95, object_or_collection_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "object_or_collection_initializer"

    public class object_initializer_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "object_initializer"
    // cs.g:702:1: object_initializer : ( '{' ( member_initializer_list )? '}' | '{' member_initializer_list ',' '}' );
    public csParser.object_initializer_return object_initializer() // throws RecognitionException [1]
    {   
        csParser.object_initializer_return retval = new csParser.object_initializer_return();
        retval.Start = input.LT(1);
        int object_initializer_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal313 = null;
        IToken char_literal315 = null;
        IToken char_literal316 = null;
        IToken char_literal318 = null;
        IToken char_literal319 = null;
        csParser.member_initializer_list_return member_initializer_list314 = default(csParser.member_initializer_list_return);

        csParser.member_initializer_list_return member_initializer_list317 = default(csParser.member_initializer_list_return);


        object char_literal313_tree=null;
        object char_literal315_tree=null;
        object char_literal316_tree=null;
        object char_literal318_tree=null;
        object char_literal319_tree=null;

         const string elementName = "object_initializer"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 96) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:705:1: ( '{' ( member_initializer_list )? '}' | '{' member_initializer_list ',' '}' )
            int alt116 = 2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0 == 92) )
            {
                int LA116_1 = input.LA(2);

                if ( (synpred189_cs()) )
                {
                    alt116 = 1;
                }
                else if ( (true) )
                {
                    alt116 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d116s1 =
                        new NoViableAltException("", 116, 1, input);

                    throw nvae_d116s1;
                }
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d116s0 =
                    new NoViableAltException("", 116, 0, input);

                throw nvae_d116s0;
            }
            switch (alt116) 
            {
                case 1 :
                    // cs.g:706:2: '{' ( member_initializer_list )? '}'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal313=(IToken)Match(input,92,FOLLOW_92_in_object_initializer3668); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal313_tree = (object)adaptor.Create(char_literal313);
                    		adaptor.AddChild(root_0, char_literal313_tree);
                    	}
                    	// cs.g:706:8: ( member_initializer_list )?
                    	int alt115 = 2;
                    	int LA115_0 = input.LA(1);

                    	if ( (LA115_0 == IDENTIFIER || LA115_0 == SET || LA115_0 == 95 || (LA115_0 >= 101 && LA115_0 <= 107) || LA115_0 == 109 || (LA115_0 >= 175 && LA115_0 <= 187) || LA115_0 == 199 || (LA115_0 >= 201 && LA115_0 <= 202) || LA115_0 == 208 || (LA115_0 >= 225 && LA115_0 <= 226)) )
                    	{
                    	    alt115 = 1;
                    	}
                    	switch (alt115) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: member_initializer_list
                    	        {
                    	        	PushFollow(FOLLOW_member_initializer_list_in_object_initializer3672);
                    	        	member_initializer_list314 = member_initializer_list();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_initializer_list314.Tree);

                    	        }
                    	        break;

                    	}

                    	char_literal315=(IToken)Match(input,93,FOLLOW_93_in_object_initializer3677); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal315_tree = (object)adaptor.Create(char_literal315);
                    		adaptor.AddChild(root_0, char_literal315_tree);
                    	}

                    }
                    break;
                case 2 :
                    // cs.g:707:4: '{' member_initializer_list ',' '}'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal316=(IToken)Match(input,92,FOLLOW_92_in_object_initializer3683); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal316_tree = (object)adaptor.Create(char_literal316);
                    		adaptor.AddChild(root_0, char_literal316_tree);
                    	}
                    	PushFollow(FOLLOW_member_initializer_list_in_object_initializer3687);
                    	member_initializer_list317 = member_initializer_list();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_initializer_list317.Tree);
                    	char_literal318=(IToken)Match(input,98,FOLLOW_98_in_object_initializer3691); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal318_tree = (object)adaptor.Create(char_literal318);
                    		adaptor.AddChild(root_0, char_literal318_tree);
                    	}
                    	char_literal319=(IToken)Match(input,93,FOLLOW_93_in_object_initializer3695); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal319_tree = (object)adaptor.Create(char_literal319);
                    		adaptor.AddChild(root_0, char_literal319_tree);
                    	}

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 96, object_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "object_initializer"

    public class member_initializer_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "member_initializer_list"
    // cs.g:708:1: member_initializer_list : mi+= member_initializer ( ',' mi+= member_initializer ) ;
    public csParser.member_initializer_list_return member_initializer_list() // throws RecognitionException [1]
    {   
        csParser.member_initializer_list_return retval = new csParser.member_initializer_list_return();
        retval.Start = input.LT(1);
        int member_initializer_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal320 = null;
        IList list_mi = null;
        csParser.member_initializer_return mi = default(csParser.member_initializer_return);
         mi = null;
        object char_literal320_tree=null;

         const string elementName = "member_initializer_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 97) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:711:1: (mi+= member_initializer ( ',' mi+= member_initializer ) )
            // cs.g:712:2: mi+= member_initializer ( ',' mi+= member_initializer )
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_member_initializer_in_member_initializer_list3719);
            	mi = member_initializer();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, mi.Tree);
            	if (list_mi == null) list_mi = new ArrayList();
            	list_mi.Add(mi.Tree);

            	// cs.g:712:28: ( ',' mi+= member_initializer )
            	// cs.g:712:29: ',' mi+= member_initializer
            	{
            		char_literal320=(IToken)Match(input,98,FOLLOW_98_in_member_initializer_list3723); if (state.failed) return retval;
            		if ( state.backtracking == 0 )
            		{char_literal320_tree = (object)adaptor.Create(char_literal320);
            			adaptor.AddChild(root_0, char_literal320_tree);
            		}
            		PushFollow(FOLLOW_member_initializer_in_member_initializer_list3729);
            		mi = member_initializer();
            		state.followingStackPointer--;
            		if (state.failed) return retval;
            		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, mi.Tree);
            		if (list_mi == null) list_mi = new ArrayList();
            		list_mi.Add(mi.Tree);


            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 97, member_initializer_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "member_initializer_list"

    public class member_initializer_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "member_initializer"
    // cs.g:714:1: member_initializer : identifier '=' initializer_value ;
    public csParser.member_initializer_return member_initializer() // throws RecognitionException [1]
    {   
        csParser.member_initializer_return retval = new csParser.member_initializer_return();
        retval.Start = input.LT(1);
        int member_initializer_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal322 = null;
        csParser.identifier_return identifier321 = default(csParser.identifier_return);

        csParser.initializer_value_return initializer_value323 = default(csParser.initializer_value_return);


        object char_literal322_tree=null;

         const string elementName = "member_initializer"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 98) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:717:1: ( identifier '=' initializer_value )
            // cs.g:718:2: identifier '=' initializer_value
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_identifier_in_member_initializer3753);
            	identifier321 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier321.Tree);
            	char_literal322=(IToken)Match(input,96,FOLLOW_96_in_member_initializer3757); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal322_tree = (object)adaptor.Create(char_literal322);
            		adaptor.AddChild(root_0, char_literal322_tree);
            	}
            	PushFollow(FOLLOW_initializer_value_in_member_initializer3761);
            	initializer_value323 = initializer_value();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, initializer_value323.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 98, member_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "member_initializer"

    public class initializer_value_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "initializer_value"
    // cs.g:719:1: initializer_value : ( expression | object_or_collection_initializer );
    public csParser.initializer_value_return initializer_value() // throws RecognitionException [1]
    {   
        csParser.initializer_value_return retval = new csParser.initializer_value_return();
        retval.Start = input.LT(1);
        int initializer_value_StartIndex = input.Index();
        object root_0 = null;

        csParser.expression_return expression324 = default(csParser.expression_return);

        csParser.object_or_collection_initializer_return object_or_collection_initializer325 = default(csParser.object_or_collection_initializer_return);



         const string elementName = "initializer_value"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 99) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:722:1: ( expression | object_or_collection_initializer )
            int alt117 = 2;
            int LA117_0 = input.LA(1);

            if ( ((LA117_0 >= IDENTIFIER && LA117_0 <= NULL) || LA117_0 == MINUS || LA117_0 == SET || (LA117_0 >= 90 && LA117_0 <= 91) || LA117_0 == 95 || (LA117_0 >= 101 && LA117_0 <= 107) || (LA117_0 >= 109 && LA117_0 <= 111) || (LA117_0 >= 114 && LA117_0 <= 122) || (LA117_0 >= 124 && LA117_0 <= 129) || (LA117_0 >= 132 && LA117_0 <= 144) || (LA117_0 >= 175 && LA117_0 <= 187) || LA117_0 == 199 || (LA117_0 >= 201 && LA117_0 <= 202) || LA117_0 == 208 || (LA117_0 >= 225 && LA117_0 <= 226)) )
            {
                alt117 = 1;
            }
            else if ( (LA117_0 == 92) )
            {
                alt117 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d117s0 =
                    new NoViableAltException("", 117, 0, input);

                throw nvae_d117s0;
            }
            switch (alt117) 
            {
                case 1 :
                    // cs.g:723:2: expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_expression_in_initializer_value3781);
                    	expression324 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression324.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:724:4: object_or_collection_initializer
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_object_or_collection_initializer_in_initializer_value3787);
                    	object_or_collection_initializer325 = object_or_collection_initializer();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, object_or_collection_initializer325.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 99, initializer_value_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "initializer_value"

    public class collection_initializer_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "collection_initializer"
    // cs.g:725:1: collection_initializer : '{' element_initializer_list ( ',' )? '}' ;
    public csParser.collection_initializer_return collection_initializer() // throws RecognitionException [1]
    {   
        csParser.collection_initializer_return retval = new csParser.collection_initializer_return();
        retval.Start = input.LT(1);
        int collection_initializer_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal326 = null;
        IToken char_literal328 = null;
        IToken char_literal329 = null;
        csParser.element_initializer_list_return element_initializer_list327 = default(csParser.element_initializer_list_return);


        object char_literal326_tree=null;
        object char_literal328_tree=null;
        object char_literal329_tree=null;

         const string elementName = "collection_initializer"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 100) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:728:1: ( '{' element_initializer_list ( ',' )? '}' )
            // cs.g:729:2: '{' element_initializer_list ( ',' )? '}'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal326=(IToken)Match(input,92,FOLLOW_92_in_collection_initializer3807); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal326_tree = (object)adaptor.Create(char_literal326);
            		adaptor.AddChild(root_0, char_literal326_tree);
            	}
            	PushFollow(FOLLOW_element_initializer_list_in_collection_initializer3811);
            	element_initializer_list327 = element_initializer_list();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, element_initializer_list327.Tree);
            	// cs.g:729:35: ( ',' )?
            	int alt118 = 2;
            	int LA118_0 = input.LA(1);

            	if ( (LA118_0 == 98) )
            	{
            	    alt118 = 1;
            	}
            	switch (alt118) 
            	{
            	    case 1 :
            	        // cs.g:0:0: ','
            	        {
            	        	char_literal328=(IToken)Match(input,98,FOLLOW_98_in_collection_initializer3815); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal328_tree = (object)adaptor.Create(char_literal328);
            	        		adaptor.AddChild(root_0, char_literal328_tree);
            	        	}

            	        }
            	        break;

            	}

            	char_literal329=(IToken)Match(input,93,FOLLOW_93_in_collection_initializer3820); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal329_tree = (object)adaptor.Create(char_literal329);
            		adaptor.AddChild(root_0, char_literal329_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 100, collection_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "collection_initializer"

    public class element_initializer_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "element_initializer_list"
    // cs.g:730:1: element_initializer_list : ei+= element_initializer ( ',' ei+= element_initializer )* ;
    public csParser.element_initializer_list_return element_initializer_list() // throws RecognitionException [1]
    {   
        csParser.element_initializer_list_return retval = new csParser.element_initializer_list_return();
        retval.Start = input.LT(1);
        int element_initializer_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal330 = null;
        IList list_ei = null;
        csParser.element_initializer_return ei = default(csParser.element_initializer_return);
         ei = null;
        object char_literal330_tree=null;

         const string elementName = "element_initializer_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 101) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:733:1: (ei+= element_initializer ( ',' ei+= element_initializer )* )
            // cs.g:734:2: ei+= element_initializer ( ',' ei+= element_initializer )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_element_initializer_in_element_initializer_list3844);
            	ei = element_initializer();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ei.Tree);
            	if (list_ei == null) list_ei = new ArrayList();
            	list_ei.Add(ei.Tree);

            	// cs.g:734:29: ( ',' ei+= element_initializer )*
            	do 
            	{
            	    int alt119 = 2;
            	    int LA119_0 = input.LA(1);

            	    if ( (LA119_0 == 98) )
            	    {
            	        int LA119_1 = input.LA(2);

            	        if ( ((LA119_1 >= IDENTIFIER && LA119_1 <= NULL) || LA119_1 == MINUS || LA119_1 == SET || (LA119_1 >= 90 && LA119_1 <= 92) || LA119_1 == 95 || (LA119_1 >= 101 && LA119_1 <= 107) || (LA119_1 >= 109 && LA119_1 <= 111) || (LA119_1 >= 114 && LA119_1 <= 122) || (LA119_1 >= 124 && LA119_1 <= 129) || (LA119_1 >= 132 && LA119_1 <= 144) || (LA119_1 >= 175 && LA119_1 <= 187) || LA119_1 == 199 || (LA119_1 >= 201 && LA119_1 <= 202) || LA119_1 == 208 || (LA119_1 >= 225 && LA119_1 <= 226)) )
            	        {
            	            alt119 = 1;
            	        }


            	    }


            	    switch (alt119) 
            		{
            			case 1 :
            			    // cs.g:734:30: ',' ei+= element_initializer
            			    {
            			    	char_literal330=(IToken)Match(input,98,FOLLOW_98_in_element_initializer_list3848); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal330_tree = (object)adaptor.Create(char_literal330);
            			    		adaptor.AddChild(root_0, char_literal330_tree);
            			    	}
            			    	PushFollow(FOLLOW_element_initializer_in_element_initializer_list3854);
            			    	ei = element_initializer();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ei.Tree);
            			    	if (list_ei == null) list_ei = new ArrayList();
            			    	list_ei.Add(ei.Tree);


            			    }
            			    break;

            			default:
            			    goto loop119;
            	    }
            	} while (true);

            	loop119:
            		;	// Stops C# compiler whining that label 'loop119' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 101, element_initializer_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "element_initializer_list"

    public class element_initializer_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "element_initializer"
    // cs.g:736:1: element_initializer : ( non_assignment_expression | '{' expression_list '}' );
    public csParser.element_initializer_return element_initializer() // throws RecognitionException [1]
    {   
        csParser.element_initializer_return retval = new csParser.element_initializer_return();
        retval.Start = input.LT(1);
        int element_initializer_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal332 = null;
        IToken char_literal334 = null;
        csParser.non_assignment_expression_return non_assignment_expression331 = default(csParser.non_assignment_expression_return);

        csParser.expression_list_return expression_list333 = default(csParser.expression_list_return);


        object char_literal332_tree=null;
        object char_literal334_tree=null;

         const string elementName = "element_initializer"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 102) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:739:1: ( non_assignment_expression | '{' expression_list '}' )
            int alt120 = 2;
            int LA120_0 = input.LA(1);

            if ( ((LA120_0 >= IDENTIFIER && LA120_0 <= NULL) || LA120_0 == MINUS || LA120_0 == SET || (LA120_0 >= 90 && LA120_0 <= 91) || LA120_0 == 95 || (LA120_0 >= 101 && LA120_0 <= 107) || (LA120_0 >= 109 && LA120_0 <= 111) || (LA120_0 >= 114 && LA120_0 <= 122) || (LA120_0 >= 124 && LA120_0 <= 129) || (LA120_0 >= 132 && LA120_0 <= 144) || (LA120_0 >= 175 && LA120_0 <= 187) || LA120_0 == 199 || (LA120_0 >= 201 && LA120_0 <= 202) || LA120_0 == 208 || (LA120_0 >= 225 && LA120_0 <= 226)) )
            {
                alt120 = 1;
            }
            else if ( (LA120_0 == 92) )
            {
                alt120 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d120s0 =
                    new NoViableAltException("", 120, 0, input);

                throw nvae_d120s0;
            }
            switch (alt120) 
            {
                case 1 :
                    // cs.g:740:2: non_assignment_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_non_assignment_expression_in_element_initializer3878);
                    	non_assignment_expression331 = non_assignment_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, non_assignment_expression331.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:741:4: '{' expression_list '}'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal332=(IToken)Match(input,92,FOLLOW_92_in_element_initializer3884); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal332_tree = (object)adaptor.Create(char_literal332);
                    		adaptor.AddChild(root_0, char_literal332_tree);
                    	}
                    	PushFollow(FOLLOW_expression_list_in_element_initializer3888);
                    	expression_list333 = expression_list();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression_list333.Tree);
                    	char_literal334=(IToken)Match(input,93,FOLLOW_93_in_element_initializer3892); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal334_tree = (object)adaptor.Create(char_literal334);
                    		adaptor.AddChild(root_0, char_literal334_tree);
                    	}

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 102, element_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "element_initializer"

    public class array_creation_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "array_creation_expression"
    // cs.g:742:1: array_creation_expression : 'new' ( non_array_type '[' expression_list ']' ( rank_specifiers )? ( array_initializer )? ( access_operator primary_expression )* | array_type array_initializer | rank_specifier array_initializer ) ;
    public csParser.array_creation_expression_return array_creation_expression() // throws RecognitionException [1]
    {   
        csParser.array_creation_expression_return retval = new csParser.array_creation_expression_return();
        retval.Start = input.LT(1);
        int array_creation_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal335 = null;
        IToken char_literal337 = null;
        IToken char_literal339 = null;
        csParser.non_array_type_return non_array_type336 = default(csParser.non_array_type_return);

        csParser.expression_list_return expression_list338 = default(csParser.expression_list_return);

        csParser.rank_specifiers_return rank_specifiers340 = default(csParser.rank_specifiers_return);

        csParser.array_initializer_return array_initializer341 = default(csParser.array_initializer_return);

        csParser.access_operator_return access_operator342 = default(csParser.access_operator_return);

        csParser.primary_expression_return primary_expression343 = default(csParser.primary_expression_return);

        csParser.array_type_return array_type344 = default(csParser.array_type_return);

        csParser.array_initializer_return array_initializer345 = default(csParser.array_initializer_return);

        csParser.rank_specifier_return rank_specifier346 = default(csParser.rank_specifier_return);

        csParser.array_initializer_return array_initializer347 = default(csParser.array_initializer_return);


        object string_literal335_tree=null;
        object char_literal337_tree=null;
        object char_literal339_tree=null;

         const string elementName = "array_creation_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 103) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:745:1: ( 'new' ( non_array_type '[' expression_list ']' ( rank_specifiers )? ( array_initializer )? ( access_operator primary_expression )* | array_type array_initializer | rank_specifier array_initializer ) )
            // cs.g:746:2: 'new' ( non_array_type '[' expression_list ']' ( rank_specifiers )? ( array_initializer )? ( access_operator primary_expression )* | array_type array_initializer | rank_specifier array_initializer )
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal335=(IToken)Match(input,138,FOLLOW_138_in_array_creation_expression3912); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal335_tree = (object)adaptor.Create(string_literal335);
            		adaptor.AddChild(root_0, string_literal335_tree);
            	}
            	// cs.g:746:10: ( non_array_type '[' expression_list ']' ( rank_specifiers )? ( array_initializer )? ( access_operator primary_expression )* | array_type array_initializer | rank_specifier array_initializer )
            	int alt124 = 3;
            	switch ( input.LA(1) ) 
            	{
            	case IDENTIFIER:
            		{
            	    int LA124_1 = input.LA(2);

            	    if ( (synpred197_cs()) )
            	    {
            	        alt124 = 1;
            	    }
            	    else if ( (synpred198_cs()) )
            	    {
            	        alt124 = 2;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d124s1 =
            	            new NoViableAltException("", 124, 1, input);

            	        throw nvae_d124s1;
            	    }
            	    }
            	    break;
            	case SET:
            	case 95:
            	case 101:
            	case 102:
            	case 103:
            	case 104:
            	case 105:
            	case 106:
            	case 107:
            	case 109:
            	case 175:
            	case 176:
            	case 177:
            	case 178:
            	case 179:
            	case 180:
            	case 181:
            	case 182:
            	case 183:
            	case 184:
            	case 185:
            	case 186:
            	case 187:
            	case 199:
            	case 201:
            	case 202:
            	case 208:
            	case 225:
            	case 226:
            		{
            	    int LA124_2 = input.LA(2);

            	    if ( (synpred197_cs()) )
            	    {
            	        alt124 = 1;
            	    }
            	    else if ( (synpred198_cs()) )
            	    {
            	        alt124 = 2;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d124s2 =
            	            new NoViableAltException("", 124, 2, input);

            	        throw nvae_d124s2;
            	    }
            	    }
            	    break;
            	case 114:
            	case 115:
            	case 116:
            	case 117:
            	case 118:
            	case 119:
            	case 120:
            	case 121:
            	case 122:
            	case 132:
            	case 133:
            	case 134:
            	case 135:
            	case 136:
            	case 137:
            		{
            	    int LA124_3 = input.LA(2);

            	    if ( (synpred197_cs()) )
            	    {
            	        alt124 = 1;
            	    }
            	    else if ( (synpred198_cs()) )
            	    {
            	        alt124 = 2;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d124s3 =
            	            new NoViableAltException("", 124, 3, input);

            	        throw nvae_d124s3;
            	    }
            	    }
            	    break;
            	case 113:
            		{
            	    int LA124_4 = input.LA(2);

            	    if ( (synpred197_cs()) )
            	    {
            	        alt124 = 1;
            	    }
            	    else if ( (synpred198_cs()) )
            	    {
            	        alt124 = 2;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d124s4 =
            	            new NoViableAltException("", 124, 4, input);

            	        throw nvae_d124s4;
            	    }
            	    }
            	    break;
            	case 97:
            		{
            	    alt124 = 3;
            	    }
            	    break;
            		default:
            		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		    NoViableAltException nvae_d124s0 =
            		        new NoViableAltException("", 124, 0, input);

            		    throw nvae_d124s0;
            	}

            	switch (alt124) 
            	{
            	    case 1 :
            	        // cs.g:746:11: non_array_type '[' expression_list ']' ( rank_specifiers )? ( array_initializer )? ( access_operator primary_expression )*
            	        {
            	        	PushFollow(FOLLOW_non_array_type_in_array_creation_expression3917);
            	        	non_array_type336 = non_array_type();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, non_array_type336.Tree);
            	        	char_literal337=(IToken)Match(input,97,FOLLOW_97_in_array_creation_expression3919); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal337_tree = (object)adaptor.Create(char_literal337);
            	        		adaptor.AddChild(root_0, char_literal337_tree);
            	        	}
            	        	PushFollow(FOLLOW_expression_list_in_array_creation_expression3923);
            	        	expression_list338 = expression_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression_list338.Tree);
            	        	char_literal339=(IToken)Match(input,99,FOLLOW_99_in_array_creation_expression3927); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal339_tree = (object)adaptor.Create(char_literal339);
            	        		adaptor.AddChild(root_0, char_literal339_tree);
            	        	}
            	        	// cs.g:746:56: ( rank_specifiers )?
            	        	int alt121 = 2;
            	        	int LA121_0 = input.LA(1);

            	        	if ( (LA121_0 == 97) )
            	        	{
            	        	    int LA121_1 = input.LA(2);

            	        	    if ( ((LA121_1 >= 98 && LA121_1 <= 99)) )
            	        	    {
            	        	        alt121 = 1;
            	        	    }
            	        	}
            	        	switch (alt121) 
            	        	{
            	        	    case 1 :
            	        	        // cs.g:0:0: rank_specifiers
            	        	        {
            	        	        	PushFollow(FOLLOW_rank_specifiers_in_array_creation_expression3931);
            	        	        	rank_specifiers340 = rank_specifiers();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rank_specifiers340.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	// cs.g:746:75: ( array_initializer )?
            	        	int alt122 = 2;
            	        	int LA122_0 = input.LA(1);

            	        	if ( (LA122_0 == 92) )
            	        	{
            	        	    alt122 = 1;
            	        	}
            	        	switch (alt122) 
            	        	{
            	        	    case 1 :
            	        	        // cs.g:0:0: array_initializer
            	        	        {
            	        	        	PushFollow(FOLLOW_array_initializer_in_array_creation_expression3936);
            	        	        	array_initializer341 = array_initializer();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, array_initializer341.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	// cs.g:746:96: ( access_operator primary_expression )*
            	        	do 
            	        	{
            	        	    int alt123 = 2;
            	        	    int LA123_0 = input.LA(1);

            	        	    if ( ((LA123_0 >= DOT && LA123_0 <= PTR)) )
            	        	    {
            	        	        alt123 = 1;
            	        	    }


            	        	    switch (alt123) 
            	        		{
            	        			case 1 :
            	        			    // cs.g:746:97: access_operator primary_expression
            	        			    {
            	        			    	PushFollow(FOLLOW_access_operator_in_array_creation_expression3942);
            	        			    	access_operator342 = access_operator();
            	        			    	state.followingStackPointer--;
            	        			    	if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, access_operator342.Tree);
            	        			    	PushFollow(FOLLOW_primary_expression_in_array_creation_expression3946);
            	        			    	primary_expression343 = primary_expression();
            	        			    	state.followingStackPointer--;
            	        			    	if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_expression343.Tree);

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop123;
            	        	    }
            	        	} while (true);

            	        	loop123:
            	        		;	// Stops C# compiler whining that label 'loop123' has no statements


            	        }
            	        break;
            	    case 2 :
            	        // cs.g:747:5: array_type array_initializer
            	        {
            	        	PushFollow(FOLLOW_array_type_in_array_creation_expression3954);
            	        	array_type344 = array_type();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, array_type344.Tree);
            	        	PushFollow(FOLLOW_array_initializer_in_array_creation_expression3958);
            	        	array_initializer345 = array_initializer();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, array_initializer345.Tree);

            	        }
            	        break;
            	    case 3 :
            	        // cs.g:748:4: rank_specifier array_initializer
            	        {
            	        	PushFollow(FOLLOW_rank_specifier_in_array_creation_expression3963);
            	        	rank_specifier346 = rank_specifier();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rank_specifier346.Tree);
            	        	PushFollow(FOLLOW_array_initializer_in_array_creation_expression3967);
            	        	array_initializer347 = array_initializer();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, array_initializer347.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 103, array_creation_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "array_creation_expression"

    public class delegate_creation_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "delegate_creation_expression"
    // cs.g:749:1: delegate_creation_expression : 'new' type_name '(' expression ')' ;
    public csParser.delegate_creation_expression_return delegate_creation_expression() // throws RecognitionException [1]
    {   
        csParser.delegate_creation_expression_return retval = new csParser.delegate_creation_expression_return();
        retval.Start = input.LT(1);
        int delegate_creation_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal348 = null;
        IToken char_literal350 = null;
        IToken char_literal352 = null;
        csParser.type_name_return type_name349 = default(csParser.type_name_return);

        csParser.expression_return expression351 = default(csParser.expression_return);


        object string_literal348_tree=null;
        object char_literal350_tree=null;
        object char_literal352_tree=null;

         const string elementName = "delegate_creation_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 104) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:752:1: ( 'new' type_name '(' expression ')' )
            // cs.g:753:2: 'new' type_name '(' expression ')'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal348=(IToken)Match(input,138,FOLLOW_138_in_delegate_creation_expression3988); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal348_tree = (object)adaptor.Create(string_literal348);
            		adaptor.AddChild(root_0, string_literal348_tree);
            	}
            	PushFollow(FOLLOW_type_name_in_delegate_creation_expression3992);
            	type_name349 = type_name();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name349.Tree);
            	char_literal350=(IToken)Match(input,110,FOLLOW_110_in_delegate_creation_expression3996); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal350_tree = (object)adaptor.Create(char_literal350);
            		adaptor.AddChild(root_0, char_literal350_tree);
            	}
            	PushFollow(FOLLOW_expression_in_delegate_creation_expression4000);
            	expression351 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression351.Tree);
            	char_literal352=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_delegate_creation_expression4004); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal352_tree = (object)adaptor.Create(char_literal352);
            		adaptor.AddChild(root_0, char_literal352_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 104, delegate_creation_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "delegate_creation_expression"

    public class anonymous_object_creation_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "anonymous_object_creation_expression"
    // cs.g:754:1: anonymous_object_creation_expression : 'new' anonymous_object_initializer ;
    public csParser.anonymous_object_creation_expression_return anonymous_object_creation_expression() // throws RecognitionException [1]
    {   
        csParser.anonymous_object_creation_expression_return retval = new csParser.anonymous_object_creation_expression_return();
        retval.Start = input.LT(1);
        int anonymous_object_creation_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal353 = null;
        csParser.anonymous_object_initializer_return anonymous_object_initializer354 = default(csParser.anonymous_object_initializer_return);


        object string_literal353_tree=null;

         const string elementName = "anonymous_object_creation_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 105) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:757:1: ( 'new' anonymous_object_initializer )
            // cs.g:758:2: 'new' anonymous_object_initializer
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal353=(IToken)Match(input,138,FOLLOW_138_in_anonymous_object_creation_expression4024); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal353_tree = (object)adaptor.Create(string_literal353);
            		adaptor.AddChild(root_0, string_literal353_tree);
            	}
            	PushFollow(FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression4028);
            	anonymous_object_initializer354 = anonymous_object_initializer();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, anonymous_object_initializer354.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 105, anonymous_object_creation_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "anonymous_object_creation_expression"

    public class anonymous_object_initializer_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "anonymous_object_initializer"
    // cs.g:759:1: anonymous_object_initializer : ( '{' ( member_declarator_list )? '}' | '{' member_declarator_list ',' '}' );
    public csParser.anonymous_object_initializer_return anonymous_object_initializer() // throws RecognitionException [1]
    {   
        csParser.anonymous_object_initializer_return retval = new csParser.anonymous_object_initializer_return();
        retval.Start = input.LT(1);
        int anonymous_object_initializer_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal355 = null;
        IToken char_literal357 = null;
        IToken char_literal358 = null;
        IToken char_literal360 = null;
        IToken char_literal361 = null;
        csParser.member_declarator_list_return member_declarator_list356 = default(csParser.member_declarator_list_return);

        csParser.member_declarator_list_return member_declarator_list359 = default(csParser.member_declarator_list_return);


        object char_literal355_tree=null;
        object char_literal357_tree=null;
        object char_literal358_tree=null;
        object char_literal360_tree=null;
        object char_literal361_tree=null;

         const string elementName = "anonymous_object_initializer"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 106) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:762:1: ( '{' ( member_declarator_list )? '}' | '{' member_declarator_list ',' '}' )
            int alt126 = 2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0 == 92) )
            {
                int LA126_1 = input.LA(2);

                if ( (synpred200_cs()) )
                {
                    alt126 = 1;
                }
                else if ( (true) )
                {
                    alt126 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d126s1 =
                        new NoViableAltException("", 126, 1, input);

                    throw nvae_d126s1;
                }
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d126s0 =
                    new NoViableAltException("", 126, 0, input);

                throw nvae_d126s0;
            }
            switch (alt126) 
            {
                case 1 :
                    // cs.g:763:2: '{' ( member_declarator_list )? '}'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal355=(IToken)Match(input,92,FOLLOW_92_in_anonymous_object_initializer4048); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal355_tree = (object)adaptor.Create(char_literal355);
                    		adaptor.AddChild(root_0, char_literal355_tree);
                    	}
                    	// cs.g:763:8: ( member_declarator_list )?
                    	int alt125 = 2;
                    	int LA125_0 = input.LA(1);

                    	if ( (LA125_0 == IDENTIFIER || LA125_0 == SET || LA125_0 == 95 || (LA125_0 >= 101 && LA125_0 <= 107) || LA125_0 == 109 || (LA125_0 >= 175 && LA125_0 <= 187) || LA125_0 == 199 || (LA125_0 >= 201 && LA125_0 <= 202) || LA125_0 == 208 || (LA125_0 >= 225 && LA125_0 <= 226)) )
                    	{
                    	    alt125 = 1;
                    	}
                    	switch (alt125) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: member_declarator_list
                    	        {
                    	        	PushFollow(FOLLOW_member_declarator_list_in_anonymous_object_initializer4052);
                    	        	member_declarator_list356 = member_declarator_list();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_declarator_list356.Tree);

                    	        }
                    	        break;

                    	}

                    	char_literal357=(IToken)Match(input,93,FOLLOW_93_in_anonymous_object_initializer4057); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal357_tree = (object)adaptor.Create(char_literal357);
                    		adaptor.AddChild(root_0, char_literal357_tree);
                    	}

                    }
                    break;
                case 2 :
                    // cs.g:764:4: '{' member_declarator_list ',' '}'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal358=(IToken)Match(input,92,FOLLOW_92_in_anonymous_object_initializer4063); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal358_tree = (object)adaptor.Create(char_literal358);
                    		adaptor.AddChild(root_0, char_literal358_tree);
                    	}
                    	PushFollow(FOLLOW_member_declarator_list_in_anonymous_object_initializer4067);
                    	member_declarator_list359 = member_declarator_list();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_declarator_list359.Tree);
                    	char_literal360=(IToken)Match(input,98,FOLLOW_98_in_anonymous_object_initializer4071); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal360_tree = (object)adaptor.Create(char_literal360);
                    		adaptor.AddChild(root_0, char_literal360_tree);
                    	}
                    	char_literal361=(IToken)Match(input,93,FOLLOW_93_in_anonymous_object_initializer4075); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal361_tree = (object)adaptor.Create(char_literal361);
                    		adaptor.AddChild(root_0, char_literal361_tree);
                    	}

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 106, anonymous_object_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "anonymous_object_initializer"

    public class member_declarator_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "member_declarator_list"
    // cs.g:765:1: member_declarator_list : md+= member_declarator ( ',' md+= member_declarator ) ;
    public csParser.member_declarator_list_return member_declarator_list() // throws RecognitionException [1]
    {   
        csParser.member_declarator_list_return retval = new csParser.member_declarator_list_return();
        retval.Start = input.LT(1);
        int member_declarator_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal362 = null;
        IList list_md = null;
        csParser.member_declarator_return md = default(csParser.member_declarator_return);
         md = null;
        object char_literal362_tree=null;

         const string elementName = "member_declarator_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 107) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:768:1: (md+= member_declarator ( ',' md+= member_declarator ) )
            // cs.g:769:2: md+= member_declarator ( ',' md+= member_declarator )
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_member_declarator_in_member_declarator_list4098);
            	md = member_declarator();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, md.Tree);
            	if (list_md == null) list_md = new ArrayList();
            	list_md.Add(md.Tree);

            	// cs.g:769:27: ( ',' md+= member_declarator )
            	// cs.g:769:28: ',' md+= member_declarator
            	{
            		char_literal362=(IToken)Match(input,98,FOLLOW_98_in_member_declarator_list4102); if (state.failed) return retval;
            		if ( state.backtracking == 0 )
            		{char_literal362_tree = (object)adaptor.Create(char_literal362);
            			adaptor.AddChild(root_0, char_literal362_tree);
            		}
            		PushFollow(FOLLOW_member_declarator_in_member_declarator_list4108);
            		md = member_declarator();
            		state.followingStackPointer--;
            		if (state.failed) return retval;
            		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, md.Tree);
            		if (list_md == null) list_md = new ArrayList();
            		list_md.Add(md.Tree);


            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 107, member_declarator_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "member_declarator_list"

    public class member_declarator_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "member_declarator"
    // cs.g:771:1: member_declarator : ( identifier ( generic_argument_list )? | member_access | identifier '=' expression );
    public csParser.member_declarator_return member_declarator() // throws RecognitionException [1]
    {   
        csParser.member_declarator_return retval = new csParser.member_declarator_return();
        retval.Start = input.LT(1);
        int member_declarator_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal367 = null;
        csParser.identifier_return identifier363 = default(csParser.identifier_return);

        csParser.generic_argument_list_return generic_argument_list364 = default(csParser.generic_argument_list_return);

        csParser.member_access_return member_access365 = default(csParser.member_access_return);

        csParser.identifier_return identifier366 = default(csParser.identifier_return);

        csParser.expression_return expression368 = default(csParser.expression_return);


        object char_literal367_tree=null;

         const string elementName = "member_declarator"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 108) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:774:1: ( identifier ( generic_argument_list )? | member_access | identifier '=' expression )
            int alt128 = 3;
            int LA128_0 = input.LA(1);

            if ( (LA128_0 == IDENTIFIER) )
            {
                int LA128_1 = input.LA(2);

                if ( (LA128_1 == 96) )
                {
                    alt128 = 3;
                }
                else if ( (synpred202_cs()) )
                {
                    alt128 = 1;
                }
                else if ( (synpred203_cs()) )
                {
                    alt128 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d128s1 =
                        new NoViableAltException("", 128, 1, input);

                    throw nvae_d128s1;
                }
            }
            else if ( (LA128_0 == SET || LA128_0 == 95 || (LA128_0 >= 101 && LA128_0 <= 107) || LA128_0 == 109 || (LA128_0 >= 175 && LA128_0 <= 187) || LA128_0 == 199 || (LA128_0 >= 201 && LA128_0 <= 202) || LA128_0 == 208 || (LA128_0 >= 225 && LA128_0 <= 226)) )
            {
                int LA128_2 = input.LA(2);

                if ( (LA128_2 == 96) )
                {
                    alt128 = 3;
                }
                else if ( (synpred202_cs()) )
                {
                    alt128 = 1;
                }
                else if ( (synpred203_cs()) )
                {
                    alt128 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d128s2 =
                        new NoViableAltException("", 128, 2, input);

                    throw nvae_d128s2;
                }
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d128s0 =
                    new NoViableAltException("", 128, 0, input);

                throw nvae_d128s0;
            }
            switch (alt128) 
            {
                case 1 :
                    // cs.g:775:2: identifier ( generic_argument_list )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_identifier_in_member_declarator4132);
                    	identifier363 = identifier();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier363.Tree);
                    	// cs.g:775:15: ( generic_argument_list )?
                    	int alt127 = 2;
                    	int LA127_0 = input.LA(1);

                    	if ( (LA127_0 == 123) )
                    	{
                    	    alt127 = 1;
                    	}
                    	switch (alt127) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: generic_argument_list
                    	        {
                    	        	PushFollow(FOLLOW_generic_argument_list_in_member_declarator4136);
                    	        	generic_argument_list364 = generic_argument_list();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_argument_list364.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:776:4: member_access
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_member_access_in_member_declarator4144);
                    	member_access365 = member_access();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_access365.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:777:4: identifier '=' expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_identifier_in_member_declarator4150);
                    	identifier366 = identifier();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier366.Tree);
                    	char_literal367=(IToken)Match(input,96,FOLLOW_96_in_member_declarator4154); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal367_tree = (object)adaptor.Create(char_literal367);
                    		adaptor.AddChild(root_0, char_literal367_tree);
                    	}
                    	PushFollow(FOLLOW_expression_in_member_declarator4158);
                    	expression368 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression368.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 108, member_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "member_declarator"

    public class sizeof_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "sizeof_expression"
    // cs.g:778:1: sizeof_expression : 'sizeof' '(' unmanaged_type ')' ;
    public csParser.sizeof_expression_return sizeof_expression() // throws RecognitionException [1]
    {   
        csParser.sizeof_expression_return retval = new csParser.sizeof_expression_return();
        retval.Start = input.LT(1);
        int sizeof_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal369 = null;
        IToken char_literal370 = null;
        IToken char_literal372 = null;
        csParser.unmanaged_type_return unmanaged_type371 = default(csParser.unmanaged_type_return);


        object string_literal369_tree=null;
        object char_literal370_tree=null;
        object char_literal372_tree=null;

         const string elementName = "sizeof_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 109) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:781:1: ( 'sizeof' '(' unmanaged_type ')' )
            // cs.g:782:2: 'sizeof' '(' unmanaged_type ')'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal369=(IToken)Match(input,139,FOLLOW_139_in_sizeof_expression4178); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal369_tree = (object)adaptor.Create(string_literal369);
            		adaptor.AddChild(root_0, string_literal369_tree);
            	}
            	char_literal370=(IToken)Match(input,110,FOLLOW_110_in_sizeof_expression4182); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal370_tree = (object)adaptor.Create(char_literal370);
            		adaptor.AddChild(root_0, char_literal370_tree);
            	}
            	PushFollow(FOLLOW_unmanaged_type_in_sizeof_expression4186);
            	unmanaged_type371 = unmanaged_type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unmanaged_type371.Tree);
            	char_literal372=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_sizeof_expression4190); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal372_tree = (object)adaptor.Create(char_literal372);
            		adaptor.AddChild(root_0, char_literal372_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 109, sizeof_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "sizeof_expression"

    public class typeof_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "typeof_expression"
    // cs.g:783:1: typeof_expression : ( 'typeof' '(' type ')' | 'typeof' '(' unbound_type_name ')' | 'typeof' '(' 'void' ')' );
    public csParser.typeof_expression_return typeof_expression() // throws RecognitionException [1]
    {   
        csParser.typeof_expression_return retval = new csParser.typeof_expression_return();
        retval.Start = input.LT(1);
        int typeof_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal373 = null;
        IToken char_literal374 = null;
        IToken char_literal376 = null;
        IToken string_literal377 = null;
        IToken char_literal378 = null;
        IToken char_literal380 = null;
        IToken string_literal381 = null;
        IToken char_literal382 = null;
        IToken string_literal383 = null;
        IToken char_literal384 = null;
        csParser.type_return type375 = default(csParser.type_return);

        csParser.unbound_type_name_return unbound_type_name379 = default(csParser.unbound_type_name_return);


        object string_literal373_tree=null;
        object char_literal374_tree=null;
        object char_literal376_tree=null;
        object string_literal377_tree=null;
        object char_literal378_tree=null;
        object char_literal380_tree=null;
        object string_literal381_tree=null;
        object char_literal382_tree=null;
        object string_literal383_tree=null;
        object char_literal384_tree=null;

         const string elementName = "typeof_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 110) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:786:1: ( 'typeof' '(' type ')' | 'typeof' '(' unbound_type_name ')' | 'typeof' '(' 'void' ')' )
            int alt129 = 3;
            alt129 = dfa129.Predict(input);
            switch (alt129) 
            {
                case 1 :
                    // cs.g:787:2: 'typeof' '(' type ')'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal373=(IToken)Match(input,140,FOLLOW_140_in_typeof_expression4209); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal373_tree = (object)adaptor.Create(string_literal373);
                    		adaptor.AddChild(root_0, string_literal373_tree);
                    	}
                    	char_literal374=(IToken)Match(input,110,FOLLOW_110_in_typeof_expression4213); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal374_tree = (object)adaptor.Create(char_literal374);
                    		adaptor.AddChild(root_0, char_literal374_tree);
                    	}
                    	PushFollow(FOLLOW_type_in_typeof_expression4217);
                    	type375 = type();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type375.Tree);
                    	char_literal376=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_typeof_expression4221); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal376_tree = (object)adaptor.Create(char_literal376);
                    		adaptor.AddChild(root_0, char_literal376_tree);
                    	}

                    }
                    break;
                case 2 :
                    // cs.g:788:4: 'typeof' '(' unbound_type_name ')'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal377=(IToken)Match(input,140,FOLLOW_140_in_typeof_expression4227); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal377_tree = (object)adaptor.Create(string_literal377);
                    		adaptor.AddChild(root_0, string_literal377_tree);
                    	}
                    	char_literal378=(IToken)Match(input,110,FOLLOW_110_in_typeof_expression4229); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal378_tree = (object)adaptor.Create(char_literal378);
                    		adaptor.AddChild(root_0, char_literal378_tree);
                    	}
                    	PushFollow(FOLLOW_unbound_type_name_in_typeof_expression4233);
                    	unbound_type_name379 = unbound_type_name();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unbound_type_name379.Tree);
                    	char_literal380=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_typeof_expression4237); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal380_tree = (object)adaptor.Create(char_literal380);
                    		adaptor.AddChild(root_0, char_literal380_tree);
                    	}

                    }
                    break;
                case 3 :
                    // cs.g:789:4: 'typeof' '(' 'void' ')'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal381=(IToken)Match(input,140,FOLLOW_140_in_typeof_expression4243); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal381_tree = (object)adaptor.Create(string_literal381);
                    		adaptor.AddChild(root_0, string_literal381_tree);
                    	}
                    	char_literal382=(IToken)Match(input,110,FOLLOW_110_in_typeof_expression4245); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal382_tree = (object)adaptor.Create(char_literal382);
                    		adaptor.AddChild(root_0, char_literal382_tree);
                    	}
                    	string_literal383=(IToken)Match(input,113,FOLLOW_113_in_typeof_expression4247); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal383_tree = (object)adaptor.Create(string_literal383);
                    		adaptor.AddChild(root_0, string_literal383_tree);
                    	}
                    	char_literal384=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_typeof_expression4249); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal384_tree = (object)adaptor.Create(char_literal384);
                    		adaptor.AddChild(root_0, char_literal384_tree);
                    	}

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 110, typeof_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "typeof_expression"

    public class unbound_type_name_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "unbound_type_name"
    // cs.g:794:1: unbound_type_name : unbound_type_name_start ( unbound_type_name_part )* ;
    public csParser.unbound_type_name_return unbound_type_name() // throws RecognitionException [1]
    {   
        csParser.unbound_type_name_return retval = new csParser.unbound_type_name_return();
        retval.Start = input.LT(1);
        int unbound_type_name_StartIndex = input.Index();
        object root_0 = null;

        csParser.unbound_type_name_start_return unbound_type_name_start385 = default(csParser.unbound_type_name_start_return);

        csParser.unbound_type_name_part_return unbound_type_name_part386 = default(csParser.unbound_type_name_part_return);



         const string elementName = "unbound_type_name"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 111) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:797:1: ( unbound_type_name_start ( unbound_type_name_part )* )
            // cs.g:798:2: unbound_type_name_start ( unbound_type_name_part )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_unbound_type_name_start_in_unbound_type_name4273);
            	unbound_type_name_start385 = unbound_type_name_start();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unbound_type_name_start385.Tree);
            	// cs.g:798:26: ( unbound_type_name_part )*
            	do 
            	{
            	    int alt130 = 2;
            	    int LA130_0 = input.LA(1);

            	    if ( (LA130_0 == DOT) )
            	    {
            	        alt130 = 1;
            	    }


            	    switch (alt130) 
            		{
            			case 1 :
            			    // cs.g:0:0: unbound_type_name_part
            			    {
            			    	PushFollow(FOLLOW_unbound_type_name_part_in_unbound_type_name4275);
            			    	unbound_type_name_part386 = unbound_type_name_part();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unbound_type_name_part386.Tree);

            			    }
            			    break;

            			default:
            			    goto loop130;
            	    }
            	} while (true);

            	loop130:
            		;	// Stops C# compiler whining that label 'loop130' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 111, unbound_type_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unbound_type_name"

    public class unbound_type_name_start_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "unbound_type_name_start"
    // cs.g:799:1: unbound_type_name_start : identifier ( '::' identifier )? ( generic_dimension_specifier )? ;
    public csParser.unbound_type_name_start_return unbound_type_name_start() // throws RecognitionException [1]
    {   
        csParser.unbound_type_name_start_return retval = new csParser.unbound_type_name_start_return();
        retval.Start = input.LT(1);
        int unbound_type_name_start_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal388 = null;
        csParser.identifier_return identifier387 = default(csParser.identifier_return);

        csParser.identifier_return identifier389 = default(csParser.identifier_return);

        csParser.generic_dimension_specifier_return generic_dimension_specifier390 = default(csParser.generic_dimension_specifier_return);


        object string_literal388_tree=null;

         const string elementName = "unbound_type_name_start"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 112) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:802:1: ( identifier ( '::' identifier )? ( generic_dimension_specifier )? )
            // cs.g:803:2: identifier ( '::' identifier )? ( generic_dimension_specifier )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_identifier_in_unbound_type_name_start4296);
            	identifier387 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier387.Tree);
            	// cs.g:803:13: ( '::' identifier )?
            	int alt131 = 2;
            	int LA131_0 = input.LA(1);

            	if ( (LA131_0 == 89) )
            	{
            	    alt131 = 1;
            	}
            	switch (alt131) 
            	{
            	    case 1 :
            	        // cs.g:803:14: '::' identifier
            	        {
            	        	string_literal388=(IToken)Match(input,89,FOLLOW_89_in_unbound_type_name_start4299); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal388_tree = (object)adaptor.Create(string_literal388);
            	        		adaptor.AddChild(root_0, string_literal388_tree);
            	        	}
            	        	PushFollow(FOLLOW_identifier_in_unbound_type_name_start4301);
            	        	identifier389 = identifier();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier389.Tree);

            	        }
            	        break;

            	}

            	// cs.g:803:32: ( generic_dimension_specifier )?
            	int alt132 = 2;
            	int LA132_0 = input.LA(1);

            	if ( (LA132_0 == 123) )
            	{
            	    alt132 = 1;
            	}
            	switch (alt132) 
            	{
            	    case 1 :
            	        // cs.g:0:0: generic_dimension_specifier
            	        {
            	        	PushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name_start4305);
            	        	generic_dimension_specifier390 = generic_dimension_specifier();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_dimension_specifier390.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 112, unbound_type_name_start_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unbound_type_name_start"

    public class unbound_type_name_part_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "unbound_type_name_part"
    // cs.g:804:1: unbound_type_name_part : '.' identifier ( generic_dimension_specifier )? ;
    public csParser.unbound_type_name_part_return unbound_type_name_part() // throws RecognitionException [1]
    {   
        csParser.unbound_type_name_part_return retval = new csParser.unbound_type_name_part_return();
        retval.Start = input.LT(1);
        int unbound_type_name_part_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal391 = null;
        csParser.identifier_return identifier392 = default(csParser.identifier_return);

        csParser.generic_dimension_specifier_return generic_dimension_specifier393 = default(csParser.generic_dimension_specifier_return);


        object char_literal391_tree=null;

         const string elementName = "unbound_type_name_part"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 113) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:807:1: ( '.' identifier ( generic_dimension_specifier )? )
            // cs.g:808:2: '.' identifier ( generic_dimension_specifier )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal391=(IToken)Match(input,DOT,FOLLOW_DOT_in_unbound_type_name_part4325); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal391_tree = (object)adaptor.Create(char_literal391);
            		adaptor.AddChild(root_0, char_literal391_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_unbound_type_name_part4329);
            	identifier392 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier392.Tree);
            	// cs.g:808:21: ( generic_dimension_specifier )?
            	int alt133 = 2;
            	int LA133_0 = input.LA(1);

            	if ( (LA133_0 == 123) )
            	{
            	    alt133 = 1;
            	}
            	switch (alt133) 
            	{
            	    case 1 :
            	        // cs.g:0:0: generic_dimension_specifier
            	        {
            	        	PushFollow(FOLLOW_generic_dimension_specifier_in_unbound_type_name_part4333);
            	        	generic_dimension_specifier393 = generic_dimension_specifier();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_dimension_specifier393.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 113, unbound_type_name_part_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unbound_type_name_part"

    public class generic_dimension_specifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "generic_dimension_specifier"
    // cs.g:809:1: generic_dimension_specifier : '<' ( commas )? '>' ;
    public csParser.generic_dimension_specifier_return generic_dimension_specifier() // throws RecognitionException [1]
    {   
        csParser.generic_dimension_specifier_return retval = new csParser.generic_dimension_specifier_return();
        retval.Start = input.LT(1);
        int generic_dimension_specifier_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal394 = null;
        IToken char_literal396 = null;
        csParser.commas_return commas395 = default(csParser.commas_return);


        object char_literal394_tree=null;
        object char_literal396_tree=null;

         const string elementName = "generic_dimension_specifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 114) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:812:1: ( '<' ( commas )? '>' )
            // cs.g:813:2: '<' ( commas )? '>'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal394=(IToken)Match(input,123,FOLLOW_123_in_generic_dimension_specifier4354); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal394_tree = (object)adaptor.Create(char_literal394);
            		adaptor.AddChild(root_0, char_literal394_tree);
            	}
            	// cs.g:813:8: ( commas )?
            	int alt134 = 2;
            	int LA134_0 = input.LA(1);

            	if ( (LA134_0 == 98) )
            	{
            	    alt134 = 1;
            	}
            	switch (alt134) 
            	{
            	    case 1 :
            	        // cs.g:0:0: commas
            	        {
            	        	PushFollow(FOLLOW_commas_in_generic_dimension_specifier4358);
            	        	commas395 = commas();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, commas395.Tree);

            	        }
            	        break;

            	}

            	char_literal396=(IToken)Match(input,GT,FOLLOW_GT_in_generic_dimension_specifier4363); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal396_tree = (object)adaptor.Create(char_literal396);
            		adaptor.AddChild(root_0, char_literal396_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 114, generic_dimension_specifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "generic_dimension_specifier"

    public class commas_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "commas"
    // cs.g:814:1: commas : ( ',' )+ ;
    public csParser.commas_return commas() // throws RecognitionException [1]
    {   
        csParser.commas_return retval = new csParser.commas_return();
        retval.Start = input.LT(1);
        int commas_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal397 = null;

        object char_literal397_tree=null;

         const string elementName = "commas"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 115) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:817:1: ( ( ',' )+ )
            // cs.g:818:2: ( ',' )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:818:2: ( ',' )+
            	int cnt135 = 0;
            	do 
            	{
            	    int alt135 = 2;
            	    int LA135_0 = input.LA(1);

            	    if ( (LA135_0 == 98) )
            	    {
            	        alt135 = 1;
            	    }


            	    switch (alt135) 
            		{
            			case 1 :
            			    // cs.g:0:0: ','
            			    {
            			    	char_literal397=(IToken)Match(input,98,FOLLOW_98_in_commas4383); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal397_tree = (object)adaptor.Create(char_literal397);
            			    		adaptor.AddChild(root_0, char_literal397_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt135 >= 1 ) goto loop135;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee135 =
            		                new EarlyExitException(135, input);
            		            throw eee135;
            	    }
            	    cnt135++;
            	} while (true);

            	loop135:
            		;	// Stops C# compiler whining that label 'loop135' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 115, commas_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "commas"

    public class checked_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "checked_expression"
    // cs.g:819:1: checked_expression : 'checked' '(' expression ')' ;
    public csParser.checked_expression_return checked_expression() // throws RecognitionException [1]
    {   
        csParser.checked_expression_return retval = new csParser.checked_expression_return();
        retval.Start = input.LT(1);
        int checked_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal398 = null;
        IToken char_literal399 = null;
        IToken char_literal401 = null;
        csParser.expression_return expression400 = default(csParser.expression_return);


        object string_literal398_tree=null;
        object char_literal399_tree=null;
        object char_literal401_tree=null;

         const string elementName = "checked_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 116) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:822:1: ( 'checked' '(' expression ')' )
            // cs.g:823:2: 'checked' '(' expression ')'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal398=(IToken)Match(input,141,FOLLOW_141_in_checked_expression4405); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal398_tree = (object)adaptor.Create(string_literal398);
            		adaptor.AddChild(root_0, string_literal398_tree);
            	}
            	char_literal399=(IToken)Match(input,110,FOLLOW_110_in_checked_expression4409); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal399_tree = (object)adaptor.Create(char_literal399);
            		adaptor.AddChild(root_0, char_literal399_tree);
            	}
            	PushFollow(FOLLOW_expression_in_checked_expression4413);
            	expression400 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression400.Tree);
            	char_literal401=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_checked_expression4417); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal401_tree = (object)adaptor.Create(char_literal401);
            		adaptor.AddChild(root_0, char_literal401_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 116, checked_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "checked_expression"

    public class unchecked_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "unchecked_expression"
    // cs.g:824:1: unchecked_expression : 'unchecked' '(' expression ')' ;
    public csParser.unchecked_expression_return unchecked_expression() // throws RecognitionException [1]
    {   
        csParser.unchecked_expression_return retval = new csParser.unchecked_expression_return();
        retval.Start = input.LT(1);
        int unchecked_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal402 = null;
        IToken char_literal403 = null;
        IToken char_literal405 = null;
        csParser.expression_return expression404 = default(csParser.expression_return);


        object string_literal402_tree=null;
        object char_literal403_tree=null;
        object char_literal405_tree=null;

         const string elementName = "unchecked_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 117) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:827:1: ( 'unchecked' '(' expression ')' )
            // cs.g:828:2: 'unchecked' '(' expression ')'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal402=(IToken)Match(input,142,FOLLOW_142_in_unchecked_expression4437); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal402_tree = (object)adaptor.Create(string_literal402);
            		adaptor.AddChild(root_0, string_literal402_tree);
            	}
            	char_literal403=(IToken)Match(input,110,FOLLOW_110_in_unchecked_expression4441); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal403_tree = (object)adaptor.Create(char_literal403);
            		adaptor.AddChild(root_0, char_literal403_tree);
            	}
            	PushFollow(FOLLOW_expression_in_unchecked_expression4445);
            	expression404 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression404.Tree);
            	char_literal405=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_unchecked_expression4449); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal405_tree = (object)adaptor.Create(char_literal405);
            		adaptor.AddChild(root_0, char_literal405_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 117, unchecked_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unchecked_expression"

    public class default_value_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "default_value_expression"
    // cs.g:829:1: default_value_expression : 'default' '(' type ')' ;
    public csParser.default_value_expression_return default_value_expression() // throws RecognitionException [1]
    {   
        csParser.default_value_expression_return retval = new csParser.default_value_expression_return();
        retval.Start = input.LT(1);
        int default_value_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal406 = null;
        IToken char_literal407 = null;
        IToken char_literal409 = null;
        csParser.type_return type408 = default(csParser.type_return);


        object string_literal406_tree=null;
        object char_literal407_tree=null;
        object char_literal409_tree=null;

         const string elementName = "default_value_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 118) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:832:1: ( 'default' '(' type ')' )
            // cs.g:833:2: 'default' '(' type ')'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal406=(IToken)Match(input,143,FOLLOW_143_in_default_value_expression4469); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal406_tree = (object)adaptor.Create(string_literal406);
            		adaptor.AddChild(root_0, string_literal406_tree);
            	}
            	char_literal407=(IToken)Match(input,110,FOLLOW_110_in_default_value_expression4473); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal407_tree = (object)adaptor.Create(char_literal407);
            		adaptor.AddChild(root_0, char_literal407_tree);
            	}
            	PushFollow(FOLLOW_type_in_default_value_expression4477);
            	type408 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type408.Tree);
            	char_literal409=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_default_value_expression4481); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal409_tree = (object)adaptor.Create(char_literal409);
            		adaptor.AddChild(root_0, char_literal409_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 118, default_value_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "default_value_expression"

    public class constant_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "constant_expression"
    // cs.g:834:1: constant_expression : expression ;
    public csParser.constant_expression_return constant_expression() // throws RecognitionException [1]
    {   
        csParser.constant_expression_return retval = new csParser.constant_expression_return();
        retval.Start = input.LT(1);
        int constant_expression_StartIndex = input.Index();
        object root_0 = null;

        csParser.expression_return expression410 = default(csParser.expression_return);



         const string elementName = "constant_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 119) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:837:1: ( expression )
            // cs.g:838:2: expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_expression_in_constant_expression4501);
            	expression410 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression410.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 119, constant_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constant_expression"

    public class boolean_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "boolean_expression"
    // cs.g:839:1: boolean_expression : expression ;
    public csParser.boolean_expression_return boolean_expression() // throws RecognitionException [1]
    {   
        csParser.boolean_expression_return retval = new csParser.boolean_expression_return();
        retval.Start = input.LT(1);
        int boolean_expression_StartIndex = input.Index();
        object root_0 = null;

        csParser.expression_return expression411 = default(csParser.expression_return);



         const string elementName = "boolean_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 120) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:842:1: ( expression )
            // cs.g:843:2: expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_expression_in_boolean_expression4520);
            	expression411 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression411.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 120, boolean_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "boolean_expression"

    public class anonymous_method_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "anonymous_method_expression"
    // cs.g:844:1: anonymous_method_expression : 'delegate' ( explicit_anonymous_function_signature )? block ;
    public csParser.anonymous_method_expression_return anonymous_method_expression() // throws RecognitionException [1]
    {   
        csParser.anonymous_method_expression_return retval = new csParser.anonymous_method_expression_return();
        retval.Start = input.LT(1);
        int anonymous_method_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal412 = null;
        csParser.explicit_anonymous_function_signature_return explicit_anonymous_function_signature413 = default(csParser.explicit_anonymous_function_signature_return);

        csParser.block_return block414 = default(csParser.block_return);


        object string_literal412_tree=null;

         const string elementName = "anonymous_method_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 121) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:847:1: ( 'delegate' ( explicit_anonymous_function_signature )? block )
            // cs.g:848:2: 'delegate' ( explicit_anonymous_function_signature )? block
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal412=(IToken)Match(input,144,FOLLOW_144_in_anonymous_method_expression4539); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal412_tree = (object)adaptor.Create(string_literal412);
            		adaptor.AddChild(root_0, string_literal412_tree);
            	}
            	// cs.g:848:15: ( explicit_anonymous_function_signature )?
            	int alt136 = 2;
            	int LA136_0 = input.LA(1);

            	if ( (LA136_0 == 110) )
            	{
            	    alt136 = 1;
            	}
            	switch (alt136) 
            	{
            	    case 1 :
            	        // cs.g:0:0: explicit_anonymous_function_signature
            	        {
            	        	PushFollow(FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression4543);
            	        	explicit_anonymous_function_signature413 = explicit_anonymous_function_signature();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, explicit_anonymous_function_signature413.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_block_in_anonymous_method_expression4548);
            	block414 = block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block414.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 121, anonymous_method_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "anonymous_method_expression"

    public class explicit_anonymous_function_signature_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "explicit_anonymous_function_signature"
    // cs.g:849:1: explicit_anonymous_function_signature : '(' ( explicit_anonymous_function_parameter_list )? ')' ;
    public csParser.explicit_anonymous_function_signature_return explicit_anonymous_function_signature() // throws RecognitionException [1]
    {   
        csParser.explicit_anonymous_function_signature_return retval = new csParser.explicit_anonymous_function_signature_return();
        retval.Start = input.LT(1);
        int explicit_anonymous_function_signature_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal415 = null;
        IToken char_literal417 = null;
        csParser.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list416 = default(csParser.explicit_anonymous_function_parameter_list_return);


        object char_literal415_tree=null;
        object char_literal417_tree=null;

         const string elementName = "explicit_anonymous_function_signature"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 122) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:852:1: ( '(' ( explicit_anonymous_function_parameter_list )? ')' )
            // cs.g:853:2: '(' ( explicit_anonymous_function_parameter_list )? ')'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal415=(IToken)Match(input,110,FOLLOW_110_in_explicit_anonymous_function_signature4567); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal415_tree = (object)adaptor.Create(char_literal415);
            		adaptor.AddChild(root_0, char_literal415_tree);
            	}
            	// cs.g:853:8: ( explicit_anonymous_function_parameter_list )?
            	int alt137 = 2;
            	int LA137_0 = input.LA(1);

            	if ( (LA137_0 == IDENTIFIER || LA137_0 == SET || LA137_0 == 95 || (LA137_0 >= 101 && LA137_0 <= 107) || LA137_0 == 109 || (LA137_0 >= 113 && LA137_0 <= 122) || (LA137_0 >= 130 && LA137_0 <= 137) || (LA137_0 >= 175 && LA137_0 <= 187) || LA137_0 == 199 || (LA137_0 >= 201 && LA137_0 <= 202) || LA137_0 == 208 || (LA137_0 >= 225 && LA137_0 <= 226)) )
            	{
            	    alt137 = 1;
            	}
            	switch (alt137) 
            	{
            	    case 1 :
            	        // cs.g:0:0: explicit_anonymous_function_parameter_list
            	        {
            	        	PushFollow(FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature4571);
            	        	explicit_anonymous_function_parameter_list416 = explicit_anonymous_function_parameter_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, explicit_anonymous_function_parameter_list416.Tree);

            	        }
            	        break;

            	}

            	char_literal417=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_explicit_anonymous_function_signature4576); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal417_tree = (object)adaptor.Create(char_literal417);
            		adaptor.AddChild(root_0, char_literal417_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 122, explicit_anonymous_function_signature_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_signature"

    public class explicit_anonymous_function_parameter_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "explicit_anonymous_function_parameter_list"
    // cs.g:854:1: explicit_anonymous_function_parameter_list : e+= explicit_anonymous_function_parameter ( ',' e+= explicit_anonymous_function_parameter )* ;
    public csParser.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list() // throws RecognitionException [1]
    {   
        csParser.explicit_anonymous_function_parameter_list_return retval = new csParser.explicit_anonymous_function_parameter_list_return();
        retval.Start = input.LT(1);
        int explicit_anonymous_function_parameter_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal418 = null;
        IList list_e = null;
        csParser.explicit_anonymous_function_parameter_return e = default(csParser.explicit_anonymous_function_parameter_return);
         e = null;
        object char_literal418_tree=null;

         const string elementName = "explicit_anonymous_function_parameter_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 123) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:857:1: (e+= explicit_anonymous_function_parameter ( ',' e+= explicit_anonymous_function_parameter )* )
            // cs.g:858:2: e+= explicit_anonymous_function_parameter ( ',' e+= explicit_anonymous_function_parameter )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list4600);
            	e = explicit_anonymous_function_parameter();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, e.Tree);
            	if (list_e == null) list_e = new ArrayList();
            	list_e.Add(e.Tree);

            	// cs.g:858:47: ( ',' e+= explicit_anonymous_function_parameter )*
            	do 
            	{
            	    int alt138 = 2;
            	    int LA138_0 = input.LA(1);

            	    if ( (LA138_0 == 98) )
            	    {
            	        alt138 = 1;
            	    }


            	    switch (alt138) 
            		{
            			case 1 :
            			    // cs.g:858:48: ',' e+= explicit_anonymous_function_parameter
            			    {
            			    	char_literal418=(IToken)Match(input,98,FOLLOW_98_in_explicit_anonymous_function_parameter_list4605); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal418_tree = (object)adaptor.Create(char_literal418);
            			    		adaptor.AddChild(root_0, char_literal418_tree);
            			    	}
            			    	PushFollow(FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list4613);
            			    	e = explicit_anonymous_function_parameter();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, e.Tree);
            			    	if (list_e == null) list_e = new ArrayList();
            			    	list_e.Add(e.Tree);


            			    }
            			    break;

            			default:
            			    goto loop138;
            	    }
            	} while (true);

            	loop138:
            		;	// Stops C# compiler whining that label 'loop138' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 123, explicit_anonymous_function_parameter_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_parameter_list"

    public class explicit_anonymous_function_parameter_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "explicit_anonymous_function_parameter"
    // cs.g:860:1: explicit_anonymous_function_parameter : ( anonymous_function_parameter_modifier )? type identifier ;
    public csParser.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter() // throws RecognitionException [1]
    {   
        csParser.explicit_anonymous_function_parameter_return retval = new csParser.explicit_anonymous_function_parameter_return();
        retval.Start = input.LT(1);
        int explicit_anonymous_function_parameter_StartIndex = input.Index();
        object root_0 = null;

        csParser.anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier419 = default(csParser.anonymous_function_parameter_modifier_return);

        csParser.type_return type420 = default(csParser.type_return);

        csParser.identifier_return identifier421 = default(csParser.identifier_return);



         const string elementName = "explicit_anonymous_function_parameter"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 124) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:863:1: ( ( anonymous_function_parameter_modifier )? type identifier )
            // cs.g:864:2: ( anonymous_function_parameter_modifier )? type identifier
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:864:2: ( anonymous_function_parameter_modifier )?
            	int alt139 = 2;
            	int LA139_0 = input.LA(1);

            	if ( ((LA139_0 >= 130 && LA139_0 <= 131)) )
            	{
            	    alt139 = 1;
            	}
            	switch (alt139) 
            	{
            	    case 1 :
            	        // cs.g:0:0: anonymous_function_parameter_modifier
            	        {
            	        	PushFollow(FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter4637);
            	        	anonymous_function_parameter_modifier419 = anonymous_function_parameter_modifier();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, anonymous_function_parameter_modifier419.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_type_in_explicit_anonymous_function_parameter4642);
            	type420 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type420.Tree);
            	PushFollow(FOLLOW_identifier_in_explicit_anonymous_function_parameter4646);
            	identifier421 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier421.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 124, explicit_anonymous_function_parameter_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "explicit_anonymous_function_parameter"

    public class anonymous_function_parameter_modifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "anonymous_function_parameter_modifier"
    // cs.g:865:1: anonymous_function_parameter_modifier : ( 'ref' | 'out' );
    public csParser.anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier() // throws RecognitionException [1]
    {   
        csParser.anonymous_function_parameter_modifier_return retval = new csParser.anonymous_function_parameter_modifier_return();
        retval.Start = input.LT(1);
        int anonymous_function_parameter_modifier_StartIndex = input.Index();
        object root_0 = null;

        IToken set422 = null;

        object set422_tree=null;

         const string elementName = "anonymous_function_parameter_modifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 125) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:868:1: ( 'ref' | 'out' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set422 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= 130 && input.LA(1) <= 131) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set422));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 125, anonymous_function_parameter_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "anonymous_function_parameter_modifier"

    public class variant_generic_parameter_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "variant_generic_parameter_list"
    // cs.g:871:1: variant_generic_parameter_list : '<' variant_type_parameters '>' ;
    public csParser.variant_generic_parameter_list_return variant_generic_parameter_list() // throws RecognitionException [1]
    {   
        csParser.variant_generic_parameter_list_return retval = new csParser.variant_generic_parameter_list_return();
        retval.Start = input.LT(1);
        int variant_generic_parameter_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal423 = null;
        IToken char_literal425 = null;
        csParser.variant_type_parameters_return variant_type_parameters424 = default(csParser.variant_type_parameters_return);


        object char_literal423_tree=null;
        object char_literal425_tree=null;

         const string elementName = "variant_generic_parameter_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 126) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:874:1: ( '<' variant_type_parameters '>' )
            // cs.g:875:2: '<' variant_type_parameters '>'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal423=(IToken)Match(input,123,FOLLOW_123_in_variant_generic_parameter_list4689); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal423_tree = (object)adaptor.Create(char_literal423);
            		adaptor.AddChild(root_0, char_literal423_tree);
            	}
            	PushFollow(FOLLOW_variant_type_parameters_in_variant_generic_parameter_list4693);
            	variant_type_parameters424 = variant_type_parameters();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variant_type_parameters424.Tree);
            	char_literal425=(IToken)Match(input,GT,FOLLOW_GT_in_variant_generic_parameter_list4697); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal425_tree = (object)adaptor.Create(char_literal425);
            		adaptor.AddChild(root_0, char_literal425_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 126, variant_generic_parameter_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variant_generic_parameter_list"

    public class variant_type_parameters_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "variant_type_parameters"
    // cs.g:876:1: variant_type_parameters : at+= variant_type_variable_name ( ',' at+= variant_type_variable_name )* ;
    public csParser.variant_type_parameters_return variant_type_parameters() // throws RecognitionException [1]
    {   
        csParser.variant_type_parameters_return retval = new csParser.variant_type_parameters_return();
        retval.Start = input.LT(1);
        int variant_type_parameters_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal426 = null;
        IList list_at = null;
        csParser.variant_type_variable_name_return at = default(csParser.variant_type_variable_name_return);
         at = null;
        object char_literal426_tree=null;

         const string elementName = "variant_type_parameters"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 127) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:879:1: (at+= variant_type_variable_name ( ',' at+= variant_type_variable_name )* )
            // cs.g:880:2: at+= variant_type_variable_name ( ',' at+= variant_type_variable_name )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_variant_type_variable_name_in_variant_type_parameters4721);
            	at = variant_type_variable_name();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, at.Tree);
            	if (list_at == null) list_at = new ArrayList();
            	list_at.Add(at.Tree);

            	// cs.g:880:35: ( ',' at+= variant_type_variable_name )*
            	do 
            	{
            	    int alt140 = 2;
            	    int LA140_0 = input.LA(1);

            	    if ( (LA140_0 == 98) )
            	    {
            	        alt140 = 1;
            	    }


            	    switch (alt140) 
            		{
            			case 1 :
            			    // cs.g:880:36: ',' at+= variant_type_variable_name
            			    {
            			    	char_literal426=(IToken)Match(input,98,FOLLOW_98_in_variant_type_parameters4724); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal426_tree = (object)adaptor.Create(char_literal426);
            			    		adaptor.AddChild(root_0, char_literal426_tree);
            			    	}
            			    	PushFollow(FOLLOW_variant_type_variable_name_in_variant_type_parameters4730);
            			    	at = variant_type_variable_name();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, at.Tree);
            			    	if (list_at == null) list_at = new ArrayList();
            			    	list_at.Add(at.Tree);


            			    }
            			    break;

            			default:
            			    goto loop140;
            	    }
            	} while (true);

            	loop140:
            		;	// Stops C# compiler whining that label 'loop140' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 127, variant_type_parameters_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variant_type_parameters"

    public class variant_type_variable_name_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "variant_type_variable_name"
    // cs.g:882:1: variant_type_variable_name : ( attributes )? ( variance_annotation )? type_variable_name ;
    public csParser.variant_type_variable_name_return variant_type_variable_name() // throws RecognitionException [1]
    {   
        csParser.variant_type_variable_name_return retval = new csParser.variant_type_variable_name_return();
        retval.Start = input.LT(1);
        int variant_type_variable_name_StartIndex = input.Index();
        object root_0 = null;

        csParser.attributes_return attributes427 = default(csParser.attributes_return);

        csParser.variance_annotation_return variance_annotation428 = default(csParser.variance_annotation_return);

        csParser.type_variable_name_return type_variable_name429 = default(csParser.type_variable_name_return);



         const string elementName = "variant_type_variable_name"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 128) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:885:1: ( ( attributes )? ( variance_annotation )? type_variable_name )
            // cs.g:886:2: ( attributes )? ( variance_annotation )? type_variable_name
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:886:2: ( attributes )?
            	int alt141 = 2;
            	int LA141_0 = input.LA(1);

            	if ( (LA141_0 == 97) )
            	{
            	    alt141 = 1;
            	}
            	switch (alt141) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_variant_type_variable_name4754);
            	        	attributes427 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes427.Tree);

            	        }
            	        break;

            	}

            	// cs.g:886:16: ( variance_annotation )?
            	int alt142 = 2;
            	int LA142_0 = input.LA(1);

            	if ( (LA142_0 == 130 || LA142_0 == 145) )
            	{
            	    alt142 = 1;
            	}
            	switch (alt142) 
            	{
            	    case 1 :
            	        // cs.g:0:0: variance_annotation
            	        {
            	        	PushFollow(FOLLOW_variance_annotation_in_variant_type_variable_name4759);
            	        	variance_annotation428 = variance_annotation();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variance_annotation428.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_type_variable_name_in_variant_type_variable_name4764);
            	type_variable_name429 = type_variable_name();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_variable_name429.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 128, variant_type_variable_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variant_type_variable_name"

    public class variance_annotation_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "variance_annotation"
    // cs.g:887:1: variance_annotation : ( 'in' | 'out' );
    public csParser.variance_annotation_return variance_annotation() // throws RecognitionException [1]
    {   
        csParser.variance_annotation_return retval = new csParser.variance_annotation_return();
        retval.Start = input.LT(1);
        int variance_annotation_StartIndex = input.Index();
        object root_0 = null;

        IToken set430 = null;

        object set430_tree=null;

         const string elementName = "variance_annotation"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 129) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:890:1: ( 'in' | 'out' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set430 = (IToken)input.LT(1);
            	if ( input.LA(1) == 130 || input.LA(1) == 145 ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set430));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 129, variance_annotation_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variance_annotation"

    public class generic_parameter_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "generic_parameter_list"
    // cs.g:893:1: generic_parameter_list : '<' type_parameters '>' ;
    public csParser.generic_parameter_list_return generic_parameter_list() // throws RecognitionException [1]
    {   
        csParser.generic_parameter_list_return retval = new csParser.generic_parameter_list_return();
        retval.Start = input.LT(1);
        int generic_parameter_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal431 = null;
        IToken char_literal433 = null;
        csParser.type_parameters_return type_parameters432 = default(csParser.type_parameters_return);


        object char_literal431_tree=null;
        object char_literal433_tree=null;

         const string elementName = "generic_parameter_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 130) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:896:1: ( '<' type_parameters '>' )
            // cs.g:897:2: '<' type_parameters '>'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal431=(IToken)Match(input,123,FOLLOW_123_in_generic_parameter_list4810); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal431_tree = (object)adaptor.Create(char_literal431);
            		adaptor.AddChild(root_0, char_literal431_tree);
            	}
            	PushFollow(FOLLOW_type_parameters_in_generic_parameter_list4814);
            	type_parameters432 = type_parameters();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameters432.Tree);
            	char_literal433=(IToken)Match(input,GT,FOLLOW_GT_in_generic_parameter_list4818); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal433_tree = (object)adaptor.Create(char_literal433);
            		adaptor.AddChild(root_0, char_literal433_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 130, generic_parameter_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "generic_parameter_list"

    public class type_parameters_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "type_parameters"
    // cs.g:898:1: type_parameters : at+= attributed_type_variable_name ( ',' at+= attributed_type_variable_name )* ;
    public csParser.type_parameters_return type_parameters() // throws RecognitionException [1]
    {   
        csParser.type_parameters_return retval = new csParser.type_parameters_return();
        retval.Start = input.LT(1);
        int type_parameters_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal434 = null;
        IList list_at = null;
        csParser.attributed_type_variable_name_return at = default(csParser.attributed_type_variable_name_return);
         at = null;
        object char_literal434_tree=null;

         const string elementName = "type_parameters"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 131) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:901:1: (at+= attributed_type_variable_name ( ',' at+= attributed_type_variable_name )* )
            // cs.g:902:2: at+= attributed_type_variable_name ( ',' at+= attributed_type_variable_name )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_attributed_type_variable_name_in_type_parameters4842);
            	at = attributed_type_variable_name();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, at.Tree);
            	if (list_at == null) list_at = new ArrayList();
            	list_at.Add(at.Tree);

            	// cs.g:902:38: ( ',' at+= attributed_type_variable_name )*
            	do 
            	{
            	    int alt143 = 2;
            	    int LA143_0 = input.LA(1);

            	    if ( (LA143_0 == 98) )
            	    {
            	        alt143 = 1;
            	    }


            	    switch (alt143) 
            		{
            			case 1 :
            			    // cs.g:902:39: ',' at+= attributed_type_variable_name
            			    {
            			    	char_literal434=(IToken)Match(input,98,FOLLOW_98_in_type_parameters4845); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal434_tree = (object)adaptor.Create(char_literal434);
            			    		adaptor.AddChild(root_0, char_literal434_tree);
            			    	}
            			    	PushFollow(FOLLOW_attributed_type_variable_name_in_type_parameters4851);
            			    	at = attributed_type_variable_name();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, at.Tree);
            			    	if (list_at == null) list_at = new ArrayList();
            			    	list_at.Add(at.Tree);


            			    }
            			    break;

            			default:
            			    goto loop143;
            	    }
            	} while (true);

            	loop143:
            		;	// Stops C# compiler whining that label 'loop143' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 131, type_parameters_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_parameters"

    public class attributed_type_variable_name_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "attributed_type_variable_name"
    // cs.g:904:1: attributed_type_variable_name : ( attributes )? type_variable_name ;
    public csParser.attributed_type_variable_name_return attributed_type_variable_name() // throws RecognitionException [1]
    {   
        csParser.attributed_type_variable_name_return retval = new csParser.attributed_type_variable_name_return();
        retval.Start = input.LT(1);
        int attributed_type_variable_name_StartIndex = input.Index();
        object root_0 = null;

        csParser.attributes_return attributes435 = default(csParser.attributes_return);

        csParser.type_variable_name_return type_variable_name436 = default(csParser.type_variable_name_return);



         const string elementName = "attributed_type_variable_name"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 132) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:907:1: ( ( attributes )? type_variable_name )
            // cs.g:908:2: ( attributes )? type_variable_name
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:908:2: ( attributes )?
            	int alt144 = 2;
            	int LA144_0 = input.LA(1);

            	if ( (LA144_0 == 97) )
            	{
            	    alt144 = 1;
            	}
            	switch (alt144) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_attributed_type_variable_name4875);
            	        	attributes435 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes435.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_type_variable_name_in_attributed_type_variable_name4880);
            	type_variable_name436 = type_variable_name();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_variable_name436.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 132, attributed_type_variable_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "attributed_type_variable_name"

    public class cast_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "cast_expression"
    // cs.g:909:1: cast_expression : '(' ( ( namespace_or_type_name | predefined_type ) ( '*' )+ ( rank_specifiers )? | ( namespace_or_type_name | predefined_type ) '?' ( rank_specifiers )? | ( namespace_or_type_name | predefined_type ) ( rank_specifiers )? | 'void' ( '*' )* ( rank_specifiers )? ) ')' ( bracket_expression )* unary_expression ;
    public csParser.cast_expression_return cast_expression() // throws RecognitionException [1]
    {   
        csParser.cast_expression_return retval = new csParser.cast_expression_return();
        retval.Start = input.LT(1);
        int cast_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal437 = null;
        IToken char_literal440 = null;
        IToken char_literal444 = null;
        IToken string_literal449 = null;
        IToken char_literal450 = null;
        IToken char_literal452 = null;
        csParser.namespace_or_type_name_return namespace_or_type_name438 = default(csParser.namespace_or_type_name_return);

        csParser.predefined_type_return predefined_type439 = default(csParser.predefined_type_return);

        csParser.rank_specifiers_return rank_specifiers441 = default(csParser.rank_specifiers_return);

        csParser.namespace_or_type_name_return namespace_or_type_name442 = default(csParser.namespace_or_type_name_return);

        csParser.predefined_type_return predefined_type443 = default(csParser.predefined_type_return);

        csParser.rank_specifiers_return rank_specifiers445 = default(csParser.rank_specifiers_return);

        csParser.namespace_or_type_name_return namespace_or_type_name446 = default(csParser.namespace_or_type_name_return);

        csParser.predefined_type_return predefined_type447 = default(csParser.predefined_type_return);

        csParser.rank_specifiers_return rank_specifiers448 = default(csParser.rank_specifiers_return);

        csParser.rank_specifiers_return rank_specifiers451 = default(csParser.rank_specifiers_return);

        csParser.bracket_expression_return bracket_expression453 = default(csParser.bracket_expression_return);

        csParser.unary_expression_return unary_expression454 = default(csParser.unary_expression_return);


        object char_literal437_tree=null;
        object char_literal440_tree=null;
        object char_literal444_tree=null;
        object string_literal449_tree=null;
        object char_literal450_tree=null;
        object char_literal452_tree=null;

         const string elementName = "cast_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 133) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:912:1: ( '(' ( ( namespace_or_type_name | predefined_type ) ( '*' )+ ( rank_specifiers )? | ( namespace_or_type_name | predefined_type ) '?' ( rank_specifiers )? | ( namespace_or_type_name | predefined_type ) ( rank_specifiers )? | 'void' ( '*' )* ( rank_specifiers )? ) ')' ( bracket_expression )* unary_expression )
            // cs.g:913:2: '(' ( ( namespace_or_type_name | predefined_type ) ( '*' )+ ( rank_specifiers )? | ( namespace_or_type_name | predefined_type ) '?' ( rank_specifiers )? | ( namespace_or_type_name | predefined_type ) ( rank_specifiers )? | 'void' ( '*' )* ( rank_specifiers )? ) ')' ( bracket_expression )* unary_expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal437=(IToken)Match(input,110,FOLLOW_110_in_cast_expression4900); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal437_tree = (object)adaptor.Create(char_literal437);
            		adaptor.AddChild(root_0, char_literal437_tree);
            	}
            	// cs.g:914:3: ( ( namespace_or_type_name | predefined_type ) ( '*' )+ ( rank_specifiers )? | ( namespace_or_type_name | predefined_type ) '?' ( rank_specifiers )? | ( namespace_or_type_name | predefined_type ) ( rank_specifiers )? | 'void' ( '*' )* ( rank_specifiers )? )
            	int alt154 = 4;
            	switch ( input.LA(1) ) 
            	{
            	case IDENTIFIER:
            		{
            	    int LA154_1 = input.LA(2);

            	    if ( (synpred226_cs()) )
            	    {
            	        alt154 = 1;
            	    }
            	    else if ( (synpred229_cs()) )
            	    {
            	        alt154 = 2;
            	    }
            	    else if ( (synpred232_cs()) )
            	    {
            	        alt154 = 3;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d154s1 =
            	            new NoViableAltException("", 154, 1, input);

            	        throw nvae_d154s1;
            	    }
            	    }
            	    break;
            	case SET:
            	case 95:
            	case 101:
            	case 102:
            	case 103:
            	case 104:
            	case 105:
            	case 106:
            	case 107:
            	case 109:
            	case 175:
            	case 176:
            	case 177:
            	case 178:
            	case 179:
            	case 180:
            	case 181:
            	case 182:
            	case 183:
            	case 184:
            	case 185:
            	case 186:
            	case 187:
            	case 199:
            	case 201:
            	case 202:
            	case 208:
            	case 225:
            	case 226:
            		{
            	    int LA154_2 = input.LA(2);

            	    if ( (synpred226_cs()) )
            	    {
            	        alt154 = 1;
            	    }
            	    else if ( (synpred229_cs()) )
            	    {
            	        alt154 = 2;
            	    }
            	    else if ( (synpred232_cs()) )
            	    {
            	        alt154 = 3;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d154s2 =
            	            new NoViableAltException("", 154, 2, input);

            	        throw nvae_d154s2;
            	    }
            	    }
            	    break;
            	case 114:
            	case 115:
            	case 116:
            	case 117:
            	case 118:
            	case 119:
            	case 120:
            	case 121:
            	case 122:
            	case 132:
            	case 133:
            	case 134:
            	case 135:
            	case 136:
            	case 137:
            		{
            	    int LA154_3 = input.LA(2);

            	    if ( (synpred226_cs()) )
            	    {
            	        alt154 = 1;
            	    }
            	    else if ( (synpred229_cs()) )
            	    {
            	        alt154 = 2;
            	    }
            	    else if ( (synpred232_cs()) )
            	    {
            	        alt154 = 3;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d154s3 =
            	            new NoViableAltException("", 154, 3, input);

            	        throw nvae_d154s3;
            	    }
            	    }
            	    break;
            	case 113:
            		{
            	    alt154 = 4;
            	    }
            	    break;
            		default:
            		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		    NoViableAltException nvae_d154s0 =
            		        new NoViableAltException("", 154, 0, input);

            		    throw nvae_d154s0;
            	}

            	switch (alt154) 
            	{
            	    case 1 :
            	        // cs.g:915:3: ( namespace_or_type_name | predefined_type ) ( '*' )+ ( rank_specifiers )?
            	        {
            	        	// cs.g:915:3: ( namespace_or_type_name | predefined_type )
            	        	int alt145 = 2;
            	        	int LA145_0 = input.LA(1);

            	        	if ( (LA145_0 == IDENTIFIER || LA145_0 == SET || LA145_0 == 95 || (LA145_0 >= 101 && LA145_0 <= 107) || LA145_0 == 109 || (LA145_0 >= 175 && LA145_0 <= 187) || LA145_0 == 199 || (LA145_0 >= 201 && LA145_0 <= 202) || LA145_0 == 208 || (LA145_0 >= 225 && LA145_0 <= 226)) )
            	        	{
            	        	    alt145 = 1;
            	        	}
            	        	else if ( ((LA145_0 >= 114 && LA145_0 <= 122) || (LA145_0 >= 132 && LA145_0 <= 137)) )
            	        	{
            	        	    alt145 = 2;
            	        	}
            	        	else 
            	        	{
            	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        	    NoViableAltException nvae_d145s0 =
            	        	        new NoViableAltException("", 145, 0, input);

            	        	    throw nvae_d145s0;
            	        	}
            	        	switch (alt145) 
            	        	{
            	        	    case 1 :
            	        	        // cs.g:915:6: namespace_or_type_name
            	        	        {
            	        	        	PushFollow(FOLLOW_namespace_or_type_name_in_cast_expression4913);
            	        	        	namespace_or_type_name438 = namespace_or_type_name();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_or_type_name438.Tree);

            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // cs.g:915:32: predefined_type
            	        	        {
            	        	        	PushFollow(FOLLOW_predefined_type_in_cast_expression4918);
            	        	        	predefined_type439 = predefined_type();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type439.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	// cs.g:915:52: ( '*' )+
            	        	int cnt146 = 0;
            	        	do 
            	        	{
            	        	    int alt146 = 2;
            	        	    int LA146_0 = input.LA(1);

            	        	    if ( (LA146_0 == 111) )
            	        	    {
            	        	        alt146 = 1;
            	        	    }


            	        	    switch (alt146) 
            	        		{
            	        			case 1 :
            	        			    // cs.g:0:0: '*'
            	        			    {
            	        			    	char_literal440=(IToken)Match(input,111,FOLLOW_111_in_cast_expression4924); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{char_literal440_tree = (object)adaptor.Create(char_literal440);
            	        			    		adaptor.AddChild(root_0, char_literal440_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    if ( cnt146 >= 1 ) goto loop146;
            	        			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        		            EarlyExitException eee146 =
            	        		                new EarlyExitException(146, input);
            	        		            throw eee146;
            	        	    }
            	        	    cnt146++;
            	        	} while (true);

            	        	loop146:
            	        		;	// Stops C# compiler whining that label 'loop146' has no statements

            	        	// cs.g:915:59: ( rank_specifiers )?
            	        	int alt147 = 2;
            	        	int LA147_0 = input.LA(1);

            	        	if ( (LA147_0 == 97) )
            	        	{
            	        	    alt147 = 1;
            	        	}
            	        	switch (alt147) 
            	        	{
            	        	    case 1 :
            	        	        // cs.g:0:0: rank_specifiers
            	        	        {
            	        	        	PushFollow(FOLLOW_rank_specifiers_in_cast_expression4929);
            	        	        	rank_specifiers441 = rank_specifiers();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rank_specifiers441.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 2 :
            	        // cs.g:916:5: ( namespace_or_type_name | predefined_type ) '?' ( rank_specifiers )?
            	        {
            	        	// cs.g:916:5: ( namespace_or_type_name | predefined_type )
            	        	int alt148 = 2;
            	        	int LA148_0 = input.LA(1);

            	        	if ( (LA148_0 == IDENTIFIER || LA148_0 == SET || LA148_0 == 95 || (LA148_0 >= 101 && LA148_0 <= 107) || LA148_0 == 109 || (LA148_0 >= 175 && LA148_0 <= 187) || LA148_0 == 199 || (LA148_0 >= 201 && LA148_0 <= 202) || LA148_0 == 208 || (LA148_0 >= 225 && LA148_0 <= 226)) )
            	        	{
            	        	    alt148 = 1;
            	        	}
            	        	else if ( ((LA148_0 >= 114 && LA148_0 <= 122) || (LA148_0 >= 132 && LA148_0 <= 137)) )
            	        	{
            	        	    alt148 = 2;
            	        	}
            	        	else 
            	        	{
            	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        	    NoViableAltException nvae_d148s0 =
            	        	        new NoViableAltException("", 148, 0, input);

            	        	    throw nvae_d148s0;
            	        	}
            	        	switch (alt148) 
            	        	{
            	        	    case 1 :
            	        	        // cs.g:916:8: namespace_or_type_name
            	        	        {
            	        	        	PushFollow(FOLLOW_namespace_or_type_name_in_cast_expression4939);
            	        	        	namespace_or_type_name442 = namespace_or_type_name();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_or_type_name442.Tree);

            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // cs.g:916:34: predefined_type
            	        	        {
            	        	        	PushFollow(FOLLOW_predefined_type_in_cast_expression4944);
            	        	        	predefined_type443 = predefined_type();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type443.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	char_literal444=(IToken)Match(input,112,FOLLOW_112_in_cast_expression4950); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal444_tree = (object)adaptor.Create(char_literal444);
            	        		adaptor.AddChild(root_0, char_literal444_tree);
            	        	}
            	        	// cs.g:916:60: ( rank_specifiers )?
            	        	int alt149 = 2;
            	        	int LA149_0 = input.LA(1);

            	        	if ( (LA149_0 == 97) )
            	        	{
            	        	    alt149 = 1;
            	        	}
            	        	switch (alt149) 
            	        	{
            	        	    case 1 :
            	        	        // cs.g:0:0: rank_specifiers
            	        	        {
            	        	        	PushFollow(FOLLOW_rank_specifiers_in_cast_expression4954);
            	        	        	rank_specifiers445 = rank_specifiers();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rank_specifiers445.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 3 :
            	        // cs.g:917:5: ( namespace_or_type_name | predefined_type ) ( rank_specifiers )?
            	        {
            	        	// cs.g:917:5: ( namespace_or_type_name | predefined_type )
            	        	int alt150 = 2;
            	        	int LA150_0 = input.LA(1);

            	        	if ( (LA150_0 == IDENTIFIER || LA150_0 == SET || LA150_0 == 95 || (LA150_0 >= 101 && LA150_0 <= 107) || LA150_0 == 109 || (LA150_0 >= 175 && LA150_0 <= 187) || LA150_0 == 199 || (LA150_0 >= 201 && LA150_0 <= 202) || LA150_0 == 208 || (LA150_0 >= 225 && LA150_0 <= 226)) )
            	        	{
            	        	    alt150 = 1;
            	        	}
            	        	else if ( ((LA150_0 >= 114 && LA150_0 <= 122) || (LA150_0 >= 132 && LA150_0 <= 137)) )
            	        	{
            	        	    alt150 = 2;
            	        	}
            	        	else 
            	        	{
            	        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        	    NoViableAltException nvae_d150s0 =
            	        	        new NoViableAltException("", 150, 0, input);

            	        	    throw nvae_d150s0;
            	        	}
            	        	switch (alt150) 
            	        	{
            	        	    case 1 :
            	        	        // cs.g:917:8: namespace_or_type_name
            	        	        {
            	        	        	PushFollow(FOLLOW_namespace_or_type_name_in_cast_expression4964);
            	        	        	namespace_or_type_name446 = namespace_or_type_name();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, namespace_or_type_name446.Tree);

            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // cs.g:917:34: predefined_type
            	        	        {
            	        	        	PushFollow(FOLLOW_predefined_type_in_cast_expression4969);
            	        	        	predefined_type447 = predefined_type();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, predefined_type447.Tree);

            	        	        }
            	        	        break;

            	        	}

            	        	// cs.g:917:54: ( rank_specifiers )?
            	        	int alt151 = 2;
            	        	int LA151_0 = input.LA(1);

            	        	if ( (LA151_0 == 97) )
            	        	{
            	        	    alt151 = 1;
            	        	}
            	        	switch (alt151) 
            	        	{
            	        	    case 1 :
            	        	        // cs.g:0:0: rank_specifiers
            	        	        {
            	        	        	PushFollow(FOLLOW_rank_specifiers_in_cast_expression4975);
            	        	        	rank_specifiers448 = rank_specifiers();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rank_specifiers448.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;
            	    case 4 :
            	        // cs.g:918:5: 'void' ( '*' )* ( rank_specifiers )?
            	        {
            	        	string_literal449=(IToken)Match(input,113,FOLLOW_113_in_cast_expression4982); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal449_tree = (object)adaptor.Create(string_literal449);
            	        		adaptor.AddChild(root_0, string_literal449_tree);
            	        	}
            	        	// cs.g:918:14: ( '*' )*
            	        	do 
            	        	{
            	        	    int alt152 = 2;
            	        	    int LA152_0 = input.LA(1);

            	        	    if ( (LA152_0 == 111) )
            	        	    {
            	        	        alt152 = 1;
            	        	    }


            	        	    switch (alt152) 
            	        		{
            	        			case 1 :
            	        			    // cs.g:0:0: '*'
            	        			    {
            	        			    	char_literal450=(IToken)Match(input,111,FOLLOW_111_in_cast_expression4986); if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 )
            	        			    	{char_literal450_tree = (object)adaptor.Create(char_literal450);
            	        			    		adaptor.AddChild(root_0, char_literal450_tree);
            	        			    	}

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop152;
            	        	    }
            	        	} while (true);

            	        	loop152:
            	        		;	// Stops C# compiler whining that label 'loop152' has no statements

            	        	// cs.g:918:21: ( rank_specifiers )?
            	        	int alt153 = 2;
            	        	int LA153_0 = input.LA(1);

            	        	if ( (LA153_0 == 97) )
            	        	{
            	        	    alt153 = 1;
            	        	}
            	        	switch (alt153) 
            	        	{
            	        	    case 1 :
            	        	        // cs.g:0:0: rank_specifiers
            	        	        {
            	        	        	PushFollow(FOLLOW_rank_specifiers_in_cast_expression4991);
            	        	        	rank_specifiers451 = rank_specifiers();
            	        	        	state.followingStackPointer--;
            	        	        	if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rank_specifiers451.Tree);

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;

            	}

            	char_literal452=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_cast_expression5004); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal452_tree = (object)adaptor.Create(char_literal452);
            		adaptor.AddChild(root_0, char_literal452_tree);
            	}
            	// cs.g:920:11: ( bracket_expression )*
            	do 
            	{
            	    int alt155 = 2;
            	    int LA155_0 = input.LA(1);

            	    if ( (LA155_0 == 97) )
            	    {
            	        alt155 = 1;
            	    }


            	    switch (alt155) 
            		{
            			case 1 :
            			    // cs.g:0:0: bracket_expression
            			    {
            			    	PushFollow(FOLLOW_bracket_expression_in_cast_expression5008);
            			    	bracket_expression453 = bracket_expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, bracket_expression453.Tree);

            			    }
            			    break;

            			default:
            			    goto loop155;
            	    }
            	} while (true);

            	loop155:
            		;	// Stops C# compiler whining that label 'loop155' has no statements

            	PushFollow(FOLLOW_unary_expression_in_cast_expression5011);
            	unary_expression454 = unary_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression454.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 133, cast_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "cast_expression"

    public class multiplicative_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "multiplicative_expression"
    // cs.g:922:1: multiplicative_expression : unary_expression ( ( '*' | '/' | '%' ) unary_expression )* ;
    public csParser.multiplicative_expression_return multiplicative_expression() // throws RecognitionException [1]
    {   
        csParser.multiplicative_expression_return retval = new csParser.multiplicative_expression_return();
        retval.Start = input.LT(1);
        int multiplicative_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken set456 = null;
        csParser.unary_expression_return unary_expression455 = default(csParser.unary_expression_return);

        csParser.unary_expression_return unary_expression457 = default(csParser.unary_expression_return);


        object set456_tree=null;

         const string elementName = "multiplicative_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 134) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:925:1: ( unary_expression ( ( '*' | '/' | '%' ) unary_expression )* )
            // cs.g:926:2: unary_expression ( ( '*' | '/' | '%' ) unary_expression )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_unary_expression_in_multiplicative_expression5033);
            	unary_expression455 = unary_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression455.Tree);
            	// cs.g:926:19: ( ( '*' | '/' | '%' ) unary_expression )*
            	do 
            	{
            	    int alt156 = 2;
            	    alt156 = dfa156.Predict(input);
            	    switch (alt156) 
            		{
            			case 1 :
            			    // cs.g:926:22: ( '*' | '/' | '%' ) unary_expression
            			    {
            			    	set456 = (IToken)input.LT(1);
            			    	if ( input.LA(1) == 111 || (input.LA(1) >= 146 && input.LA(1) <= 147) ) 
            			    	{
            			    	    input.Consume();
            			    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set456));
            			    	    state.errorRecovery = false;state.failed = false;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
            			    	    throw mse;
            			    	}

            			    	PushFollow(FOLLOW_unary_expression_in_multiplicative_expression5048);
            			    	unary_expression457 = unary_expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression457.Tree);

            			    }
            			    break;

            			default:
            			    goto loop156;
            	    }
            	} while (true);

            	loop156:
            		;	// Stops C# compiler whining that label 'loop156' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 134, multiplicative_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "multiplicative_expression"

    public class additive_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "additive_expression"
    // cs.g:927:1: additive_expression : multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* ;
    public csParser.additive_expression_return additive_expression() // throws RecognitionException [1]
    {   
        csParser.additive_expression_return retval = new csParser.additive_expression_return();
        retval.Start = input.LT(1);
        int additive_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken set459 = null;
        csParser.multiplicative_expression_return multiplicative_expression458 = default(csParser.multiplicative_expression_return);

        csParser.multiplicative_expression_return multiplicative_expression460 = default(csParser.multiplicative_expression_return);


        object set459_tree=null;

         const string elementName = "additive_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 135) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:930:1: ( multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* )
            // cs.g:931:2: multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_multiplicative_expression_in_additive_expression5070);
            	multiplicative_expression458 = multiplicative_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, multiplicative_expression458.Tree);
            	// cs.g:931:28: ( ( '+' | '-' ) multiplicative_expression )*
            	do 
            	{
            	    int alt157 = 2;
            	    alt157 = dfa157.Predict(input);
            	    switch (alt157) 
            		{
            			case 1 :
            			    // cs.g:931:29: ( '+' | '-' ) multiplicative_expression
            			    {
            			    	set459 = (IToken)input.LT(1);
            			    	if ( input.LA(1) == MINUS || input.LA(1) == 124 ) 
            			    	{
            			    	    input.Consume();
            			    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set459));
            			    	    state.errorRecovery = false;state.failed = false;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
            			    	    throw mse;
            			    	}

            			    	PushFollow(FOLLOW_multiplicative_expression_in_additive_expression5081);
            			    	multiplicative_expression460 = multiplicative_expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, multiplicative_expression460.Tree);

            			    }
            			    break;

            			default:
            			    goto loop157;
            	    }
            	} while (true);

            	loop157:
            		;	// Stops C# compiler whining that label 'loop157' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 135, additive_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "additive_expression"

    public class shift_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "shift_expression"
    // cs.g:933:1: shift_expression : additive_expression ( ( '<<' | '>' '>' ) additive_expression )* ;
    public csParser.shift_expression_return shift_expression() // throws RecognitionException [1]
    {   
        csParser.shift_expression_return retval = new csParser.shift_expression_return();
        retval.Start = input.LT(1);
        int shift_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal462 = null;
        IToken char_literal463 = null;
        IToken char_literal464 = null;
        csParser.additive_expression_return additive_expression461 = default(csParser.additive_expression_return);

        csParser.additive_expression_return additive_expression465 = default(csParser.additive_expression_return);


        object string_literal462_tree=null;
        object char_literal463_tree=null;
        object char_literal464_tree=null;

         const string elementName = "shift_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 136) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:936:1: ( additive_expression ( ( '<<' | '>' '>' ) additive_expression )* )
            // cs.g:937:2: additive_expression ( ( '<<' | '>' '>' ) additive_expression )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_additive_expression_in_shift_expression5104);
            	additive_expression461 = additive_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, additive_expression461.Tree);
            	// cs.g:937:22: ( ( '<<' | '>' '>' ) additive_expression )*
            	do 
            	{
            	    int alt159 = 2;
            	    int LA159_0 = input.LA(1);

            	    if ( (LA159_0 == GT) )
            	    {
            	        int LA159_1 = input.LA(2);

            	        if ( (LA159_1 == GT) )
            	        {
            	            alt159 = 1;
            	        }


            	    }
            	    else if ( (LA159_0 == 148) )
            	    {
            	        alt159 = 1;
            	    }


            	    switch (alt159) 
            		{
            			case 1 :
            			    // cs.g:937:23: ( '<<' | '>' '>' ) additive_expression
            			    {
            			    	// cs.g:937:23: ( '<<' | '>' '>' )
            			    	int alt158 = 2;
            			    	int LA158_0 = input.LA(1);

            			    	if ( (LA158_0 == 148) )
            			    	{
            			    	    alt158 = 1;
            			    	}
            			    	else if ( (LA158_0 == GT) )
            			    	{
            			    	    alt158 = 2;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    NoViableAltException nvae_d158s0 =
            			    	        new NoViableAltException("", 158, 0, input);

            			    	    throw nvae_d158s0;
            			    	}
            			    	switch (alt158) 
            			    	{
            			    	    case 1 :
            			    	        // cs.g:937:24: '<<'
            			    	        {
            			    	        	string_literal462=(IToken)Match(input,148,FOLLOW_148_in_shift_expression5108); if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 )
            			    	        	{string_literal462_tree = (object)adaptor.Create(string_literal462);
            			    	        		adaptor.AddChild(root_0, string_literal462_tree);
            			    	        	}

            			    	        }
            			    	        break;
            			    	    case 2 :
            			    	        // cs.g:937:29: '>' '>'
            			    	        {
            			    	        	char_literal463=(IToken)Match(input,GT,FOLLOW_GT_in_shift_expression5110); if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 )
            			    	        	{char_literal463_tree = (object)adaptor.Create(char_literal463);
            			    	        		adaptor.AddChild(root_0, char_literal463_tree);
            			    	        	}
            			    	        	char_literal464=(IToken)Match(input,GT,FOLLOW_GT_in_shift_expression5112); if (state.failed) return retval;
            			    	        	if ( state.backtracking == 0 )
            			    	        	{char_literal464_tree = (object)adaptor.Create(char_literal464);
            			    	        		adaptor.AddChild(root_0, char_literal464_tree);
            			    	        	}

            			    	        }
            			    	        break;

            			    	}

            			    	PushFollow(FOLLOW_additive_expression_in_shift_expression5115);
            			    	additive_expression465 = additive_expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, additive_expression465.Tree);

            			    }
            			    break;

            			default:
            			    goto loop159;
            	    }
            	} while (true);

            	loop159:
            		;	// Stops C# compiler whining that label 'loop159' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 136, shift_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "shift_expression"

    public class relational_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "relational_expression"
    // cs.g:938:1: relational_expression : shift_expression ( ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* | ( ( 'is' | 'as' ) non_nullable_type )* ) ;
    public csParser.relational_expression_return relational_expression() // throws RecognitionException [1]
    {   
        csParser.relational_expression_return retval = new csParser.relational_expression_return();
        retval.Start = input.LT(1);
        int relational_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken set467 = null;
        IToken set469 = null;
        csParser.shift_expression_return shift_expression466 = default(csParser.shift_expression_return);

        csParser.shift_expression_return shift_expression468 = default(csParser.shift_expression_return);

        csParser.non_nullable_type_return non_nullable_type470 = default(csParser.non_nullable_type_return);


        object set467_tree=null;
        object set469_tree=null;

         const string elementName = "relational_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 137) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:941:1: ( shift_expression ( ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* | ( ( 'is' | 'as' ) non_nullable_type )* ) )
            // cs.g:942:2: shift_expression ( ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* | ( ( 'is' | 'as' ) non_nullable_type )* )
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_shift_expression_in_relational_expression5137);
            	shift_expression466 = shift_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, shift_expression466.Tree);
            	// cs.g:943:3: ( ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* | ( ( 'is' | 'as' ) non_nullable_type )* )
            	int alt162 = 2;
            	alt162 = dfa162.Predict(input);
            	switch (alt162) 
            	{
            	    case 1 :
            	        // cs.g:943:9: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
            	        {
            	        	// cs.g:943:9: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
            	        	do 
            	        	{
            	        	    int alt160 = 2;
            	        	    int LA160_0 = input.LA(1);

            	        	    if ( (LA160_0 == GT || LA160_0 == 123 || (LA160_0 >= 149 && LA160_0 <= 150)) )
            	        	    {
            	        	        alt160 = 1;
            	        	    }


            	        	    switch (alt160) 
            	        		{
            	        			case 1 :
            	        			    // cs.g:943:10: ( '<' | '>' | '<=' | '>=' ) shift_expression
            	        			    {
            	        			    	set467 = (IToken)input.LT(1);
            	        			    	if ( input.LA(1) == GT || input.LA(1) == 123 || (input.LA(1) >= 149 && input.LA(1) <= 150) ) 
            	        			    	{
            	        			    	    input.Consume();
            	        			    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set467));
            	        			    	    state.errorRecovery = false;state.failed = false;
            	        			    	}
            	        			    	else 
            	        			    	{
            	        			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	        			    	    throw mse;
            	        			    	}

            	        			    	PushFollow(FOLLOW_shift_expression_in_relational_expression5161);
            	        			    	shift_expression468 = shift_expression();
            	        			    	state.followingStackPointer--;
            	        			    	if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, shift_expression468.Tree);

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop160;
            	        	    }
            	        	} while (true);

            	        	loop160:
            	        		;	// Stops C# compiler whining that label 'loop160' has no statements


            	        }
            	        break;
            	    case 2 :
            	        // cs.g:944:6: ( ( 'is' | 'as' ) non_nullable_type )*
            	        {
            	        	// cs.g:944:6: ( ( 'is' | 'as' ) non_nullable_type )*
            	        	do 
            	        	{
            	        	    int alt161 = 2;
            	        	    int LA161_0 = input.LA(1);

            	        	    if ( ((LA161_0 >= 151 && LA161_0 <= 152)) )
            	        	    {
            	        	        alt161 = 1;
            	        	    }


            	        	    switch (alt161) 
            	        		{
            	        			case 1 :
            	        			    // cs.g:944:7: ( 'is' | 'as' ) non_nullable_type
            	        			    {
            	        			    	set469 = (IToken)input.LT(1);
            	        			    	if ( (input.LA(1) >= 151 && input.LA(1) <= 152) ) 
            	        			    	{
            	        			    	    input.Consume();
            	        			    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set469));
            	        			    	    state.errorRecovery = false;state.failed = false;
            	        			    	}
            	        			    	else 
            	        			    	{
            	        			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	        			    	    throw mse;
            	        			    	}

            	        			    	PushFollow(FOLLOW_non_nullable_type_in_relational_expression5179);
            	        			    	non_nullable_type470 = non_nullable_type();
            	        			    	state.followingStackPointer--;
            	        			    	if (state.failed) return retval;
            	        			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, non_nullable_type470.Tree);

            	        			    }
            	        			    break;

            	        			default:
            	        			    goto loop161;
            	        	    }
            	        	} while (true);

            	        	loop161:
            	        		;	// Stops C# compiler whining that label 'loop161' has no statements


            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 137, relational_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "relational_expression"

    public class equality_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "equality_expression"
    // cs.g:946:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
    public csParser.equality_expression_return equality_expression() // throws RecognitionException [1]
    {   
        csParser.equality_expression_return retval = new csParser.equality_expression_return();
        retval.Start = input.LT(1);
        int equality_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken set472 = null;
        csParser.relational_expression_return relational_expression471 = default(csParser.relational_expression_return);

        csParser.relational_expression_return relational_expression473 = default(csParser.relational_expression_return);


        object set472_tree=null;

         const string elementName = "equality_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 138) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:949:1: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
            // cs.g:950:2: relational_expression ( ( '==' | '!=' ) relational_expression )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_relational_expression_in_equality_expression5206);
            	relational_expression471 = relational_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, relational_expression471.Tree);
            	// cs.g:951:5: ( ( '==' | '!=' ) relational_expression )*
            	do 
            	{
            	    int alt163 = 2;
            	    int LA163_0 = input.LA(1);

            	    if ( ((LA163_0 >= 153 && LA163_0 <= 154)) )
            	    {
            	        alt163 = 1;
            	    }


            	    switch (alt163) 
            		{
            			case 1 :
            			    // cs.g:951:6: ( '==' | '!=' ) relational_expression
            			    {
            			    	set472 = (IToken)input.LT(1);
            			    	if ( (input.LA(1) >= 153 && input.LA(1) <= 154) ) 
            			    	{
            			    	    input.Consume();
            			    	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set472));
            			    	    state.errorRecovery = false;state.failed = false;
            			    	}
            			    	else 
            			    	{
            			    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
            			    	    throw mse;
            			    	}

            			    	PushFollow(FOLLOW_relational_expression_in_equality_expression5221);
            			    	relational_expression473 = relational_expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, relational_expression473.Tree);

            			    }
            			    break;

            			default:
            			    goto loop163;
            	    }
            	} while (true);

            	loop163:
            		;	// Stops C# compiler whining that label 'loop163' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 138, equality_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "equality_expression"

    public class and_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "and_expression"
    // cs.g:952:1: and_expression : equality_expression ( '&' equality_expression )* ;
    public csParser.and_expression_return and_expression() // throws RecognitionException [1]
    {   
        csParser.and_expression_return retval = new csParser.and_expression_return();
        retval.Start = input.LT(1);
        int and_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal475 = null;
        csParser.equality_expression_return equality_expression474 = default(csParser.equality_expression_return);

        csParser.equality_expression_return equality_expression476 = default(csParser.equality_expression_return);


        object char_literal475_tree=null;

         const string elementName = "and_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 139) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:955:1: ( equality_expression ( '&' equality_expression )* )
            // cs.g:956:2: equality_expression ( '&' equality_expression )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_equality_expression_in_and_expression5243);
            	equality_expression474 = equality_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, equality_expression474.Tree);
            	// cs.g:956:22: ( '&' equality_expression )*
            	do 
            	{
            	    int alt164 = 2;
            	    alt164 = dfa164.Predict(input);
            	    switch (alt164) 
            		{
            			case 1 :
            			    // cs.g:956:23: '&' equality_expression
            			    {
            			    	char_literal475=(IToken)Match(input,129,FOLLOW_129_in_and_expression5246); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal475_tree = (object)adaptor.Create(char_literal475);
            			    		adaptor.AddChild(root_0, char_literal475_tree);
            			    	}
            			    	PushFollow(FOLLOW_equality_expression_in_and_expression5250);
            			    	equality_expression476 = equality_expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, equality_expression476.Tree);

            			    }
            			    break;

            			default:
            			    goto loop164;
            	    }
            	} while (true);

            	loop164:
            		;	// Stops C# compiler whining that label 'loop164' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 139, and_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "and_expression"

    public class exclusive_or_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "exclusive_or_expression"
    // cs.g:957:1: exclusive_or_expression : and_expression ( '^' and_expression )* ;
    public csParser.exclusive_or_expression_return exclusive_or_expression() // throws RecognitionException [1]
    {   
        csParser.exclusive_or_expression_return retval = new csParser.exclusive_or_expression_return();
        retval.Start = input.LT(1);
        int exclusive_or_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal478 = null;
        csParser.and_expression_return and_expression477 = default(csParser.and_expression_return);

        csParser.and_expression_return and_expression479 = default(csParser.and_expression_return);


        object char_literal478_tree=null;

         const string elementName = "exclusive_or_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 140) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:960:1: ( and_expression ( '^' and_expression )* )
            // cs.g:961:2: and_expression ( '^' and_expression )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_and_expression_in_exclusive_or_expression5272);
            	and_expression477 = and_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, and_expression477.Tree);
            	// cs.g:961:17: ( '^' and_expression )*
            	do 
            	{
            	    int alt165 = 2;
            	    int LA165_0 = input.LA(1);

            	    if ( (LA165_0 == 155) )
            	    {
            	        alt165 = 1;
            	    }


            	    switch (alt165) 
            		{
            			case 1 :
            			    // cs.g:961:18: '^' and_expression
            			    {
            			    	char_literal478=(IToken)Match(input,155,FOLLOW_155_in_exclusive_or_expression5275); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal478_tree = (object)adaptor.Create(char_literal478);
            			    		adaptor.AddChild(root_0, char_literal478_tree);
            			    	}
            			    	PushFollow(FOLLOW_and_expression_in_exclusive_or_expression5279);
            			    	and_expression479 = and_expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, and_expression479.Tree);

            			    }
            			    break;

            			default:
            			    goto loop165;
            	    }
            	} while (true);

            	loop165:
            		;	// Stops C# compiler whining that label 'loop165' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 140, exclusive_or_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "exclusive_or_expression"

    public class inclusive_or_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "inclusive_or_expression"
    // cs.g:962:1: inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
    public csParser.inclusive_or_expression_return inclusive_or_expression() // throws RecognitionException [1]
    {   
        csParser.inclusive_or_expression_return retval = new csParser.inclusive_or_expression_return();
        retval.Start = input.LT(1);
        int inclusive_or_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal481 = null;
        csParser.exclusive_or_expression_return exclusive_or_expression480 = default(csParser.exclusive_or_expression_return);

        csParser.exclusive_or_expression_return exclusive_or_expression482 = default(csParser.exclusive_or_expression_return);


        object char_literal481_tree=null;

         const string elementName = "inclusive_or_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 141) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:965:1: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
            // cs.g:966:2: exclusive_or_expression ( '|' exclusive_or_expression )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression5301);
            	exclusive_or_expression480 = exclusive_or_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, exclusive_or_expression480.Tree);
            	// cs.g:966:28: ( '|' exclusive_or_expression )*
            	do 
            	{
            	    int alt166 = 2;
            	    int LA166_0 = input.LA(1);

            	    if ( (LA166_0 == 156) )
            	    {
            	        alt166 = 1;
            	    }


            	    switch (alt166) 
            		{
            			case 1 :
            			    // cs.g:966:29: '|' exclusive_or_expression
            			    {
            			    	char_literal481=(IToken)Match(input,156,FOLLOW_156_in_inclusive_or_expression5306); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal481_tree = (object)adaptor.Create(char_literal481);
            			    		adaptor.AddChild(root_0, char_literal481_tree);
            			    	}
            			    	PushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression5310);
            			    	exclusive_or_expression482 = exclusive_or_expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, exclusive_or_expression482.Tree);

            			    }
            			    break;

            			default:
            			    goto loop166;
            	    }
            	} while (true);

            	loop166:
            		;	// Stops C# compiler whining that label 'loop166' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 141, inclusive_or_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "inclusive_or_expression"

    public class conditional_and_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "conditional_and_expression"
    // cs.g:967:1: conditional_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
    public csParser.conditional_and_expression_return conditional_and_expression() // throws RecognitionException [1]
    {   
        csParser.conditional_and_expression_return retval = new csParser.conditional_and_expression_return();
        retval.Start = input.LT(1);
        int conditional_and_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal484 = null;
        csParser.inclusive_or_expression_return inclusive_or_expression483 = default(csParser.inclusive_or_expression_return);

        csParser.inclusive_or_expression_return inclusive_or_expression485 = default(csParser.inclusive_or_expression_return);


        object string_literal484_tree=null;

         const string elementName = "conditional_and_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 142) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:970:1: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
            // cs.g:971:2: inclusive_or_expression ( '&&' inclusive_or_expression )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression5332);
            	inclusive_or_expression483 = inclusive_or_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, inclusive_or_expression483.Tree);
            	// cs.g:971:28: ( '&&' inclusive_or_expression )*
            	do 
            	{
            	    int alt167 = 2;
            	    int LA167_0 = input.LA(1);

            	    if ( (LA167_0 == 157) )
            	    {
            	        alt167 = 1;
            	    }


            	    switch (alt167) 
            		{
            			case 1 :
            			    // cs.g:971:29: '&&' inclusive_or_expression
            			    {
            			    	string_literal484=(IToken)Match(input,157,FOLLOW_157_in_conditional_and_expression5337); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{string_literal484_tree = (object)adaptor.Create(string_literal484);
            			    		adaptor.AddChild(root_0, string_literal484_tree);
            			    	}
            			    	PushFollow(FOLLOW_inclusive_or_expression_in_conditional_and_expression5341);
            			    	inclusive_or_expression485 = inclusive_or_expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, inclusive_or_expression485.Tree);

            			    }
            			    break;

            			default:
            			    goto loop167;
            	    }
            	} while (true);

            	loop167:
            		;	// Stops C# compiler whining that label 'loop167' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 142, conditional_and_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "conditional_and_expression"

    public class conditional_or_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "conditional_or_expression"
    // cs.g:972:1: conditional_or_expression : conditional_and_expression ( '||' conditional_and_expression )* ;
    public csParser.conditional_or_expression_return conditional_or_expression() // throws RecognitionException [1]
    {   
        csParser.conditional_or_expression_return retval = new csParser.conditional_or_expression_return();
        retval.Start = input.LT(1);
        int conditional_or_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal487 = null;
        csParser.conditional_and_expression_return conditional_and_expression486 = default(csParser.conditional_and_expression_return);

        csParser.conditional_and_expression_return conditional_and_expression488 = default(csParser.conditional_and_expression_return);


        object string_literal487_tree=null;

         const string elementName = "conditional_or_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 143) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:975:1: ( conditional_and_expression ( '||' conditional_and_expression )* )
            // cs.g:976:2: conditional_and_expression ( '||' conditional_and_expression )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression5363);
            	conditional_and_expression486 = conditional_and_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, conditional_and_expression486.Tree);
            	// cs.g:976:30: ( '||' conditional_and_expression )*
            	do 
            	{
            	    int alt168 = 2;
            	    int LA168_0 = input.LA(1);

            	    if ( (LA168_0 == 158) )
            	    {
            	        alt168 = 1;
            	    }


            	    switch (alt168) 
            		{
            			case 1 :
            			    // cs.g:976:31: '||' conditional_and_expression
            			    {
            			    	string_literal487=(IToken)Match(input,158,FOLLOW_158_in_conditional_or_expression5367); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{string_literal487_tree = (object)adaptor.Create(string_literal487);
            			    		adaptor.AddChild(root_0, string_literal487_tree);
            			    	}
            			    	PushFollow(FOLLOW_conditional_and_expression_in_conditional_or_expression5371);
            			    	conditional_and_expression488 = conditional_and_expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, conditional_and_expression488.Tree);

            			    }
            			    break;

            			default:
            			    goto loop168;
            	    }
            	} while (true);

            	loop168:
            		;	// Stops C# compiler whining that label 'loop168' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 143, conditional_or_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "conditional_or_expression"

    public class null_coalescing_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "null_coalescing_expression"
    // cs.g:977:1: null_coalescing_expression : conditional_or_expression ( '??' null_coalescing_expression )* ;
    public csParser.null_coalescing_expression_return null_coalescing_expression() // throws RecognitionException [1]
    {   
        csParser.null_coalescing_expression_return retval = new csParser.null_coalescing_expression_return();
        retval.Start = input.LT(1);
        int null_coalescing_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal490 = null;
        csParser.conditional_or_expression_return conditional_or_expression489 = default(csParser.conditional_or_expression_return);

        csParser.null_coalescing_expression_return null_coalescing_expression491 = default(csParser.null_coalescing_expression_return);


        object string_literal490_tree=null;

         const string elementName = "null_coalescing_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 144) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:980:1: ( conditional_or_expression ( '??' null_coalescing_expression )* )
            // cs.g:981:2: conditional_or_expression ( '??' null_coalescing_expression )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_conditional_or_expression_in_null_coalescing_expression5393);
            	conditional_or_expression489 = conditional_or_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, conditional_or_expression489.Tree);
            	// cs.g:981:30: ( '??' null_coalescing_expression )*
            	do 
            	{
            	    int alt169 = 2;
            	    int LA169_0 = input.LA(1);

            	    if ( (LA169_0 == 159) )
            	    {
            	        int LA169_1 = input.LA(2);

            	        if ( (synpred257_cs()) )
            	        {
            	            alt169 = 1;
            	        }


            	    }


            	    switch (alt169) 
            		{
            			case 1 :
            			    // cs.g:981:31: '??' null_coalescing_expression
            			    {
            			    	string_literal490=(IToken)Match(input,159,FOLLOW_159_in_null_coalescing_expression5398); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{string_literal490_tree = (object)adaptor.Create(string_literal490);
            			    		adaptor.AddChild(root_0, string_literal490_tree);
            			    	}
            			    	PushFollow(FOLLOW_null_coalescing_expression_in_null_coalescing_expression5402);
            			    	null_coalescing_expression491 = null_coalescing_expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, null_coalescing_expression491.Tree);

            			    }
            			    break;

            			default:
            			    goto loop169;
            	    }
            	} while (true);

            	loop169:
            		;	// Stops C# compiler whining that label 'loop169' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 144, null_coalescing_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "null_coalescing_expression"

    public class conditional_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "conditional_expression"
    // cs.g:982:1: conditional_expression : null_coalescing_expression ( '?' expression ':' expression )? ;
    public csParser.conditional_expression_return conditional_expression() // throws RecognitionException [1]
    {   
        csParser.conditional_expression_return retval = new csParser.conditional_expression_return();
        retval.Start = input.LT(1);
        int conditional_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal493 = null;
        IToken char_literal495 = null;
        csParser.null_coalescing_expression_return null_coalescing_expression492 = default(csParser.null_coalescing_expression_return);

        csParser.expression_return expression494 = default(csParser.expression_return);

        csParser.expression_return expression496 = default(csParser.expression_return);


        object char_literal493_tree=null;
        object char_literal495_tree=null;

         const string elementName = "conditional_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 145) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:985:1: ( null_coalescing_expression ( '?' expression ':' expression )? )
            // cs.g:986:2: null_coalescing_expression ( '?' expression ':' expression )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_null_coalescing_expression_in_conditional_expression5423);
            	null_coalescing_expression492 = null_coalescing_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, null_coalescing_expression492.Tree);
            	// cs.g:986:31: ( '?' expression ':' expression )?
            	int alt170 = 2;
            	int LA170_0 = input.LA(1);

            	if ( (LA170_0 == 112) )
            	{
            	    alt170 = 1;
            	}
            	switch (alt170) 
            	{
            	    case 1 :
            	        // cs.g:986:32: '?' expression ':' expression
            	        {
            	        	char_literal493=(IToken)Match(input,112,FOLLOW_112_in_conditional_expression5428); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal493_tree = (object)adaptor.Create(char_literal493);
            	        		adaptor.AddChild(root_0, char_literal493_tree);
            	        	}
            	        	PushFollow(FOLLOW_expression_in_conditional_expression5432);
            	        	expression494 = expression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression494.Tree);
            	        	char_literal495=(IToken)Match(input,100,FOLLOW_100_in_conditional_expression5436); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal495_tree = (object)adaptor.Create(char_literal495);
            	        		adaptor.AddChild(root_0, char_literal495_tree);
            	        	}
            	        	PushFollow(FOLLOW_expression_in_conditional_expression5440);
            	        	expression496 = expression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression496.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 145, conditional_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "conditional_expression"

    public class array_initializer_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "array_initializer"
    // cs.g:989:1: array_initializer : '{' ( variable_initializer_list )? ( ',' )? '}' ;
    public csParser.array_initializer_return array_initializer() // throws RecognitionException [1]
    {   
        csParser.array_initializer_return retval = new csParser.array_initializer_return();
        retval.Start = input.LT(1);
        int array_initializer_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal497 = null;
        IToken char_literal499 = null;
        IToken char_literal500 = null;
        csParser.variable_initializer_list_return variable_initializer_list498 = default(csParser.variable_initializer_list_return);


        object char_literal497_tree=null;
        object char_literal499_tree=null;
        object char_literal500_tree=null;

         const string elementName = "array_initializer"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 146) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:992:1: ( '{' ( variable_initializer_list )? ( ',' )? '}' )
            // cs.g:993:2: '{' ( variable_initializer_list )? ( ',' )? '}'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal497=(IToken)Match(input,92,FOLLOW_92_in_array_initializer5464); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal497_tree = (object)adaptor.Create(char_literal497);
            		adaptor.AddChild(root_0, char_literal497_tree);
            	}
            	// cs.g:993:8: ( variable_initializer_list )?
            	int alt171 = 2;
            	int LA171_0 = input.LA(1);

            	if ( ((LA171_0 >= IDENTIFIER && LA171_0 <= NULL) || LA171_0 == MINUS || LA171_0 == SET || (LA171_0 >= 90 && LA171_0 <= 92) || LA171_0 == 95 || (LA171_0 >= 101 && LA171_0 <= 107) || (LA171_0 >= 109 && LA171_0 <= 111) || (LA171_0 >= 114 && LA171_0 <= 122) || (LA171_0 >= 124 && LA171_0 <= 129) || (LA171_0 >= 132 && LA171_0 <= 144) || (LA171_0 >= 175 && LA171_0 <= 187) || LA171_0 == 199 || (LA171_0 >= 201 && LA171_0 <= 202) || LA171_0 == 208 || (LA171_0 >= 225 && LA171_0 <= 226)) )
            	{
            	    alt171 = 1;
            	}
            	switch (alt171) 
            	{
            	    case 1 :
            	        // cs.g:0:0: variable_initializer_list
            	        {
            	        	PushFollow(FOLLOW_variable_initializer_list_in_array_initializer5468);
            	        	variable_initializer_list498 = variable_initializer_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_initializer_list498.Tree);

            	        }
            	        break;

            	}

            	// cs.g:993:37: ( ',' )?
            	int alt172 = 2;
            	int LA172_0 = input.LA(1);

            	if ( (LA172_0 == 98) )
            	{
            	    alt172 = 1;
            	}
            	switch (alt172) 
            	{
            	    case 1 :
            	        // cs.g:0:0: ','
            	        {
            	        	char_literal499=(IToken)Match(input,98,FOLLOW_98_in_array_initializer5473); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal499_tree = (object)adaptor.Create(char_literal499);
            	        		adaptor.AddChild(root_0, char_literal499_tree);
            	        	}

            	        }
            	        break;

            	}

            	char_literal500=(IToken)Match(input,93,FOLLOW_93_in_array_initializer5478); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal500_tree = (object)adaptor.Create(char_literal500);
            		adaptor.AddChild(root_0, char_literal500_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 146, array_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "array_initializer"

    public class variable_initializer_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "variable_initializer_list"
    // cs.g:994:1: variable_initializer_list : variable_initializer ( ',' variable_initializer )* ;
    public csParser.variable_initializer_list_return variable_initializer_list() // throws RecognitionException [1]
    {   
        csParser.variable_initializer_list_return retval = new csParser.variable_initializer_list_return();
        retval.Start = input.LT(1);
        int variable_initializer_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal502 = null;
        csParser.variable_initializer_return variable_initializer501 = default(csParser.variable_initializer_return);

        csParser.variable_initializer_return variable_initializer503 = default(csParser.variable_initializer_return);


        object char_literal502_tree=null;

         const string elementName = "variable_initializer_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 147) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:997:1: ( variable_initializer ( ',' variable_initializer )* )
            // cs.g:998:2: variable_initializer ( ',' variable_initializer )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_variable_initializer_in_variable_initializer_list5498);
            	variable_initializer501 = variable_initializer();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_initializer501.Tree);
            	// cs.g:998:23: ( ',' variable_initializer )*
            	do 
            	{
            	    int alt173 = 2;
            	    int LA173_0 = input.LA(1);

            	    if ( (LA173_0 == 98) )
            	    {
            	        int LA173_1 = input.LA(2);

            	        if ( ((LA173_1 >= IDENTIFIER && LA173_1 <= NULL) || LA173_1 == MINUS || LA173_1 == SET || (LA173_1 >= 90 && LA173_1 <= 92) || LA173_1 == 95 || (LA173_1 >= 101 && LA173_1 <= 107) || (LA173_1 >= 109 && LA173_1 <= 111) || (LA173_1 >= 114 && LA173_1 <= 122) || (LA173_1 >= 124 && LA173_1 <= 129) || (LA173_1 >= 132 && LA173_1 <= 144) || (LA173_1 >= 175 && LA173_1 <= 187) || LA173_1 == 199 || (LA173_1 >= 201 && LA173_1 <= 202) || LA173_1 == 208 || (LA173_1 >= 225 && LA173_1 <= 226)) )
            	        {
            	            alt173 = 1;
            	        }


            	    }


            	    switch (alt173) 
            		{
            			case 1 :
            			    // cs.g:998:24: ',' variable_initializer
            			    {
            			    	char_literal502=(IToken)Match(input,98,FOLLOW_98_in_variable_initializer_list5501); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal502_tree = (object)adaptor.Create(char_literal502);
            			    		adaptor.AddChild(root_0, char_literal502_tree);
            			    	}
            			    	PushFollow(FOLLOW_variable_initializer_in_variable_initializer_list5503);
            			    	variable_initializer503 = variable_initializer();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_initializer503.Tree);

            			    }
            			    break;

            			default:
            			    goto loop173;
            	    }
            	} while (true);

            	loop173:
            		;	// Stops C# compiler whining that label 'loop173' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 147, variable_initializer_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variable_initializer_list"

    public class assignment_operator_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "assignment_operator"
    // cs.g:1000:1: assignment_operator : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' );
    public csParser.assignment_operator_return assignment_operator() // throws RecognitionException [1]
    {   
        csParser.assignment_operator_return retval = new csParser.assignment_operator_return();
        retval.Start = input.LT(1);
        int assignment_operator_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal504 = null;
        IToken string_literal505 = null;
        IToken string_literal506 = null;
        IToken string_literal507 = null;
        IToken string_literal508 = null;
        IToken string_literal509 = null;
        IToken string_literal510 = null;
        IToken string_literal511 = null;
        IToken string_literal512 = null;
        IToken string_literal513 = null;
        IToken char_literal514 = null;
        IToken string_literal515 = null;

        object char_literal504_tree=null;
        object string_literal505_tree=null;
        object string_literal506_tree=null;
        object string_literal507_tree=null;
        object string_literal508_tree=null;
        object string_literal509_tree=null;
        object string_literal510_tree=null;
        object string_literal511_tree=null;
        object string_literal512_tree=null;
        object string_literal513_tree=null;
        object char_literal514_tree=null;
        object string_literal515_tree=null;

         const string elementName = "assignment_operator"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 148) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1003:1: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' )
            int alt174 = 11;
            switch ( input.LA(1) ) 
            {
            case 96:
            	{
                alt174 = 1;
                }
                break;
            case 160:
            	{
                alt174 = 2;
                }
                break;
            case 161:
            	{
                alt174 = 3;
                }
                break;
            case 162:
            	{
                alt174 = 4;
                }
                break;
            case 163:
            	{
                alt174 = 5;
                }
                break;
            case 164:
            	{
                alt174 = 6;
                }
                break;
            case 165:
            	{
                alt174 = 7;
                }
                break;
            case 166:
            	{
                alt174 = 8;
                }
                break;
            case 167:
            	{
                alt174 = 9;
                }
                break;
            case 168:
            	{
                alt174 = 10;
                }
                break;
            case GT:
            	{
                alt174 = 11;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d174s0 =
            	        new NoViableAltException("", 174, 0, input);

            	    throw nvae_d174s0;
            }

            switch (alt174) 
            {
                case 1 :
                    // cs.g:1004:2: '='
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal504=(IToken)Match(input,96,FOLLOW_96_in_assignment_operator5526); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal504_tree = (object)adaptor.Create(char_literal504);
                    		adaptor.AddChild(root_0, char_literal504_tree);
                    	}

                    }
                    break;
                case 2 :
                    // cs.g:1004:8: '+='
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal505=(IToken)Match(input,160,FOLLOW_160_in_assignment_operator5530); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal505_tree = (object)adaptor.Create(string_literal505);
                    		adaptor.AddChild(root_0, string_literal505_tree);
                    	}

                    }
                    break;
                case 3 :
                    // cs.g:1004:15: '-='
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal506=(IToken)Match(input,161,FOLLOW_161_in_assignment_operator5534); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal506_tree = (object)adaptor.Create(string_literal506);
                    		adaptor.AddChild(root_0, string_literal506_tree);
                    	}

                    }
                    break;
                case 4 :
                    // cs.g:1004:22: '*='
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal507=(IToken)Match(input,162,FOLLOW_162_in_assignment_operator5538); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal507_tree = (object)adaptor.Create(string_literal507);
                    		adaptor.AddChild(root_0, string_literal507_tree);
                    	}

                    }
                    break;
                case 5 :
                    // cs.g:1004:29: '/='
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal508=(IToken)Match(input,163,FOLLOW_163_in_assignment_operator5542); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal508_tree = (object)adaptor.Create(string_literal508);
                    		adaptor.AddChild(root_0, string_literal508_tree);
                    	}

                    }
                    break;
                case 6 :
                    // cs.g:1004:36: '%='
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal509=(IToken)Match(input,164,FOLLOW_164_in_assignment_operator5546); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal509_tree = (object)adaptor.Create(string_literal509);
                    		adaptor.AddChild(root_0, string_literal509_tree);
                    	}

                    }
                    break;
                case 7 :
                    // cs.g:1004:43: '&='
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal510=(IToken)Match(input,165,FOLLOW_165_in_assignment_operator5550); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal510_tree = (object)adaptor.Create(string_literal510);
                    		adaptor.AddChild(root_0, string_literal510_tree);
                    	}

                    }
                    break;
                case 8 :
                    // cs.g:1004:50: '|='
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal511=(IToken)Match(input,166,FOLLOW_166_in_assignment_operator5554); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal511_tree = (object)adaptor.Create(string_literal511);
                    		adaptor.AddChild(root_0, string_literal511_tree);
                    	}

                    }
                    break;
                case 9 :
                    // cs.g:1004:57: '^='
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal512=(IToken)Match(input,167,FOLLOW_167_in_assignment_operator5558); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal512_tree = (object)adaptor.Create(string_literal512);
                    		adaptor.AddChild(root_0, string_literal512_tree);
                    	}

                    }
                    break;
                case 10 :
                    // cs.g:1004:64: '<<='
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal513=(IToken)Match(input,168,FOLLOW_168_in_assignment_operator5562); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal513_tree = (object)adaptor.Create(string_literal513);
                    		adaptor.AddChild(root_0, string_literal513_tree);
                    	}

                    }
                    break;
                case 11 :
                    // cs.g:1004:72: '>' '>='
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal514=(IToken)Match(input,GT,FOLLOW_GT_in_assignment_operator5566); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal514_tree = (object)adaptor.Create(char_literal514);
                    		adaptor.AddChild(root_0, char_literal514_tree);
                    	}
                    	string_literal515=(IToken)Match(input,150,FOLLOW_150_in_assignment_operator5568); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal515_tree = (object)adaptor.Create(string_literal515);
                    		adaptor.AddChild(root_0, string_literal515_tree);
                    	}

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 148, assignment_operator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "assignment_operator"

    public class lambda_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "lambda_expression"
    // cs.g:1005:1: lambda_expression : anonymous_function_signature '=>' anonymous_function_body ;
    public csParser.lambda_expression_return lambda_expression() // throws RecognitionException [1]
    {   
        csParser.lambda_expression_return retval = new csParser.lambda_expression_return();
        retval.Start = input.LT(1);
        int lambda_expression_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal517 = null;
        csParser.anonymous_function_signature_return anonymous_function_signature516 = default(csParser.anonymous_function_signature_return);

        csParser.anonymous_function_body_return anonymous_function_body518 = default(csParser.anonymous_function_body_return);


        object string_literal517_tree=null;

         const string elementName = "lambda_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 149) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1008:1: ( anonymous_function_signature '=>' anonymous_function_body )
            // cs.g:1009:2: anonymous_function_signature '=>' anonymous_function_body
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_anonymous_function_signature_in_lambda_expression5588);
            	anonymous_function_signature516 = anonymous_function_signature();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, anonymous_function_signature516.Tree);
            	string_literal517=(IToken)Match(input,169,FOLLOW_169_in_lambda_expression5592); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal517_tree = (object)adaptor.Create(string_literal517);
            		adaptor.AddChild(root_0, string_literal517_tree);
            	}
            	PushFollow(FOLLOW_anonymous_function_body_in_lambda_expression5596);
            	anonymous_function_body518 = anonymous_function_body();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, anonymous_function_body518.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 149, lambda_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "lambda_expression"

    public class anonymous_function_signature_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "anonymous_function_signature"
    // cs.g:1010:1: anonymous_function_signature : ( explicit_anonymous_function_signature | implicit_anonymous_function_signature );
    public csParser.anonymous_function_signature_return anonymous_function_signature() // throws RecognitionException [1]
    {   
        csParser.anonymous_function_signature_return retval = new csParser.anonymous_function_signature_return();
        retval.Start = input.LT(1);
        int anonymous_function_signature_StartIndex = input.Index();
        object root_0 = null;

        csParser.explicit_anonymous_function_signature_return explicit_anonymous_function_signature519 = default(csParser.explicit_anonymous_function_signature_return);

        csParser.implicit_anonymous_function_signature_return implicit_anonymous_function_signature520 = default(csParser.implicit_anonymous_function_signature_return);



         const string elementName = "anonymous_function_signature"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 150) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1013:1: ( explicit_anonymous_function_signature | implicit_anonymous_function_signature )
            int alt175 = 2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0 == 110) )
            {
                switch ( input.LA(2) ) 
                {
                case IDENTIFIER:
                	{
                    switch ( input.LA(3) ) 
                    {
                    case DOT:
                    case 89:
                    case 97:
                    case 111:
                    case 112:
                    case 123:
                    	{
                        alt175 = 1;
                        }
                        break;
                    case RPAREN:
                    	{
                        alt175 = 2;
                        }
                        break;
                    case IDENTIFIER:
                    	{
                        switch ( input.LA(4) ) 
                        {
                        case RPAREN:
                        	{
                            int LA175_5 = input.LA(5);

                            if ( (synpred272_cs()) )
                            {
                                alt175 = 1;
                            }
                            else if ( (true) )
                            {
                                alt175 = 2;
                            }
                            else 
                            {
                                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                                NoViableAltException nvae_d175s5 =
                                    new NoViableAltException("", 175, 5, input);

                                throw nvae_d175s5;
                            }
                            }
                            break;
                        case IDENTIFIER:
                        case SET:
                        case 95:
                        case 101:
                        case 102:
                        case 103:
                        case 104:
                        case 105:
                        case 106:
                        case 107:
                        case 109:
                        case 175:
                        case 176:
                        case 177:
                        case 178:
                        case 179:
                        case 180:
                        case 181:
                        case 182:
                        case 183:
                        case 184:
                        case 185:
                        case 186:
                        case 187:
                        case 199:
                        case 201:
                        case 202:
                        case 208:
                        case 225:
                        case 226:
                        	{
                            alt175 = 2;
                            }
                            break;
                        case 98:
                        	{
                            alt175 = 1;
                            }
                            break;
                        	default:
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d175s7 =
                        	        new NoViableAltException("", 175, 7, input);

                        	    throw nvae_d175s7;
                        }

                        }
                        break;
                    case SET:
                    case 95:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 109:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                    case 181:
                    case 182:
                    case 183:
                    case 184:
                    case 185:
                    case 186:
                    case 187:
                    case 199:
                    case 201:
                    case 202:
                    case 208:
                    case 225:
                    case 226:
                    	{
                        switch ( input.LA(4) ) 
                        {
                        case RPAREN:
                        	{
                            int LA175_5 = input.LA(5);

                            if ( (synpred272_cs()) )
                            {
                                alt175 = 1;
                            }
                            else if ( (true) )
                            {
                                alt175 = 2;
                            }
                            else 
                            {
                                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                                NoViableAltException nvae_d175s5 =
                                    new NoViableAltException("", 175, 5, input);

                                throw nvae_d175s5;
                            }
                            }
                            break;
                        case IDENTIFIER:
                        case SET:
                        case 95:
                        case 101:
                        case 102:
                        case 103:
                        case 104:
                        case 105:
                        case 106:
                        case 107:
                        case 109:
                        case 175:
                        case 176:
                        case 177:
                        case 178:
                        case 179:
                        case 180:
                        case 181:
                        case 182:
                        case 183:
                        case 184:
                        case 185:
                        case 186:
                        case 187:
                        case 199:
                        case 201:
                        case 202:
                        case 208:
                        case 225:
                        case 226:
                        	{
                            alt175 = 2;
                            }
                            break;
                        case 98:
                        	{
                            alt175 = 1;
                            }
                            break;
                        	default:
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d175s8 =
                        	        new NoViableAltException("", 175, 8, input);

                        	    throw nvae_d175s8;
                        }

                        }
                        break;
                    	default:
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    NoViableAltException nvae_d175s3 =
                    	        new NoViableAltException("", 175, 3, input);

                    	    throw nvae_d175s3;
                    }

                    }
                    break;
                case SET:
                case 95:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 199:
                case 201:
                case 202:
                case 208:
                case 225:
                case 226:
                	{
                    switch ( input.LA(3) ) 
                    {
                    case RPAREN:
                    	{
                        alt175 = 2;
                        }
                        break;
                    case IDENTIFIER:
                    	{
                        switch ( input.LA(4) ) 
                        {
                        case RPAREN:
                        	{
                            int LA175_5 = input.LA(5);

                            if ( (synpred272_cs()) )
                            {
                                alt175 = 1;
                            }
                            else if ( (true) )
                            {
                                alt175 = 2;
                            }
                            else 
                            {
                                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                                NoViableAltException nvae_d175s5 =
                                    new NoViableAltException("", 175, 5, input);

                                throw nvae_d175s5;
                            }
                            }
                            break;
                        case IDENTIFIER:
                        case SET:
                        case 95:
                        case 101:
                        case 102:
                        case 103:
                        case 104:
                        case 105:
                        case 106:
                        case 107:
                        case 109:
                        case 175:
                        case 176:
                        case 177:
                        case 178:
                        case 179:
                        case 180:
                        case 181:
                        case 182:
                        case 183:
                        case 184:
                        case 185:
                        case 186:
                        case 187:
                        case 199:
                        case 201:
                        case 202:
                        case 208:
                        case 225:
                        case 226:
                        	{
                            alt175 = 2;
                            }
                            break;
                        case 98:
                        	{
                            alt175 = 1;
                            }
                            break;
                        	default:
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d175s7 =
                        	        new NoViableAltException("", 175, 7, input);

                        	    throw nvae_d175s7;
                        }

                        }
                        break;
                    case SET:
                    case 95:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 109:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                    case 181:
                    case 182:
                    case 183:
                    case 184:
                    case 185:
                    case 186:
                    case 187:
                    case 199:
                    case 201:
                    case 202:
                    case 208:
                    case 225:
                    case 226:
                    	{
                        switch ( input.LA(4) ) 
                        {
                        case RPAREN:
                        	{
                            int LA175_5 = input.LA(5);

                            if ( (synpred272_cs()) )
                            {
                                alt175 = 1;
                            }
                            else if ( (true) )
                            {
                                alt175 = 2;
                            }
                            else 
                            {
                                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                                NoViableAltException nvae_d175s5 =
                                    new NoViableAltException("", 175, 5, input);

                                throw nvae_d175s5;
                            }
                            }
                            break;
                        case IDENTIFIER:
                        case SET:
                        case 95:
                        case 101:
                        case 102:
                        case 103:
                        case 104:
                        case 105:
                        case 106:
                        case 107:
                        case 109:
                        case 175:
                        case 176:
                        case 177:
                        case 178:
                        case 179:
                        case 180:
                        case 181:
                        case 182:
                        case 183:
                        case 184:
                        case 185:
                        case 186:
                        case 187:
                        case 199:
                        case 201:
                        case 202:
                        case 208:
                        case 225:
                        case 226:
                        	{
                            alt175 = 2;
                            }
                            break;
                        case 98:
                        	{
                            alt175 = 1;
                            }
                            break;
                        	default:
                        	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        	    NoViableAltException nvae_d175s8 =
                        	        new NoViableAltException("", 175, 8, input);

                        	    throw nvae_d175s8;
                        }

                        }
                        break;
                    case DOT:
                    case 89:
                    case 97:
                    case 111:
                    case 112:
                    case 123:
                    	{
                        alt175 = 1;
                        }
                        break;
                    	default:
                    	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    	    NoViableAltException nvae_d175s4 =
                    	        new NoViableAltException("", 175, 4, input);

                    	    throw nvae_d175s4;
                    }

                    }
                    break;
                case RPAREN:
                	{
                    int LA175_5 = input.LA(3);

                    if ( (synpred272_cs()) )
                    {
                        alt175 = 1;
                    }
                    else if ( (true) )
                    {
                        alt175 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d175s5 =
                            new NoViableAltException("", 175, 5, input);

                        throw nvae_d175s5;
                    }
                    }
                    break;
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                	{
                    alt175 = 1;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d175s1 =
                	        new NoViableAltException("", 175, 1, input);

                	    throw nvae_d175s1;
                }

            }
            else if ( (LA175_0 == IDENTIFIER || LA175_0 == SET || LA175_0 == 95 || (LA175_0 >= 101 && LA175_0 <= 107) || LA175_0 == 109 || (LA175_0 >= 175 && LA175_0 <= 187) || LA175_0 == 199 || (LA175_0 >= 201 && LA175_0 <= 202) || LA175_0 == 208 || (LA175_0 >= 225 && LA175_0 <= 226)) )
            {
                alt175 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d175s0 =
                    new NoViableAltException("", 175, 0, input);

                throw nvae_d175s0;
            }
            switch (alt175) 
            {
                case 1 :
                    // cs.g:1014:2: explicit_anonymous_function_signature
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_explicit_anonymous_function_signature_in_anonymous_function_signature5615);
                    	explicit_anonymous_function_signature519 = explicit_anonymous_function_signature();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, explicit_anonymous_function_signature519.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1015:4: implicit_anonymous_function_signature
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_implicit_anonymous_function_signature_in_anonymous_function_signature5621);
                    	implicit_anonymous_function_signature520 = implicit_anonymous_function_signature();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, implicit_anonymous_function_signature520.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 150, anonymous_function_signature_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "anonymous_function_signature"

    public class implicit_anonymous_function_signature_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "implicit_anonymous_function_signature"
    // cs.g:1016:1: implicit_anonymous_function_signature : ( '(' ( implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list ( ',' implicit_anonymous_function_parameter )? );
    public csParser.implicit_anonymous_function_signature_return implicit_anonymous_function_signature() // throws RecognitionException [1]
    {   
        csParser.implicit_anonymous_function_signature_return retval = new csParser.implicit_anonymous_function_signature_return();
        retval.Start = input.LT(1);
        int implicit_anonymous_function_signature_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal521 = null;
        IToken char_literal523 = null;
        IToken char_literal525 = null;
        csParser.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list522 = default(csParser.implicit_anonymous_function_parameter_list_return);

        csParser.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list524 = default(csParser.implicit_anonymous_function_parameter_list_return);

        csParser.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter526 = default(csParser.implicit_anonymous_function_parameter_return);


        object char_literal521_tree=null;
        object char_literal523_tree=null;
        object char_literal525_tree=null;

         const string elementName = "implicit_anonymous_function_signature"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 151) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1019:1: ( '(' ( implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list ( ',' implicit_anonymous_function_parameter )? )
            int alt178 = 2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0 == 110) )
            {
                alt178 = 1;
            }
            else if ( (LA178_0 == IDENTIFIER || LA178_0 == SET || LA178_0 == 95 || (LA178_0 >= 101 && LA178_0 <= 107) || LA178_0 == 109 || (LA178_0 >= 175 && LA178_0 <= 187) || LA178_0 == 199 || (LA178_0 >= 201 && LA178_0 <= 202) || LA178_0 == 208 || (LA178_0 >= 225 && LA178_0 <= 226)) )
            {
                alt178 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d178s0 =
                    new NoViableAltException("", 178, 0, input);

                throw nvae_d178s0;
            }
            switch (alt178) 
            {
                case 1 :
                    // cs.g:1020:2: '(' ( implicit_anonymous_function_parameter_list )? ')'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal521=(IToken)Match(input,110,FOLLOW_110_in_implicit_anonymous_function_signature5640); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal521_tree = (object)adaptor.Create(char_literal521);
                    		adaptor.AddChild(root_0, char_literal521_tree);
                    	}
                    	// cs.g:1020:8: ( implicit_anonymous_function_parameter_list )?
                    	int alt176 = 2;
                    	int LA176_0 = input.LA(1);

                    	if ( (LA176_0 == IDENTIFIER || LA176_0 == SET || LA176_0 == 95 || (LA176_0 >= 101 && LA176_0 <= 107) || LA176_0 == 109 || (LA176_0 >= 175 && LA176_0 <= 187) || LA176_0 == 199 || (LA176_0 >= 201 && LA176_0 <= 202) || LA176_0 == 208 || (LA176_0 >= 225 && LA176_0 <= 226)) )
                    	{
                    	    alt176 = 1;
                    	}
                    	switch (alt176) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: implicit_anonymous_function_parameter_list
                    	        {
                    	        	PushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_implicit_anonymous_function_signature5644);
                    	        	implicit_anonymous_function_parameter_list522 = implicit_anonymous_function_parameter_list();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, implicit_anonymous_function_parameter_list522.Tree);

                    	        }
                    	        break;

                    	}

                    	char_literal523=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_implicit_anonymous_function_signature5649); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal523_tree = (object)adaptor.Create(char_literal523);
                    		adaptor.AddChild(root_0, char_literal523_tree);
                    	}

                    }
                    break;
                case 2 :
                    // cs.g:1021:4: implicit_anonymous_function_parameter_list ( ',' implicit_anonymous_function_parameter )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_implicit_anonymous_function_parameter_list_in_implicit_anonymous_function_signature5654);
                    	implicit_anonymous_function_parameter_list524 = implicit_anonymous_function_parameter_list();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, implicit_anonymous_function_parameter_list524.Tree);
                    	// cs.g:1021:49: ( ',' implicit_anonymous_function_parameter )?
                    	int alt177 = 2;
                    	int LA177_0 = input.LA(1);

                    	if ( (LA177_0 == 98) )
                    	{
                    	    alt177 = 1;
                    	}
                    	switch (alt177) 
                    	{
                    	    case 1 :
                    	        // cs.g:1021:50: ',' implicit_anonymous_function_parameter
                    	        {
                    	        	char_literal525=(IToken)Match(input,98,FOLLOW_98_in_implicit_anonymous_function_signature5659); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{char_literal525_tree = (object)adaptor.Create(char_literal525);
                    	        		adaptor.AddChild(root_0, char_literal525_tree);
                    	        	}
                    	        	PushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_signature5663);
                    	        	implicit_anonymous_function_parameter526 = implicit_anonymous_function_parameter();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, implicit_anonymous_function_parameter526.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 151, implicit_anonymous_function_signature_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_signature"

    public class implicit_anonymous_function_parameter_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "implicit_anonymous_function_parameter_list"
    // cs.g:1022:1: implicit_anonymous_function_parameter_list : ( implicit_anonymous_function_parameter )+ ;
    public csParser.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list() // throws RecognitionException [1]
    {   
        csParser.implicit_anonymous_function_parameter_list_return retval = new csParser.implicit_anonymous_function_parameter_list_return();
        retval.Start = input.LT(1);
        int implicit_anonymous_function_parameter_list_StartIndex = input.Index();
        object root_0 = null;

        csParser.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter527 = default(csParser.implicit_anonymous_function_parameter_return);



         const string elementName = "implicit_anonymous_function_parameter_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 152) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1025:1: ( ( implicit_anonymous_function_parameter )+ )
            // cs.g:1026:2: ( implicit_anonymous_function_parameter )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1026:2: ( implicit_anonymous_function_parameter )+
            	int cnt179 = 0;
            	do 
            	{
            	    int alt179 = 2;
            	    int LA179_0 = input.LA(1);

            	    if ( (LA179_0 == IDENTIFIER || LA179_0 == SET || LA179_0 == 95 || (LA179_0 >= 101 && LA179_0 <= 107) || LA179_0 == 109 || (LA179_0 >= 175 && LA179_0 <= 187) || LA179_0 == 199 || (LA179_0 >= 201 && LA179_0 <= 202) || LA179_0 == 208 || (LA179_0 >= 225 && LA179_0 <= 226)) )
            	    {
            	        alt179 = 1;
            	    }


            	    switch (alt179) 
            		{
            			case 1 :
            			    // cs.g:0:0: implicit_anonymous_function_parameter
            			    {
            			    	PushFollow(FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list5684);
            			    	implicit_anonymous_function_parameter527 = implicit_anonymous_function_parameter();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, implicit_anonymous_function_parameter527.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt179 >= 1 ) goto loop179;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee179 =
            		                new EarlyExitException(179, input);
            		            throw eee179;
            	    }
            	    cnt179++;
            	} while (true);

            	loop179:
            		;	// Stops C# compiler whining that label 'loop179' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 152, implicit_anonymous_function_parameter_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_parameter_list"

    public class implicit_anonymous_function_parameter_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "implicit_anonymous_function_parameter"
    // cs.g:1027:1: implicit_anonymous_function_parameter : identifier ;
    public csParser.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter() // throws RecognitionException [1]
    {   
        csParser.implicit_anonymous_function_parameter_return retval = new csParser.implicit_anonymous_function_parameter_return();
        retval.Start = input.LT(1);
        int implicit_anonymous_function_parameter_StartIndex = input.Index();
        object root_0 = null;

        csParser.identifier_return identifier528 = default(csParser.identifier_return);



         const string elementName = "implicit_anonymous_function_parameter"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 153) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1030:1: ( identifier )
            // cs.g:1031:2: identifier
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_identifier_in_implicit_anonymous_function_parameter5705);
            	identifier528 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier528.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 153, implicit_anonymous_function_parameter_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "implicit_anonymous_function_parameter"

    public class anonymous_function_body_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "anonymous_function_body"
    // cs.g:1032:1: anonymous_function_body : ( expression | block );
    public csParser.anonymous_function_body_return anonymous_function_body() // throws RecognitionException [1]
    {   
        csParser.anonymous_function_body_return retval = new csParser.anonymous_function_body_return();
        retval.Start = input.LT(1);
        int anonymous_function_body_StartIndex = input.Index();
        object root_0 = null;

        csParser.expression_return expression529 = default(csParser.expression_return);

        csParser.block_return block530 = default(csParser.block_return);



         const string elementName = "anonymous_function_body"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 154) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1035:1: ( expression | block )
            int alt180 = 2;
            int LA180_0 = input.LA(1);

            if ( ((LA180_0 >= IDENTIFIER && LA180_0 <= NULL) || LA180_0 == MINUS || LA180_0 == SET || (LA180_0 >= 90 && LA180_0 <= 91) || LA180_0 == 95 || (LA180_0 >= 101 && LA180_0 <= 107) || (LA180_0 >= 109 && LA180_0 <= 111) || (LA180_0 >= 114 && LA180_0 <= 122) || (LA180_0 >= 124 && LA180_0 <= 129) || (LA180_0 >= 132 && LA180_0 <= 144) || (LA180_0 >= 175 && LA180_0 <= 187) || LA180_0 == 199 || (LA180_0 >= 201 && LA180_0 <= 202) || LA180_0 == 208 || (LA180_0 >= 225 && LA180_0 <= 226)) )
            {
                alt180 = 1;
            }
            else if ( (LA180_0 == SEMI || LA180_0 == 92) )
            {
                alt180 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d180s0 =
                    new NoViableAltException("", 180, 0, input);

                throw nvae_d180s0;
            }
            switch (alt180) 
            {
                case 1 :
                    // cs.g:1036:2: expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_expression_in_anonymous_function_body5724);
                    	expression529 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression529.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1037:4: block
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_block_in_anonymous_function_body5729);
                    	block530 = block();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block530.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 154, anonymous_function_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "anonymous_function_body"

    public class delegate_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "delegate_declaration"
    // cs.g:1040:1: delegate_declaration : ( attributes )? ( delegate_modifiers )? 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
    public csParser.delegate_declaration_return delegate_declaration() // throws RecognitionException [1]
    {   
        csParser.delegate_declaration_return retval = new csParser.delegate_declaration_return();
        retval.Start = input.LT(1);
        int delegate_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal533 = null;
        IToken char_literal537 = null;
        IToken char_literal539 = null;
        IToken char_literal541 = null;
        csParser.attributes_return attributes531 = default(csParser.attributes_return);

        csParser.delegate_modifiers_return delegate_modifiers532 = default(csParser.delegate_modifiers_return);

        csParser.return_type_return return_type534 = default(csParser.return_type_return);

        csParser.identifier_return identifier535 = default(csParser.identifier_return);

        csParser.variant_generic_parameter_list_return variant_generic_parameter_list536 = default(csParser.variant_generic_parameter_list_return);

        csParser.formal_parameter_list_return formal_parameter_list538 = default(csParser.formal_parameter_list_return);

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses540 = default(csParser.type_parameter_constraints_clauses_return);


        object string_literal533_tree=null;
        object char_literal537_tree=null;
        object char_literal539_tree=null;
        object char_literal541_tree=null;

         const string elementName = "delegate_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 155) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1043:1: ( ( attributes )? ( delegate_modifiers )? 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
            // cs.g:1044:2: ( attributes )? ( delegate_modifiers )? 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1044:2: ( attributes )?
            	int alt181 = 2;
            	int LA181_0 = input.LA(1);

            	if ( (LA181_0 == 97) )
            	{
            	    alt181 = 1;
            	}
            	switch (alt181) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_delegate_declaration5751);
            	        	attributes531 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes531.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1044:16: ( delegate_modifiers )?
            	int alt182 = 2;
            	int LA182_0 = input.LA(1);

            	if ( (LA182_0 == 138 || (LA182_0 >= 170 && LA182_0 <= 174)) )
            	{
            	    alt182 = 1;
            	}
            	switch (alt182) 
            	{
            	    case 1 :
            	        // cs.g:0:0: delegate_modifiers
            	        {
            	        	PushFollow(FOLLOW_delegate_modifiers_in_delegate_declaration5756);
            	        	delegate_modifiers532 = delegate_modifiers();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, delegate_modifiers532.Tree);

            	        }
            	        break;

            	}

            	string_literal533=(IToken)Match(input,144,FOLLOW_144_in_delegate_declaration5761); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal533_tree = (object)adaptor.Create(string_literal533);
            		adaptor.AddChild(root_0, string_literal533_tree);
            	}
            	PushFollow(FOLLOW_return_type_in_delegate_declaration5765);
            	return_type534 = return_type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, return_type534.Tree);
            	PushFollow(FOLLOW_identifier_in_delegate_declaration5769);
            	identifier535 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier535.Tree);
            	// cs.g:1044:77: ( variant_generic_parameter_list )?
            	int alt183 = 2;
            	int LA183_0 = input.LA(1);

            	if ( (LA183_0 == 123) )
            	{
            	    alt183 = 1;
            	}
            	switch (alt183) 
            	{
            	    case 1 :
            	        // cs.g:0:0: variant_generic_parameter_list
            	        {
            	        	PushFollow(FOLLOW_variant_generic_parameter_list_in_delegate_declaration5772);
            	        	variant_generic_parameter_list536 = variant_generic_parameter_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variant_generic_parameter_list536.Tree);

            	        }
            	        break;

            	}

            	char_literal537=(IToken)Match(input,110,FOLLOW_110_in_delegate_declaration5780); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal537_tree = (object)adaptor.Create(char_literal537);
            		adaptor.AddChild(root_0, char_literal537_tree);
            	}
            	// cs.g:1045:9: ( formal_parameter_list )?
            	int alt184 = 2;
            	int LA184_0 = input.LA(1);

            	if ( (LA184_0 == IDENTIFIER || LA184_0 == SET || LA184_0 == 90 || LA184_0 == 95 || LA184_0 == 97 || (LA184_0 >= 101 && LA184_0 <= 107) || LA184_0 == 109 || (LA184_0 >= 113 && LA184_0 <= 122) || (LA184_0 >= 130 && LA184_0 <= 137) || (LA184_0 >= 175 && LA184_0 <= 187) || (LA184_0 >= 199 && LA184_0 <= 202) || LA184_0 == 208 || (LA184_0 >= 225 && LA184_0 <= 226)) )
            	{
            	    alt184 = 1;
            	}
            	switch (alt184) 
            	{
            	    case 1 :
            	        // cs.g:0:0: formal_parameter_list
            	        {
            	        	PushFollow(FOLLOW_formal_parameter_list_in_delegate_declaration5784);
            	        	formal_parameter_list538 = formal_parameter_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, formal_parameter_list538.Tree);

            	        }
            	        break;

            	}

            	char_literal539=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_delegate_declaration5789); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal539_tree = (object)adaptor.Create(char_literal539);
            		adaptor.AddChild(root_0, char_literal539_tree);
            	}
            	// cs.g:1045:40: ( type_parameter_constraints_clauses )?
            	int alt185 = 2;
            	int LA185_0 = input.LA(1);

            	if ( (LA185_0 == 187) )
            	{
            	    alt185 = 1;
            	}
            	switch (alt185) 
            	{
            	    case 1 :
            	        // cs.g:0:0: type_parameter_constraints_clauses
            	        {
            	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration5793);
            	        	type_parameter_constraints_clauses540 = type_parameter_constraints_clauses();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameter_constraints_clauses540.Tree);

            	        }
            	        break;

            	}

            	char_literal541=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_delegate_declaration5798); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal541_tree = (object)adaptor.Create(char_literal541);
            		adaptor.AddChild(root_0, char_literal541_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 155, delegate_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "delegate_declaration"

    public class delegate_modifiers_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "delegate_modifiers"
    // cs.g:1047:1: delegate_modifiers : delegate_modifier ( delegate_modifier )* ;
    public csParser.delegate_modifiers_return delegate_modifiers() // throws RecognitionException [1]
    {   
        csParser.delegate_modifiers_return retval = new csParser.delegate_modifiers_return();
        retval.Start = input.LT(1);
        int delegate_modifiers_StartIndex = input.Index();
        object root_0 = null;

        csParser.delegate_modifier_return delegate_modifier542 = default(csParser.delegate_modifier_return);

        csParser.delegate_modifier_return delegate_modifier543 = default(csParser.delegate_modifier_return);



         const string elementName = "delegate_modifiers"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 156) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1050:1: ( delegate_modifier ( delegate_modifier )* )
            // cs.g:1051:2: delegate_modifier ( delegate_modifier )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_delegate_modifier_in_delegate_modifiers5820);
            	delegate_modifier542 = delegate_modifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, delegate_modifier542.Tree);
            	// cs.g:1051:20: ( delegate_modifier )*
            	do 
            	{
            	    int alt186 = 2;
            	    int LA186_0 = input.LA(1);

            	    if ( (LA186_0 == 138 || (LA186_0 >= 170 && LA186_0 <= 174)) )
            	    {
            	        alt186 = 1;
            	    }


            	    switch (alt186) 
            		{
            			case 1 :
            			    // cs.g:1051:21: delegate_modifier
            			    {
            			    	PushFollow(FOLLOW_delegate_modifier_in_delegate_modifiers5823);
            			    	delegate_modifier543 = delegate_modifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, delegate_modifier543.Tree);

            			    }
            			    break;

            			default:
            			    goto loop186;
            	    }
            	} while (true);

            	loop186:
            		;	// Stops C# compiler whining that label 'loop186' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 156, delegate_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "delegate_modifiers"

    public class delegate_modifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "delegate_modifier"
    // cs.g:1052:1: delegate_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' );
    public csParser.delegate_modifier_return delegate_modifier() // throws RecognitionException [1]
    {   
        csParser.delegate_modifier_return retval = new csParser.delegate_modifier_return();
        retval.Start = input.LT(1);
        int delegate_modifier_StartIndex = input.Index();
        object root_0 = null;

        IToken set544 = null;

        object set544_tree=null;

         const string elementName = "delegate_modifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 157) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1055:1: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set544 = (IToken)input.LT(1);
            	if ( input.LA(1) == 138 || (input.LA(1) >= 170 && input.LA(1) <= 174) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set544));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 157, delegate_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "delegate_modifier"

    public class query_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "query_expression"
    // cs.g:1057:1: query_expression : from_clause query_body ;
    public csParser.query_expression_return query_expression() // throws RecognitionException [1]
    {   
        csParser.query_expression_return retval = new csParser.query_expression_return();
        retval.Start = input.LT(1);
        int query_expression_StartIndex = input.Index();
        object root_0 = null;

        csParser.from_clause_return from_clause545 = default(csParser.from_clause_return);

        csParser.query_body_return query_body546 = default(csParser.query_body_return);



         const string elementName = "query_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 158) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1060:1: ( from_clause query_body )
            // cs.g:1061:2: from_clause query_body
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_from_clause_in_query_expression5885);
            	from_clause545 = from_clause();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, from_clause545.Tree);
            	PushFollow(FOLLOW_query_body_in_query_expression5889);
            	query_body546 = query_body();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, query_body546.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 158, query_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "query_expression"

    public class from_clause_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "from_clause"
    // cs.g:1062:1: from_clause : 'from' ( type )? identifier 'in' expression ;
    public csParser.from_clause_return from_clause() // throws RecognitionException [1]
    {   
        csParser.from_clause_return retval = new csParser.from_clause_return();
        retval.Start = input.LT(1);
        int from_clause_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal547 = null;
        IToken string_literal550 = null;
        csParser.type_return type548 = default(csParser.type_return);

        csParser.identifier_return identifier549 = default(csParser.identifier_return);

        csParser.expression_return expression551 = default(csParser.expression_return);


        object string_literal547_tree=null;
        object string_literal550_tree=null;

         const string elementName = "from_clause"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 159) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1065:1: ( 'from' ( type )? identifier 'in' expression )
            // cs.g:1066:2: 'from' ( type )? identifier 'in' expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal547=(IToken)Match(input,175,FOLLOW_175_in_from_clause5909); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal547_tree = (object)adaptor.Create(string_literal547);
            		adaptor.AddChild(root_0, string_literal547_tree);
            	}
            	// cs.g:1066:11: ( type )?
            	int alt187 = 2;
            	switch ( input.LA(1) ) 
            	{
            	    case IDENTIFIER:
            	    	{
            	        int LA187_1 = input.LA(2);

            	        if ( (LA187_1 == IDENTIFIER || LA187_1 == DOT || LA187_1 == SET || LA187_1 == 89 || LA187_1 == 95 || LA187_1 == 97 || (LA187_1 >= 101 && LA187_1 <= 107) || LA187_1 == 109 || (LA187_1 >= 111 && LA187_1 <= 112) || LA187_1 == 123 || (LA187_1 >= 175 && LA187_1 <= 187) || LA187_1 == 199 || (LA187_1 >= 201 && LA187_1 <= 202) || LA187_1 == 208 || (LA187_1 >= 225 && LA187_1 <= 226)) )
            	        {
            	            alt187 = 1;
            	        }
            	        }
            	        break;
            	    case SET:
            	    case 95:
            	    case 101:
            	    case 102:
            	    case 103:
            	    case 104:
            	    case 105:
            	    case 106:
            	    case 107:
            	    case 109:
            	    case 175:
            	    case 176:
            	    case 177:
            	    case 178:
            	    case 179:
            	    case 180:
            	    case 181:
            	    case 182:
            	    case 183:
            	    case 184:
            	    case 185:
            	    case 186:
            	    case 187:
            	    case 199:
            	    case 201:
            	    case 202:
            	    case 208:
            	    case 225:
            	    case 226:
            	    	{
            	        int LA187_2 = input.LA(2);

            	        if ( (LA187_2 == IDENTIFIER || LA187_2 == DOT || LA187_2 == SET || LA187_2 == 89 || LA187_2 == 95 || LA187_2 == 97 || (LA187_2 >= 101 && LA187_2 <= 107) || LA187_2 == 109 || (LA187_2 >= 111 && LA187_2 <= 112) || LA187_2 == 123 || (LA187_2 >= 175 && LA187_2 <= 187) || LA187_2 == 199 || (LA187_2 >= 201 && LA187_2 <= 202) || LA187_2 == 208 || (LA187_2 >= 225 && LA187_2 <= 226)) )
            	        {
            	            alt187 = 1;
            	        }
            	        }
            	        break;
            	    case 113:
            	    case 114:
            	    case 115:
            	    case 116:
            	    case 117:
            	    case 118:
            	    case 119:
            	    case 120:
            	    case 121:
            	    case 122:
            	    case 132:
            	    case 133:
            	    case 134:
            	    case 135:
            	    case 136:
            	    case 137:
            	    	{
            	        alt187 = 1;
            	        }
            	        break;
            	}

            	switch (alt187) 
            	{
            	    case 1 :
            	        // cs.g:0:0: type
            	        {
            	        	PushFollow(FOLLOW_type_in_from_clause5913);
            	        	type548 = type();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type548.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_identifier_in_from_clause5918);
            	identifier549 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier549.Tree);
            	string_literal550=(IToken)Match(input,145,FOLLOW_145_in_from_clause5922); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal550_tree = (object)adaptor.Create(string_literal550);
            		adaptor.AddChild(root_0, string_literal550_tree);
            	}
            	PushFollow(FOLLOW_expression_in_from_clause5926);
            	expression551 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression551.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 159, from_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "from_clause"

    public class query_body_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "query_body"
    // cs.g:1067:1: query_body : ( query_body_clauses )? select_or_group_clause ( query_continuation )? ;
    public csParser.query_body_return query_body() // throws RecognitionException [1]
    {   
        csParser.query_body_return retval = new csParser.query_body_return();
        retval.Start = input.LT(1);
        int query_body_StartIndex = input.Index();
        object root_0 = null;

        csParser.query_body_clauses_return query_body_clauses552 = default(csParser.query_body_clauses_return);

        csParser.select_or_group_clause_return select_or_group_clause553 = default(csParser.select_or_group_clause_return);

        csParser.query_continuation_return query_continuation554 = default(csParser.query_continuation_return);



         const string elementName = "query_body"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 160) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1070:1: ( ( query_body_clauses )? select_or_group_clause ( query_continuation )? )
            // cs.g:1071:2: ( query_body_clauses )? select_or_group_clause ( query_continuation )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1071:2: ( query_body_clauses )?
            	int alt188 = 2;
            	int LA188_0 = input.LA(1);

            	if ( (LA188_0 == 175 || LA188_0 == 177 || (LA188_0 >= 180 && LA188_0 <= 181) || LA188_0 == 187) )
            	{
            	    alt188 = 1;
            	}
            	switch (alt188) 
            	{
            	    case 1 :
            	        // cs.g:0:0: query_body_clauses
            	        {
            	        	PushFollow(FOLLOW_query_body_clauses_in_query_body5946);
            	        	query_body_clauses552 = query_body_clauses();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, query_body_clauses552.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_select_or_group_clause_in_query_body5951);
            	select_or_group_clause553 = select_or_group_clause();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, select_or_group_clause553.Tree);
            	// cs.g:1071:49: ( query_continuation )?
            	int alt189 = 2;
            	int LA189_0 = input.LA(1);

            	if ( (LA189_0 == 176) )
            	{
            	    int LA189_1 = input.LA(2);

            	    if ( (synpred291_cs()) )
            	    {
            	        alt189 = 1;
            	    }
            	}
            	switch (alt189) 
            	{
            	    case 1 :
            	        // cs.g:0:0: query_continuation
            	        {
            	        	PushFollow(FOLLOW_query_continuation_in_query_body5955);
            	        	query_continuation554 = query_continuation();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, query_continuation554.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 160, query_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "query_body"

    public class query_continuation_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "query_continuation"
    // cs.g:1072:1: query_continuation : 'into' identifier query_body ;
    public csParser.query_continuation_return query_continuation() // throws RecognitionException [1]
    {   
        csParser.query_continuation_return retval = new csParser.query_continuation_return();
        retval.Start = input.LT(1);
        int query_continuation_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal555 = null;
        csParser.identifier_return identifier556 = default(csParser.identifier_return);

        csParser.query_body_return query_body557 = default(csParser.query_body_return);


        object string_literal555_tree=null;

         const string elementName = "query_continuation"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 161) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1075:1: ( 'into' identifier query_body )
            // cs.g:1076:2: 'into' identifier query_body
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal555=(IToken)Match(input,176,FOLLOW_176_in_query_continuation5975); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal555_tree = (object)adaptor.Create(string_literal555);
            		adaptor.AddChild(root_0, string_literal555_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_query_continuation5979);
            	identifier556 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier556.Tree);
            	PushFollow(FOLLOW_query_body_in_query_continuation5983);
            	query_body557 = query_body();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, query_body557.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 161, query_continuation_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "query_continuation"

    public class query_body_clauses_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "query_body_clauses"
    // cs.g:1077:1: query_body_clauses : ( query_body_clause )+ ;
    public csParser.query_body_clauses_return query_body_clauses() // throws RecognitionException [1]
    {   
        csParser.query_body_clauses_return retval = new csParser.query_body_clauses_return();
        retval.Start = input.LT(1);
        int query_body_clauses_StartIndex = input.Index();
        object root_0 = null;

        csParser.query_body_clause_return query_body_clause558 = default(csParser.query_body_clause_return);



         const string elementName = "query_body_clauses"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 162) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1080:1: ( ( query_body_clause )+ )
            // cs.g:1081:2: ( query_body_clause )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1081:2: ( query_body_clause )+
            	int cnt190 = 0;
            	do 
            	{
            	    int alt190 = 2;
            	    int LA190_0 = input.LA(1);

            	    if ( (LA190_0 == 175 || LA190_0 == 177 || (LA190_0 >= 180 && LA190_0 <= 181) || LA190_0 == 187) )
            	    {
            	        alt190 = 1;
            	    }


            	    switch (alt190) 
            		{
            			case 1 :
            			    // cs.g:0:0: query_body_clause
            			    {
            			    	PushFollow(FOLLOW_query_body_clause_in_query_body_clauses6002);
            			    	query_body_clause558 = query_body_clause();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, query_body_clause558.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt190 >= 1 ) goto loop190;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee190 =
            		                new EarlyExitException(190, input);
            		            throw eee190;
            	    }
            	    cnt190++;
            	} while (true);

            	loop190:
            		;	// Stops C# compiler whining that label 'loop190' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 162, query_body_clauses_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "query_body_clauses"

    public class query_body_clause_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "query_body_clause"
    // cs.g:1082:1: query_body_clause : ( from_clause | let_clause | where_clause | join_clause | orderby_clause );
    public csParser.query_body_clause_return query_body_clause() // throws RecognitionException [1]
    {   
        csParser.query_body_clause_return retval = new csParser.query_body_clause_return();
        retval.Start = input.LT(1);
        int query_body_clause_StartIndex = input.Index();
        object root_0 = null;

        csParser.from_clause_return from_clause559 = default(csParser.from_clause_return);

        csParser.let_clause_return let_clause560 = default(csParser.let_clause_return);

        csParser.where_clause_return where_clause561 = default(csParser.where_clause_return);

        csParser.join_clause_return join_clause562 = default(csParser.join_clause_return);

        csParser.orderby_clause_return orderby_clause563 = default(csParser.orderby_clause_return);



         const string elementName = "query_body_clause"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 163) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1085:1: ( from_clause | let_clause | where_clause | join_clause | orderby_clause )
            int alt191 = 5;
            switch ( input.LA(1) ) 
            {
            case 175:
            	{
                alt191 = 1;
                }
                break;
            case 180:
            	{
                alt191 = 2;
                }
                break;
            case 187:
            	{
                alt191 = 3;
                }
                break;
            case 177:
            	{
                alt191 = 4;
                }
                break;
            case 181:
            	{
                alt191 = 5;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d191s0 =
            	        new NoViableAltException("", 191, 0, input);

            	    throw nvae_d191s0;
            }

            switch (alt191) 
            {
                case 1 :
                    // cs.g:1086:2: from_clause
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_from_clause_in_query_body_clause6023);
                    	from_clause559 = from_clause();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, from_clause559.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1087:4: let_clause
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_let_clause_in_query_body_clause6028);
                    	let_clause560 = let_clause();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, let_clause560.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:1088:4: where_clause
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_where_clause_in_query_body_clause6033);
                    	where_clause561 = where_clause();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, where_clause561.Tree);

                    }
                    break;
                case 4 :
                    // cs.g:1089:4: join_clause
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_join_clause_in_query_body_clause6038);
                    	join_clause562 = join_clause();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, join_clause562.Tree);

                    }
                    break;
                case 5 :
                    // cs.g:1090:4: orderby_clause
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_orderby_clause_in_query_body_clause6043);
                    	orderby_clause563 = orderby_clause();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, orderby_clause563.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 163, query_body_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "query_body_clause"

    public class join_clause_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "join_clause"
    // cs.g:1091:1: join_clause : 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? ;
    public csParser.join_clause_return join_clause() // throws RecognitionException [1]
    {   
        csParser.join_clause_return retval = new csParser.join_clause_return();
        retval.Start = input.LT(1);
        int join_clause_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal564 = null;
        IToken string_literal567 = null;
        IToken string_literal569 = null;
        IToken string_literal571 = null;
        IToken string_literal573 = null;
        csParser.type_return type565 = default(csParser.type_return);

        csParser.identifier_return identifier566 = default(csParser.identifier_return);

        csParser.expression_return expression568 = default(csParser.expression_return);

        csParser.expression_return expression570 = default(csParser.expression_return);

        csParser.expression_return expression572 = default(csParser.expression_return);

        csParser.identifier_return identifier574 = default(csParser.identifier_return);


        object string_literal564_tree=null;
        object string_literal567_tree=null;
        object string_literal569_tree=null;
        object string_literal571_tree=null;
        object string_literal573_tree=null;

         const string elementName = "join_clause"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 164) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1094:1: ( 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? )
            // cs.g:1095:2: 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal564=(IToken)Match(input,177,FOLLOW_177_in_join_clause6062); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal564_tree = (object)adaptor.Create(string_literal564);
            		adaptor.AddChild(root_0, string_literal564_tree);
            	}
            	// cs.g:1095:11: ( type )?
            	int alt192 = 2;
            	switch ( input.LA(1) ) 
            	{
            	    case IDENTIFIER:
            	    	{
            	        int LA192_1 = input.LA(2);

            	        if ( (LA192_1 == IDENTIFIER || LA192_1 == DOT || LA192_1 == SET || LA192_1 == 89 || LA192_1 == 95 || LA192_1 == 97 || (LA192_1 >= 101 && LA192_1 <= 107) || LA192_1 == 109 || (LA192_1 >= 111 && LA192_1 <= 112) || LA192_1 == 123 || (LA192_1 >= 175 && LA192_1 <= 187) || LA192_1 == 199 || (LA192_1 >= 201 && LA192_1 <= 202) || LA192_1 == 208 || (LA192_1 >= 225 && LA192_1 <= 226)) )
            	        {
            	            alt192 = 1;
            	        }
            	        }
            	        break;
            	    case SET:
            	    case 95:
            	    case 101:
            	    case 102:
            	    case 103:
            	    case 104:
            	    case 105:
            	    case 106:
            	    case 107:
            	    case 109:
            	    case 175:
            	    case 176:
            	    case 177:
            	    case 178:
            	    case 179:
            	    case 180:
            	    case 181:
            	    case 182:
            	    case 183:
            	    case 184:
            	    case 185:
            	    case 186:
            	    case 187:
            	    case 199:
            	    case 201:
            	    case 202:
            	    case 208:
            	    case 225:
            	    case 226:
            	    	{
            	        int LA192_2 = input.LA(2);

            	        if ( (LA192_2 == IDENTIFIER || LA192_2 == DOT || LA192_2 == SET || LA192_2 == 89 || LA192_2 == 95 || LA192_2 == 97 || (LA192_2 >= 101 && LA192_2 <= 107) || LA192_2 == 109 || (LA192_2 >= 111 && LA192_2 <= 112) || LA192_2 == 123 || (LA192_2 >= 175 && LA192_2 <= 187) || LA192_2 == 199 || (LA192_2 >= 201 && LA192_2 <= 202) || LA192_2 == 208 || (LA192_2 >= 225 && LA192_2 <= 226)) )
            	        {
            	            alt192 = 1;
            	        }
            	        }
            	        break;
            	    case 113:
            	    case 114:
            	    case 115:
            	    case 116:
            	    case 117:
            	    case 118:
            	    case 119:
            	    case 120:
            	    case 121:
            	    case 122:
            	    case 132:
            	    case 133:
            	    case 134:
            	    case 135:
            	    case 136:
            	    case 137:
            	    	{
            	        alt192 = 1;
            	        }
            	        break;
            	}

            	switch (alt192) 
            	{
            	    case 1 :
            	        // cs.g:0:0: type
            	        {
            	        	PushFollow(FOLLOW_type_in_join_clause6066);
            	        	type565 = type();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type565.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_identifier_in_join_clause6071);
            	identifier566 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier566.Tree);
            	string_literal567=(IToken)Match(input,145,FOLLOW_145_in_join_clause6075); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal567_tree = (object)adaptor.Create(string_literal567);
            		adaptor.AddChild(root_0, string_literal567_tree);
            	}
            	PushFollow(FOLLOW_expression_in_join_clause6079);
            	expression568 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression568.Tree);
            	string_literal569=(IToken)Match(input,178,FOLLOW_178_in_join_clause6083); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal569_tree = (object)adaptor.Create(string_literal569);
            		adaptor.AddChild(root_0, string_literal569_tree);
            	}
            	PushFollow(FOLLOW_expression_in_join_clause6087);
            	expression570 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression570.Tree);
            	string_literal571=(IToken)Match(input,179,FOLLOW_179_in_join_clause6091); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal571_tree = (object)adaptor.Create(string_literal571);
            		adaptor.AddChild(root_0, string_literal571_tree);
            	}
            	PushFollow(FOLLOW_expression_in_join_clause6095);
            	expression572 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression572.Tree);
            	// cs.g:1095:94: ( 'into' identifier )?
            	int alt193 = 2;
            	int LA193_0 = input.LA(1);

            	if ( (LA193_0 == 176) )
            	{
            	    alt193 = 1;
            	}
            	switch (alt193) 
            	{
            	    case 1 :
            	        // cs.g:1095:95: 'into' identifier
            	        {
            	        	string_literal573=(IToken)Match(input,176,FOLLOW_176_in_join_clause6098); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal573_tree = (object)adaptor.Create(string_literal573);
            	        		adaptor.AddChild(root_0, string_literal573_tree);
            	        	}
            	        	PushFollow(FOLLOW_identifier_in_join_clause6100);
            	        	identifier574 = identifier();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier574.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 164, join_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "join_clause"

    public class let_clause_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "let_clause"
    // cs.g:1096:1: let_clause : 'let' identifier '=' expression ;
    public csParser.let_clause_return let_clause() // throws RecognitionException [1]
    {   
        csParser.let_clause_return retval = new csParser.let_clause_return();
        retval.Start = input.LT(1);
        int let_clause_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal575 = null;
        IToken char_literal577 = null;
        csParser.identifier_return identifier576 = default(csParser.identifier_return);

        csParser.expression_return expression578 = default(csParser.expression_return);


        object string_literal575_tree=null;
        object char_literal577_tree=null;

         const string elementName = "let_clause"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 165) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1099:1: ( 'let' identifier '=' expression )
            // cs.g:1100:2: 'let' identifier '=' expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal575=(IToken)Match(input,180,FOLLOW_180_in_let_clause6122); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal575_tree = (object)adaptor.Create(string_literal575);
            		adaptor.AddChild(root_0, string_literal575_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_let_clause6126);
            	identifier576 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier576.Tree);
            	char_literal577=(IToken)Match(input,96,FOLLOW_96_in_let_clause6130); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal577_tree = (object)adaptor.Create(char_literal577);
            		adaptor.AddChild(root_0, char_literal577_tree);
            	}
            	PushFollow(FOLLOW_expression_in_let_clause6134);
            	expression578 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression578.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 165, let_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "let_clause"

    public class orderby_clause_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "orderby_clause"
    // cs.g:1101:1: orderby_clause : 'orderby' ordering_list ;
    public csParser.orderby_clause_return orderby_clause() // throws RecognitionException [1]
    {   
        csParser.orderby_clause_return retval = new csParser.orderby_clause_return();
        retval.Start = input.LT(1);
        int orderby_clause_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal579 = null;
        csParser.ordering_list_return ordering_list580 = default(csParser.ordering_list_return);


        object string_literal579_tree=null;

         const string elementName = "orderby_clause"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 166) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1104:1: ( 'orderby' ordering_list )
            // cs.g:1105:2: 'orderby' ordering_list
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal579=(IToken)Match(input,181,FOLLOW_181_in_orderby_clause6153); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal579_tree = (object)adaptor.Create(string_literal579);
            		adaptor.AddChild(root_0, string_literal579_tree);
            	}
            	PushFollow(FOLLOW_ordering_list_in_orderby_clause6157);
            	ordering_list580 = ordering_list();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ordering_list580.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 166, orderby_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "orderby_clause"

    public class ordering_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "ordering_list"
    // cs.g:1106:1: ordering_list : ( ordering )+ ;
    public csParser.ordering_list_return ordering_list() // throws RecognitionException [1]
    {   
        csParser.ordering_list_return retval = new csParser.ordering_list_return();
        retval.Start = input.LT(1);
        int ordering_list_StartIndex = input.Index();
        object root_0 = null;

        csParser.ordering_return ordering581 = default(csParser.ordering_return);



         const string elementName = "ordering_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 167) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1109:1: ( ( ordering )+ )
            // cs.g:1110:2: ( ordering )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1110:2: ( ordering )+
            	int cnt194 = 0;
            	do 
            	{
            	    int alt194 = 2;
            	    alt194 = dfa194.Predict(input);
            	    switch (alt194) 
            		{
            			case 1 :
            			    // cs.g:0:0: ordering
            			    {
            			    	PushFollow(FOLLOW_ordering_in_ordering_list6177);
            			    	ordering581 = ordering();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ordering581.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt194 >= 1 ) goto loop194;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee194 =
            		                new EarlyExitException(194, input);
            		            throw eee194;
            	    }
            	    cnt194++;
            	} while (true);

            	loop194:
            		;	// Stops C# compiler whining that label 'loop194' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 167, ordering_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "ordering_list"

    public class ordering_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "ordering"
    // cs.g:1111:1: ordering : expression ( ordering_direction )? ;
    public csParser.ordering_return ordering() // throws RecognitionException [1]
    {   
        csParser.ordering_return retval = new csParser.ordering_return();
        retval.Start = input.LT(1);
        int ordering_StartIndex = input.Index();
        object root_0 = null;

        csParser.expression_return expression582 = default(csParser.expression_return);

        csParser.ordering_direction_return ordering_direction583 = default(csParser.ordering_direction_return);



         const string elementName = "ordering"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 168) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1114:1: ( expression ( ordering_direction )? )
            // cs.g:1115:2: expression ( ordering_direction )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_expression_in_ordering6198);
            	expression582 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression582.Tree);
            	// cs.g:1115:16: ( ordering_direction )?
            	int alt195 = 2;
            	int LA195_0 = input.LA(1);

            	if ( ((LA195_0 >= 182 && LA195_0 <= 183)) )
            	{
            	    int LA195_1 = input.LA(2);

            	    if ( (synpred300_cs()) )
            	    {
            	        alt195 = 1;
            	    }
            	}
            	switch (alt195) 
            	{
            	    case 1 :
            	        // cs.g:0:0: ordering_direction
            	        {
            	        	PushFollow(FOLLOW_ordering_direction_in_ordering6203);
            	        	ordering_direction583 = ordering_direction();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ordering_direction583.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 168, ordering_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "ordering"

    public class ordering_direction_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "ordering_direction"
    // cs.g:1116:1: ordering_direction : ( 'ascending' | 'descending' );
    public csParser.ordering_direction_return ordering_direction() // throws RecognitionException [1]
    {   
        csParser.ordering_direction_return retval = new csParser.ordering_direction_return();
        retval.Start = input.LT(1);
        int ordering_direction_StartIndex = input.Index();
        object root_0 = null;

        IToken set584 = null;

        object set584_tree=null;

         const string elementName = "ordering_direction"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 169) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1119:1: ( 'ascending' | 'descending' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set584 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= 182 && input.LA(1) <= 183) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set584));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 169, ordering_direction_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "ordering_direction"

    public class select_or_group_clause_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "select_or_group_clause"
    // cs.g:1122:1: select_or_group_clause : ( select_clause | group_clause );
    public csParser.select_or_group_clause_return select_or_group_clause() // throws RecognitionException [1]
    {   
        csParser.select_or_group_clause_return retval = new csParser.select_or_group_clause_return();
        retval.Start = input.LT(1);
        int select_or_group_clause_StartIndex = input.Index();
        object root_0 = null;

        csParser.select_clause_return select_clause585 = default(csParser.select_clause_return);

        csParser.group_clause_return group_clause586 = default(csParser.group_clause_return);



         const string elementName = "select_or_group_clause"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 170) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1125:1: ( select_clause | group_clause )
            int alt196 = 2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0 == 184) )
            {
                alt196 = 1;
            }
            else if ( (LA196_0 == 185) )
            {
                alt196 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d196s0 =
                    new NoViableAltException("", 196, 0, input);

                throw nvae_d196s0;
            }
            switch (alt196) 
            {
                case 1 :
                    // cs.g:1126:2: select_clause
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_select_clause_in_select_or_group_clause6249);
                    	select_clause585 = select_clause();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, select_clause585.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1127:4: group_clause
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_group_clause_in_select_or_group_clause6254);
                    	group_clause586 = group_clause();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, group_clause586.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 170, select_or_group_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "select_or_group_clause"

    public class select_clause_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "select_clause"
    // cs.g:1128:1: select_clause : 'select' expression ;
    public csParser.select_clause_return select_clause() // throws RecognitionException [1]
    {   
        csParser.select_clause_return retval = new csParser.select_clause_return();
        retval.Start = input.LT(1);
        int select_clause_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal587 = null;
        csParser.expression_return expression588 = default(csParser.expression_return);


        object string_literal587_tree=null;

         const string elementName = "select_clause"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 171) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1131:1: ( 'select' expression )
            // cs.g:1132:2: 'select' expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal587=(IToken)Match(input,184,FOLLOW_184_in_select_clause6274); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal587_tree = (object)adaptor.Create(string_literal587);
            		adaptor.AddChild(root_0, string_literal587_tree);
            	}
            	PushFollow(FOLLOW_expression_in_select_clause6278);
            	expression588 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression588.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 171, select_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "select_clause"

    public class group_clause_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "group_clause"
    // cs.g:1133:1: group_clause : 'group' expression 'by' expression ;
    public csParser.group_clause_return group_clause() // throws RecognitionException [1]
    {   
        csParser.group_clause_return retval = new csParser.group_clause_return();
        retval.Start = input.LT(1);
        int group_clause_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal589 = null;
        IToken string_literal591 = null;
        csParser.expression_return expression590 = default(csParser.expression_return);

        csParser.expression_return expression592 = default(csParser.expression_return);


        object string_literal589_tree=null;
        object string_literal591_tree=null;

         const string elementName = "group_clause"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 172) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1136:1: ( 'group' expression 'by' expression )
            // cs.g:1137:2: 'group' expression 'by' expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal589=(IToken)Match(input,185,FOLLOW_185_in_group_clause6298); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal589_tree = (object)adaptor.Create(string_literal589);
            		adaptor.AddChild(root_0, string_literal589_tree);
            	}
            	PushFollow(FOLLOW_expression_in_group_clause6302);
            	expression590 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression590.Tree);
            	string_literal591=(IToken)Match(input,186,FOLLOW_186_in_group_clause6306); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal591_tree = (object)adaptor.Create(string_literal591);
            		adaptor.AddChild(root_0, string_literal591_tree);
            	}
            	PushFollow(FOLLOW_expression_in_group_clause6310);
            	expression592 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression592.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 172, group_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "group_clause"

    public class where_clause_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "where_clause"
    // cs.g:1138:1: where_clause : 'where' boolean_expression ;
    public csParser.where_clause_return where_clause() // throws RecognitionException [1]
    {   
        csParser.where_clause_return retval = new csParser.where_clause_return();
        retval.Start = input.LT(1);
        int where_clause_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal593 = null;
        csParser.boolean_expression_return boolean_expression594 = default(csParser.boolean_expression_return);


        object string_literal593_tree=null;

         const string elementName = "where_clause"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 173) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1141:1: ( 'where' boolean_expression )
            // cs.g:1142:2: 'where' boolean_expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal593=(IToken)Match(input,187,FOLLOW_187_in_where_clause6330); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal593_tree = (object)adaptor.Create(string_literal593);
            		adaptor.AddChild(root_0, string_literal593_tree);
            	}
            	PushFollow(FOLLOW_boolean_expression_in_where_clause6334);
            	boolean_expression594 = boolean_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, boolean_expression594.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 173, where_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "where_clause"

    public class class_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "class_declaration"
    // cs.g:1146:1: class_declaration : ( attributes )? ( class_modifiers )? ( 'partial' )? 'class' identifier ( generic_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? ;
    public csParser.class_declaration_return class_declaration() // throws RecognitionException [1]
    {   
        csParser.class_declaration_return retval = new csParser.class_declaration_return();
        retval.Start = input.LT(1);
        int class_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal597 = null;
        IToken string_literal598 = null;
        IToken char_literal604 = null;
        csParser.attributes_return attributes595 = default(csParser.attributes_return);

        csParser.class_modifiers_return class_modifiers596 = default(csParser.class_modifiers_return);

        csParser.identifier_return identifier599 = default(csParser.identifier_return);

        csParser.generic_parameter_list_return generic_parameter_list600 = default(csParser.generic_parameter_list_return);

        csParser.class_base_return class_base601 = default(csParser.class_base_return);

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses602 = default(csParser.type_parameter_constraints_clauses_return);

        csParser.class_body_return class_body603 = default(csParser.class_body_return);


        object string_literal597_tree=null;
        object string_literal598_tree=null;
        object char_literal604_tree=null;

         const string elementName = "class_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 174) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1149:1: ( ( attributes )? ( class_modifiers )? ( 'partial' )? 'class' identifier ( generic_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? )
            // cs.g:1150:2: ( attributes )? ( class_modifiers )? ( 'partial' )? 'class' identifier ( generic_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1150:2: ( attributes )?
            	int alt197 = 2;
            	int LA197_0 = input.LA(1);

            	if ( (LA197_0 == 97) )
            	{
            	    alt197 = 1;
            	}
            	switch (alt197) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_class_declaration6357);
            	        	attributes595 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes595.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1150:14: ( class_modifiers )?
            	int alt198 = 2;
            	int LA198_0 = input.LA(1);

            	if ( (LA198_0 == 138 || (LA198_0 >= 170 && LA198_0 <= 174) || (LA198_0 >= 190 && LA198_0 <= 192)) )
            	{
            	    alt198 = 1;
            	}
            	switch (alt198) 
            	{
            	    case 1 :
            	        // cs.g:0:0: class_modifiers
            	        {
            	        	PushFollow(FOLLOW_class_modifiers_in_class_declaration6360);
            	        	class_modifiers596 = class_modifiers();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_modifiers596.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1150:33: ( 'partial' )?
            	int alt199 = 2;
            	int LA199_0 = input.LA(1);

            	if ( (LA199_0 == 188) )
            	{
            	    alt199 = 1;
            	}
            	switch (alt199) 
            	{
            	    case 1 :
            	        // cs.g:0:0: 'partial'
            	        {
            	        	string_literal597=(IToken)Match(input,188,FOLLOW_188_in_class_declaration6365); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal597_tree = (object)adaptor.Create(string_literal597);
            	        		adaptor.AddChild(root_0, string_literal597_tree);
            	        	}

            	        }
            	        break;

            	}

            	string_literal598=(IToken)Match(input,189,FOLLOW_189_in_class_declaration6369); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal598_tree = (object)adaptor.Create(string_literal598);
            		adaptor.AddChild(root_0, string_literal598_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_class_declaration6372);
            	identifier599 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier599.Tree);
            	// cs.g:1150:66: ( generic_parameter_list )?
            	int alt200 = 2;
            	int LA200_0 = input.LA(1);

            	if ( (LA200_0 == 123) )
            	{
            	    alt200 = 1;
            	}
            	switch (alt200) 
            	{
            	    case 1 :
            	        // cs.g:0:0: generic_parameter_list
            	        {
            	        	PushFollow(FOLLOW_generic_parameter_list_in_class_declaration6375);
            	        	generic_parameter_list600 = generic_parameter_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_parameter_list600.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1151:3: ( class_base )?
            	int alt201 = 2;
            	int LA201_0 = input.LA(1);

            	if ( (LA201_0 == 100) )
            	{
            	    alt201 = 1;
            	}
            	switch (alt201) 
            	{
            	    case 1 :
            	        // cs.g:0:0: class_base
            	        {
            	        	PushFollow(FOLLOW_class_base_in_class_declaration6380);
            	        	class_base601 = class_base();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_base601.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1151:17: ( type_parameter_constraints_clauses )?
            	int alt202 = 2;
            	int LA202_0 = input.LA(1);

            	if ( (LA202_0 == 187) )
            	{
            	    alt202 = 1;
            	}
            	switch (alt202) 
            	{
            	    case 1 :
            	        // cs.g:0:0: type_parameter_constraints_clauses
            	        {
            	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_class_declaration6385);
            	        	type_parameter_constraints_clauses602 = type_parameter_constraints_clauses();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameter_constraints_clauses602.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_class_body_in_class_declaration6390);
            	class_body603 = class_body();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_body603.Tree);
            	// cs.g:1151:68: ( ';' )?
            	int alt203 = 2;
            	int LA203_0 = input.LA(1);

            	if ( (LA203_0 == SEMI) )
            	{
            	    alt203 = 1;
            	}
            	switch (alt203) 
            	{
            	    case 1 :
            	        // cs.g:0:0: ';'
            	        {
            	        	char_literal604=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_class_declaration6394); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal604_tree = (object)adaptor.Create(char_literal604);
            	        		adaptor.AddChild(root_0, char_literal604_tree);
            	        	}

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 174, class_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "class_declaration"

    public class class_modifiers_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "class_modifiers"
    // cs.g:1152:1: class_modifiers : ( class_modifier )+ ;
    public csParser.class_modifiers_return class_modifiers() // throws RecognitionException [1]
    {   
        csParser.class_modifiers_return retval = new csParser.class_modifiers_return();
        retval.Start = input.LT(1);
        int class_modifiers_StartIndex = input.Index();
        object root_0 = null;

        csParser.class_modifier_return class_modifier605 = default(csParser.class_modifier_return);



         const string elementName = "class_modifiers"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 175) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1155:1: ( ( class_modifier )+ )
            // cs.g:1156:2: ( class_modifier )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1156:2: ( class_modifier )+
            	int cnt204 = 0;
            	do 
            	{
            	    int alt204 = 2;
            	    int LA204_0 = input.LA(1);

            	    if ( (LA204_0 == 138 || (LA204_0 >= 170 && LA204_0 <= 174) || (LA204_0 >= 190 && LA204_0 <= 192)) )
            	    {
            	        alt204 = 1;
            	    }


            	    switch (alt204) 
            		{
            			case 1 :
            			    // cs.g:0:0: class_modifier
            			    {
            			    	PushFollow(FOLLOW_class_modifier_in_class_modifiers6415);
            			    	class_modifier605 = class_modifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_modifier605.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt204 >= 1 ) goto loop204;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee204 =
            		                new EarlyExitException(204, input);
            		            throw eee204;
            	    }
            	    cnt204++;
            	} while (true);

            	loop204:
            		;	// Stops C# compiler whining that label 'loop204' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 175, class_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "class_modifiers"

    public class class_modifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "class_modifier"
    // cs.g:1157:1: class_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'abstract' | 'sealed' | 'static' | 'unsafe' );
    public csParser.class_modifier_return class_modifier() // throws RecognitionException [1]
    {   
        csParser.class_modifier_return retval = new csParser.class_modifier_return();
        retval.Start = input.LT(1);
        int class_modifier_StartIndex = input.Index();
        object root_0 = null;

        IToken set606 = null;

        object set606_tree=null;

         const string elementName = "class_modifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 176) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1160:1: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'abstract' | 'sealed' | 'static' | 'unsafe' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set606 = (IToken)input.LT(1);
            	if ( input.LA(1) == 138 || (input.LA(1) >= 170 && input.LA(1) <= 174) || (input.LA(1) >= 190 && input.LA(1) <= 192) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set606));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 176, class_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "class_modifier"

    public class class_base_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "class_base"
    // cs.g:1162:1: class_base : ( ':' class_type ( ',' interface_type_list )? | ':' interface_type_list );
    public csParser.class_base_return class_base() // throws RecognitionException [1]
    {   
        csParser.class_base_return retval = new csParser.class_base_return();
        retval.Start = input.LT(1);
        int class_base_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal607 = null;
        IToken char_literal609 = null;
        IToken char_literal611 = null;
        csParser.class_type_return class_type608 = default(csParser.class_type_return);

        csParser.interface_type_list_return interface_type_list610 = default(csParser.interface_type_list_return);

        csParser.interface_type_list_return interface_type_list612 = default(csParser.interface_type_list_return);


        object char_literal607_tree=null;
        object char_literal609_tree=null;
        object char_literal611_tree=null;

         const string elementName = "class_base"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 177) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1165:1: ( ':' class_type ( ',' interface_type_list )? | ':' interface_type_list )
            int alt206 = 2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0 == 100) )
            {
                switch ( input.LA(2) ) 
                {
                case IDENTIFIER:
                	{
                    int LA206_2 = input.LA(3);

                    if ( (synpred320_cs()) )
                    {
                        alt206 = 1;
                    }
                    else if ( (true) )
                    {
                        alt206 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d206s2 =
                            new NoViableAltException("", 206, 2, input);

                        throw nvae_d206s2;
                    }
                    }
                    break;
                case SET:
                case 95:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 199:
                case 201:
                case 202:
                case 208:
                case 225:
                case 226:
                	{
                    int LA206_3 = input.LA(3);

                    if ( (synpred320_cs()) )
                    {
                        alt206 = 1;
                    }
                    else if ( (true) )
                    {
                        alt206 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d206s3 =
                            new NoViableAltException("", 206, 3, input);

                        throw nvae_d206s3;
                    }
                    }
                    break;
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                	{
                    alt206 = 1;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d206s1 =
                	        new NoViableAltException("", 206, 1, input);

                	    throw nvae_d206s1;
                }

            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d206s0 =
                    new NoViableAltException("", 206, 0, input);

                throw nvae_d206s0;
            }
            switch (alt206) 
            {
                case 1 :
                    // cs.g:1166:2: ':' class_type ( ',' interface_type_list )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal607=(IToken)Match(input,100,FOLLOW_100_in_class_base6487); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal607_tree = (object)adaptor.Create(char_literal607);
                    		adaptor.AddChild(root_0, char_literal607_tree);
                    	}
                    	PushFollow(FOLLOW_class_type_in_class_base6491);
                    	class_type608 = class_type();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_type608.Tree);
                    	// cs.g:1166:19: ( ',' interface_type_list )?
                    	int alt205 = 2;
                    	int LA205_0 = input.LA(1);

                    	if ( (LA205_0 == 98) )
                    	{
                    	    alt205 = 1;
                    	}
                    	switch (alt205) 
                    	{
                    	    case 1 :
                    	        // cs.g:1166:20: ',' interface_type_list
                    	        {
                    	        	char_literal609=(IToken)Match(input,98,FOLLOW_98_in_class_base6494); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{char_literal609_tree = (object)adaptor.Create(char_literal609);
                    	        		adaptor.AddChild(root_0, char_literal609_tree);
                    	        	}
                    	        	PushFollow(FOLLOW_interface_type_list_in_class_base6496);
                    	        	interface_type_list610 = interface_type_list();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_type_list610.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:1167:4: ':' interface_type_list
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal611=(IToken)Match(input,100,FOLLOW_100_in_class_base6503); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal611_tree = (object)adaptor.Create(char_literal611);
                    		adaptor.AddChild(root_0, char_literal611_tree);
                    	}
                    	PushFollow(FOLLOW_interface_type_list_in_class_base6507);
                    	interface_type_list612 = interface_type_list();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_type_list612.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 177, class_base_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "class_base"

    public class interface_type_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "interface_type_list"
    // cs.g:1168:1: interface_type_list : t+= type_name ( ',' t+= type_name )* ;
    public csParser.interface_type_list_return interface_type_list() // throws RecognitionException [1]
    {   
        csParser.interface_type_list_return retval = new csParser.interface_type_list_return();
        retval.Start = input.LT(1);
        int interface_type_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal613 = null;
        IList list_t = null;
        csParser.type_name_return t = default(csParser.type_name_return);
         t = null;
        object char_literal613_tree=null;

         const string elementName = "interface_type_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 178) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1171:1: (t+= type_name ( ',' t+= type_name )* )
            // cs.g:1172:2: t+= type_name ( ',' t+= type_name )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_type_name_in_interface_type_list6531);
            	t = type_name();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, t.Tree);
            	if (list_t == null) list_t = new ArrayList();
            	list_t.Add(t.Tree);

            	// cs.g:1172:17: ( ',' t+= type_name )*
            	do 
            	{
            	    int alt207 = 2;
            	    int LA207_0 = input.LA(1);

            	    if ( (LA207_0 == 98) )
            	    {
            	        alt207 = 1;
            	    }


            	    switch (alt207) 
            		{
            			case 1 :
            			    // cs.g:1172:18: ',' t+= type_name
            			    {
            			    	char_literal613=(IToken)Match(input,98,FOLLOW_98_in_interface_type_list6534); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal613_tree = (object)adaptor.Create(char_literal613);
            			    		adaptor.AddChild(root_0, char_literal613_tree);
            			    	}
            			    	PushFollow(FOLLOW_type_name_in_interface_type_list6542);
            			    	t = type_name();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, t.Tree);
            			    	if (list_t == null) list_t = new ArrayList();
            			    	list_t.Add(t.Tree);


            			    }
            			    break;

            			default:
            			    goto loop207;
            	    }
            	} while (true);

            	loop207:
            		;	// Stops C# compiler whining that label 'loop207' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 178, interface_type_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_type_list"

    public class type_parameter_constraints_clauses_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "type_parameter_constraints_clauses"
    // cs.g:1174:1: type_parameter_constraints_clauses : ( type_parameter_constraints_clause )+ ;
    public csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses() // throws RecognitionException [1]
    {   
        csParser.type_parameter_constraints_clauses_return retval = new csParser.type_parameter_constraints_clauses_return();
        retval.Start = input.LT(1);
        int type_parameter_constraints_clauses_StartIndex = input.Index();
        object root_0 = null;

        csParser.type_parameter_constraints_clause_return type_parameter_constraints_clause614 = default(csParser.type_parameter_constraints_clause_return);



         const string elementName = "type_parameter_constraints_clauses"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 179) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1177:1: ( ( type_parameter_constraints_clause )+ )
            // cs.g:1178:2: ( type_parameter_constraints_clause )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1178:2: ( type_parameter_constraints_clause )+
            	int cnt208 = 0;
            	do 
            	{
            	    int alt208 = 2;
            	    int LA208_0 = input.LA(1);

            	    if ( (LA208_0 == 187) )
            	    {
            	        alt208 = 1;
            	    }


            	    switch (alt208) 
            		{
            			case 1 :
            			    // cs.g:0:0: type_parameter_constraints_clause
            			    {
            			    	PushFollow(FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses6566);
            			    	type_parameter_constraints_clause614 = type_parameter_constraints_clause();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameter_constraints_clause614.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt208 >= 1 ) goto loop208;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee208 =
            		                new EarlyExitException(208, input);
            		            throw eee208;
            	    }
            	    cnt208++;
            	} while (true);

            	loop208:
            		;	// Stops C# compiler whining that label 'loop208' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 179, type_parameter_constraints_clauses_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints_clauses"

    public class type_parameter_constraints_clause_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "type_parameter_constraints_clause"
    // cs.g:1179:1: type_parameter_constraints_clause : 'where' type_variable_name ':' type_parameter_constraint_list ;
    public csParser.type_parameter_constraints_clause_return type_parameter_constraints_clause() // throws RecognitionException [1]
    {   
        csParser.type_parameter_constraints_clause_return retval = new csParser.type_parameter_constraints_clause_return();
        retval.Start = input.LT(1);
        int type_parameter_constraints_clause_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal615 = null;
        IToken char_literal617 = null;
        csParser.type_variable_name_return type_variable_name616 = default(csParser.type_variable_name_return);

        csParser.type_parameter_constraint_list_return type_parameter_constraint_list618 = default(csParser.type_parameter_constraint_list_return);


        object string_literal615_tree=null;
        object char_literal617_tree=null;

         const string elementName = "type_parameter_constraints_clause"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 180) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1182:1: ( 'where' type_variable_name ':' type_parameter_constraint_list )
            // cs.g:1183:2: 'where' type_variable_name ':' type_parameter_constraint_list
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal615=(IToken)Match(input,187,FOLLOW_187_in_type_parameter_constraints_clause6587); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal615_tree = (object)adaptor.Create(string_literal615);
            		adaptor.AddChild(root_0, string_literal615_tree);
            	}
            	PushFollow(FOLLOW_type_variable_name_in_type_parameter_constraints_clause6591);
            	type_variable_name616 = type_variable_name();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_variable_name616.Tree);
            	char_literal617=(IToken)Match(input,100,FOLLOW_100_in_type_parameter_constraints_clause6595); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal617_tree = (object)adaptor.Create(char_literal617);
            		adaptor.AddChild(root_0, char_literal617_tree);
            	}
            	PushFollow(FOLLOW_type_parameter_constraint_list_in_type_parameter_constraints_clause6599);
            	type_parameter_constraint_list618 = type_parameter_constraint_list();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameter_constraint_list618.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 180, type_parameter_constraints_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraints_clause"

    public class type_parameter_constraint_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "type_parameter_constraint_list"
    // cs.g:1184:1: type_parameter_constraint_list : ( ( primary_constraint ',' secondary_constraint_list ',' constructor_constraint ) | ( primary_constraint ',' secondary_constraint_list ) | ( primary_constraint ',' constructor_constraint ) | ( secondary_constraint_list ',' constructor_constraint ) | primary_constraint | secondary_constraint_list | constructor_constraint );
    public csParser.type_parameter_constraint_list_return type_parameter_constraint_list() // throws RecognitionException [1]
    {   
        csParser.type_parameter_constraint_list_return retval = new csParser.type_parameter_constraint_list_return();
        retval.Start = input.LT(1);
        int type_parameter_constraint_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal620 = null;
        IToken char_literal622 = null;
        IToken char_literal625 = null;
        IToken char_literal628 = null;
        IToken char_literal631 = null;
        csParser.primary_constraint_return primary_constraint619 = default(csParser.primary_constraint_return);

        csParser.secondary_constraint_list_return secondary_constraint_list621 = default(csParser.secondary_constraint_list_return);

        csParser.constructor_constraint_return constructor_constraint623 = default(csParser.constructor_constraint_return);

        csParser.primary_constraint_return primary_constraint624 = default(csParser.primary_constraint_return);

        csParser.secondary_constraint_list_return secondary_constraint_list626 = default(csParser.secondary_constraint_list_return);

        csParser.primary_constraint_return primary_constraint627 = default(csParser.primary_constraint_return);

        csParser.constructor_constraint_return constructor_constraint629 = default(csParser.constructor_constraint_return);

        csParser.secondary_constraint_list_return secondary_constraint_list630 = default(csParser.secondary_constraint_list_return);

        csParser.constructor_constraint_return constructor_constraint632 = default(csParser.constructor_constraint_return);

        csParser.primary_constraint_return primary_constraint633 = default(csParser.primary_constraint_return);

        csParser.secondary_constraint_list_return secondary_constraint_list634 = default(csParser.secondary_constraint_list_return);

        csParser.constructor_constraint_return constructor_constraint635 = default(csParser.constructor_constraint_return);


        object char_literal620_tree=null;
        object char_literal622_tree=null;
        object char_literal625_tree=null;
        object char_literal628_tree=null;
        object char_literal631_tree=null;

         const string elementName = "type_parameter_constraint_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 181) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1187:1: ( ( primary_constraint ',' secondary_constraint_list ',' constructor_constraint ) | ( primary_constraint ',' secondary_constraint_list ) | ( primary_constraint ',' constructor_constraint ) | ( secondary_constraint_list ',' constructor_constraint ) | primary_constraint | secondary_constraint_list | constructor_constraint )
            int alt209 = 7;
            alt209 = dfa209.Predict(input);
            switch (alt209) 
            {
                case 1 :
                    // cs.g:1188:2: ( primary_constraint ',' secondary_constraint_list ',' constructor_constraint )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:1188:2: ( primary_constraint ',' secondary_constraint_list ',' constructor_constraint )
                    	// cs.g:1188:3: primary_constraint ',' secondary_constraint_list ',' constructor_constraint
                    	{
                    		PushFollow(FOLLOW_primary_constraint_in_type_parameter_constraint_list6620);
                    		primary_constraint619 = primary_constraint();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_constraint619.Tree);
                    		char_literal620=(IToken)Match(input,98,FOLLOW_98_in_type_parameter_constraint_list6626); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal620_tree = (object)adaptor.Create(char_literal620);
                    			adaptor.AddChild(root_0, char_literal620_tree);
                    		}
                    		PushFollow(FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list6630);
                    		secondary_constraint_list621 = secondary_constraint_list();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, secondary_constraint_list621.Tree);
                    		char_literal622=(IToken)Match(input,98,FOLLOW_98_in_type_parameter_constraint_list6634); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal622_tree = (object)adaptor.Create(char_literal622);
                    			adaptor.AddChild(root_0, char_literal622_tree);
                    		}
                    		PushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list6638);
                    		constructor_constraint623 = constructor_constraint();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_constraint623.Tree);

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:1189:4: ( primary_constraint ',' secondary_constraint_list )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:1189:4: ( primary_constraint ',' secondary_constraint_list )
                    	// cs.g:1189:5: primary_constraint ',' secondary_constraint_list
                    	{
                    		PushFollow(FOLLOW_primary_constraint_in_type_parameter_constraint_list6645);
                    		primary_constraint624 = primary_constraint();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_constraint624.Tree);
                    		char_literal625=(IToken)Match(input,98,FOLLOW_98_in_type_parameter_constraint_list6651); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal625_tree = (object)adaptor.Create(char_literal625);
                    			adaptor.AddChild(root_0, char_literal625_tree);
                    		}
                    		PushFollow(FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list6655);
                    		secondary_constraint_list626 = secondary_constraint_list();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, secondary_constraint_list626.Tree);

                    	}


                    }
                    break;
                case 3 :
                    // cs.g:1190:4: ( primary_constraint ',' constructor_constraint )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:1190:4: ( primary_constraint ',' constructor_constraint )
                    	// cs.g:1190:5: primary_constraint ',' constructor_constraint
                    	{
                    		PushFollow(FOLLOW_primary_constraint_in_type_parameter_constraint_list6662);
                    		primary_constraint627 = primary_constraint();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_constraint627.Tree);
                    		char_literal628=(IToken)Match(input,98,FOLLOW_98_in_type_parameter_constraint_list6668); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal628_tree = (object)adaptor.Create(char_literal628);
                    			adaptor.AddChild(root_0, char_literal628_tree);
                    		}
                    		PushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list6672);
                    		constructor_constraint629 = constructor_constraint();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_constraint629.Tree);

                    	}


                    }
                    break;
                case 4 :
                    // cs.g:1191:4: ( secondary_constraint_list ',' constructor_constraint )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:1191:4: ( secondary_constraint_list ',' constructor_constraint )
                    	// cs.g:1191:5: secondary_constraint_list ',' constructor_constraint
                    	{
                    		PushFollow(FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list6679);
                    		secondary_constraint_list630 = secondary_constraint_list();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, secondary_constraint_list630.Tree);
                    		char_literal631=(IToken)Match(input,98,FOLLOW_98_in_type_parameter_constraint_list6684); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal631_tree = (object)adaptor.Create(char_literal631);
                    			adaptor.AddChild(root_0, char_literal631_tree);
                    		}
                    		PushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list6688);
                    		constructor_constraint632 = constructor_constraint();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_constraint632.Tree);

                    	}


                    }
                    break;
                case 5 :
                    // cs.g:1192:4: primary_constraint
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_primary_constraint_in_type_parameter_constraint_list6694);
                    	primary_constraint633 = primary_constraint();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_constraint633.Tree);

                    }
                    break;
                case 6 :
                    // cs.g:1193:4: secondary_constraint_list
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list6699);
                    	secondary_constraint_list634 = secondary_constraint_list();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, secondary_constraint_list634.Tree);

                    }
                    break;
                case 7 :
                    // cs.g:1194:4: constructor_constraint
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_constructor_constraint_in_type_parameter_constraint_list6704);
                    	constructor_constraint635 = constructor_constraint();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_constraint635.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 181, type_parameter_constraint_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "type_parameter_constraint_list"

    public class primary_constraint_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "primary_constraint"
    // cs.g:1196:1: primary_constraint : ( class_type | 'class' | 'struct' );
    public csParser.primary_constraint_return primary_constraint() // throws RecognitionException [1]
    {   
        csParser.primary_constraint_return retval = new csParser.primary_constraint_return();
        retval.Start = input.LT(1);
        int primary_constraint_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal637 = null;
        IToken string_literal638 = null;
        csParser.class_type_return class_type636 = default(csParser.class_type_return);


        object string_literal637_tree=null;
        object string_literal638_tree=null;

         const string elementName = "primary_constraint"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 182) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1199:1: ( class_type | 'class' | 'struct' )
            int alt210 = 3;
            switch ( input.LA(1) ) 
            {
            case IDENTIFIER:
            case SET:
            case 95:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 109:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 199:
            case 201:
            case 202:
            case 208:
            case 225:
            case 226:
            	{
                alt210 = 1;
                }
                break;
            case 189:
            	{
                alt210 = 2;
                }
                break;
            case 193:
            	{
                alt210 = 3;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d210s0 =
            	        new NoViableAltException("", 210, 0, input);

            	    throw nvae_d210s0;
            }

            switch (alt210) 
            {
                case 1 :
                    // cs.g:1200:2: class_type
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_class_type_in_primary_constraint6725);
                    	class_type636 = class_type();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_type636.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1201:4: 'class'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal637=(IToken)Match(input,189,FOLLOW_189_in_primary_constraint6730); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal637_tree = (object)adaptor.Create(string_literal637);
                    		adaptor.AddChild(root_0, string_literal637_tree);
                    	}

                    }
                    break;
                case 3 :
                    // cs.g:1202:4: 'struct'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal638=(IToken)Match(input,193,FOLLOW_193_in_primary_constraint6735); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal638_tree = (object)adaptor.Create(string_literal638);
                    		adaptor.AddChild(root_0, string_literal638_tree);
                    	}

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 182, primary_constraint_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "primary_constraint"

    public class secondary_constraint_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "secondary_constraint_list"
    // cs.g:1203:1: secondary_constraint_list : sc+= secondary_constraint ( ',' sc+= secondary_constraint )* ;
    public csParser.secondary_constraint_list_return secondary_constraint_list() // throws RecognitionException [1]
    {   
        csParser.secondary_constraint_list_return retval = new csParser.secondary_constraint_list_return();
        retval.Start = input.LT(1);
        int secondary_constraint_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal639 = null;
        IList list_sc = null;
        csParser.secondary_constraint_return sc = default(csParser.secondary_constraint_return);
         sc = null;
        object char_literal639_tree=null;

         const string elementName = "secondary_constraint_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 183) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1206:1: (sc+= secondary_constraint ( ',' sc+= secondary_constraint )* )
            // cs.g:1207:2: sc+= secondary_constraint ( ',' sc+= secondary_constraint )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_secondary_constraint_in_secondary_constraint_list6759);
            	sc = secondary_constraint();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, sc.Tree);
            	if (list_sc == null) list_sc = new ArrayList();
            	list_sc.Add(sc.Tree);

            	// cs.g:1207:29: ( ',' sc+= secondary_constraint )*
            	do 
            	{
            	    int alt211 = 2;
            	    int LA211_0 = input.LA(1);

            	    if ( (LA211_0 == 98) )
            	    {
            	        int LA211_1 = input.LA(2);

            	        if ( (LA211_1 == IDENTIFIER || LA211_1 == SET || LA211_1 == 95 || (LA211_1 >= 101 && LA211_1 <= 107) || LA211_1 == 109 || (LA211_1 >= 175 && LA211_1 <= 187) || LA211_1 == 199 || (LA211_1 >= 201 && LA211_1 <= 202) || LA211_1 == 208 || (LA211_1 >= 225 && LA211_1 <= 226)) )
            	        {
            	            alt211 = 1;
            	        }


            	    }


            	    switch (alt211) 
            		{
            			case 1 :
            			    // cs.g:1207:30: ',' sc+= secondary_constraint
            			    {
            			    	char_literal639=(IToken)Match(input,98,FOLLOW_98_in_secondary_constraint_list6762); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal639_tree = (object)adaptor.Create(char_literal639);
            			    		adaptor.AddChild(root_0, char_literal639_tree);
            			    	}
            			    	PushFollow(FOLLOW_secondary_constraint_in_secondary_constraint_list6768);
            			    	sc = secondary_constraint();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, sc.Tree);
            			    	if (list_sc == null) list_sc = new ArrayList();
            			    	list_sc.Add(sc.Tree);


            			    }
            			    break;

            			default:
            			    goto loop211;
            	    }
            	} while (true);

            	loop211:
            		;	// Stops C# compiler whining that label 'loop211' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 183, secondary_constraint_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "secondary_constraint_list"

    public class secondary_constraint_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "secondary_constraint"
    // cs.g:1209:1: secondary_constraint : ( type_name | type_variable_name ) ;
    public csParser.secondary_constraint_return secondary_constraint() // throws RecognitionException [1]
    {   
        csParser.secondary_constraint_return retval = new csParser.secondary_constraint_return();
        retval.Start = input.LT(1);
        int secondary_constraint_StartIndex = input.Index();
        object root_0 = null;

        csParser.type_name_return type_name640 = default(csParser.type_name_return);

        csParser.type_variable_name_return type_variable_name641 = default(csParser.type_variable_name_return);



         const string elementName = "secondary_constraint"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 184) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1212:1: ( ( type_name | type_variable_name ) )
            // cs.g:1213:2: ( type_name | type_variable_name )
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1213:2: ( type_name | type_variable_name )
            	int alt212 = 2;
            	int LA212_0 = input.LA(1);

            	if ( (LA212_0 == IDENTIFIER) )
            	{
            	    int LA212_1 = input.LA(2);

            	    if ( (synpred332_cs()) )
            	    {
            	        alt212 = 1;
            	    }
            	    else if ( (true) )
            	    {
            	        alt212 = 2;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d212s1 =
            	            new NoViableAltException("", 212, 1, input);

            	        throw nvae_d212s1;
            	    }
            	}
            	else if ( (LA212_0 == SET || LA212_0 == 95 || (LA212_0 >= 101 && LA212_0 <= 107) || LA212_0 == 109 || (LA212_0 >= 175 && LA212_0 <= 187) || LA212_0 == 199 || (LA212_0 >= 201 && LA212_0 <= 202) || LA212_0 == 208 || (LA212_0 >= 225 && LA212_0 <= 226)) )
            	{
            	    int LA212_2 = input.LA(2);

            	    if ( (synpred332_cs()) )
            	    {
            	        alt212 = 1;
            	    }
            	    else if ( (true) )
            	    {
            	        alt212 = 2;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d212s2 =
            	            new NoViableAltException("", 212, 2, input);

            	        throw nvae_d212s2;
            	    }
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d212s0 =
            	        new NoViableAltException("", 212, 0, input);

            	    throw nvae_d212s0;
            	}
            	switch (alt212) 
            	{
            	    case 1 :
            	        // cs.g:1213:3: type_name
            	        {
            	        	PushFollow(FOLLOW_type_name_in_secondary_constraint6793);
            	        	type_name640 = type_name();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name640.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // cs.g:1213:15: type_variable_name
            	        {
            	        	PushFollow(FOLLOW_type_variable_name_in_secondary_constraint6797);
            	        	type_variable_name641 = type_variable_name();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_variable_name641.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 184, secondary_constraint_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "secondary_constraint"

    public class constructor_constraint_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "constructor_constraint"
    // cs.g:1214:1: constructor_constraint : 'new' '(' ')' ;
    public csParser.constructor_constraint_return constructor_constraint() // throws RecognitionException [1]
    {   
        csParser.constructor_constraint_return retval = new csParser.constructor_constraint_return();
        retval.Start = input.LT(1);
        int constructor_constraint_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal642 = null;
        IToken char_literal643 = null;
        IToken char_literal644 = null;

        object string_literal642_tree=null;
        object char_literal643_tree=null;
        object char_literal644_tree=null;

         const string elementName = "constructor_constraint"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 185) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1217:1: ( 'new' '(' ')' )
            // cs.g:1218:2: 'new' '(' ')'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal642=(IToken)Match(input,138,FOLLOW_138_in_constructor_constraint6818); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal642_tree = (object)adaptor.Create(string_literal642);
            		adaptor.AddChild(root_0, string_literal642_tree);
            	}
            	char_literal643=(IToken)Match(input,110,FOLLOW_110_in_constructor_constraint6822); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal643_tree = (object)adaptor.Create(char_literal643);
            		adaptor.AddChild(root_0, char_literal643_tree);
            	}
            	char_literal644=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_constructor_constraint6826); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal644_tree = (object)adaptor.Create(char_literal644);
            		adaptor.AddChild(root_0, char_literal644_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 185, constructor_constraint_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constructor_constraint"

    public class class_body_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "class_body"
    // cs.g:1219:1: class_body : '{' ( class_member_declarations )? '}' ;
    public csParser.class_body_return class_body() // throws RecognitionException [1]
    {   
        csParser.class_body_return retval = new csParser.class_body_return();
        retval.Start = input.LT(1);
        int class_body_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal645 = null;
        IToken char_literal647 = null;
        csParser.class_member_declarations_return class_member_declarations646 = default(csParser.class_member_declarations_return);


        object char_literal645_tree=null;
        object char_literal647_tree=null;

         const string elementName = "class_body"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 186) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1222:1: ( '{' ( class_member_declarations )? '}' )
            // cs.g:1223:2: '{' ( class_member_declarations )? '}'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal645=(IToken)Match(input,92,FOLLOW_92_in_class_body6846); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal645_tree = (object)adaptor.Create(char_literal645);
            		adaptor.AddChild(root_0, char_literal645_tree);
            	}
            	// cs.g:1223:8: ( class_member_declarations )?
            	int alt213 = 2;
            	int LA213_0 = input.LA(1);

            	if ( (LA213_0 == IDENTIFIER || LA213_0 == ENUM || LA213_0 == SET || (LA213_0 >= 94 && LA213_0 <= 95) || LA213_0 == 97 || (LA213_0 >= 101 && LA213_0 <= 107) || LA213_0 == 109 || (LA213_0 >= 113 && LA213_0 <= 122) || LA213_0 == 126 || (LA213_0 >= 132 && LA213_0 <= 138) || LA213_0 == 144 || (LA213_0 >= 170 && LA213_0 <= 199) || (LA213_0 >= 201 && LA213_0 <= 202) || LA213_0 == 206 || LA213_0 == 208 || (LA213_0 >= 225 && LA213_0 <= 226)) )
            	{
            	    alt213 = 1;
            	}
            	switch (alt213) 
            	{
            	    case 1 :
            	        // cs.g:0:0: class_member_declarations
            	        {
            	        	PushFollow(FOLLOW_class_member_declarations_in_class_body6850);
            	        	class_member_declarations646 = class_member_declarations();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_member_declarations646.Tree);

            	        }
            	        break;

            	}

            	char_literal647=(IToken)Match(input,93,FOLLOW_93_in_class_body6855); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal647_tree = (object)adaptor.Create(char_literal647);
            		adaptor.AddChild(root_0, char_literal647_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 186, class_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "class_body"

    public class class_member_declarations_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "class_member_declarations"
    // cs.g:1224:1: class_member_declarations : ( class_member_declaration )+ ;
    public csParser.class_member_declarations_return class_member_declarations() // throws RecognitionException [1]
    {   
        csParser.class_member_declarations_return retval = new csParser.class_member_declarations_return();
        retval.Start = input.LT(1);
        int class_member_declarations_StartIndex = input.Index();
        object root_0 = null;

        csParser.class_member_declaration_return class_member_declaration648 = default(csParser.class_member_declaration_return);



         const string elementName = "class_member_declarations"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 187) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1227:1: ( ( class_member_declaration )+ )
            // cs.g:1228:2: ( class_member_declaration )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1228:2: ( class_member_declaration )+
            	int cnt214 = 0;
            	do 
            	{
            	    int alt214 = 2;
            	    int LA214_0 = input.LA(1);

            	    if ( (LA214_0 == IDENTIFIER || LA214_0 == ENUM || LA214_0 == SET || (LA214_0 >= 94 && LA214_0 <= 95) || LA214_0 == 97 || (LA214_0 >= 101 && LA214_0 <= 107) || LA214_0 == 109 || (LA214_0 >= 113 && LA214_0 <= 122) || LA214_0 == 126 || (LA214_0 >= 132 && LA214_0 <= 138) || LA214_0 == 144 || (LA214_0 >= 170 && LA214_0 <= 199) || (LA214_0 >= 201 && LA214_0 <= 202) || LA214_0 == 206 || LA214_0 == 208 || (LA214_0 >= 225 && LA214_0 <= 226)) )
            	    {
            	        alt214 = 1;
            	    }


            	    switch (alt214) 
            		{
            			case 1 :
            			    // cs.g:0:0: class_member_declaration
            			    {
            			    	PushFollow(FOLLOW_class_member_declaration_in_class_member_declarations6875);
            			    	class_member_declaration648 = class_member_declaration();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_member_declaration648.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt214 >= 1 ) goto loop214;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee214 =
            		                new EarlyExitException(214, input);
            		            throw eee214;
            	    }
            	    cnt214++;
            	} while (true);

            	loop214:
            		;	// Stops C# compiler whining that label 'loop214' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 187, class_member_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "class_member_declarations"

    public class class_member_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "class_member_declaration"
    // cs.g:1229:1: class_member_declaration : ( constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | destructor_declaration | static_constructor_declaration | type_declaration | class_declaration );
    public csParser.class_member_declaration_return class_member_declaration() // throws RecognitionException [1]
    {   
        csParser.class_member_declaration_return retval = new csParser.class_member_declaration_return();
        retval.Start = input.LT(1);
        int class_member_declaration_StartIndex = input.Index();
        object root_0 = null;

        csParser.constant_declaration_return constant_declaration649 = default(csParser.constant_declaration_return);

        csParser.field_declaration_return field_declaration650 = default(csParser.field_declaration_return);

        csParser.method_declaration_return method_declaration651 = default(csParser.method_declaration_return);

        csParser.property_declaration_return property_declaration652 = default(csParser.property_declaration_return);

        csParser.event_declaration_return event_declaration653 = default(csParser.event_declaration_return);

        csParser.indexer_declaration_return indexer_declaration654 = default(csParser.indexer_declaration_return);

        csParser.operator_declaration_return operator_declaration655 = default(csParser.operator_declaration_return);

        csParser.constructor_declaration_return constructor_declaration656 = default(csParser.constructor_declaration_return);

        csParser.destructor_declaration_return destructor_declaration657 = default(csParser.destructor_declaration_return);

        csParser.static_constructor_declaration_return static_constructor_declaration658 = default(csParser.static_constructor_declaration_return);

        csParser.type_declaration_return type_declaration659 = default(csParser.type_declaration_return);

        csParser.class_declaration_return class_declaration660 = default(csParser.class_declaration_return);



         const string elementName = "class_member_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 188) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1232:1: ( constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | destructor_declaration | static_constructor_declaration | type_declaration | class_declaration )
            int alt215 = 12;
            alt215 = dfa215.Predict(input);
            switch (alt215) 
            {
                case 1 :
                    // cs.g:1233:2: constant_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_constant_declaration_in_class_member_declaration6896);
                    	constant_declaration649 = constant_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_declaration649.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1234:4: field_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_field_declaration_in_class_member_declaration6901);
                    	field_declaration650 = field_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, field_declaration650.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:1235:4: method_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_method_declaration_in_class_member_declaration6906);
                    	method_declaration651 = method_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_declaration651.Tree);

                    }
                    break;
                case 4 :
                    // cs.g:1236:4: property_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_property_declaration_in_class_member_declaration6911);
                    	property_declaration652 = property_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, property_declaration652.Tree);

                    }
                    break;
                case 5 :
                    // cs.g:1237:4: event_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_event_declaration_in_class_member_declaration6916);
                    	event_declaration653 = event_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, event_declaration653.Tree);

                    }
                    break;
                case 6 :
                    // cs.g:1238:4: indexer_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_indexer_declaration_in_class_member_declaration6921);
                    	indexer_declaration654 = indexer_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, indexer_declaration654.Tree);

                    }
                    break;
                case 7 :
                    // cs.g:1239:4: operator_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_operator_declaration_in_class_member_declaration6926);
                    	operator_declaration655 = operator_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, operator_declaration655.Tree);

                    }
                    break;
                case 8 :
                    // cs.g:1240:4: constructor_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_constructor_declaration_in_class_member_declaration6931);
                    	constructor_declaration656 = constructor_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_declaration656.Tree);

                    }
                    break;
                case 9 :
                    // cs.g:1241:4: destructor_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_destructor_declaration_in_class_member_declaration6936);
                    	destructor_declaration657 = destructor_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, destructor_declaration657.Tree);

                    }
                    break;
                case 10 :
                    // cs.g:1242:4: static_constructor_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_static_constructor_declaration_in_class_member_declaration6941);
                    	static_constructor_declaration658 = static_constructor_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, static_constructor_declaration658.Tree);

                    }
                    break;
                case 11 :
                    // cs.g:1243:4: type_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_type_declaration_in_class_member_declaration6946);
                    	type_declaration659 = type_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_declaration659.Tree);

                    }
                    break;
                case 12 :
                    // cs.g:1244:4: class_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_class_declaration_in_class_member_declaration6952);
                    	class_declaration660 = class_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_declaration660.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 188, class_member_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "class_member_declaration"

    public class constant_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "constant_declaration"
    // cs.g:1245:1: constant_declaration : ( attributes )? ( constant_modifiers )? 'const' type constant_declarators ';' ;
    public csParser.constant_declaration_return constant_declaration() // throws RecognitionException [1]
    {   
        csParser.constant_declaration_return retval = new csParser.constant_declaration_return();
        retval.Start = input.LT(1);
        int constant_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal663 = null;
        IToken char_literal666 = null;
        csParser.attributes_return attributes661 = default(csParser.attributes_return);

        csParser.constant_modifiers_return constant_modifiers662 = default(csParser.constant_modifiers_return);

        csParser.type_return type664 = default(csParser.type_return);

        csParser.constant_declarators_return constant_declarators665 = default(csParser.constant_declarators_return);


        object string_literal663_tree=null;
        object char_literal666_tree=null;

         const string elementName = "constant_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 189) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1248:1: ( ( attributes )? ( constant_modifiers )? 'const' type constant_declarators ';' )
            // cs.g:1249:2: ( attributes )? ( constant_modifiers )? 'const' type constant_declarators ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1249:2: ( attributes )?
            	int alt216 = 2;
            	int LA216_0 = input.LA(1);

            	if ( (LA216_0 == 97) )
            	{
            	    alt216 = 1;
            	}
            	switch (alt216) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_constant_declaration6972);
            	        	attributes661 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes661.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1249:16: ( constant_modifiers )?
            	int alt217 = 2;
            	int LA217_0 = input.LA(1);

            	if ( (LA217_0 == 138 || (LA217_0 >= 170 && LA217_0 <= 173)) )
            	{
            	    alt217 = 1;
            	}
            	switch (alt217) 
            	{
            	    case 1 :
            	        // cs.g:0:0: constant_modifiers
            	        {
            	        	PushFollow(FOLLOW_constant_modifiers_in_constant_declaration6977);
            	        	constant_modifiers662 = constant_modifiers();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_modifiers662.Tree);

            	        }
            	        break;

            	}

            	string_literal663=(IToken)Match(input,194,FOLLOW_194_in_constant_declaration6982); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal663_tree = (object)adaptor.Create(string_literal663);
            		adaptor.AddChild(root_0, string_literal663_tree);
            	}
            	PushFollow(FOLLOW_type_in_constant_declaration6986);
            	type664 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type664.Tree);
            	PushFollow(FOLLOW_constant_declarators_in_constant_declaration6990);
            	constant_declarators665 = constant_declarators();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_declarators665.Tree);
            	char_literal666=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_constant_declaration6994); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal666_tree = (object)adaptor.Create(char_literal666);
            		adaptor.AddChild(root_0, char_literal666_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 189, constant_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constant_declaration"

    public class constant_modifiers_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "constant_modifiers"
    // cs.g:1250:1: constant_modifiers : ( constant_modifier )+ ;
    public csParser.constant_modifiers_return constant_modifiers() // throws RecognitionException [1]
    {   
        csParser.constant_modifiers_return retval = new csParser.constant_modifiers_return();
        retval.Start = input.LT(1);
        int constant_modifiers_StartIndex = input.Index();
        object root_0 = null;

        csParser.constant_modifier_return constant_modifier667 = default(csParser.constant_modifier_return);



         const string elementName = "constant_modifiers"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 190) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1253:1: ( ( constant_modifier )+ )
            // cs.g:1254:2: ( constant_modifier )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1254:2: ( constant_modifier )+
            	int cnt218 = 0;
            	do 
            	{
            	    int alt218 = 2;
            	    int LA218_0 = input.LA(1);

            	    if ( (LA218_0 == 138 || (LA218_0 >= 170 && LA218_0 <= 173)) )
            	    {
            	        alt218 = 1;
            	    }


            	    switch (alt218) 
            		{
            			case 1 :
            			    // cs.g:0:0: constant_modifier
            			    {
            			    	PushFollow(FOLLOW_constant_modifier_in_constant_modifiers7014);
            			    	constant_modifier667 = constant_modifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_modifier667.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt218 >= 1 ) goto loop218;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee218 =
            		                new EarlyExitException(218, input);
            		            throw eee218;
            	    }
            	    cnt218++;
            	} while (true);

            	loop218:
            		;	// Stops C# compiler whining that label 'loop218' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 190, constant_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constant_modifiers"

    public class constant_modifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "constant_modifier"
    // cs.g:1255:1: constant_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' );
    public csParser.constant_modifier_return constant_modifier() // throws RecognitionException [1]
    {   
        csParser.constant_modifier_return retval = new csParser.constant_modifier_return();
        retval.Start = input.LT(1);
        int constant_modifier_StartIndex = input.Index();
        object root_0 = null;

        IToken set668 = null;

        object set668_tree=null;

         const string elementName = "constant_modifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 191) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1258:1: ( 'new' | 'public' | 'protected' | 'internal' | 'private' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set668 = (IToken)input.LT(1);
            	if ( input.LA(1) == 138 || (input.LA(1) >= 170 && input.LA(1) <= 173) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set668));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 191, constant_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constant_modifier"

    public class field_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "field_declaration"
    // cs.g:1260:1: field_declaration : ( attributes )? ( field_modifiers )? type variable_declarators ';' ;
    public csParser.field_declaration_return field_declaration() // throws RecognitionException [1]
    {   
        csParser.field_declaration_return retval = new csParser.field_declaration_return();
        retval.Start = input.LT(1);
        int field_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal673 = null;
        csParser.attributes_return attributes669 = default(csParser.attributes_return);

        csParser.field_modifiers_return field_modifiers670 = default(csParser.field_modifiers_return);

        csParser.type_return type671 = default(csParser.type_return);

        csParser.variable_declarators_return variable_declarators672 = default(csParser.variable_declarators_return);


        object char_literal673_tree=null;

         const string elementName = "field_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 192) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1263:1: ( ( attributes )? ( field_modifiers )? type variable_declarators ';' )
            // cs.g:1264:2: ( attributes )? ( field_modifiers )? type variable_declarators ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1264:2: ( attributes )?
            	int alt219 = 2;
            	int LA219_0 = input.LA(1);

            	if ( (LA219_0 == 97) )
            	{
            	    alt219 = 1;
            	}
            	switch (alt219) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_field_declaration7071);
            	        	attributes669 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes669.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1264:16: ( field_modifiers )?
            	int alt220 = 2;
            	int LA220_0 = input.LA(1);

            	if ( (LA220_0 == 138 || (LA220_0 >= 170 && LA220_0 <= 174) || LA220_0 == 192 || (LA220_0 >= 195 && LA220_0 <= 196)) )
            	{
            	    alt220 = 1;
            	}
            	switch (alt220) 
            	{
            	    case 1 :
            	        // cs.g:0:0: field_modifiers
            	        {
            	        	PushFollow(FOLLOW_field_modifiers_in_field_declaration7076);
            	        	field_modifiers670 = field_modifiers();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, field_modifiers670.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_type_in_field_declaration7081);
            	type671 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type671.Tree);
            	PushFollow(FOLLOW_variable_declarators_in_field_declaration7085);
            	variable_declarators672 = variable_declarators();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_declarators672.Tree);
            	char_literal673=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_field_declaration7089); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal673_tree = (object)adaptor.Create(char_literal673);
            		adaptor.AddChild(root_0, char_literal673_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 192, field_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "field_declaration"

    public class field_modifiers_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "field_modifiers"
    // cs.g:1266:1: field_modifiers : ( field_modifier )+ ;
    public csParser.field_modifiers_return field_modifiers() // throws RecognitionException [1]
    {   
        csParser.field_modifiers_return retval = new csParser.field_modifiers_return();
        retval.Start = input.LT(1);
        int field_modifiers_StartIndex = input.Index();
        object root_0 = null;

        csParser.field_modifier_return field_modifier674 = default(csParser.field_modifier_return);



         const string elementName = "field_modifiers"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 193) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1269:1: ( ( field_modifier )+ )
            // cs.g:1270:2: ( field_modifier )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1270:2: ( field_modifier )+
            	int cnt221 = 0;
            	do 
            	{
            	    int alt221 = 2;
            	    int LA221_0 = input.LA(1);

            	    if ( (LA221_0 == 138 || (LA221_0 >= 170 && LA221_0 <= 174) || LA221_0 == 192 || (LA221_0 >= 195 && LA221_0 <= 196)) )
            	    {
            	        alt221 = 1;
            	    }


            	    switch (alt221) 
            		{
            			case 1 :
            			    // cs.g:0:0: field_modifier
            			    {
            			    	PushFollow(FOLLOW_field_modifier_in_field_modifiers7110);
            			    	field_modifier674 = field_modifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, field_modifier674.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt221 >= 1 ) goto loop221;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee221 =
            		                new EarlyExitException(221, input);
            		            throw eee221;
            	    }
            	    cnt221++;
            	} while (true);

            	loop221:
            		;	// Stops C# compiler whining that label 'loop221' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 193, field_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "field_modifiers"

    public class field_modifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "field_modifier"
    // cs.g:1271:1: field_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'readonly' | 'volatile' | 'unsafe' );
    public csParser.field_modifier_return field_modifier() // throws RecognitionException [1]
    {   
        csParser.field_modifier_return retval = new csParser.field_modifier_return();
        retval.Start = input.LT(1);
        int field_modifier_StartIndex = input.Index();
        object root_0 = null;

        IToken set675 = null;

        object set675_tree=null;

         const string elementName = "field_modifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 194) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1274:1: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'readonly' | 'volatile' | 'unsafe' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set675 = (IToken)input.LT(1);
            	if ( input.LA(1) == 138 || (input.LA(1) >= 170 && input.LA(1) <= 174) || input.LA(1) == 192 || (input.LA(1) >= 195 && input.LA(1) <= 196) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set675));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 194, field_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "field_modifier"

    public class variable_declarators_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "variable_declarators"
    // cs.g:1276:1: variable_declarators : variable_declarator ( ',' variable_declarator )* ;
    public csParser.variable_declarators_return variable_declarators() // throws RecognitionException [1]
    {   
        csParser.variable_declarators_return retval = new csParser.variable_declarators_return();
        retval.Start = input.LT(1);
        int variable_declarators_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal677 = null;
        csParser.variable_declarator_return variable_declarator676 = default(csParser.variable_declarator_return);

        csParser.variable_declarator_return variable_declarator678 = default(csParser.variable_declarator_return);


        object char_literal677_tree=null;

         const string elementName = "variable_declarators"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 195) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1279:1: ( variable_declarator ( ',' variable_declarator )* )
            // cs.g:1280:2: variable_declarator ( ',' variable_declarator )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_variable_declarator_in_variable_declarators7183);
            	variable_declarator676 = variable_declarator();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_declarator676.Tree);
            	// cs.g:1280:22: ( ',' variable_declarator )*
            	do 
            	{
            	    int alt222 = 2;
            	    int LA222_0 = input.LA(1);

            	    if ( (LA222_0 == 98) )
            	    {
            	        alt222 = 1;
            	    }


            	    switch (alt222) 
            		{
            			case 1 :
            			    // cs.g:1280:23: ',' variable_declarator
            			    {
            			    	char_literal677=(IToken)Match(input,98,FOLLOW_98_in_variable_declarators7186); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal677_tree = (object)adaptor.Create(char_literal677);
            			    		adaptor.AddChild(root_0, char_literal677_tree);
            			    	}
            			    	PushFollow(FOLLOW_variable_declarator_in_variable_declarators7188);
            			    	variable_declarator678 = variable_declarator();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_declarator678.Tree);

            			    }
            			    break;

            			default:
            			    goto loop222;
            	    }
            	} while (true);

            	loop222:
            		;	// Stops C# compiler whining that label 'loop222' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 195, variable_declarators_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variable_declarators"

    public class variable_declarator_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "variable_declarator"
    // cs.g:1281:1: variable_declarator : type_name ( '=' variable_initializer )? ;
    public csParser.variable_declarator_return variable_declarator() // throws RecognitionException [1]
    {   
        csParser.variable_declarator_return retval = new csParser.variable_declarator_return();
        retval.Start = input.LT(1);
        int variable_declarator_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal680 = null;
        csParser.type_name_return type_name679 = default(csParser.type_name_return);

        csParser.variable_initializer_return variable_initializer681 = default(csParser.variable_initializer_return);


        object char_literal680_tree=null;

         const string elementName = "variable_declarator"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 196) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1284:1: ( type_name ( '=' variable_initializer )? )
            // cs.g:1286:2: type_name ( '=' variable_initializer )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_type_name_in_variable_declarator7211);
            	type_name679 = type_name();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name679.Tree);
            	// cs.g:1286:12: ( '=' variable_initializer )?
            	int alt223 = 2;
            	int LA223_0 = input.LA(1);

            	if ( (LA223_0 == 96) )
            	{
            	    alt223 = 1;
            	}
            	switch (alt223) 
            	{
            	    case 1 :
            	        // cs.g:1286:13: '=' variable_initializer
            	        {
            	        	char_literal680=(IToken)Match(input,96,FOLLOW_96_in_variable_declarator7214); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal680_tree = (object)adaptor.Create(char_literal680);
            	        		adaptor.AddChild(root_0, char_literal680_tree);
            	        	}
            	        	PushFollow(FOLLOW_variable_initializer_in_variable_declarator7218);
            	        	variable_initializer681 = variable_initializer();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_initializer681.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 196, variable_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variable_declarator"

    public class variable_initializer_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "variable_initializer"
    // cs.g:1287:1: variable_initializer : ( expression | array_initializer );
    public csParser.variable_initializer_return variable_initializer() // throws RecognitionException [1]
    {   
        csParser.variable_initializer_return retval = new csParser.variable_initializer_return();
        retval.Start = input.LT(1);
        int variable_initializer_StartIndex = input.Index();
        object root_0 = null;

        csParser.expression_return expression682 = default(csParser.expression_return);

        csParser.array_initializer_return array_initializer683 = default(csParser.array_initializer_return);



         const string elementName = "variable_initializer"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 197) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1290:1: ( expression | array_initializer )
            int alt224 = 2;
            int LA224_0 = input.LA(1);

            if ( ((LA224_0 >= IDENTIFIER && LA224_0 <= NULL) || LA224_0 == MINUS || LA224_0 == SET || (LA224_0 >= 90 && LA224_0 <= 91) || LA224_0 == 95 || (LA224_0 >= 101 && LA224_0 <= 107) || (LA224_0 >= 109 && LA224_0 <= 111) || (LA224_0 >= 114 && LA224_0 <= 122) || (LA224_0 >= 124 && LA224_0 <= 129) || (LA224_0 >= 132 && LA224_0 <= 144) || (LA224_0 >= 175 && LA224_0 <= 187) || LA224_0 == 199 || (LA224_0 >= 201 && LA224_0 <= 202) || LA224_0 == 208 || (LA224_0 >= 225 && LA224_0 <= 226)) )
            {
                alt224 = 1;
            }
            else if ( (LA224_0 == 92) )
            {
                alt224 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d224s0 =
                    new NoViableAltException("", 224, 0, input);

                throw nvae_d224s0;
            }
            switch (alt224) 
            {
                case 1 :
                    // cs.g:1291:2: expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_expression_in_variable_initializer7242);
                    	expression682 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression682.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1291:15: array_initializer
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_array_initializer_in_variable_initializer7246);
                    	array_initializer683 = array_initializer();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, array_initializer683.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 197, variable_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "variable_initializer"

    public class method_declarations_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "method_declarations"
    // cs.g:1293:1: method_declarations : ( method_declaration )+ ;
    public csParser.method_declarations_return method_declarations() // throws RecognitionException [1]
    {   
        csParser.method_declarations_return retval = new csParser.method_declarations_return();
        retval.Start = input.LT(1);
        int method_declarations_StartIndex = input.Index();
        object root_0 = null;

        csParser.method_declaration_return method_declaration684 = default(csParser.method_declaration_return);



         const string elementName = "method_declarations"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 198) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1296:1: ( ( method_declaration )+ )
            // cs.g:1297:2: ( method_declaration )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1297:2: ( method_declaration )+
            	int cnt225 = 0;
            	do 
            	{
            	    int alt225 = 2;
            	    int LA225_0 = input.LA(1);

            	    if ( (LA225_0 == IDENTIFIER || LA225_0 == SET || (LA225_0 >= 94 && LA225_0 <= 95) || LA225_0 == 97 || (LA225_0 >= 101 && LA225_0 <= 107) || LA225_0 == 109 || (LA225_0 >= 113 && LA225_0 <= 122) || (LA225_0 >= 132 && LA225_0 <= 138) || (LA225_0 >= 170 && LA225_0 <= 188) || (LA225_0 >= 190 && LA225_0 <= 192) || (LA225_0 >= 197 && LA225_0 <= 199) || (LA225_0 >= 201 && LA225_0 <= 202) || LA225_0 == 208 || (LA225_0 >= 225 && LA225_0 <= 226)) )
            	    {
            	        alt225 = 1;
            	    }


            	    switch (alt225) 
            		{
            			case 1 :
            			    // cs.g:0:0: method_declaration
            			    {
            			    	PushFollow(FOLLOW_method_declaration_in_method_declarations7267);
            			    	method_declaration684 = method_declaration();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_declaration684.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt225 >= 1 ) goto loop225;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee225 =
            		                new EarlyExitException(225, input);
            		            throw eee225;
            	    }
            	    cnt225++;
            	} while (true);

            	loop225:
            		;	// Stops C# compiler whining that label 'loop225' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 198, method_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "method_declarations"

    public class method_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "method_declaration"
    // cs.g:1298:1: method_declaration : method_header method_body ;
    public csParser.method_declaration_return method_declaration() // throws RecognitionException [1]
    {   
        csParser.method_declaration_return retval = new csParser.method_declaration_return();
        retval.Start = input.LT(1);
        int method_declaration_StartIndex = input.Index();
        object root_0 = null;

        csParser.method_header_return method_header685 = default(csParser.method_header_return);

        csParser.method_body_return method_body686 = default(csParser.method_body_return);



         const string elementName = "method_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 199) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1301:1: ( method_header method_body )
            // cs.g:1302:2: method_header method_body
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_method_header_in_method_declaration7289);
            	method_header685 = method_header();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_header685.Tree);
            	PushFollow(FOLLOW_method_body_in_method_declaration7293);
            	method_body686 = method_body();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_body686.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 199, method_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "method_declaration"

    public class method_header_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "method_header"
    // cs.g:1304:1: method_header : ( attributes )? ( method_modifiers )? ( 'partial' )? return_type member_name ( generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ;
    public csParser.method_header_return method_header() // throws RecognitionException [1]
    {   
        csParser.method_header_return retval = new csParser.method_header_return();
        retval.Start = input.LT(1);
        int method_header_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal689 = null;
        IToken char_literal693 = null;
        IToken char_literal695 = null;
        csParser.attributes_return attributes687 = default(csParser.attributes_return);

        csParser.method_modifiers_return method_modifiers688 = default(csParser.method_modifiers_return);

        csParser.return_type_return return_type690 = default(csParser.return_type_return);

        csParser.member_name_return member_name691 = default(csParser.member_name_return);

        csParser.generic_parameter_list_return generic_parameter_list692 = default(csParser.generic_parameter_list_return);

        csParser.formal_parameter_list_return formal_parameter_list694 = default(csParser.formal_parameter_list_return);

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses696 = default(csParser.type_parameter_constraints_clauses_return);


        object string_literal689_tree=null;
        object char_literal693_tree=null;
        object char_literal695_tree=null;

         const string elementName = "method_header"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 200) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1307:1: ( ( attributes )? ( method_modifiers )? ( 'partial' )? return_type member_name ( generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? )
            // cs.g:1308:2: ( attributes )? ( method_modifiers )? ( 'partial' )? return_type member_name ( generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1308:2: ( attributes )?
            	int alt226 = 2;
            	int LA226_0 = input.LA(1);

            	if ( (LA226_0 == 97) )
            	{
            	    alt226 = 1;
            	}
            	switch (alt226) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_method_header7315);
            	        	attributes687 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes687.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1308:16: ( method_modifiers )?
            	int alt227 = 2;
            	int LA227_0 = input.LA(1);

            	if ( (LA227_0 == 94 || LA227_0 == 138 || (LA227_0 >= 170 && LA227_0 <= 174) || (LA227_0 >= 190 && LA227_0 <= 192) || (LA227_0 >= 197 && LA227_0 <= 198)) )
            	{
            	    alt227 = 1;
            	}
            	switch (alt227) 
            	{
            	    case 1 :
            	        // cs.g:0:0: method_modifiers
            	        {
            	        	PushFollow(FOLLOW_method_modifiers_in_method_header7320);
            	        	method_modifiers688 = method_modifiers();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_modifiers688.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1308:36: ( 'partial' )?
            	int alt228 = 2;
            	int LA228_0 = input.LA(1);

            	if ( (LA228_0 == 188) )
            	{
            	    alt228 = 1;
            	}
            	switch (alt228) 
            	{
            	    case 1 :
            	        // cs.g:0:0: 'partial'
            	        {
            	        	string_literal689=(IToken)Match(input,188,FOLLOW_188_in_method_header7325); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal689_tree = (object)adaptor.Create(string_literal689);
            	        		adaptor.AddChild(root_0, string_literal689_tree);
            	        	}

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_return_type_in_method_header7330);
            	return_type690 = return_type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, return_type690.Tree);
            	PushFollow(FOLLOW_member_name_in_method_header7334);
            	member_name691 = member_name();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_name691.Tree);
            	// cs.g:1308:77: ( generic_parameter_list )?
            	int alt229 = 2;
            	int LA229_0 = input.LA(1);

            	if ( (LA229_0 == 123) )
            	{
            	    alt229 = 1;
            	}
            	switch (alt229) 
            	{
            	    case 1 :
            	        // cs.g:0:0: generic_parameter_list
            	        {
            	        	PushFollow(FOLLOW_generic_parameter_list_in_method_header7338);
            	        	generic_parameter_list692 = generic_parameter_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_parameter_list692.Tree);

            	        }
            	        break;

            	}

            	char_literal693=(IToken)Match(input,110,FOLLOW_110_in_method_header7344); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal693_tree = (object)adaptor.Create(char_literal693);
            		adaptor.AddChild(root_0, char_literal693_tree);
            	}
            	// cs.g:1309:10: ( formal_parameter_list )?
            	int alt230 = 2;
            	int LA230_0 = input.LA(1);

            	if ( (LA230_0 == IDENTIFIER || LA230_0 == SET || LA230_0 == 90 || LA230_0 == 95 || LA230_0 == 97 || (LA230_0 >= 101 && LA230_0 <= 107) || LA230_0 == 109 || (LA230_0 >= 113 && LA230_0 <= 122) || (LA230_0 >= 130 && LA230_0 <= 137) || (LA230_0 >= 175 && LA230_0 <= 187) || (LA230_0 >= 199 && LA230_0 <= 202) || LA230_0 == 208 || (LA230_0 >= 225 && LA230_0 <= 226)) )
            	{
            	    alt230 = 1;
            	}
            	switch (alt230) 
            	{
            	    case 1 :
            	        // cs.g:0:0: formal_parameter_list
            	        {
            	        	PushFollow(FOLLOW_formal_parameter_list_in_method_header7348);
            	        	formal_parameter_list694 = formal_parameter_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, formal_parameter_list694.Tree);

            	        }
            	        break;

            	}

            	char_literal695=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_method_header7353); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal695_tree = (object)adaptor.Create(char_literal695);
            		adaptor.AddChild(root_0, char_literal695_tree);
            	}
            	// cs.g:1309:41: ( type_parameter_constraints_clauses )?
            	int alt231 = 2;
            	int LA231_0 = input.LA(1);

            	if ( (LA231_0 == 187) )
            	{
            	    alt231 = 1;
            	}
            	switch (alt231) 
            	{
            	    case 1 :
            	        // cs.g:0:0: type_parameter_constraints_clauses
            	        {
            	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_method_header7357);
            	        	type_parameter_constraints_clauses696 = type_parameter_constraints_clauses();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameter_constraints_clauses696.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 200, method_header_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "method_header"

    public class method_modifiers_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "method_modifiers"
    // cs.g:1310:1: method_modifiers : ( method_modifier )+ ;
    public csParser.method_modifiers_return method_modifiers() // throws RecognitionException [1]
    {   
        csParser.method_modifiers_return retval = new csParser.method_modifiers_return();
        retval.Start = input.LT(1);
        int method_modifiers_StartIndex = input.Index();
        object root_0 = null;

        csParser.method_modifier_return method_modifier697 = default(csParser.method_modifier_return);



         const string elementName = "method_modifiers"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 201) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1313:1: ( ( method_modifier )+ )
            // cs.g:1314:2: ( method_modifier )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1314:2: ( method_modifier )+
            	int cnt232 = 0;
            	do 
            	{
            	    int alt232 = 2;
            	    int LA232_0 = input.LA(1);

            	    if ( (LA232_0 == 94 || LA232_0 == 138 || (LA232_0 >= 170 && LA232_0 <= 174) || (LA232_0 >= 190 && LA232_0 <= 192) || (LA232_0 >= 197 && LA232_0 <= 198)) )
            	    {
            	        alt232 = 1;
            	    }


            	    switch (alt232) 
            		{
            			case 1 :
            			    // cs.g:0:0: method_modifier
            			    {
            			    	PushFollow(FOLLOW_method_modifier_in_method_modifiers7378);
            			    	method_modifier697 = method_modifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_modifier697.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt232 >= 1 ) goto loop232;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee232 =
            		                new EarlyExitException(232, input);
            		            throw eee232;
            	    }
            	    cnt232++;
            	} while (true);

            	loop232:
            		;	// Stops C# compiler whining that label 'loop232' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 201, method_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "method_modifiers"

    public class method_modifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "method_modifier"
    // cs.g:1315:1: method_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' | 'unsafe' );
    public csParser.method_modifier_return method_modifier() // throws RecognitionException [1]
    {   
        csParser.method_modifier_return retval = new csParser.method_modifier_return();
        retval.Start = input.LT(1);
        int method_modifier_StartIndex = input.Index();
        object root_0 = null;

        IToken set698 = null;

        object set698_tree=null;

         const string elementName = "method_modifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 202) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1318:1: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' | 'unsafe' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set698 = (IToken)input.LT(1);
            	if ( input.LA(1) == 94 || input.LA(1) == 138 || (input.LA(1) >= 170 && input.LA(1) <= 174) || (input.LA(1) >= 190 && input.LA(1) <= 192) || (input.LA(1) >= 197 && input.LA(1) <= 198) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set698));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 202, method_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "method_modifier"

    public class return_type_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "return_type"
    // cs.g:1321:1: return_type : ( type | 'void' ( '*' )* );
    public csParser.return_type_return return_type() // throws RecognitionException [1]
    {   
        csParser.return_type_return retval = new csParser.return_type_return();
        retval.Start = input.LT(1);
        int return_type_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal700 = null;
        IToken char_literal701 = null;
        csParser.type_return type699 = default(csParser.type_return);


        object string_literal700_tree=null;
        object char_literal701_tree=null;

         const string elementName = "return_type"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 203) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1324:1: ( type | 'void' ( '*' )* )
            int alt234 = 2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0 == IDENTIFIER || LA234_0 == SET || LA234_0 == 95 || (LA234_0 >= 101 && LA234_0 <= 107) || LA234_0 == 109 || (LA234_0 >= 114 && LA234_0 <= 122) || (LA234_0 >= 132 && LA234_0 <= 137) || (LA234_0 >= 175 && LA234_0 <= 187) || LA234_0 == 199 || (LA234_0 >= 201 && LA234_0 <= 202) || LA234_0 == 208 || (LA234_0 >= 225 && LA234_0 <= 226)) )
            {
                alt234 = 1;
            }
            else if ( (LA234_0 == 113) )
            {
                int LA234_2 = input.LA(2);

                if ( (LA234_2 == 111) )
                {
                    int LA234_3 = input.LA(3);

                    if ( (synpred386_cs()) )
                    {
                        alt234 = 1;
                    }
                    else if ( (true) )
                    {
                        alt234 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d234s3 =
                            new NoViableAltException("", 234, 3, input);

                        throw nvae_d234s3;
                    }
                }
                else if ( ((LA234_2 >= IDENTIFIER && LA234_2 <= NULL) || LA234_2 == SET || (LA234_2 >= 90 && LA234_2 <= 91) || LA234_2 == 95 || (LA234_2 >= 101 && LA234_2 <= 107) || LA234_2 == 109 || (LA234_2 >= 114 && LA234_2 <= 122) || (LA234_2 >= 132 && LA234_2 <= 137) || (LA234_2 >= 175 && LA234_2 <= 187) || LA234_2 == 199 || (LA234_2 >= 201 && LA234_2 <= 202) || LA234_2 == 208 || (LA234_2 >= 225 && LA234_2 <= 226)) )
                {
                    alt234 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d234s2 =
                        new NoViableAltException("", 234, 2, input);

                    throw nvae_d234s2;
                }
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d234s0 =
                    new NoViableAltException("", 234, 0, input);

                throw nvae_d234s0;
            }
            switch (alt234) 
            {
                case 1 :
                    // cs.g:1325:2: type
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_type_in_return_type7464);
                    	type699 = type();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type699.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1326:4: 'void' ( '*' )*
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal700=(IToken)Match(input,113,FOLLOW_113_in_return_type7469); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal700_tree = (object)adaptor.Create(string_literal700);
                    		adaptor.AddChild(root_0, string_literal700_tree);
                    	}
                    	// cs.g:1326:11: ( '*' )*
                    	do 
                    	{
                    	    int alt233 = 2;
                    	    int LA233_0 = input.LA(1);

                    	    if ( (LA233_0 == 111) )
                    	    {
                    	        alt233 = 1;
                    	    }


                    	    switch (alt233) 
                    		{
                    			case 1 :
                    			    // cs.g:0:0: '*'
                    			    {
                    			    	char_literal701=(IToken)Match(input,111,FOLLOW_111_in_return_type7471); if (state.failed) return retval;
                    			    	if ( state.backtracking == 0 )
                    			    	{char_literal701_tree = (object)adaptor.Create(char_literal701);
                    			    		adaptor.AddChild(root_0, char_literal701_tree);
                    			    	}

                    			    }
                    			    break;

                    			default:
                    			    goto loop233;
                    	    }
                    	} while (true);

                    	loop233:
                    		;	// Stops C# compiler whining that label 'loop233' has no statements


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 203, return_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "return_type"

    public class method_body_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "method_body"
    // cs.g:1327:1: method_body : block ;
    public csParser.method_body_return method_body() // throws RecognitionException [1]
    {   
        csParser.method_body_return retval = new csParser.method_body_return();
        retval.Start = input.LT(1);
        int method_body_StartIndex = input.Index();
        object root_0 = null;

        csParser.block_return block702 = default(csParser.block_return);



         const string elementName = "method_body"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 204) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1330:1: ( block )
            // cs.g:1331:2: block
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_block_in_method_body7492);
            	block702 = block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block702.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 204, method_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "method_body"

    public class formal_parameter_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "formal_parameter_list"
    // cs.g:1332:1: formal_parameter_list : fp+= formal_parameter ( ',' fp+= formal_parameter )* ;
    public csParser.formal_parameter_list_return formal_parameter_list() // throws RecognitionException [1]
    {   
        csParser.formal_parameter_list_return retval = new csParser.formal_parameter_list_return();
        retval.Start = input.LT(1);
        int formal_parameter_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal703 = null;
        IList list_fp = null;
        csParser.formal_parameter_return fp = default(csParser.formal_parameter_return);
         fp = null;
        object char_literal703_tree=null;

         const string elementName = "formal_parameter_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 205) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1335:1: (fp+= formal_parameter ( ',' fp+= formal_parameter )* )
            // cs.g:1336:2: fp+= formal_parameter ( ',' fp+= formal_parameter )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_formal_parameter_in_formal_parameter_list7516);
            	fp = formal_parameter();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fp.Tree);
            	if (list_fp == null) list_fp = new ArrayList();
            	list_fp.Add(fp.Tree);

            	// cs.g:1336:25: ( ',' fp+= formal_parameter )*
            	do 
            	{
            	    int alt235 = 2;
            	    int LA235_0 = input.LA(1);

            	    if ( (LA235_0 == 98) )
            	    {
            	        alt235 = 1;
            	    }


            	    switch (alt235) 
            		{
            			case 1 :
            			    // cs.g:1336:26: ',' fp+= formal_parameter
            			    {
            			    	char_literal703=(IToken)Match(input,98,FOLLOW_98_in_formal_parameter_list7519); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal703_tree = (object)adaptor.Create(char_literal703);
            			    		adaptor.AddChild(root_0, char_literal703_tree);
            			    	}
            			    	PushFollow(FOLLOW_formal_parameter_in_formal_parameter_list7525);
            			    	fp = formal_parameter();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fp.Tree);
            			    	if (list_fp == null) list_fp = new ArrayList();
            			    	list_fp.Add(fp.Tree);


            			    }
            			    break;

            			default:
            			    goto loop235;
            	    }
            	} while (true);

            	loop235:
            		;	// Stops C# compiler whining that label 'loop235' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 205, formal_parameter_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "formal_parameter_list"

    public class formal_parameter_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "formal_parameter"
    // cs.g:1338:1: formal_parameter : ( fixed_parameter | parameter_array | '__arglist' );
    public csParser.formal_parameter_return formal_parameter() // throws RecognitionException [1]
    {   
        csParser.formal_parameter_return retval = new csParser.formal_parameter_return();
        retval.Start = input.LT(1);
        int formal_parameter_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal706 = null;
        csParser.fixed_parameter_return fixed_parameter704 = default(csParser.fixed_parameter_return);

        csParser.parameter_array_return parameter_array705 = default(csParser.parameter_array_return);


        object string_literal706_tree=null;

         const string elementName = "formal_parameter"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 206) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1341:1: ( fixed_parameter | parameter_array | '__arglist' )
            int alt236 = 3;
            alt236 = dfa236.Predict(input);
            switch (alt236) 
            {
                case 1 :
                    // cs.g:1342:2: fixed_parameter
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_fixed_parameter_in_formal_parameter7549);
                    	fixed_parameter704 = fixed_parameter();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fixed_parameter704.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1342:20: parameter_array
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_parameter_array_in_formal_parameter7553);
                    	parameter_array705 = parameter_array();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, parameter_array705.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:1342:38: '__arglist'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal706=(IToken)Match(input,199,FOLLOW_199_in_formal_parameter7557); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal706_tree = (object)adaptor.Create(string_literal706);
                    		adaptor.AddChild(root_0, string_literal706_tree);
                    	}

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 206, formal_parameter_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "formal_parameter"

    public class fixed_parameters_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "fixed_parameters"
    // cs.g:1343:1: fixed_parameters : ( fixed_parameter )+ ;
    public csParser.fixed_parameters_return fixed_parameters() // throws RecognitionException [1]
    {   
        csParser.fixed_parameters_return retval = new csParser.fixed_parameters_return();
        retval.Start = input.LT(1);
        int fixed_parameters_StartIndex = input.Index();
        object root_0 = null;

        csParser.fixed_parameter_return fixed_parameter707 = default(csParser.fixed_parameter_return);



         const string elementName = "fixed_parameters"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 207) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1346:1: ( ( fixed_parameter )+ )
            // cs.g:1347:2: ( fixed_parameter )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1347:2: ( fixed_parameter )+
            	int cnt237 = 0;
            	do 
            	{
            	    int alt237 = 2;
            	    int LA237_0 = input.LA(1);

            	    if ( (LA237_0 == IDENTIFIER || LA237_0 == SET || LA237_0 == 90 || LA237_0 == 95 || LA237_0 == 97 || (LA237_0 >= 101 && LA237_0 <= 107) || LA237_0 == 109 || (LA237_0 >= 113 && LA237_0 <= 122) || (LA237_0 >= 130 && LA237_0 <= 137) || (LA237_0 >= 175 && LA237_0 <= 187) || LA237_0 == 199 || (LA237_0 >= 201 && LA237_0 <= 202) || LA237_0 == 208 || (LA237_0 >= 225 && LA237_0 <= 226)) )
            	    {
            	        alt237 = 1;
            	    }


            	    switch (alt237) 
            		{
            			case 1 :
            			    // cs.g:0:0: fixed_parameter
            			    {
            			    	PushFollow(FOLLOW_fixed_parameter_in_fixed_parameters7577);
            			    	fixed_parameter707 = fixed_parameter();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fixed_parameter707.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt237 >= 1 ) goto loop237;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee237 =
            		                new EarlyExitException(237, input);
            		            throw eee237;
            	    }
            	    cnt237++;
            	} while (true);

            	loop237:
            		;	// Stops C# compiler whining that label 'loop237' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 207, fixed_parameters_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "fixed_parameters"

    public class fixed_parameter_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "fixed_parameter"
    // cs.g:1349:1: fixed_parameter : ( attributes )? ( parameter_modifier )? type identifier ( default_argument )? ;
    public csParser.fixed_parameter_return fixed_parameter() // throws RecognitionException [1]
    {   
        csParser.fixed_parameter_return retval = new csParser.fixed_parameter_return();
        retval.Start = input.LT(1);
        int fixed_parameter_StartIndex = input.Index();
        object root_0 = null;

        csParser.attributes_return attributes708 = default(csParser.attributes_return);

        csParser.parameter_modifier_return parameter_modifier709 = default(csParser.parameter_modifier_return);

        csParser.type_return type710 = default(csParser.type_return);

        csParser.identifier_return identifier711 = default(csParser.identifier_return);

        csParser.default_argument_return default_argument712 = default(csParser.default_argument_return);



         const string elementName = "fixed_parameter"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 208) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1352:1: ( ( attributes )? ( parameter_modifier )? type identifier ( default_argument )? )
            // cs.g:1353:2: ( attributes )? ( parameter_modifier )? type identifier ( default_argument )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1353:2: ( attributes )?
            	int alt238 = 2;
            	int LA238_0 = input.LA(1);

            	if ( (LA238_0 == 97) )
            	{
            	    alt238 = 1;
            	}
            	switch (alt238) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_fixed_parameter7599);
            	        	attributes708 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes708.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1353:16: ( parameter_modifier )?
            	int alt239 = 2;
            	int LA239_0 = input.LA(1);

            	if ( (LA239_0 == 90 || (LA239_0 >= 130 && LA239_0 <= 131)) )
            	{
            	    alt239 = 1;
            	}
            	switch (alt239) 
            	{
            	    case 1 :
            	        // cs.g:0:0: parameter_modifier
            	        {
            	        	PushFollow(FOLLOW_parameter_modifier_in_fixed_parameter7604);
            	        	parameter_modifier709 = parameter_modifier();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, parameter_modifier709.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_type_in_fixed_parameter7609);
            	type710 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type710.Tree);
            	PushFollow(FOLLOW_identifier_in_fixed_parameter7613);
            	identifier711 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier711.Tree);
            	// cs.g:1353:56: ( default_argument )?
            	int alt240 = 2;
            	int LA240_0 = input.LA(1);

            	if ( (LA240_0 == 96) )
            	{
            	    alt240 = 1;
            	}
            	switch (alt240) 
            	{
            	    case 1 :
            	        // cs.g:0:0: default_argument
            	        {
            	        	PushFollow(FOLLOW_default_argument_in_fixed_parameter7615);
            	        	default_argument712 = default_argument();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, default_argument712.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 208, fixed_parameter_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "fixed_parameter"

    public class default_argument_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "default_argument"
    // cs.g:1355:1: default_argument : '=' expression ;
    public csParser.default_argument_return default_argument() // throws RecognitionException [1]
    {   
        csParser.default_argument_return retval = new csParser.default_argument_return();
        retval.Start = input.LT(1);
        int default_argument_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal713 = null;
        csParser.expression_return expression714 = default(csParser.expression_return);


        object char_literal713_tree=null;

         const string elementName = "default_argument"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 209) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1358:1: ( '=' expression )
            // cs.g:1359:2: '=' expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal713=(IToken)Match(input,96,FOLLOW_96_in_default_argument7636); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal713_tree = (object)adaptor.Create(char_literal713);
            		adaptor.AddChild(root_0, char_literal713_tree);
            	}
            	PushFollow(FOLLOW_expression_in_default_argument7638);
            	expression714 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression714.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 209, default_argument_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "default_argument"

    public class parameter_modifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "parameter_modifier"
    // cs.g:1360:1: parameter_modifier : ( 'ref' | 'out' | 'this' );
    public csParser.parameter_modifier_return parameter_modifier() // throws RecognitionException [1]
    {   
        csParser.parameter_modifier_return retval = new csParser.parameter_modifier_return();
        retval.Start = input.LT(1);
        int parameter_modifier_StartIndex = input.Index();
        object root_0 = null;

        IToken set715 = null;

        object set715_tree=null;

         const string elementName = "parameter_modifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 210) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1363:1: ( 'ref' | 'out' | 'this' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set715 = (IToken)input.LT(1);
            	if ( input.LA(1) == 90 || (input.LA(1) >= 130 && input.LA(1) <= 131) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set715));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 210, parameter_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "parameter_modifier"

    public class parameter_array_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "parameter_array"
    // cs.g:1365:1: parameter_array : ( attributes )? ( 'params' )? array_type identifier ;
    public csParser.parameter_array_return parameter_array() // throws RecognitionException [1]
    {   
        csParser.parameter_array_return retval = new csParser.parameter_array_return();
        retval.Start = input.LT(1);
        int parameter_array_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal717 = null;
        csParser.attributes_return attributes716 = default(csParser.attributes_return);

        csParser.array_type_return array_type718 = default(csParser.array_type_return);

        csParser.identifier_return identifier719 = default(csParser.identifier_return);


        object string_literal717_tree=null;

         const string elementName = "parameter_array"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 211) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1368:1: ( ( attributes )? ( 'params' )? array_type identifier )
            // cs.g:1369:2: ( attributes )? ( 'params' )? array_type identifier
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1369:2: ( attributes )?
            	int alt241 = 2;
            	int LA241_0 = input.LA(1);

            	if ( (LA241_0 == 97) )
            	{
            	    alt241 = 1;
            	}
            	switch (alt241) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_parameter_array7685);
            	        	attributes716 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes716.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1369:16: ( 'params' )?
            	int alt242 = 2;
            	int LA242_0 = input.LA(1);

            	if ( (LA242_0 == 200) )
            	{
            	    alt242 = 1;
            	}
            	switch (alt242) 
            	{
            	    case 1 :
            	        // cs.g:0:0: 'params'
            	        {
            	        	string_literal717=(IToken)Match(input,200,FOLLOW_200_in_parameter_array7690); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal717_tree = (object)adaptor.Create(string_literal717);
            	        		adaptor.AddChild(root_0, string_literal717_tree);
            	        	}

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_array_type_in_parameter_array7695);
            	array_type718 = array_type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, array_type718.Tree);
            	PushFollow(FOLLOW_identifier_in_parameter_array7699);
            	identifier719 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier719.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 211, parameter_array_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "parameter_array"

    public class property_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "property_declaration"
    // cs.g:1370:1: property_declaration : ( attributes )? ( property_modifiers )? type member_name '{' accessor_declarations '}' ;
    public csParser.property_declaration_return property_declaration() // throws RecognitionException [1]
    {   
        csParser.property_declaration_return retval = new csParser.property_declaration_return();
        retval.Start = input.LT(1);
        int property_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal724 = null;
        IToken char_literal726 = null;
        csParser.attributes_return attributes720 = default(csParser.attributes_return);

        csParser.property_modifiers_return property_modifiers721 = default(csParser.property_modifiers_return);

        csParser.type_return type722 = default(csParser.type_return);

        csParser.member_name_return member_name723 = default(csParser.member_name_return);

        csParser.accessor_declarations_return accessor_declarations725 = default(csParser.accessor_declarations_return);


        object char_literal724_tree=null;
        object char_literal726_tree=null;

         const string elementName = "property_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 212) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1373:1: ( ( attributes )? ( property_modifiers )? type member_name '{' accessor_declarations '}' )
            // cs.g:1374:2: ( attributes )? ( property_modifiers )? type member_name '{' accessor_declarations '}'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1374:2: ( attributes )?
            	int alt243 = 2;
            	int LA243_0 = input.LA(1);

            	if ( (LA243_0 == 97) )
            	{
            	    alt243 = 1;
            	}
            	switch (alt243) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_property_declaration7719);
            	        	attributes720 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes720.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1374:16: ( property_modifiers )?
            	int alt244 = 2;
            	int LA244_0 = input.LA(1);

            	if ( (LA244_0 == 94 || LA244_0 == 138 || (LA244_0 >= 170 && LA244_0 <= 174) || (LA244_0 >= 190 && LA244_0 <= 192) || (LA244_0 >= 197 && LA244_0 <= 198)) )
            	{
            	    alt244 = 1;
            	}
            	switch (alt244) 
            	{
            	    case 1 :
            	        // cs.g:0:0: property_modifiers
            	        {
            	        	PushFollow(FOLLOW_property_modifiers_in_property_declaration7724);
            	        	property_modifiers721 = property_modifiers();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, property_modifiers721.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_type_in_property_declaration7729);
            	type722 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type722.Tree);
            	PushFollow(FOLLOW_member_name_in_property_declaration7733);
            	member_name723 = member_name();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_name723.Tree);
            	char_literal724=(IToken)Match(input,92,FOLLOW_92_in_property_declaration7737); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal724_tree = (object)adaptor.Create(char_literal724);
            		adaptor.AddChild(root_0, char_literal724_tree);
            	}
            	PushFollow(FOLLOW_accessor_declarations_in_property_declaration7741);
            	accessor_declarations725 = accessor_declarations();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, accessor_declarations725.Tree);
            	char_literal726=(IToken)Match(input,93,FOLLOW_93_in_property_declaration7745); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal726_tree = (object)adaptor.Create(char_literal726);
            		adaptor.AddChild(root_0, char_literal726_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 212, property_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "property_declaration"

    public class property_modifiers_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "property_modifiers"
    // cs.g:1376:1: property_modifiers : ( property_modifier )+ ;
    public csParser.property_modifiers_return property_modifiers() // throws RecognitionException [1]
    {   
        csParser.property_modifiers_return retval = new csParser.property_modifiers_return();
        retval.Start = input.LT(1);
        int property_modifiers_StartIndex = input.Index();
        object root_0 = null;

        csParser.property_modifier_return property_modifier727 = default(csParser.property_modifier_return);



         const string elementName = "property_modifiers"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 213) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1379:1: ( ( property_modifier )+ )
            // cs.g:1380:2: ( property_modifier )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1380:2: ( property_modifier )+
            	int cnt245 = 0;
            	do 
            	{
            	    int alt245 = 2;
            	    int LA245_0 = input.LA(1);

            	    if ( (LA245_0 == 94 || LA245_0 == 138 || (LA245_0 >= 170 && LA245_0 <= 174) || (LA245_0 >= 190 && LA245_0 <= 192) || (LA245_0 >= 197 && LA245_0 <= 198)) )
            	    {
            	        alt245 = 1;
            	    }


            	    switch (alt245) 
            		{
            			case 1 :
            			    // cs.g:0:0: property_modifier
            			    {
            			    	PushFollow(FOLLOW_property_modifier_in_property_modifiers7766);
            			    	property_modifier727 = property_modifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, property_modifier727.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt245 >= 1 ) goto loop245;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee245 =
            		                new EarlyExitException(245, input);
            		            throw eee245;
            	    }
            	    cnt245++;
            	} while (true);

            	loop245:
            		;	// Stops C# compiler whining that label 'loop245' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 213, property_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "property_modifiers"

    public class property_modifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "property_modifier"
    // cs.g:1381:1: property_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' | 'unsafe' );
    public csParser.property_modifier_return property_modifier() // throws RecognitionException [1]
    {   
        csParser.property_modifier_return retval = new csParser.property_modifier_return();
        retval.Start = input.LT(1);
        int property_modifier_StartIndex = input.Index();
        object root_0 = null;

        IToken set728 = null;

        object set728_tree=null;

         const string elementName = "property_modifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 214) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1384:1: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' | 'unsafe' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set728 = (IToken)input.LT(1);
            	if ( input.LA(1) == 94 || input.LA(1) == 138 || (input.LA(1) >= 170 && input.LA(1) <= 174) || (input.LA(1) >= 190 && input.LA(1) <= 192) || (input.LA(1) >= 197 && input.LA(1) <= 198) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set728));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 214, property_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "property_modifier"

    public class member_name_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "member_name"
    // cs.g:1386:1: member_name : qid ( generic_parameter_list qid_part )? ;
    public csParser.member_name_return member_name() // throws RecognitionException [1]
    {   
        csParser.member_name_return retval = new csParser.member_name_return();
        retval.Start = input.LT(1);
        int member_name_StartIndex = input.Index();
        object root_0 = null;

        csParser.qid_return qid729 = default(csParser.qid_return);

        csParser.generic_parameter_list_return generic_parameter_list730 = default(csParser.generic_parameter_list_return);

        csParser.qid_part_return qid_part731 = default(csParser.qid_part_return);



         const string elementName = "member_name"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 215) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1389:1: ( qid ( generic_parameter_list qid_part )? )
            // cs.g:1390:2: qid ( generic_parameter_list qid_part )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_qid_in_member_name7851);
            	qid729 = qid();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, qid729.Tree);
            	// cs.g:1390:6: ( generic_parameter_list qid_part )?
            	int alt246 = 2;
            	int LA246_0 = input.LA(1);

            	if ( (LA246_0 == 123) )
            	{
            	    int LA246_1 = input.LA(2);

            	    if ( (synpred413_cs()) )
            	    {
            	        alt246 = 1;
            	    }
            	}
            	switch (alt246) 
            	{
            	    case 1 :
            	        // cs.g:1390:7: generic_parameter_list qid_part
            	        {
            	        	PushFollow(FOLLOW_generic_parameter_list_in_member_name7854);
            	        	generic_parameter_list730 = generic_parameter_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_parameter_list730.Tree);
            	        	PushFollow(FOLLOW_qid_part_in_member_name7856);
            	        	qid_part731 = qid_part();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, qid_part731.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 215, member_name_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "member_name"

    public class accessor_declarations_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "accessor_declarations"
    // cs.g:1391:1: accessor_declarations : ( ( get_accessor_declaration ( set_accessor_declaration )? ) | ( set_accessor_declaration ( get_accessor_declaration )? ) );
    public csParser.accessor_declarations_return accessor_declarations() // throws RecognitionException [1]
    {   
        csParser.accessor_declarations_return retval = new csParser.accessor_declarations_return();
        retval.Start = input.LT(1);
        int accessor_declarations_StartIndex = input.Index();
        object root_0 = null;

        csParser.get_accessor_declaration_return get_accessor_declaration732 = default(csParser.get_accessor_declaration_return);

        csParser.set_accessor_declaration_return set_accessor_declaration733 = default(csParser.set_accessor_declaration_return);

        csParser.set_accessor_declaration_return set_accessor_declaration734 = default(csParser.set_accessor_declaration_return);

        csParser.get_accessor_declaration_return get_accessor_declaration735 = default(csParser.get_accessor_declaration_return);



         const string elementName = "accessor_declarations"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 216) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1394:1: ( ( get_accessor_declaration ( set_accessor_declaration )? ) | ( set_accessor_declaration ( get_accessor_declaration )? ) )
            int alt249 = 2;
            switch ( input.LA(1) ) 
            {
            case 97:
            	{
                int LA249_1 = input.LA(2);

                if ( (synpred415_cs()) )
                {
                    alt249 = 1;
                }
                else if ( (true) )
                {
                    alt249 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d249s1 =
                        new NoViableAltException("", 249, 1, input);

                    throw nvae_d249s1;
                }
                }
                break;
            case 170:
            	{
                int LA249_2 = input.LA(2);

                if ( (synpred415_cs()) )
                {
                    alt249 = 1;
                }
                else if ( (true) )
                {
                    alt249 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d249s2 =
                        new NoViableAltException("", 249, 2, input);

                    throw nvae_d249s2;
                }
                }
                break;
            case 171:
            	{
                int LA249_3 = input.LA(2);

                if ( (synpred415_cs()) )
                {
                    alt249 = 1;
                }
                else if ( (true) )
                {
                    alt249 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d249s3 =
                        new NoViableAltException("", 249, 3, input);

                    throw nvae_d249s3;
                }
                }
                break;
            case 172:
            	{
                int LA249_4 = input.LA(2);

                if ( (synpred415_cs()) )
                {
                    alt249 = 1;
                }
                else if ( (true) )
                {
                    alt249 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d249s4 =
                        new NoViableAltException("", 249, 4, input);

                    throw nvae_d249s4;
                }
                }
                break;
            case 173:
            	{
                int LA249_5 = input.LA(2);

                if ( (synpred415_cs()) )
                {
                    alt249 = 1;
                }
                else if ( (true) )
                {
                    alt249 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d249s5 =
                        new NoViableAltException("", 249, 5, input);

                    throw nvae_d249s5;
                }
                }
                break;
            case GET:
            	{
                alt249 = 1;
                }
                break;
            case SET:
            	{
                alt249 = 2;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d249s0 =
            	        new NoViableAltException("", 249, 0, input);

            	    throw nvae_d249s0;
            }

            switch (alt249) 
            {
                case 1 :
                    // cs.g:1395:2: ( get_accessor_declaration ( set_accessor_declaration )? )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:1395:2: ( get_accessor_declaration ( set_accessor_declaration )? )
                    	// cs.g:1395:3: get_accessor_declaration ( set_accessor_declaration )?
                    	{
                    		PushFollow(FOLLOW_get_accessor_declaration_in_accessor_declarations7881);
                    		get_accessor_declaration732 = get_accessor_declaration();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, get_accessor_declaration732.Tree);
                    		// cs.g:1395:30: ( set_accessor_declaration )?
                    		int alt247 = 2;
                    		int LA247_0 = input.LA(1);

                    		if ( (LA247_0 == SET || LA247_0 == 97 || (LA247_0 >= 170 && LA247_0 <= 173)) )
                    		{
                    		    alt247 = 1;
                    		}
                    		switch (alt247) 
                    		{
                    		    case 1 :
                    		        // cs.g:0:0: set_accessor_declaration
                    		        {
                    		        	PushFollow(FOLLOW_set_accessor_declaration_in_accessor_declarations7885);
                    		        	set_accessor_declaration733 = set_accessor_declaration();
                    		        	state.followingStackPointer--;
                    		        	if (state.failed) return retval;
                    		        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, set_accessor_declaration733.Tree);

                    		        }
                    		        break;

                    		}


                    	}


                    }
                    break;
                case 2 :
                    // cs.g:1396:4: ( set_accessor_declaration ( get_accessor_declaration )? )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:1396:4: ( set_accessor_declaration ( get_accessor_declaration )? )
                    	// cs.g:1396:5: set_accessor_declaration ( get_accessor_declaration )?
                    	{
                    		PushFollow(FOLLOW_set_accessor_declaration_in_accessor_declarations7893);
                    		set_accessor_declaration734 = set_accessor_declaration();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, set_accessor_declaration734.Tree);
                    		// cs.g:1396:32: ( get_accessor_declaration )?
                    		int alt248 = 2;
                    		int LA248_0 = input.LA(1);

                    		if ( (LA248_0 == GET || LA248_0 == 97 || (LA248_0 >= 170 && LA248_0 <= 173)) )
                    		{
                    		    alt248 = 1;
                    		}
                    		switch (alt248) 
                    		{
                    		    case 1 :
                    		        // cs.g:0:0: get_accessor_declaration
                    		        {
                    		        	PushFollow(FOLLOW_get_accessor_declaration_in_accessor_declarations7897);
                    		        	get_accessor_declaration735 = get_accessor_declaration();
                    		        	state.followingStackPointer--;
                    		        	if (state.failed) return retval;
                    		        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, get_accessor_declaration735.Tree);

                    		        }
                    		        break;

                    		}


                    	}


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 216, accessor_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "accessor_declarations"

    public class get_accessor_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "get_accessor_declaration"
    // cs.g:1397:1: get_accessor_declaration : ( attributes )? ( accessor_modifier )? 'get' accessor_body ;
    public csParser.get_accessor_declaration_return get_accessor_declaration() // throws RecognitionException [1]
    {   
        csParser.get_accessor_declaration_return retval = new csParser.get_accessor_declaration_return();
        retval.Start = input.LT(1);
        int get_accessor_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal738 = null;
        csParser.attributes_return attributes736 = default(csParser.attributes_return);

        csParser.accessor_modifier_return accessor_modifier737 = default(csParser.accessor_modifier_return);

        csParser.accessor_body_return accessor_body739 = default(csParser.accessor_body_return);


        object string_literal738_tree=null;

         const string elementName = "get_accessor_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 217) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1400:1: ( ( attributes )? ( accessor_modifier )? 'get' accessor_body )
            // cs.g:1401:2: ( attributes )? ( accessor_modifier )? 'get' accessor_body
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1401:2: ( attributes )?
            	int alt250 = 2;
            	int LA250_0 = input.LA(1);

            	if ( (LA250_0 == 97) )
            	{
            	    alt250 = 1;
            	}
            	switch (alt250) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_get_accessor_declaration7919);
            	        	attributes736 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes736.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1401:16: ( accessor_modifier )?
            	int alt251 = 2;
            	int LA251_0 = input.LA(1);

            	if ( ((LA251_0 >= 170 && LA251_0 <= 173)) )
            	{
            	    alt251 = 1;
            	}
            	switch (alt251) 
            	{
            	    case 1 :
            	        // cs.g:0:0: accessor_modifier
            	        {
            	        	PushFollow(FOLLOW_accessor_modifier_in_get_accessor_declaration7924);
            	        	accessor_modifier737 = accessor_modifier();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, accessor_modifier737.Tree);

            	        }
            	        break;

            	}

            	string_literal738=(IToken)Match(input,GET,FOLLOW_GET_in_get_accessor_declaration7929); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal738_tree = (object)adaptor.Create(string_literal738);
            		adaptor.AddChild(root_0, string_literal738_tree);
            	}
            	PushFollow(FOLLOW_accessor_body_in_get_accessor_declaration7933);
            	accessor_body739 = accessor_body();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, accessor_body739.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 217, get_accessor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "get_accessor_declaration"

    public class set_accessor_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "set_accessor_declaration"
    // cs.g:1402:1: set_accessor_declaration : ( attributes )? ( accessor_modifier )? 'set' accessor_body ;
    public csParser.set_accessor_declaration_return set_accessor_declaration() // throws RecognitionException [1]
    {   
        csParser.set_accessor_declaration_return retval = new csParser.set_accessor_declaration_return();
        retval.Start = input.LT(1);
        int set_accessor_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal742 = null;
        csParser.attributes_return attributes740 = default(csParser.attributes_return);

        csParser.accessor_modifier_return accessor_modifier741 = default(csParser.accessor_modifier_return);

        csParser.accessor_body_return accessor_body743 = default(csParser.accessor_body_return);


        object string_literal742_tree=null;

         const string elementName = "set_accessor_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 218) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1405:1: ( ( attributes )? ( accessor_modifier )? 'set' accessor_body )
            // cs.g:1406:2: ( attributes )? ( accessor_modifier )? 'set' accessor_body
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1406:2: ( attributes )?
            	int alt252 = 2;
            	int LA252_0 = input.LA(1);

            	if ( (LA252_0 == 97) )
            	{
            	    alt252 = 1;
            	}
            	switch (alt252) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_set_accessor_declaration7953);
            	        	attributes740 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes740.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1406:16: ( accessor_modifier )?
            	int alt253 = 2;
            	int LA253_0 = input.LA(1);

            	if ( ((LA253_0 >= 170 && LA253_0 <= 173)) )
            	{
            	    alt253 = 1;
            	}
            	switch (alt253) 
            	{
            	    case 1 :
            	        // cs.g:0:0: accessor_modifier
            	        {
            	        	PushFollow(FOLLOW_accessor_modifier_in_set_accessor_declaration7958);
            	        	accessor_modifier741 = accessor_modifier();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, accessor_modifier741.Tree);

            	        }
            	        break;

            	}

            	string_literal742=(IToken)Match(input,SET,FOLLOW_SET_in_set_accessor_declaration7963); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal742_tree = (object)adaptor.Create(string_literal742);
            		adaptor.AddChild(root_0, string_literal742_tree);
            	}
            	PushFollow(FOLLOW_accessor_body_in_set_accessor_declaration7967);
            	accessor_body743 = accessor_body();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, accessor_body743.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 218, set_accessor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "set_accessor_declaration"

    public class accessor_modifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "accessor_modifier"
    // cs.g:1407:1: accessor_modifier : ( 'public' | 'protected' | 'internal' | 'private' | ( 'protected' 'internal' ) | ( 'internal' 'protected' ) ) ;
    public csParser.accessor_modifier_return accessor_modifier() // throws RecognitionException [1]
    {   
        csParser.accessor_modifier_return retval = new csParser.accessor_modifier_return();
        retval.Start = input.LT(1);
        int accessor_modifier_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal744 = null;
        IToken string_literal745 = null;
        IToken string_literal746 = null;
        IToken string_literal747 = null;
        IToken string_literal748 = null;
        IToken string_literal749 = null;
        IToken string_literal750 = null;
        IToken string_literal751 = null;

        object string_literal744_tree=null;
        object string_literal745_tree=null;
        object string_literal746_tree=null;
        object string_literal747_tree=null;
        object string_literal748_tree=null;
        object string_literal749_tree=null;
        object string_literal750_tree=null;
        object string_literal751_tree=null;

         const string elementName = "accessor_modifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 219) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1410:1: ( ( 'public' | 'protected' | 'internal' | 'private' | ( 'protected' 'internal' ) | ( 'internal' 'protected' ) ) )
            // cs.g:1411:2: ( 'public' | 'protected' | 'internal' | 'private' | ( 'protected' 'internal' ) | ( 'internal' 'protected' ) )
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1411:2: ( 'public' | 'protected' | 'internal' | 'private' | ( 'protected' 'internal' ) | ( 'internal' 'protected' ) )
            	int alt254 = 6;
            	switch ( input.LA(1) ) 
            	{
            	case 170:
            		{
            	    alt254 = 1;
            	    }
            	    break;
            	case 171:
            		{
            	    int LA254_2 = input.LA(2);

            	    if ( (LA254_2 == 172) )
            	    {
            	        alt254 = 5;
            	    }
            	    else if ( (LA254_2 == EOF || (LA254_2 >= GET && LA254_2 <= SET)) )
            	    {
            	        alt254 = 2;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d254s2 =
            	            new NoViableAltException("", 254, 2, input);

            	        throw nvae_d254s2;
            	    }
            	    }
            	    break;
            	case 172:
            		{
            	    int LA254_3 = input.LA(2);

            	    if ( (LA254_3 == 171) )
            	    {
            	        alt254 = 6;
            	    }
            	    else if ( (LA254_3 == EOF || (LA254_3 >= GET && LA254_3 <= SET)) )
            	    {
            	        alt254 = 3;
            	    }
            	    else 
            	    {
            	        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	        NoViableAltException nvae_d254s3 =
            	            new NoViableAltException("", 254, 3, input);

            	        throw nvae_d254s3;
            	    }
            	    }
            	    break;
            	case 173:
            		{
            	    alt254 = 4;
            	    }
            	    break;
            		default:
            		    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		    NoViableAltException nvae_d254s0 =
            		        new NoViableAltException("", 254, 0, input);

            		    throw nvae_d254s0;
            	}

            	switch (alt254) 
            	{
            	    case 1 :
            	        // cs.g:1411:3: 'public'
            	        {
            	        	string_literal744=(IToken)Match(input,170,FOLLOW_170_in_accessor_modifier7988); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal744_tree = (object)adaptor.Create(string_literal744);
            	        		adaptor.AddChild(root_0, string_literal744_tree);
            	        	}

            	        }
            	        break;
            	    case 2 :
            	        // cs.g:1411:14: 'protected'
            	        {
            	        	string_literal745=(IToken)Match(input,171,FOLLOW_171_in_accessor_modifier7992); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal745_tree = (object)adaptor.Create(string_literal745);
            	        		adaptor.AddChild(root_0, string_literal745_tree);
            	        	}

            	        }
            	        break;
            	    case 3 :
            	        // cs.g:1411:28: 'internal'
            	        {
            	        	string_literal746=(IToken)Match(input,172,FOLLOW_172_in_accessor_modifier7996); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal746_tree = (object)adaptor.Create(string_literal746);
            	        		adaptor.AddChild(root_0, string_literal746_tree);
            	        	}

            	        }
            	        break;
            	    case 4 :
            	        // cs.g:1411:41: 'private'
            	        {
            	        	string_literal747=(IToken)Match(input,173,FOLLOW_173_in_accessor_modifier8000); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal747_tree = (object)adaptor.Create(string_literal747);
            	        		adaptor.AddChild(root_0, string_literal747_tree);
            	        	}

            	        }
            	        break;
            	    case 5 :
            	        // cs.g:1411:53: ( 'protected' 'internal' )
            	        {
            	        	// cs.g:1411:53: ( 'protected' 'internal' )
            	        	// cs.g:1411:54: 'protected' 'internal'
            	        	{
            	        		string_literal748=(IToken)Match(input,171,FOLLOW_171_in_accessor_modifier8005); if (state.failed) return retval;
            	        		if ( state.backtracking == 0 )
            	        		{string_literal748_tree = (object)adaptor.Create(string_literal748);
            	        			adaptor.AddChild(root_0, string_literal748_tree);
            	        		}
            	        		string_literal749=(IToken)Match(input,172,FOLLOW_172_in_accessor_modifier8009); if (state.failed) return retval;
            	        		if ( state.backtracking == 0 )
            	        		{string_literal749_tree = (object)adaptor.Create(string_literal749);
            	        			adaptor.AddChild(root_0, string_literal749_tree);
            	        		}

            	        	}


            	        }
            	        break;
            	    case 6 :
            	        // cs.g:1411:82: ( 'internal' 'protected' )
            	        {
            	        	// cs.g:1411:82: ( 'internal' 'protected' )
            	        	// cs.g:1411:83: 'internal' 'protected'
            	        	{
            	        		string_literal750=(IToken)Match(input,172,FOLLOW_172_in_accessor_modifier8015); if (state.failed) return retval;
            	        		if ( state.backtracking == 0 )
            	        		{string_literal750_tree = (object)adaptor.Create(string_literal750);
            	        			adaptor.AddChild(root_0, string_literal750_tree);
            	        		}
            	        		string_literal751=(IToken)Match(input,171,FOLLOW_171_in_accessor_modifier8019); if (state.failed) return retval;
            	        		if ( state.backtracking == 0 )
            	        		{string_literal751_tree = (object)adaptor.Create(string_literal751);
            	        			adaptor.AddChild(root_0, string_literal751_tree);
            	        		}

            	        	}


            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 219, accessor_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "accessor_modifier"

    public class accessor_body_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "accessor_body"
    // cs.g:1412:1: accessor_body : block ;
    public csParser.accessor_body_return accessor_body() // throws RecognitionException [1]
    {   
        csParser.accessor_body_return retval = new csParser.accessor_body_return();
        retval.Start = input.LT(1);
        int accessor_body_StartIndex = input.Index();
        object root_0 = null;

        csParser.block_return block752 = default(csParser.block_return);



         const string elementName = "accessor_body"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 220) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1415:1: ( block )
            // cs.g:1416:2: block
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_block_in_accessor_body8041);
            	block752 = block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block752.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 220, accessor_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "accessor_body"

    public class event_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "event_declaration"
    // cs.g:1418:1: event_declaration : ( ( ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';' ) | ( ( attributes )? ( event_modifiers )? 'event' type member_name '{' event_accessor_declarations '}' ) );
    public csParser.event_declaration_return event_declaration() // throws RecognitionException [1]
    {   
        csParser.event_declaration_return retval = new csParser.event_declaration_return();
        retval.Start = input.LT(1);
        int event_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal755 = null;
        IToken char_literal758 = null;
        IToken string_literal761 = null;
        IToken char_literal764 = null;
        IToken char_literal766 = null;
        csParser.attributes_return attributes753 = default(csParser.attributes_return);

        csParser.event_modifiers_return event_modifiers754 = default(csParser.event_modifiers_return);

        csParser.type_return type756 = default(csParser.type_return);

        csParser.variable_declarators_return variable_declarators757 = default(csParser.variable_declarators_return);

        csParser.attributes_return attributes759 = default(csParser.attributes_return);

        csParser.event_modifiers_return event_modifiers760 = default(csParser.event_modifiers_return);

        csParser.type_return type762 = default(csParser.type_return);

        csParser.member_name_return member_name763 = default(csParser.member_name_return);

        csParser.event_accessor_declarations_return event_accessor_declarations765 = default(csParser.event_accessor_declarations_return);


        object string_literal755_tree=null;
        object char_literal758_tree=null;
        object string_literal761_tree=null;
        object char_literal764_tree=null;
        object char_literal766_tree=null;

         const string elementName = "event_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 221) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1421:1: ( ( ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';' ) | ( ( attributes )? ( event_modifiers )? 'event' type member_name '{' event_accessor_declarations '}' ) )
            int alt259 = 2;
            switch ( input.LA(1) ) 
            {
            case 97:
            	{
                int LA259_1 = input.LA(2);

                if ( (synpred428_cs()) )
                {
                    alt259 = 1;
                }
                else if ( (true) )
                {
                    alt259 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d259s1 =
                        new NoViableAltException("", 259, 1, input);

                    throw nvae_d259s1;
                }
                }
                break;
            case 94:
            case 138:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 190:
            case 191:
            case 192:
            case 197:
            case 198:
            	{
                int LA259_2 = input.LA(2);

                if ( (synpred428_cs()) )
                {
                    alt259 = 1;
                }
                else if ( (true) )
                {
                    alt259 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d259s2 =
                        new NoViableAltException("", 259, 2, input);

                    throw nvae_d259s2;
                }
                }
                break;
            case 104:
            	{
                int LA259_3 = input.LA(2);

                if ( (synpred428_cs()) )
                {
                    alt259 = 1;
                }
                else if ( (true) )
                {
                    alt259 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d259s3 =
                        new NoViableAltException("", 259, 3, input);

                    throw nvae_d259s3;
                }
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d259s0 =
            	        new NoViableAltException("", 259, 0, input);

            	    throw nvae_d259s0;
            }

            switch (alt259) 
            {
                case 1 :
                    // cs.g:1422:2: ( ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';' )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:1422:2: ( ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';' )
                    	// cs.g:1422:4: ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';'
                    	{
                    		// cs.g:1422:4: ( attributes )?
                    		int alt255 = 2;
                    		int LA255_0 = input.LA(1);

                    		if ( (LA255_0 == 97) )
                    		{
                    		    alt255 = 1;
                    		}
                    		switch (alt255) 
                    		{
                    		    case 1 :
                    		        // cs.g:0:0: attributes
                    		        {
                    		        	PushFollow(FOLLOW_attributes_in_event_declaration8065);
                    		        	attributes753 = attributes();
                    		        	state.followingStackPointer--;
                    		        	if (state.failed) return retval;
                    		        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes753.Tree);

                    		        }
                    		        break;

                    		}

                    		// cs.g:1422:18: ( event_modifiers )?
                    		int alt256 = 2;
                    		int LA256_0 = input.LA(1);

                    		if ( (LA256_0 == 94 || LA256_0 == 138 || (LA256_0 >= 170 && LA256_0 <= 174) || (LA256_0 >= 190 && LA256_0 <= 192) || (LA256_0 >= 197 && LA256_0 <= 198)) )
                    		{
                    		    alt256 = 1;
                    		}
                    		switch (alt256) 
                    		{
                    		    case 1 :
                    		        // cs.g:0:0: event_modifiers
                    		        {
                    		        	PushFollow(FOLLOW_event_modifiers_in_event_declaration8070);
                    		        	event_modifiers754 = event_modifiers();
                    		        	state.followingStackPointer--;
                    		        	if (state.failed) return retval;
                    		        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, event_modifiers754.Tree);

                    		        }
                    		        break;

                    		}

                    		string_literal755=(IToken)Match(input,104,FOLLOW_104_in_event_declaration8075); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal755_tree = (object)adaptor.Create(string_literal755);
                    			adaptor.AddChild(root_0, string_literal755_tree);
                    		}
                    		PushFollow(FOLLOW_type_in_event_declaration8079);
                    		type756 = type();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type756.Tree);
                    		PushFollow(FOLLOW_variable_declarators_in_event_declaration8083);
                    		variable_declarators757 = variable_declarators();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_declarators757.Tree);
                    		char_literal758=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_event_declaration8087); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal758_tree = (object)adaptor.Create(char_literal758);
                    			adaptor.AddChild(root_0, char_literal758_tree);
                    		}

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:1423:4: ( ( attributes )? ( event_modifiers )? 'event' type member_name '{' event_accessor_declarations '}' )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:1423:4: ( ( attributes )? ( event_modifiers )? 'event' type member_name '{' event_accessor_declarations '}' )
                    	// cs.g:1423:6: ( attributes )? ( event_modifiers )? 'event' type member_name '{' event_accessor_declarations '}'
                    	{
                    		// cs.g:1423:6: ( attributes )?
                    		int alt257 = 2;
                    		int LA257_0 = input.LA(1);

                    		if ( (LA257_0 == 97) )
                    		{
                    		    alt257 = 1;
                    		}
                    		switch (alt257) 
                    		{
                    		    case 1 :
                    		        // cs.g:0:0: attributes
                    		        {
                    		        	PushFollow(FOLLOW_attributes_in_event_declaration8095);
                    		        	attributes759 = attributes();
                    		        	state.followingStackPointer--;
                    		        	if (state.failed) return retval;
                    		        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes759.Tree);

                    		        }
                    		        break;

                    		}

                    		// cs.g:1423:20: ( event_modifiers )?
                    		int alt258 = 2;
                    		int LA258_0 = input.LA(1);

                    		if ( (LA258_0 == 94 || LA258_0 == 138 || (LA258_0 >= 170 && LA258_0 <= 174) || (LA258_0 >= 190 && LA258_0 <= 192) || (LA258_0 >= 197 && LA258_0 <= 198)) )
                    		{
                    		    alt258 = 1;
                    		}
                    		switch (alt258) 
                    		{
                    		    case 1 :
                    		        // cs.g:0:0: event_modifiers
                    		        {
                    		        	PushFollow(FOLLOW_event_modifiers_in_event_declaration8100);
                    		        	event_modifiers760 = event_modifiers();
                    		        	state.followingStackPointer--;
                    		        	if (state.failed) return retval;
                    		        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, event_modifiers760.Tree);

                    		        }
                    		        break;

                    		}

                    		string_literal761=(IToken)Match(input,104,FOLLOW_104_in_event_declaration8105); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal761_tree = (object)adaptor.Create(string_literal761);
                    			adaptor.AddChild(root_0, string_literal761_tree);
                    		}
                    		PushFollow(FOLLOW_type_in_event_declaration8109);
                    		type762 = type();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type762.Tree);
                    		PushFollow(FOLLOW_member_name_in_event_declaration8113);
                    		member_name763 = member_name();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_name763.Tree);
                    		char_literal764=(IToken)Match(input,92,FOLLOW_92_in_event_declaration8117); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal764_tree = (object)adaptor.Create(char_literal764);
                    			adaptor.AddChild(root_0, char_literal764_tree);
                    		}
                    		PushFollow(FOLLOW_event_accessor_declarations_in_event_declaration8121);
                    		event_accessor_declarations765 = event_accessor_declarations();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, event_accessor_declarations765.Tree);
                    		char_literal766=(IToken)Match(input,93,FOLLOW_93_in_event_declaration8125); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal766_tree = (object)adaptor.Create(char_literal766);
                    			adaptor.AddChild(root_0, char_literal766_tree);
                    		}

                    	}


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 221, event_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "event_declaration"

    public class event_modifiers_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "event_modifiers"
    // cs.g:1424:1: event_modifiers : ( event_modifier )+ ;
    public csParser.event_modifiers_return event_modifiers() // throws RecognitionException [1]
    {   
        csParser.event_modifiers_return retval = new csParser.event_modifiers_return();
        retval.Start = input.LT(1);
        int event_modifiers_StartIndex = input.Index();
        object root_0 = null;

        csParser.event_modifier_return event_modifier767 = default(csParser.event_modifier_return);



         const string elementName = "event_modifiers"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 222) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1427:1: ( ( event_modifier )+ )
            // cs.g:1428:2: ( event_modifier )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1428:2: ( event_modifier )+
            	int cnt260 = 0;
            	do 
            	{
            	    int alt260 = 2;
            	    int LA260_0 = input.LA(1);

            	    if ( (LA260_0 == 94 || LA260_0 == 138 || (LA260_0 >= 170 && LA260_0 <= 174) || (LA260_0 >= 190 && LA260_0 <= 192) || (LA260_0 >= 197 && LA260_0 <= 198)) )
            	    {
            	        alt260 = 1;
            	    }


            	    switch (alt260) 
            		{
            			case 1 :
            			    // cs.g:0:0: event_modifier
            			    {
            			    	PushFollow(FOLLOW_event_modifier_in_event_modifiers8146);
            			    	event_modifier767 = event_modifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, event_modifier767.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt260 >= 1 ) goto loop260;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee260 =
            		                new EarlyExitException(260, input);
            		            throw eee260;
            	    }
            	    cnt260++;
            	} while (true);

            	loop260:
            		;	// Stops C# compiler whining that label 'loop260' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 222, event_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "event_modifiers"

    public class event_modifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "event_modifier"
    // cs.g:1429:1: event_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' | 'unsafe' );
    public csParser.event_modifier_return event_modifier() // throws RecognitionException [1]
    {   
        csParser.event_modifier_return retval = new csParser.event_modifier_return();
        retval.Start = input.LT(1);
        int event_modifier_StartIndex = input.Index();
        object root_0 = null;

        IToken set768 = null;

        object set768_tree=null;

         const string elementName = "event_modifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 223) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1432:1: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' | 'unsafe' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set768 = (IToken)input.LT(1);
            	if ( input.LA(1) == 94 || input.LA(1) == 138 || (input.LA(1) >= 170 && input.LA(1) <= 174) || (input.LA(1) >= 190 && input.LA(1) <= 192) || (input.LA(1) >= 197 && input.LA(1) <= 198) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set768));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 223, event_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "event_modifier"

    public class event_accessor_declarations_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "event_accessor_declarations"
    // cs.g:1435:1: event_accessor_declarations : ( ( add_accessor_declaration remove_accessor_declaration ) | ( remove_accessor_declaration add_accessor_declaration ) );
    public csParser.event_accessor_declarations_return event_accessor_declarations() // throws RecognitionException [1]
    {   
        csParser.event_accessor_declarations_return retval = new csParser.event_accessor_declarations_return();
        retval.Start = input.LT(1);
        int event_accessor_declarations_StartIndex = input.Index();
        object root_0 = null;

        csParser.add_accessor_declaration_return add_accessor_declaration769 = default(csParser.add_accessor_declaration_return);

        csParser.remove_accessor_declaration_return remove_accessor_declaration770 = default(csParser.remove_accessor_declaration_return);

        csParser.remove_accessor_declaration_return remove_accessor_declaration771 = default(csParser.remove_accessor_declaration_return);

        csParser.add_accessor_declaration_return add_accessor_declaration772 = default(csParser.add_accessor_declaration_return);



         const string elementName = "event_accessor_declarations"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 224) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1438:1: ( ( add_accessor_declaration remove_accessor_declaration ) | ( remove_accessor_declaration add_accessor_declaration ) )
            int alt261 = 2;
            switch ( input.LA(1) ) 
            {
            case 97:
            	{
                int LA261_1 = input.LA(2);

                if ( (synpred443_cs()) )
                {
                    alt261 = 1;
                }
                else if ( (true) )
                {
                    alt261 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d261s1 =
                        new NoViableAltException("", 261, 1, input);

                    throw nvae_d261s1;
                }
                }
                break;
            case 201:
            	{
                alt261 = 1;
                }
                break;
            case 202:
            	{
                alt261 = 2;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d261s0 =
            	        new NoViableAltException("", 261, 0, input);

            	    throw nvae_d261s0;
            }

            switch (alt261) 
            {
                case 1 :
                    // cs.g:1439:2: ( add_accessor_declaration remove_accessor_declaration )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:1439:2: ( add_accessor_declaration remove_accessor_declaration )
                    	// cs.g:1439:3: add_accessor_declaration remove_accessor_declaration
                    	{
                    		PushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations8234);
                    		add_accessor_declaration769 = add_accessor_declaration();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, add_accessor_declaration769.Tree);
                    		PushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations8238);
                    		remove_accessor_declaration770 = remove_accessor_declaration();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, remove_accessor_declaration770.Tree);

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:1440:4: ( remove_accessor_declaration add_accessor_declaration )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:1440:4: ( remove_accessor_declaration add_accessor_declaration )
                    	// cs.g:1440:5: remove_accessor_declaration add_accessor_declaration
                    	{
                    		PushFollow(FOLLOW_remove_accessor_declaration_in_event_accessor_declarations8245);
                    		remove_accessor_declaration771 = remove_accessor_declaration();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, remove_accessor_declaration771.Tree);
                    		PushFollow(FOLLOW_add_accessor_declaration_in_event_accessor_declarations8249);
                    		add_accessor_declaration772 = add_accessor_declaration();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, add_accessor_declaration772.Tree);

                    	}


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 224, event_accessor_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "event_accessor_declarations"

    public class add_accessor_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "add_accessor_declaration"
    // cs.g:1441:1: add_accessor_declaration : ( attributes )? 'add' block ;
    public csParser.add_accessor_declaration_return add_accessor_declaration() // throws RecognitionException [1]
    {   
        csParser.add_accessor_declaration_return retval = new csParser.add_accessor_declaration_return();
        retval.Start = input.LT(1);
        int add_accessor_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal774 = null;
        csParser.attributes_return attributes773 = default(csParser.attributes_return);

        csParser.block_return block775 = default(csParser.block_return);


        object string_literal774_tree=null;

         const string elementName = "add_accessor_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 225) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1444:1: ( ( attributes )? 'add' block )
            // cs.g:1445:2: ( attributes )? 'add' block
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1445:2: ( attributes )?
            	int alt262 = 2;
            	int LA262_0 = input.LA(1);

            	if ( (LA262_0 == 97) )
            	{
            	    alt262 = 1;
            	}
            	switch (alt262) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_add_accessor_declaration8270);
            	        	attributes773 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes773.Tree);

            	        }
            	        break;

            	}

            	string_literal774=(IToken)Match(input,201,FOLLOW_201_in_add_accessor_declaration8275); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal774_tree = (object)adaptor.Create(string_literal774);
            		adaptor.AddChild(root_0, string_literal774_tree);
            	}
            	PushFollow(FOLLOW_block_in_add_accessor_declaration8279);
            	block775 = block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block775.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 225, add_accessor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "add_accessor_declaration"

    public class remove_accessor_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "remove_accessor_declaration"
    // cs.g:1446:1: remove_accessor_declaration : ( attributes )? 'remove' block ;
    public csParser.remove_accessor_declaration_return remove_accessor_declaration() // throws RecognitionException [1]
    {   
        csParser.remove_accessor_declaration_return retval = new csParser.remove_accessor_declaration_return();
        retval.Start = input.LT(1);
        int remove_accessor_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal777 = null;
        csParser.attributes_return attributes776 = default(csParser.attributes_return);

        csParser.block_return block778 = default(csParser.block_return);


        object string_literal777_tree=null;

         const string elementName = "remove_accessor_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 226) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1449:1: ( ( attributes )? 'remove' block )
            // cs.g:1450:2: ( attributes )? 'remove' block
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1450:2: ( attributes )?
            	int alt263 = 2;
            	int LA263_0 = input.LA(1);

            	if ( (LA263_0 == 97) )
            	{
            	    alt263 = 1;
            	}
            	switch (alt263) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_remove_accessor_declaration8299);
            	        	attributes776 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes776.Tree);

            	        }
            	        break;

            	}

            	string_literal777=(IToken)Match(input,202,FOLLOW_202_in_remove_accessor_declaration8304); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal777_tree = (object)adaptor.Create(string_literal777);
            		adaptor.AddChild(root_0, string_literal777_tree);
            	}
            	PushFollow(FOLLOW_block_in_remove_accessor_declaration8308);
            	block778 = block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block778.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 226, remove_accessor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "remove_accessor_declaration"

    public class indexer_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "indexer_declaration"
    // cs.g:1451:1: indexer_declaration : ( attributes )? ( indexer_modifiers )? indexer_declarator '{' accessor_declarations '}' ;
    public csParser.indexer_declaration_return indexer_declaration() // throws RecognitionException [1]
    {   
        csParser.indexer_declaration_return retval = new csParser.indexer_declaration_return();
        retval.Start = input.LT(1);
        int indexer_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal782 = null;
        IToken char_literal784 = null;
        csParser.attributes_return attributes779 = default(csParser.attributes_return);

        csParser.indexer_modifiers_return indexer_modifiers780 = default(csParser.indexer_modifiers_return);

        csParser.indexer_declarator_return indexer_declarator781 = default(csParser.indexer_declarator_return);

        csParser.accessor_declarations_return accessor_declarations783 = default(csParser.accessor_declarations_return);


        object char_literal782_tree=null;
        object char_literal784_tree=null;

         const string elementName = "indexer_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 227) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1454:1: ( ( attributes )? ( indexer_modifiers )? indexer_declarator '{' accessor_declarations '}' )
            // cs.g:1455:2: ( attributes )? ( indexer_modifiers )? indexer_declarator '{' accessor_declarations '}'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1455:2: ( attributes )?
            	int alt264 = 2;
            	int LA264_0 = input.LA(1);

            	if ( (LA264_0 == 97) )
            	{
            	    alt264 = 1;
            	}
            	switch (alt264) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_indexer_declaration8328);
            	        	attributes779 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes779.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1455:16: ( indexer_modifiers )?
            	int alt265 = 2;
            	int LA265_0 = input.LA(1);

            	if ( (LA265_0 == 94 || LA265_0 == 138 || (LA265_0 >= 170 && LA265_0 <= 174) || (LA265_0 >= 190 && LA265_0 <= 191) || (LA265_0 >= 197 && LA265_0 <= 198)) )
            	{
            	    alt265 = 1;
            	}
            	switch (alt265) 
            	{
            	    case 1 :
            	        // cs.g:0:0: indexer_modifiers
            	        {
            	        	PushFollow(FOLLOW_indexer_modifiers_in_indexer_declaration8333);
            	        	indexer_modifiers780 = indexer_modifiers();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, indexer_modifiers780.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_indexer_declarator_in_indexer_declaration8338);
            	indexer_declarator781 = indexer_declarator();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, indexer_declarator781.Tree);
            	char_literal782=(IToken)Match(input,92,FOLLOW_92_in_indexer_declaration8342); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal782_tree = (object)adaptor.Create(char_literal782);
            		adaptor.AddChild(root_0, char_literal782_tree);
            	}
            	PushFollow(FOLLOW_accessor_declarations_in_indexer_declaration8346);
            	accessor_declarations783 = accessor_declarations();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, accessor_declarations783.Tree);
            	char_literal784=(IToken)Match(input,93,FOLLOW_93_in_indexer_declaration8350); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal784_tree = (object)adaptor.Create(char_literal784);
            		adaptor.AddChild(root_0, char_literal784_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 227, indexer_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "indexer_declaration"

    public class indexer_modifiers_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "indexer_modifiers"
    // cs.g:1456:1: indexer_modifiers : ( indexer_modifier )+ ;
    public csParser.indexer_modifiers_return indexer_modifiers() // throws RecognitionException [1]
    {   
        csParser.indexer_modifiers_return retval = new csParser.indexer_modifiers_return();
        retval.Start = input.LT(1);
        int indexer_modifiers_StartIndex = input.Index();
        object root_0 = null;

        csParser.indexer_modifier_return indexer_modifier785 = default(csParser.indexer_modifier_return);



         const string elementName = "indexer_modifiers"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 228) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1459:1: ( ( indexer_modifier )+ )
            // cs.g:1460:2: ( indexer_modifier )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1460:2: ( indexer_modifier )+
            	int cnt266 = 0;
            	do 
            	{
            	    int alt266 = 2;
            	    int LA266_0 = input.LA(1);

            	    if ( (LA266_0 == 94 || LA266_0 == 138 || (LA266_0 >= 170 && LA266_0 <= 174) || (LA266_0 >= 190 && LA266_0 <= 191) || (LA266_0 >= 197 && LA266_0 <= 198)) )
            	    {
            	        alt266 = 1;
            	    }


            	    switch (alt266) 
            		{
            			case 1 :
            			    // cs.g:0:0: indexer_modifier
            			    {
            			    	PushFollow(FOLLOW_indexer_modifier_in_indexer_modifiers8370);
            			    	indexer_modifier785 = indexer_modifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, indexer_modifier785.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt266 >= 1 ) goto loop266;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee266 =
            		                new EarlyExitException(266, input);
            		            throw eee266;
            	    }
            	    cnt266++;
            	} while (true);

            	loop266:
            		;	// Stops C# compiler whining that label 'loop266' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 228, indexer_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "indexer_modifiers"

    public class indexer_modifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "indexer_modifier"
    // cs.g:1461:1: indexer_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' | 'unsafe' );
    public csParser.indexer_modifier_return indexer_modifier() // throws RecognitionException [1]
    {   
        csParser.indexer_modifier_return retval = new csParser.indexer_modifier_return();
        retval.Start = input.LT(1);
        int indexer_modifier_StartIndex = input.Index();
        object root_0 = null;

        IToken set786 = null;

        object set786_tree=null;

         const string elementName = "indexer_modifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 229) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1464:1: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' | 'unsafe' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set786 = (IToken)input.LT(1);
            	if ( input.LA(1) == 94 || input.LA(1) == 138 || (input.LA(1) >= 170 && input.LA(1) <= 174) || (input.LA(1) >= 190 && input.LA(1) <= 191) || (input.LA(1) >= 197 && input.LA(1) <= 198) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set786));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 229, indexer_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "indexer_modifier"

    public class indexer_declarator_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "indexer_declarator"
    // cs.g:1466:1: indexer_declarator : type ( type_name '.' )? 'this' '[' formal_parameter_list ']' ;
    public csParser.indexer_declarator_return indexer_declarator() // throws RecognitionException [1]
    {   
        csParser.indexer_declarator_return retval = new csParser.indexer_declarator_return();
        retval.Start = input.LT(1);
        int indexer_declarator_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal789 = null;
        IToken string_literal790 = null;
        IToken char_literal791 = null;
        IToken char_literal793 = null;
        csParser.type_return type787 = default(csParser.type_return);

        csParser.type_name_return type_name788 = default(csParser.type_name_return);

        csParser.formal_parameter_list_return formal_parameter_list792 = default(csParser.formal_parameter_list_return);


        object char_literal789_tree=null;
        object string_literal790_tree=null;
        object char_literal791_tree=null;
        object char_literal793_tree=null;

         const string elementName = "indexer_declarator"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 230) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1469:1: ( type ( type_name '.' )? 'this' '[' formal_parameter_list ']' )
            // cs.g:1470:2: type ( type_name '.' )? 'this' '[' formal_parameter_list ']'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_type_in_indexer_declarator8451);
            	type787 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type787.Tree);
            	// cs.g:1470:9: ( type_name '.' )?
            	int alt267 = 2;
            	int LA267_0 = input.LA(1);

            	if ( (LA267_0 == IDENTIFIER || LA267_0 == SET || LA267_0 == 95 || (LA267_0 >= 101 && LA267_0 <= 107) || LA267_0 == 109 || (LA267_0 >= 175 && LA267_0 <= 187) || LA267_0 == 199 || (LA267_0 >= 201 && LA267_0 <= 202) || LA267_0 == 208 || (LA267_0 >= 225 && LA267_0 <= 226)) )
            	{
            	    alt267 = 1;
            	}
            	switch (alt267) 
            	{
            	    case 1 :
            	        // cs.g:1470:10: type_name '.'
            	        {
            	        	PushFollow(FOLLOW_type_name_in_indexer_declarator8456);
            	        	type_name788 = type_name();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_name788.Tree);
            	        	char_literal789=(IToken)Match(input,DOT,FOLLOW_DOT_in_indexer_declarator8458); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal789_tree = (object)adaptor.Create(char_literal789);
            	        		adaptor.AddChild(root_0, char_literal789_tree);
            	        	}

            	        }
            	        break;

            	}

            	string_literal790=(IToken)Match(input,90,FOLLOW_90_in_indexer_declarator8462); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal790_tree = (object)adaptor.Create(string_literal790);
            		adaptor.AddChild(root_0, string_literal790_tree);
            	}
            	char_literal791=(IToken)Match(input,97,FOLLOW_97_in_indexer_declarator8466); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal791_tree = (object)adaptor.Create(char_literal791);
            		adaptor.AddChild(root_0, char_literal791_tree);
            	}
            	PushFollow(FOLLOW_formal_parameter_list_in_indexer_declarator8470);
            	formal_parameter_list792 = formal_parameter_list();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, formal_parameter_list792.Tree);
            	char_literal793=(IToken)Match(input,99,FOLLOW_99_in_indexer_declarator8474); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal793_tree = (object)adaptor.Create(char_literal793);
            		adaptor.AddChild(root_0, char_literal793_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 230, indexer_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "indexer_declarator"

    public class operator_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "operator_declaration"
    // cs.g:1471:1: operator_declaration : ( attributes )? operator_modifiers operator_declarator operator_body ;
    public csParser.operator_declaration_return operator_declaration() // throws RecognitionException [1]
    {   
        csParser.operator_declaration_return retval = new csParser.operator_declaration_return();
        retval.Start = input.LT(1);
        int operator_declaration_StartIndex = input.Index();
        object root_0 = null;

        csParser.attributes_return attributes794 = default(csParser.attributes_return);

        csParser.operator_modifiers_return operator_modifiers795 = default(csParser.operator_modifiers_return);

        csParser.operator_declarator_return operator_declarator796 = default(csParser.operator_declarator_return);

        csParser.operator_body_return operator_body797 = default(csParser.operator_body_return);



         const string elementName = "operator_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 231) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1474:1: ( ( attributes )? operator_modifiers operator_declarator operator_body )
            // cs.g:1475:2: ( attributes )? operator_modifiers operator_declarator operator_body
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1475:2: ( attributes )?
            	int alt268 = 2;
            	int LA268_0 = input.LA(1);

            	if ( (LA268_0 == 97) )
            	{
            	    alt268 = 1;
            	}
            	switch (alt268) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_operator_declaration8494);
            	        	attributes794 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes794.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_operator_modifiers_in_operator_declaration8499);
            	operator_modifiers795 = operator_modifiers();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, operator_modifiers795.Tree);
            	PushFollow(FOLLOW_operator_declarator_in_operator_declaration8503);
            	operator_declarator796 = operator_declarator();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, operator_declarator796.Tree);
            	PushFollow(FOLLOW_operator_body_in_operator_declaration8507);
            	operator_body797 = operator_body();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, operator_body797.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 231, operator_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "operator_declaration"

    public class operator_modifiers_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "operator_modifiers"
    // cs.g:1476:1: operator_modifiers : ( operator_modifier )+ ;
    public csParser.operator_modifiers_return operator_modifiers() // throws RecognitionException [1]
    {   
        csParser.operator_modifiers_return retval = new csParser.operator_modifiers_return();
        retval.Start = input.LT(1);
        int operator_modifiers_StartIndex = input.Index();
        object root_0 = null;

        csParser.operator_modifier_return operator_modifier798 = default(csParser.operator_modifier_return);



         const string elementName = "operator_modifiers"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 232) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1479:1: ( ( operator_modifier )+ )
            // cs.g:1480:2: ( operator_modifier )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1480:2: ( operator_modifier )+
            	int cnt269 = 0;
            	do 
            	{
            	    int alt269 = 2;
            	    int LA269_0 = input.LA(1);

            	    if ( (LA269_0 == 94 || LA269_0 == 170 || LA269_0 == 174 || LA269_0 == 192) )
            	    {
            	        alt269 = 1;
            	    }


            	    switch (alt269) 
            		{
            			case 1 :
            			    // cs.g:0:0: operator_modifier
            			    {
            			    	PushFollow(FOLLOW_operator_modifier_in_operator_modifiers8527);
            			    	operator_modifier798 = operator_modifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, operator_modifier798.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt269 >= 1 ) goto loop269;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee269 =
            		                new EarlyExitException(269, input);
            		            throw eee269;
            	    }
            	    cnt269++;
            	} while (true);

            	loop269:
            		;	// Stops C# compiler whining that label 'loop269' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 232, operator_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "operator_modifiers"

    public class operator_modifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "operator_modifier"
    // cs.g:1481:1: operator_modifier : ( 'public' | 'static' | 'extern' | 'unsafe' );
    public csParser.operator_modifier_return operator_modifier() // throws RecognitionException [1]
    {   
        csParser.operator_modifier_return retval = new csParser.operator_modifier_return();
        retval.Start = input.LT(1);
        int operator_modifier_StartIndex = input.Index();
        object root_0 = null;

        IToken set799 = null;

        object set799_tree=null;

         const string elementName = "operator_modifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 233) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1484:1: ( 'public' | 'static' | 'extern' | 'unsafe' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set799 = (IToken)input.LT(1);
            	if ( input.LA(1) == 94 || input.LA(1) == 170 || input.LA(1) == 174 || input.LA(1) == 192 ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set799));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 233, operator_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "operator_modifier"

    public class operator_declarator_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "operator_declarator"
    // cs.g:1486:1: operator_declarator : ( unary_operator_declarator | binary_operator_declarator | conversion_operator_declarator );
    public csParser.operator_declarator_return operator_declarator() // throws RecognitionException [1]
    {   
        csParser.operator_declarator_return retval = new csParser.operator_declarator_return();
        retval.Start = input.LT(1);
        int operator_declarator_StartIndex = input.Index();
        object root_0 = null;

        csParser.unary_operator_declarator_return unary_operator_declarator800 = default(csParser.unary_operator_declarator_return);

        csParser.binary_operator_declarator_return binary_operator_declarator801 = default(csParser.binary_operator_declarator_return);

        csParser.conversion_operator_declarator_return conversion_operator_declarator802 = default(csParser.conversion_operator_declarator_return);



         const string elementName = "operator_declarator"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 234) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1489:1: ( unary_operator_declarator | binary_operator_declarator | conversion_operator_declarator )
            int alt270 = 3;
            switch ( input.LA(1) ) 
            {
            case IDENTIFIER:
            	{
                int LA270_1 = input.LA(2);

                if ( (synpred465_cs()) )
                {
                    alt270 = 1;
                }
                else if ( (synpred466_cs()) )
                {
                    alt270 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d270s1 =
                        new NoViableAltException("", 270, 1, input);

                    throw nvae_d270s1;
                }
                }
                break;
            case SET:
            case 95:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 109:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 199:
            case 201:
            case 202:
            case 208:
            case 225:
            case 226:
            	{
                int LA270_2 = input.LA(2);

                if ( (synpred465_cs()) )
                {
                    alt270 = 1;
                }
                else if ( (synpred466_cs()) )
                {
                    alt270 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d270s2 =
                        new NoViableAltException("", 270, 2, input);

                    throw nvae_d270s2;
                }
                }
                break;
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            	{
                int LA270_3 = input.LA(2);

                if ( (synpred465_cs()) )
                {
                    alt270 = 1;
                }
                else if ( (synpred466_cs()) )
                {
                    alt270 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d270s3 =
                        new NoViableAltException("", 270, 3, input);

                    throw nvae_d270s3;
                }
                }
                break;
            case 113:
            	{
                int LA270_4 = input.LA(2);

                if ( (synpred465_cs()) )
                {
                    alt270 = 1;
                }
                else if ( (synpred466_cs()) )
                {
                    alt270 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d270s4 =
                        new NoViableAltException("", 270, 4, input);

                    throw nvae_d270s4;
                }
                }
                break;
            case 204:
            case 205:
            	{
                alt270 = 3;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d270s0 =
            	        new NoViableAltException("", 270, 0, input);

            	    throw nvae_d270s0;
            }

            switch (alt270) 
            {
                case 1 :
                    // cs.g:1490:2: unary_operator_declarator
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_unary_operator_declarator_in_operator_declarator8580);
                    	unary_operator_declarator800 = unary_operator_declarator();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_operator_declarator800.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1491:4: binary_operator_declarator
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_binary_operator_declarator_in_operator_declarator8585);
                    	binary_operator_declarator801 = binary_operator_declarator();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, binary_operator_declarator801.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:1492:4: conversion_operator_declarator
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_conversion_operator_declarator_in_operator_declarator8590);
                    	conversion_operator_declarator802 = conversion_operator_declarator();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, conversion_operator_declarator802.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 234, operator_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "operator_declarator"

    public class unary_operator_declarator_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "unary_operator_declarator"
    // cs.g:1493:1: unary_operator_declarator : type 'operator' overloadable_unary_operator '(' type identifier ')' ;
    public csParser.unary_operator_declarator_return unary_operator_declarator() // throws RecognitionException [1]
    {   
        csParser.unary_operator_declarator_return retval = new csParser.unary_operator_declarator_return();
        retval.Start = input.LT(1);
        int unary_operator_declarator_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal804 = null;
        IToken char_literal806 = null;
        IToken char_literal809 = null;
        csParser.type_return type803 = default(csParser.type_return);

        csParser.overloadable_unary_operator_return overloadable_unary_operator805 = default(csParser.overloadable_unary_operator_return);

        csParser.type_return type807 = default(csParser.type_return);

        csParser.identifier_return identifier808 = default(csParser.identifier_return);


        object string_literal804_tree=null;
        object char_literal806_tree=null;
        object char_literal809_tree=null;

         const string elementName = "unary_operator_declarator"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 235) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1496:1: ( type 'operator' overloadable_unary_operator '(' type identifier ')' )
            // cs.g:1497:2: type 'operator' overloadable_unary_operator '(' type identifier ')'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_type_in_unary_operator_declarator8609);
            	type803 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type803.Tree);
            	string_literal804=(IToken)Match(input,203,FOLLOW_203_in_unary_operator_declarator8613); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal804_tree = (object)adaptor.Create(string_literal804);
            		adaptor.AddChild(root_0, string_literal804_tree);
            	}
            	PushFollow(FOLLOW_overloadable_unary_operator_in_unary_operator_declarator8617);
            	overloadable_unary_operator805 = overloadable_unary_operator();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, overloadable_unary_operator805.Tree);
            	char_literal806=(IToken)Match(input,110,FOLLOW_110_in_unary_operator_declarator8621); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal806_tree = (object)adaptor.Create(char_literal806);
            		adaptor.AddChild(root_0, char_literal806_tree);
            	}
            	PushFollow(FOLLOW_type_in_unary_operator_declarator8625);
            	type807 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type807.Tree);
            	PushFollow(FOLLOW_identifier_in_unary_operator_declarator8629);
            	identifier808 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier808.Tree);
            	char_literal809=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_unary_operator_declarator8633); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal809_tree = (object)adaptor.Create(char_literal809);
            		adaptor.AddChild(root_0, char_literal809_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 235, unary_operator_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unary_operator_declarator"

    public class overloadable_unary_operator_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "overloadable_unary_operator"
    // cs.g:1498:1: overloadable_unary_operator : ( '+' | '-' | '!' | '~' | '++' | '--' | 'true' | 'false' );
    public csParser.overloadable_unary_operator_return overloadable_unary_operator() // throws RecognitionException [1]
    {   
        csParser.overloadable_unary_operator_return retval = new csParser.overloadable_unary_operator_return();
        retval.Start = input.LT(1);
        int overloadable_unary_operator_StartIndex = input.Index();
        object root_0 = null;

        IToken set810 = null;

        object set810_tree=null;

         const string elementName = "overloadable_unary_operator"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 236) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1501:1: ( '+' | '-' | '!' | '~' | '++' | '--' | 'true' | 'false' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set810 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= TRUE && input.LA(1) <= FALSE) || input.LA(1) == MINUS || (input.LA(1) >= 124 && input.LA(1) <= 128) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set810));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 236, overloadable_unary_operator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "overloadable_unary_operator"

    public class binary_operator_declarator_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "binary_operator_declarator"
    // cs.g:1503:1: binary_operator_declarator : type 'operator' overloadable_binary_operator '(' type identifier ',' type identifier ')' ;
    public csParser.binary_operator_declarator_return binary_operator_declarator() // throws RecognitionException [1]
    {   
        csParser.binary_operator_declarator_return retval = new csParser.binary_operator_declarator_return();
        retval.Start = input.LT(1);
        int binary_operator_declarator_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal812 = null;
        IToken char_literal814 = null;
        IToken char_literal817 = null;
        IToken char_literal820 = null;
        csParser.type_return type811 = default(csParser.type_return);

        csParser.overloadable_binary_operator_return overloadable_binary_operator813 = default(csParser.overloadable_binary_operator_return);

        csParser.type_return type815 = default(csParser.type_return);

        csParser.identifier_return identifier816 = default(csParser.identifier_return);

        csParser.type_return type818 = default(csParser.type_return);

        csParser.identifier_return identifier819 = default(csParser.identifier_return);


        object string_literal812_tree=null;
        object char_literal814_tree=null;
        object char_literal817_tree=null;
        object char_literal820_tree=null;

         const string elementName = "binary_operator_declarator"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 237) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1506:1: ( type 'operator' overloadable_binary_operator '(' type identifier ',' type identifier ')' )
            // cs.g:1507:2: type 'operator' overloadable_binary_operator '(' type identifier ',' type identifier ')'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_type_in_binary_operator_declarator8708);
            	type811 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type811.Tree);
            	string_literal812=(IToken)Match(input,203,FOLLOW_203_in_binary_operator_declarator8712); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal812_tree = (object)adaptor.Create(string_literal812);
            		adaptor.AddChild(root_0, string_literal812_tree);
            	}
            	PushFollow(FOLLOW_overloadable_binary_operator_in_binary_operator_declarator8716);
            	overloadable_binary_operator813 = overloadable_binary_operator();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, overloadable_binary_operator813.Tree);
            	char_literal814=(IToken)Match(input,110,FOLLOW_110_in_binary_operator_declarator8720); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal814_tree = (object)adaptor.Create(char_literal814);
            		adaptor.AddChild(root_0, char_literal814_tree);
            	}
            	PushFollow(FOLLOW_type_in_binary_operator_declarator8724);
            	type815 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type815.Tree);
            	PushFollow(FOLLOW_identifier_in_binary_operator_declarator8728);
            	identifier816 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier816.Tree);
            	char_literal817=(IToken)Match(input,98,FOLLOW_98_in_binary_operator_declarator8732); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal817_tree = (object)adaptor.Create(char_literal817);
            		adaptor.AddChild(root_0, char_literal817_tree);
            	}
            	PushFollow(FOLLOW_type_in_binary_operator_declarator8736);
            	type818 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type818.Tree);
            	PushFollow(FOLLOW_identifier_in_binary_operator_declarator8740);
            	identifier819 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier819.Tree);
            	char_literal820=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_binary_operator_declarator8744); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal820_tree = (object)adaptor.Create(char_literal820);
            		adaptor.AddChild(root_0, char_literal820_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 237, binary_operator_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "binary_operator_declarator"

    public class overloadable_binary_operator_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "overloadable_binary_operator"
    // cs.g:1509:1: overloadable_binary_operator : ( '+' | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );
    public csParser.overloadable_binary_operator_return overloadable_binary_operator() // throws RecognitionException [1]
    {   
        csParser.overloadable_binary_operator_return retval = new csParser.overloadable_binary_operator_return();
        retval.Start = input.LT(1);
        int overloadable_binary_operator_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal821 = null;
        IToken char_literal822 = null;
        IToken char_literal823 = null;
        IToken char_literal824 = null;
        IToken char_literal825 = null;
        IToken char_literal826 = null;
        IToken char_literal827 = null;
        IToken char_literal828 = null;
        IToken string_literal829 = null;
        IToken char_literal830 = null;
        IToken char_literal831 = null;
        IToken string_literal832 = null;
        IToken string_literal833 = null;
        IToken char_literal834 = null;
        IToken char_literal835 = null;
        IToken string_literal836 = null;
        IToken string_literal837 = null;

        object char_literal821_tree=null;
        object char_literal822_tree=null;
        object char_literal823_tree=null;
        object char_literal824_tree=null;
        object char_literal825_tree=null;
        object char_literal826_tree=null;
        object char_literal827_tree=null;
        object char_literal828_tree=null;
        object string_literal829_tree=null;
        object char_literal830_tree=null;
        object char_literal831_tree=null;
        object string_literal832_tree=null;
        object string_literal833_tree=null;
        object char_literal834_tree=null;
        object char_literal835_tree=null;
        object string_literal836_tree=null;
        object string_literal837_tree=null;

         const string elementName = "overloadable_binary_operator"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 238) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1512:1: ( '+' | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' )
            int alt271 = 16;
            alt271 = dfa271.Predict(input);
            switch (alt271) 
            {
                case 1 :
                    // cs.g:1513:2: '+'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal821=(IToken)Match(input,124,FOLLOW_124_in_overloadable_binary_operator8765); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal821_tree = (object)adaptor.Create(char_literal821);
                    		adaptor.AddChild(root_0, char_literal821_tree);
                    	}

                    }
                    break;
                case 2 :
                    // cs.g:1513:8: '-'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal822=(IToken)Match(input,MINUS,FOLLOW_MINUS_in_overloadable_binary_operator8769); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal822_tree = (object)adaptor.Create(char_literal822);
                    		adaptor.AddChild(root_0, char_literal822_tree);
                    	}

                    }
                    break;
                case 3 :
                    // cs.g:1513:14: '*'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal823=(IToken)Match(input,111,FOLLOW_111_in_overloadable_binary_operator8773); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal823_tree = (object)adaptor.Create(char_literal823);
                    		adaptor.AddChild(root_0, char_literal823_tree);
                    	}

                    }
                    break;
                case 4 :
                    // cs.g:1513:20: '/'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal824=(IToken)Match(input,146,FOLLOW_146_in_overloadable_binary_operator8777); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal824_tree = (object)adaptor.Create(char_literal824);
                    		adaptor.AddChild(root_0, char_literal824_tree);
                    	}

                    }
                    break;
                case 5 :
                    // cs.g:1513:26: '%'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal825=(IToken)Match(input,147,FOLLOW_147_in_overloadable_binary_operator8781); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal825_tree = (object)adaptor.Create(char_literal825);
                    		adaptor.AddChild(root_0, char_literal825_tree);
                    	}

                    }
                    break;
                case 6 :
                    // cs.g:1513:32: '&'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal826=(IToken)Match(input,129,FOLLOW_129_in_overloadable_binary_operator8785); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal826_tree = (object)adaptor.Create(char_literal826);
                    		adaptor.AddChild(root_0, char_literal826_tree);
                    	}

                    }
                    break;
                case 7 :
                    // cs.g:1513:38: '|'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal827=(IToken)Match(input,156,FOLLOW_156_in_overloadable_binary_operator8789); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal827_tree = (object)adaptor.Create(char_literal827);
                    		adaptor.AddChild(root_0, char_literal827_tree);
                    	}

                    }
                    break;
                case 8 :
                    // cs.g:1513:44: '^'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal828=(IToken)Match(input,155,FOLLOW_155_in_overloadable_binary_operator8793); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal828_tree = (object)adaptor.Create(char_literal828);
                    		adaptor.AddChild(root_0, char_literal828_tree);
                    	}

                    }
                    break;
                case 9 :
                    // cs.g:1513:50: '<<'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal829=(IToken)Match(input,148,FOLLOW_148_in_overloadable_binary_operator8797); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal829_tree = (object)adaptor.Create(string_literal829);
                    		adaptor.AddChild(root_0, string_literal829_tree);
                    	}

                    }
                    break;
                case 10 :
                    // cs.g:1513:57: '>' '>'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal830=(IToken)Match(input,GT,FOLLOW_GT_in_overloadable_binary_operator8801); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal830_tree = (object)adaptor.Create(char_literal830);
                    		adaptor.AddChild(root_0, char_literal830_tree);
                    	}
                    	char_literal831=(IToken)Match(input,GT,FOLLOW_GT_in_overloadable_binary_operator8803); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal831_tree = (object)adaptor.Create(char_literal831);
                    		adaptor.AddChild(root_0, char_literal831_tree);
                    	}

                    }
                    break;
                case 11 :
                    // cs.g:1513:67: '=='
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal832=(IToken)Match(input,153,FOLLOW_153_in_overloadable_binary_operator8807); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal832_tree = (object)adaptor.Create(string_literal832);
                    		adaptor.AddChild(root_0, string_literal832_tree);
                    	}

                    }
                    break;
                case 12 :
                    // cs.g:1513:74: '!='
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal833=(IToken)Match(input,154,FOLLOW_154_in_overloadable_binary_operator8811); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal833_tree = (object)adaptor.Create(string_literal833);
                    		adaptor.AddChild(root_0, string_literal833_tree);
                    	}

                    }
                    break;
                case 13 :
                    // cs.g:1513:81: '>'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal834=(IToken)Match(input,GT,FOLLOW_GT_in_overloadable_binary_operator8815); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal834_tree = (object)adaptor.Create(char_literal834);
                    		adaptor.AddChild(root_0, char_literal834_tree);
                    	}

                    }
                    break;
                case 14 :
                    // cs.g:1513:87: '<'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal835=(IToken)Match(input,123,FOLLOW_123_in_overloadable_binary_operator8819); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal835_tree = (object)adaptor.Create(char_literal835);
                    		adaptor.AddChild(root_0, char_literal835_tree);
                    	}

                    }
                    break;
                case 15 :
                    // cs.g:1513:93: '>='
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal836=(IToken)Match(input,150,FOLLOW_150_in_overloadable_binary_operator8823); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal836_tree = (object)adaptor.Create(string_literal836);
                    		adaptor.AddChild(root_0, string_literal836_tree);
                    	}

                    }
                    break;
                case 16 :
                    // cs.g:1513:100: '<='
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal837=(IToken)Match(input,149,FOLLOW_149_in_overloadable_binary_operator8827); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal837_tree = (object)adaptor.Create(string_literal837);
                    		adaptor.AddChild(root_0, string_literal837_tree);
                    	}

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 238, overloadable_binary_operator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "overloadable_binary_operator"

    public class conversion_operator_declarator_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "conversion_operator_declarator"
    // cs.g:1514:1: conversion_operator_declarator : ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' ;
    public csParser.conversion_operator_declarator_return conversion_operator_declarator() // throws RecognitionException [1]
    {   
        csParser.conversion_operator_declarator_return retval = new csParser.conversion_operator_declarator_return();
        retval.Start = input.LT(1);
        int conversion_operator_declarator_StartIndex = input.Index();
        object root_0 = null;

        IToken set838 = null;
        IToken string_literal839 = null;
        IToken char_literal841 = null;
        IToken char_literal844 = null;
        csParser.type_return type840 = default(csParser.type_return);

        csParser.type_return type842 = default(csParser.type_return);

        csParser.identifier_return identifier843 = default(csParser.identifier_return);


        object set838_tree=null;
        object string_literal839_tree=null;
        object char_literal841_tree=null;
        object char_literal844_tree=null;

         const string elementName = "conversion_operator_declarator"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 239) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1517:1: ( ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' )
            // cs.g:1518:2: ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set838 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= 204 && input.LA(1) <= 205) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set838));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}

            	string_literal839=(IToken)Match(input,203,FOLLOW_203_in_conversion_operator_declarator8857); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal839_tree = (object)adaptor.Create(string_literal839);
            		adaptor.AddChild(root_0, string_literal839_tree);
            	}
            	PushFollow(FOLLOW_type_in_conversion_operator_declarator8861);
            	type840 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type840.Tree);
            	char_literal841=(IToken)Match(input,110,FOLLOW_110_in_conversion_operator_declarator8865); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal841_tree = (object)adaptor.Create(char_literal841);
            		adaptor.AddChild(root_0, char_literal841_tree);
            	}
            	PushFollow(FOLLOW_type_in_conversion_operator_declarator8869);
            	type842 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type842.Tree);
            	PushFollow(FOLLOW_identifier_in_conversion_operator_declarator8873);
            	identifier843 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier843.Tree);
            	char_literal844=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_conversion_operator_declarator8877); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal844_tree = (object)adaptor.Create(char_literal844);
            		adaptor.AddChild(root_0, char_literal844_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 239, conversion_operator_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "conversion_operator_declarator"

    public class operator_body_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "operator_body"
    // cs.g:1519:1: operator_body : block ;
    public csParser.operator_body_return operator_body() // throws RecognitionException [1]
    {   
        csParser.operator_body_return retval = new csParser.operator_body_return();
        retval.Start = input.LT(1);
        int operator_body_StartIndex = input.Index();
        object root_0 = null;

        csParser.block_return block845 = default(csParser.block_return);



         const string elementName = "operator_body"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 240) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1522:1: ( block )
            // cs.g:1523:2: block
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_block_in_operator_body8897);
            	block845 = block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block845.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 240, operator_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "operator_body"

    public class constructor_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "constructor_declaration"
    // cs.g:1524:1: constructor_declaration : ( attributes )? ( constructor_modifiers )? constructor_declarator constructor_body ;
    public csParser.constructor_declaration_return constructor_declaration() // throws RecognitionException [1]
    {   
        csParser.constructor_declaration_return retval = new csParser.constructor_declaration_return();
        retval.Start = input.LT(1);
        int constructor_declaration_StartIndex = input.Index();
        object root_0 = null;

        csParser.attributes_return attributes846 = default(csParser.attributes_return);

        csParser.constructor_modifiers_return constructor_modifiers847 = default(csParser.constructor_modifiers_return);

        csParser.constructor_declarator_return constructor_declarator848 = default(csParser.constructor_declarator_return);

        csParser.constructor_body_return constructor_body849 = default(csParser.constructor_body_return);



         const string elementName = "constructor_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 241) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1527:1: ( ( attributes )? ( constructor_modifiers )? constructor_declarator constructor_body )
            // cs.g:1528:2: ( attributes )? ( constructor_modifiers )? constructor_declarator constructor_body
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1528:2: ( attributes )?
            	int alt272 = 2;
            	int LA272_0 = input.LA(1);

            	if ( (LA272_0 == 97) )
            	{
            	    alt272 = 1;
            	}
            	switch (alt272) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_constructor_declaration8917);
            	        	attributes846 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes846.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1528:16: ( constructor_modifiers )?
            	int alt273 = 2;
            	int LA273_0 = input.LA(1);

            	if ( (LA273_0 == 94 || (LA273_0 >= 170 && LA273_0 <= 174)) )
            	{
            	    alt273 = 1;
            	}
            	switch (alt273) 
            	{
            	    case 1 :
            	        // cs.g:0:0: constructor_modifiers
            	        {
            	        	PushFollow(FOLLOW_constructor_modifiers_in_constructor_declaration8922);
            	        	constructor_modifiers847 = constructor_modifiers();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_modifiers847.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_constructor_declarator_in_constructor_declaration8927);
            	constructor_declarator848 = constructor_declarator();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_declarator848.Tree);
            	PushFollow(FOLLOW_constructor_body_in_constructor_declaration8931);
            	constructor_body849 = constructor_body();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_body849.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 241, constructor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constructor_declaration"

    public class constructor_modifiers_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "constructor_modifiers"
    // cs.g:1529:1: constructor_modifiers : ( constructor_modifier )+ ;
    public csParser.constructor_modifiers_return constructor_modifiers() // throws RecognitionException [1]
    {   
        csParser.constructor_modifiers_return retval = new csParser.constructor_modifiers_return();
        retval.Start = input.LT(1);
        int constructor_modifiers_StartIndex = input.Index();
        object root_0 = null;

        csParser.constructor_modifier_return constructor_modifier850 = default(csParser.constructor_modifier_return);



         const string elementName = "constructor_modifiers"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 242) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1532:1: ( ( constructor_modifier )+ )
            // cs.g:1533:2: ( constructor_modifier )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1533:2: ( constructor_modifier )+
            	int cnt274 = 0;
            	do 
            	{
            	    int alt274 = 2;
            	    int LA274_0 = input.LA(1);

            	    if ( (LA274_0 == 94 || (LA274_0 >= 170 && LA274_0 <= 174)) )
            	    {
            	        alt274 = 1;
            	    }


            	    switch (alt274) 
            		{
            			case 1 :
            			    // cs.g:0:0: constructor_modifier
            			    {
            			    	PushFollow(FOLLOW_constructor_modifier_in_constructor_modifiers8951);
            			    	constructor_modifier850 = constructor_modifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_modifier850.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt274 >= 1 ) goto loop274;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee274 =
            		                new EarlyExitException(274, input);
            		            throw eee274;
            	    }
            	    cnt274++;
            	} while (true);

            	loop274:
            		;	// Stops C# compiler whining that label 'loop274' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 242, constructor_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constructor_modifiers"

    public class constructor_modifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "constructor_modifier"
    // cs.g:1534:1: constructor_modifier : ( 'public' | 'protected' | 'internal' | 'private' | 'extern' | 'unsafe' );
    public csParser.constructor_modifier_return constructor_modifier() // throws RecognitionException [1]
    {   
        csParser.constructor_modifier_return retval = new csParser.constructor_modifier_return();
        retval.Start = input.LT(1);
        int constructor_modifier_StartIndex = input.Index();
        object root_0 = null;

        IToken set851 = null;

        object set851_tree=null;

         const string elementName = "constructor_modifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 243) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1537:1: ( 'public' | 'protected' | 'internal' | 'private' | 'extern' | 'unsafe' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set851 = (IToken)input.LT(1);
            	if ( input.LA(1) == 94 || (input.LA(1) >= 170 && input.LA(1) <= 174) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set851));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 243, constructor_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constructor_modifier"

    public class constructor_declarator_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "constructor_declarator"
    // cs.g:1539:1: constructor_declarator : identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? ;
    public csParser.constructor_declarator_return constructor_declarator() // throws RecognitionException [1]
    {   
        csParser.constructor_declarator_return retval = new csParser.constructor_declarator_return();
        retval.Start = input.LT(1);
        int constructor_declarator_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal853 = null;
        IToken char_literal855 = null;
        csParser.identifier_return identifier852 = default(csParser.identifier_return);

        csParser.formal_parameter_list_return formal_parameter_list854 = default(csParser.formal_parameter_list_return);

        csParser.constructor_initializer_return constructor_initializer856 = default(csParser.constructor_initializer_return);


        object char_literal853_tree=null;
        object char_literal855_tree=null;

         const string elementName = "constructor_declarator"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 244) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1542:1: ( identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? )
            // cs.g:1543:2: identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_identifier_in_constructor_declarator9013);
            	identifier852 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier852.Tree);
            	char_literal853=(IToken)Match(input,110,FOLLOW_110_in_constructor_declarator9017); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal853_tree = (object)adaptor.Create(char_literal853);
            		adaptor.AddChild(root_0, char_literal853_tree);
            	}
            	// cs.g:1543:21: ( formal_parameter_list )?
            	int alt275 = 2;
            	int LA275_0 = input.LA(1);

            	if ( (LA275_0 == IDENTIFIER || LA275_0 == SET || LA275_0 == 90 || LA275_0 == 95 || LA275_0 == 97 || (LA275_0 >= 101 && LA275_0 <= 107) || LA275_0 == 109 || (LA275_0 >= 113 && LA275_0 <= 122) || (LA275_0 >= 130 && LA275_0 <= 137) || (LA275_0 >= 175 && LA275_0 <= 187) || (LA275_0 >= 199 && LA275_0 <= 202) || LA275_0 == 208 || (LA275_0 >= 225 && LA275_0 <= 226)) )
            	{
            	    alt275 = 1;
            	}
            	switch (alt275) 
            	{
            	    case 1 :
            	        // cs.g:0:0: formal_parameter_list
            	        {
            	        	PushFollow(FOLLOW_formal_parameter_list_in_constructor_declarator9021);
            	        	formal_parameter_list854 = formal_parameter_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, formal_parameter_list854.Tree);

            	        }
            	        break;

            	}

            	char_literal855=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_constructor_declarator9026); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal855_tree = (object)adaptor.Create(char_literal855);
            		adaptor.AddChild(root_0, char_literal855_tree);
            	}
            	// cs.g:1543:52: ( constructor_initializer )?
            	int alt276 = 2;
            	int LA276_0 = input.LA(1);

            	if ( (LA276_0 == 100) )
            	{
            	    alt276 = 1;
            	}
            	switch (alt276) 
            	{
            	    case 1 :
            	        // cs.g:0:0: constructor_initializer
            	        {
            	        	PushFollow(FOLLOW_constructor_initializer_in_constructor_declarator9030);
            	        	constructor_initializer856 = constructor_initializer();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_initializer856.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 244, constructor_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constructor_declarator"

    public class constructor_initializer_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "constructor_initializer"
    // cs.g:1544:1: constructor_initializer : ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' ;
    public csParser.constructor_initializer_return constructor_initializer() // throws RecognitionException [1]
    {   
        csParser.constructor_initializer_return retval = new csParser.constructor_initializer_return();
        retval.Start = input.LT(1);
        int constructor_initializer_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal857 = null;
        IToken set858 = null;
        IToken char_literal859 = null;
        IToken char_literal861 = null;
        csParser.argument_list_return argument_list860 = default(csParser.argument_list_return);


        object char_literal857_tree=null;
        object set858_tree=null;
        object char_literal859_tree=null;
        object char_literal861_tree=null;

         const string elementName = "constructor_initializer"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 245) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1547:1: ( ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' )
            // cs.g:1548:2: ':' ( 'base' | 'this' ) '(' ( argument_list )? ')'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal857=(IToken)Match(input,100,FOLLOW_100_in_constructor_initializer9051); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal857_tree = (object)adaptor.Create(char_literal857);
            		adaptor.AddChild(root_0, char_literal857_tree);
            	}
            	set858 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= 90 && input.LA(1) <= 91) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set858));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}

            	char_literal859=(IToken)Match(input,110,FOLLOW_110_in_constructor_initializer9065); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal859_tree = (object)adaptor.Create(char_literal859);
            		adaptor.AddChild(root_0, char_literal859_tree);
            	}
            	// cs.g:1548:34: ( argument_list )?
            	int alt277 = 2;
            	int LA277_0 = input.LA(1);

            	if ( ((LA277_0 >= IDENTIFIER && LA277_0 <= NULL) || LA277_0 == MINUS || LA277_0 == SET || (LA277_0 >= 90 && LA277_0 <= 91) || LA277_0 == 95 || (LA277_0 >= 101 && LA277_0 <= 107) || (LA277_0 >= 109 && LA277_0 <= 111) || (LA277_0 >= 114 && LA277_0 <= 122) || (LA277_0 >= 124 && LA277_0 <= 144) || (LA277_0 >= 175 && LA277_0 <= 187) || LA277_0 == 199 || (LA277_0 >= 201 && LA277_0 <= 202) || LA277_0 == 208 || (LA277_0 >= 225 && LA277_0 <= 226)) )
            	{
            	    alt277 = 1;
            	}
            	switch (alt277) 
            	{
            	    case 1 :
            	        // cs.g:0:0: argument_list
            	        {
            	        	PushFollow(FOLLOW_argument_list_in_constructor_initializer9069);
            	        	argument_list860 = argument_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, argument_list860.Tree);

            	        }
            	        break;

            	}

            	char_literal861=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_constructor_initializer9074); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal861_tree = (object)adaptor.Create(char_literal861);
            		adaptor.AddChild(root_0, char_literal861_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 245, constructor_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constructor_initializer"

    public class constructor_body_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "constructor_body"
    // cs.g:1549:1: constructor_body : block ;
    public csParser.constructor_body_return constructor_body() // throws RecognitionException [1]
    {   
        csParser.constructor_body_return retval = new csParser.constructor_body_return();
        retval.Start = input.LT(1);
        int constructor_body_StartIndex = input.Index();
        object root_0 = null;

        csParser.block_return block862 = default(csParser.block_return);



         const string elementName = "constructor_body"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 246) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1552:1: ( block )
            // cs.g:1553:2: block
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_block_in_constructor_body9094);
            	block862 = block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block862.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 246, constructor_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constructor_body"

    public class static_constructor_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "static_constructor_declaration"
    // cs.g:1554:1: static_constructor_declaration : ( attributes )? static_constructor_modifiers identifier '(' ')' static_constructor_body ;
    public csParser.static_constructor_declaration_return static_constructor_declaration() // throws RecognitionException [1]
    {   
        csParser.static_constructor_declaration_return retval = new csParser.static_constructor_declaration_return();
        retval.Start = input.LT(1);
        int static_constructor_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal866 = null;
        IToken char_literal867 = null;
        csParser.attributes_return attributes863 = default(csParser.attributes_return);

        csParser.static_constructor_modifiers_return static_constructor_modifiers864 = default(csParser.static_constructor_modifiers_return);

        csParser.identifier_return identifier865 = default(csParser.identifier_return);

        csParser.static_constructor_body_return static_constructor_body868 = default(csParser.static_constructor_body_return);


        object char_literal866_tree=null;
        object char_literal867_tree=null;

         const string elementName = "static_constructor_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 247) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1557:1: ( ( attributes )? static_constructor_modifiers identifier '(' ')' static_constructor_body )
            // cs.g:1558:2: ( attributes )? static_constructor_modifiers identifier '(' ')' static_constructor_body
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1558:2: ( attributes )?
            	int alt278 = 2;
            	int LA278_0 = input.LA(1);

            	if ( (LA278_0 == 97) )
            	{
            	    alt278 = 1;
            	}
            	switch (alt278) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_static_constructor_declaration9114);
            	        	attributes863 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes863.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_static_constructor_modifiers_in_static_constructor_declaration9119);
            	static_constructor_modifiers864 = static_constructor_modifiers();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, static_constructor_modifiers864.Tree);
            	PushFollow(FOLLOW_identifier_in_static_constructor_declaration9122);
            	identifier865 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier865.Tree);
            	char_literal866=(IToken)Match(input,110,FOLLOW_110_in_static_constructor_declaration9126); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal866_tree = (object)adaptor.Create(char_literal866);
            		adaptor.AddChild(root_0, char_literal866_tree);
            	}
            	char_literal867=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_static_constructor_declaration9130); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal867_tree = (object)adaptor.Create(char_literal867);
            		adaptor.AddChild(root_0, char_literal867_tree);
            	}
            	PushFollow(FOLLOW_static_constructor_body_in_static_constructor_declaration9133);
            	static_constructor_body868 = static_constructor_body();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, static_constructor_body868.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 247, static_constructor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "static_constructor_declaration"

    public class static_constructor_modifiers_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "static_constructor_modifiers"
    // cs.g:1559:1: static_constructor_modifiers : ( 'extern' 'unsafe' 'static' | 'extern' 'static' ( 'unsafe' )? | 'unsafe' 'extern' 'static' | 'unsafe' 'static' ( 'extern' )? | 'static' 'extern' ( 'unsafe' )? | 'static' 'unsafe' ( 'extern' )? | 'extern' | 'unsafe' | 'static' );
    public csParser.static_constructor_modifiers_return static_constructor_modifiers() // throws RecognitionException [1]
    {   
        csParser.static_constructor_modifiers_return retval = new csParser.static_constructor_modifiers_return();
        retval.Start = input.LT(1);
        int static_constructor_modifiers_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal869 = null;
        IToken string_literal870 = null;
        IToken string_literal871 = null;
        IToken string_literal872 = null;
        IToken string_literal873 = null;
        IToken string_literal874 = null;
        IToken string_literal875 = null;
        IToken string_literal876 = null;
        IToken string_literal877 = null;
        IToken string_literal878 = null;
        IToken string_literal879 = null;
        IToken string_literal880 = null;
        IToken string_literal881 = null;
        IToken string_literal882 = null;
        IToken string_literal883 = null;
        IToken string_literal884 = null;
        IToken string_literal885 = null;
        IToken string_literal886 = null;
        IToken string_literal887 = null;
        IToken string_literal888 = null;
        IToken string_literal889 = null;

        object string_literal869_tree=null;
        object string_literal870_tree=null;
        object string_literal871_tree=null;
        object string_literal872_tree=null;
        object string_literal873_tree=null;
        object string_literal874_tree=null;
        object string_literal875_tree=null;
        object string_literal876_tree=null;
        object string_literal877_tree=null;
        object string_literal878_tree=null;
        object string_literal879_tree=null;
        object string_literal880_tree=null;
        object string_literal881_tree=null;
        object string_literal882_tree=null;
        object string_literal883_tree=null;
        object string_literal884_tree=null;
        object string_literal885_tree=null;
        object string_literal886_tree=null;
        object string_literal887_tree=null;
        object string_literal888_tree=null;
        object string_literal889_tree=null;

         const string elementName = "static_constructor_modifiers"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 248) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1562:1: ( 'extern' 'unsafe' 'static' | 'extern' 'static' ( 'unsafe' )? | 'unsafe' 'extern' 'static' | 'unsafe' 'static' ( 'extern' )? | 'static' 'extern' ( 'unsafe' )? | 'static' 'unsafe' ( 'extern' )? | 'extern' | 'unsafe' | 'static' )
            int alt283 = 9;
            alt283 = dfa283.Predict(input);
            switch (alt283) 
            {
                case 1 :
                    // cs.g:1563:4: 'extern' 'unsafe' 'static'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal869=(IToken)Match(input,94,FOLLOW_94_in_static_constructor_modifiers9155); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal869_tree = (object)adaptor.Create(string_literal869);
                    		adaptor.AddChild(root_0, string_literal869_tree);
                    	}
                    	string_literal870=(IToken)Match(input,174,FOLLOW_174_in_static_constructor_modifiers9157); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal870_tree = (object)adaptor.Create(string_literal870);
                    		adaptor.AddChild(root_0, string_literal870_tree);
                    	}
                    	string_literal871=(IToken)Match(input,192,FOLLOW_192_in_static_constructor_modifiers9159); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal871_tree = (object)adaptor.Create(string_literal871);
                    		adaptor.AddChild(root_0, string_literal871_tree);
                    	}

                    }
                    break;
                case 2 :
                    // cs.g:1564:4: 'extern' 'static' ( 'unsafe' )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal872=(IToken)Match(input,94,FOLLOW_94_in_static_constructor_modifiers9164); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal872_tree = (object)adaptor.Create(string_literal872);
                    		adaptor.AddChild(root_0, string_literal872_tree);
                    	}
                    	string_literal873=(IToken)Match(input,192,FOLLOW_192_in_static_constructor_modifiers9166); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal873_tree = (object)adaptor.Create(string_literal873);
                    		adaptor.AddChild(root_0, string_literal873_tree);
                    	}
                    	// cs.g:1564:22: ( 'unsafe' )?
                    	int alt279 = 2;
                    	int LA279_0 = input.LA(1);

                    	if ( (LA279_0 == 174) )
                    	{
                    	    alt279 = 1;
                    	}
                    	switch (alt279) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: 'unsafe'
                    	        {
                    	        	string_literal874=(IToken)Match(input,174,FOLLOW_174_in_static_constructor_modifiers9168); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{string_literal874_tree = (object)adaptor.Create(string_literal874);
                    	        		adaptor.AddChild(root_0, string_literal874_tree);
                    	        	}

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 3 :
                    // cs.g:1565:4: 'unsafe' 'extern' 'static'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal875=(IToken)Match(input,174,FOLLOW_174_in_static_constructor_modifiers9174); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal875_tree = (object)adaptor.Create(string_literal875);
                    		adaptor.AddChild(root_0, string_literal875_tree);
                    	}
                    	string_literal876=(IToken)Match(input,94,FOLLOW_94_in_static_constructor_modifiers9176); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal876_tree = (object)adaptor.Create(string_literal876);
                    		adaptor.AddChild(root_0, string_literal876_tree);
                    	}
                    	string_literal877=(IToken)Match(input,192,FOLLOW_192_in_static_constructor_modifiers9178); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal877_tree = (object)adaptor.Create(string_literal877);
                    		adaptor.AddChild(root_0, string_literal877_tree);
                    	}

                    }
                    break;
                case 4 :
                    // cs.g:1566:4: 'unsafe' 'static' ( 'extern' )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal878=(IToken)Match(input,174,FOLLOW_174_in_static_constructor_modifiers9183); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal878_tree = (object)adaptor.Create(string_literal878);
                    		adaptor.AddChild(root_0, string_literal878_tree);
                    	}
                    	string_literal879=(IToken)Match(input,192,FOLLOW_192_in_static_constructor_modifiers9185); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal879_tree = (object)adaptor.Create(string_literal879);
                    		adaptor.AddChild(root_0, string_literal879_tree);
                    	}
                    	// cs.g:1566:22: ( 'extern' )?
                    	int alt280 = 2;
                    	int LA280_0 = input.LA(1);

                    	if ( (LA280_0 == 94) )
                    	{
                    	    alt280 = 1;
                    	}
                    	switch (alt280) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: 'extern'
                    	        {
                    	        	string_literal880=(IToken)Match(input,94,FOLLOW_94_in_static_constructor_modifiers9187); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{string_literal880_tree = (object)adaptor.Create(string_literal880);
                    	        		adaptor.AddChild(root_0, string_literal880_tree);
                    	        	}

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 5 :
                    // cs.g:1567:4: 'static' 'extern' ( 'unsafe' )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal881=(IToken)Match(input,192,FOLLOW_192_in_static_constructor_modifiers9193); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal881_tree = (object)adaptor.Create(string_literal881);
                    		adaptor.AddChild(root_0, string_literal881_tree);
                    	}
                    	string_literal882=(IToken)Match(input,94,FOLLOW_94_in_static_constructor_modifiers9195); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal882_tree = (object)adaptor.Create(string_literal882);
                    		adaptor.AddChild(root_0, string_literal882_tree);
                    	}
                    	// cs.g:1567:22: ( 'unsafe' )?
                    	int alt281 = 2;
                    	int LA281_0 = input.LA(1);

                    	if ( (LA281_0 == 174) )
                    	{
                    	    alt281 = 1;
                    	}
                    	switch (alt281) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: 'unsafe'
                    	        {
                    	        	string_literal883=(IToken)Match(input,174,FOLLOW_174_in_static_constructor_modifiers9197); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{string_literal883_tree = (object)adaptor.Create(string_literal883);
                    	        		adaptor.AddChild(root_0, string_literal883_tree);
                    	        	}

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 6 :
                    // cs.g:1568:4: 'static' 'unsafe' ( 'extern' )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal884=(IToken)Match(input,192,FOLLOW_192_in_static_constructor_modifiers9203); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal884_tree = (object)adaptor.Create(string_literal884);
                    		adaptor.AddChild(root_0, string_literal884_tree);
                    	}
                    	string_literal885=(IToken)Match(input,174,FOLLOW_174_in_static_constructor_modifiers9205); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal885_tree = (object)adaptor.Create(string_literal885);
                    		adaptor.AddChild(root_0, string_literal885_tree);
                    	}
                    	// cs.g:1568:22: ( 'extern' )?
                    	int alt282 = 2;
                    	int LA282_0 = input.LA(1);

                    	if ( (LA282_0 == 94) )
                    	{
                    	    alt282 = 1;
                    	}
                    	switch (alt282) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: 'extern'
                    	        {
                    	        	string_literal886=(IToken)Match(input,94,FOLLOW_94_in_static_constructor_modifiers9207); if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 )
                    	        	{string_literal886_tree = (object)adaptor.Create(string_literal886);
                    	        		adaptor.AddChild(root_0, string_literal886_tree);
                    	        	}

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 7 :
                    // cs.g:1569:4: 'extern'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal887=(IToken)Match(input,94,FOLLOW_94_in_static_constructor_modifiers9214); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal887_tree = (object)adaptor.Create(string_literal887);
                    		adaptor.AddChild(root_0, string_literal887_tree);
                    	}

                    }
                    break;
                case 8 :
                    // cs.g:1570:4: 'unsafe'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal888=(IToken)Match(input,174,FOLLOW_174_in_static_constructor_modifiers9219); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal888_tree = (object)adaptor.Create(string_literal888);
                    		adaptor.AddChild(root_0, string_literal888_tree);
                    	}

                    }
                    break;
                case 9 :
                    // cs.g:1571:4: 'static'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal889=(IToken)Match(input,192,FOLLOW_192_in_static_constructor_modifiers9224); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal889_tree = (object)adaptor.Create(string_literal889);
                    		adaptor.AddChild(root_0, string_literal889_tree);
                    	}

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 248, static_constructor_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "static_constructor_modifiers"

    public class static_constructor_body_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "static_constructor_body"
    // cs.g:1572:1: static_constructor_body : block ;
    public csParser.static_constructor_body_return static_constructor_body() // throws RecognitionException [1]
    {   
        csParser.static_constructor_body_return retval = new csParser.static_constructor_body_return();
        retval.Start = input.LT(1);
        int static_constructor_body_StartIndex = input.Index();
        object root_0 = null;

        csParser.block_return block890 = default(csParser.block_return);



         const string elementName = "static_constructor_body"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 249) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1575:1: ( block )
            // cs.g:1576:2: block
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_block_in_static_constructor_body9243);
            	block890 = block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block890.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 249, static_constructor_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "static_constructor_body"

    public class destructor_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "destructor_declaration"
    // cs.g:1577:1: destructor_declaration : ( attributes )? ( destructor_modifiers )? '~' identifier '(' ')' destructor_body ;
    public csParser.destructor_declaration_return destructor_declaration() // throws RecognitionException [1]
    {   
        csParser.destructor_declaration_return retval = new csParser.destructor_declaration_return();
        retval.Start = input.LT(1);
        int destructor_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal893 = null;
        IToken char_literal895 = null;
        IToken char_literal896 = null;
        csParser.attributes_return attributes891 = default(csParser.attributes_return);

        csParser.destructor_modifiers_return destructor_modifiers892 = default(csParser.destructor_modifiers_return);

        csParser.identifier_return identifier894 = default(csParser.identifier_return);

        csParser.destructor_body_return destructor_body897 = default(csParser.destructor_body_return);


        object char_literal893_tree=null;
        object char_literal895_tree=null;
        object char_literal896_tree=null;

         const string elementName = "destructor_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 250) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1580:1: ( ( attributes )? ( destructor_modifiers )? '~' identifier '(' ')' destructor_body )
            // cs.g:1581:2: ( attributes )? ( destructor_modifiers )? '~' identifier '(' ')' destructor_body
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1581:2: ( attributes )?
            	int alt284 = 2;
            	int LA284_0 = input.LA(1);

            	if ( (LA284_0 == 97) )
            	{
            	    alt284 = 1;
            	}
            	switch (alt284) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_destructor_declaration9263);
            	        	attributes891 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes891.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1581:16: ( destructor_modifiers )?
            	int alt285 = 2;
            	int LA285_0 = input.LA(1);

            	if ( (LA285_0 == 94 || LA285_0 == 174) )
            	{
            	    alt285 = 1;
            	}
            	switch (alt285) 
            	{
            	    case 1 :
            	        // cs.g:0:0: destructor_modifiers
            	        {
            	        	PushFollow(FOLLOW_destructor_modifiers_in_destructor_declaration9268);
            	        	destructor_modifiers892 = destructor_modifiers();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, destructor_modifiers892.Tree);

            	        }
            	        break;

            	}

            	char_literal893=(IToken)Match(input,126,FOLLOW_126_in_destructor_declaration9273); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal893_tree = (object)adaptor.Create(char_literal893);
            		adaptor.AddChild(root_0, char_literal893_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_destructor_declaration9276);
            	identifier894 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier894.Tree);
            	char_literal895=(IToken)Match(input,110,FOLLOW_110_in_destructor_declaration9280); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal895_tree = (object)adaptor.Create(char_literal895);
            		adaptor.AddChild(root_0, char_literal895_tree);
            	}
            	char_literal896=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_destructor_declaration9284); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal896_tree = (object)adaptor.Create(char_literal896);
            		adaptor.AddChild(root_0, char_literal896_tree);
            	}
            	PushFollow(FOLLOW_destructor_body_in_destructor_declaration9289);
            	destructor_body897 = destructor_body();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, destructor_body897.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 250, destructor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "destructor_declaration"

    public class destructor_modifiers_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "destructor_modifiers"
    // cs.g:1582:1: destructor_modifiers : ( ( ( 'extern' )? 'unsafe' ) | ( 'extern' ( 'unsafe' )? ) );
    public csParser.destructor_modifiers_return destructor_modifiers() // throws RecognitionException [1]
    {   
        csParser.destructor_modifiers_return retval = new csParser.destructor_modifiers_return();
        retval.Start = input.LT(1);
        int destructor_modifiers_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal898 = null;
        IToken string_literal899 = null;
        IToken string_literal900 = null;
        IToken string_literal901 = null;

        object string_literal898_tree=null;
        object string_literal899_tree=null;
        object string_literal900_tree=null;
        object string_literal901_tree=null;

         const string elementName = "destructor_modifiers"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 251) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1585:1: ( ( ( 'extern' )? 'unsafe' ) | ( 'extern' ( 'unsafe' )? ) )
            int alt288 = 2;
            int LA288_0 = input.LA(1);

            if ( (LA288_0 == 94) )
            {
                int LA288_1 = input.LA(2);

                if ( (LA288_1 == 174) )
                {
                    int LA288_3 = input.LA(3);

                    if ( (synpred518_cs()) )
                    {
                        alt288 = 1;
                    }
                    else if ( (true) )
                    {
                        alt288 = 2;
                    }
                    else 
                    {
                        if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                        NoViableAltException nvae_d288s3 =
                            new NoViableAltException("", 288, 3, input);

                        throw nvae_d288s3;
                    }
                }
                else if ( (LA288_1 == EOF || LA288_1 == 126) )
                {
                    alt288 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d288s1 =
                        new NoViableAltException("", 288, 1, input);

                    throw nvae_d288s1;
                }
            }
            else if ( (LA288_0 == 174) )
            {
                alt288 = 1;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d288s0 =
                    new NoViableAltException("", 288, 0, input);

                throw nvae_d288s0;
            }
            switch (alt288) 
            {
                case 1 :
                    // cs.g:1586:2: ( ( 'extern' )? 'unsafe' )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:1586:2: ( ( 'extern' )? 'unsafe' )
                    	// cs.g:1586:3: ( 'extern' )? 'unsafe'
                    	{
                    		// cs.g:1586:3: ( 'extern' )?
                    		int alt286 = 2;
                    		int LA286_0 = input.LA(1);

                    		if ( (LA286_0 == 94) )
                    		{
                    		    alt286 = 1;
                    		}
                    		switch (alt286) 
                    		{
                    		    case 1 :
                    		        // cs.g:0:0: 'extern'
                    		        {
                    		        	string_literal898=(IToken)Match(input,94,FOLLOW_94_in_destructor_modifiers9310); if (state.failed) return retval;
                    		        	if ( state.backtracking == 0 )
                    		        	{string_literal898_tree = (object)adaptor.Create(string_literal898);
                    		        		adaptor.AddChild(root_0, string_literal898_tree);
                    		        	}

                    		        }
                    		        break;

                    		}

                    		string_literal899=(IToken)Match(input,174,FOLLOW_174_in_destructor_modifiers9313); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal899_tree = (object)adaptor.Create(string_literal899);
                    			adaptor.AddChild(root_0, string_literal899_tree);
                    		}

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:1587:4: ( 'extern' ( 'unsafe' )? )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:1587:4: ( 'extern' ( 'unsafe' )? )
                    	// cs.g:1587:5: 'extern' ( 'unsafe' )?
                    	{
                    		string_literal900=(IToken)Match(input,94,FOLLOW_94_in_destructor_modifiers9320); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal900_tree = (object)adaptor.Create(string_literal900);
                    			adaptor.AddChild(root_0, string_literal900_tree);
                    		}
                    		// cs.g:1587:14: ( 'unsafe' )?
                    		int alt287 = 2;
                    		int LA287_0 = input.LA(1);

                    		if ( (LA287_0 == 174) )
                    		{
                    		    alt287 = 1;
                    		}
                    		switch (alt287) 
                    		{
                    		    case 1 :
                    		        // cs.g:0:0: 'unsafe'
                    		        {
                    		        	string_literal901=(IToken)Match(input,174,FOLLOW_174_in_destructor_modifiers9322); if (state.failed) return retval;
                    		        	if ( state.backtracking == 0 )
                    		        	{string_literal901_tree = (object)adaptor.Create(string_literal901);
                    		        		adaptor.AddChild(root_0, string_literal901_tree);
                    		        	}

                    		        }
                    		        break;

                    		}


                    	}


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 251, destructor_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "destructor_modifiers"

    public class destructor_body_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "destructor_body"
    // cs.g:1588:1: destructor_body : block ;
    public csParser.destructor_body_return destructor_body() // throws RecognitionException [1]
    {   
        csParser.destructor_body_return retval = new csParser.destructor_body_return();
        retval.Start = input.LT(1);
        int destructor_body_StartIndex = input.Index();
        object root_0 = null;

        csParser.block_return block902 = default(csParser.block_return);



         const string elementName = "destructor_body"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 252) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1591:1: ( block )
            // cs.g:1592:2: block
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_block_in_destructor_body9344);
            	block902 = block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block902.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 252, destructor_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "destructor_body"

    public class struct_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "struct_declaration"
    // cs.g:1595:1: struct_declaration : ( attributes )? ( struct_modifiers )? ( 'partial' )? 'struct' identifier ( generic_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? ;
    public csParser.struct_declaration_return struct_declaration() // throws RecognitionException [1]
    {   
        csParser.struct_declaration_return retval = new csParser.struct_declaration_return();
        retval.Start = input.LT(1);
        int struct_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal905 = null;
        IToken string_literal906 = null;
        IToken char_literal912 = null;
        csParser.attributes_return attributes903 = default(csParser.attributes_return);

        csParser.struct_modifiers_return struct_modifiers904 = default(csParser.struct_modifiers_return);

        csParser.identifier_return identifier907 = default(csParser.identifier_return);

        csParser.generic_parameter_list_return generic_parameter_list908 = default(csParser.generic_parameter_list_return);

        csParser.struct_interfaces_return struct_interfaces909 = default(csParser.struct_interfaces_return);

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses910 = default(csParser.type_parameter_constraints_clauses_return);

        csParser.struct_body_return struct_body911 = default(csParser.struct_body_return);


        object string_literal905_tree=null;
        object string_literal906_tree=null;
        object char_literal912_tree=null;

         const string elementName = "struct_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 253) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1598:1: ( ( attributes )? ( struct_modifiers )? ( 'partial' )? 'struct' identifier ( generic_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? )
            // cs.g:1599:2: ( attributes )? ( struct_modifiers )? ( 'partial' )? 'struct' identifier ( generic_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1599:2: ( attributes )?
            	int alt289 = 2;
            	int LA289_0 = input.LA(1);

            	if ( (LA289_0 == 97) )
            	{
            	    alt289 = 1;
            	}
            	switch (alt289) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_struct_declaration9366);
            	        	attributes903 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes903.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1599:16: ( struct_modifiers )?
            	int alt290 = 2;
            	int LA290_0 = input.LA(1);

            	if ( (LA290_0 == 138 || (LA290_0 >= 170 && LA290_0 <= 174)) )
            	{
            	    alt290 = 1;
            	}
            	switch (alt290) 
            	{
            	    case 1 :
            	        // cs.g:0:0: struct_modifiers
            	        {
            	        	PushFollow(FOLLOW_struct_modifiers_in_struct_declaration9371);
            	        	struct_modifiers904 = struct_modifiers();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_modifiers904.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1599:36: ( 'partial' )?
            	int alt291 = 2;
            	int LA291_0 = input.LA(1);

            	if ( (LA291_0 == 188) )
            	{
            	    alt291 = 1;
            	}
            	switch (alt291) 
            	{
            	    case 1 :
            	        // cs.g:0:0: 'partial'
            	        {
            	        	string_literal905=(IToken)Match(input,188,FOLLOW_188_in_struct_declaration9376); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal905_tree = (object)adaptor.Create(string_literal905);
            	        		adaptor.AddChild(root_0, string_literal905_tree);
            	        	}

            	        }
            	        break;

            	}

            	string_literal906=(IToken)Match(input,193,FOLLOW_193_in_struct_declaration9381); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal906_tree = (object)adaptor.Create(string_literal906);
            		adaptor.AddChild(root_0, string_literal906_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_struct_declaration9385);
            	identifier907 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier907.Tree);
            	// cs.g:1599:73: ( generic_parameter_list )?
            	int alt292 = 2;
            	int LA292_0 = input.LA(1);

            	if ( (LA292_0 == 123) )
            	{
            	    alt292 = 1;
            	}
            	switch (alt292) 
            	{
            	    case 1 :
            	        // cs.g:0:0: generic_parameter_list
            	        {
            	        	PushFollow(FOLLOW_generic_parameter_list_in_struct_declaration9389);
            	        	generic_parameter_list908 = generic_parameter_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_parameter_list908.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1600:4: ( struct_interfaces )?
            	int alt293 = 2;
            	int LA293_0 = input.LA(1);

            	if ( (LA293_0 == 100) )
            	{
            	    alt293 = 1;
            	}
            	switch (alt293) 
            	{
            	    case 1 :
            	        // cs.g:0:0: struct_interfaces
            	        {
            	        	PushFollow(FOLLOW_struct_interfaces_in_struct_declaration9395);
            	        	struct_interfaces909 = struct_interfaces();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_interfaces909.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1600:25: ( type_parameter_constraints_clauses )?
            	int alt294 = 2;
            	int LA294_0 = input.LA(1);

            	if ( (LA294_0 == 187) )
            	{
            	    alt294 = 1;
            	}
            	switch (alt294) 
            	{
            	    case 1 :
            	        // cs.g:0:0: type_parameter_constraints_clauses
            	        {
            	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_struct_declaration9400);
            	        	type_parameter_constraints_clauses910 = type_parameter_constraints_clauses();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameter_constraints_clauses910.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_struct_body_in_struct_declaration9405);
            	struct_body911 = struct_body();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_body911.Tree);
            	// cs.g:1600:77: ( ';' )?
            	int alt295 = 2;
            	int LA295_0 = input.LA(1);

            	if ( (LA295_0 == SEMI) )
            	{
            	    alt295 = 1;
            	}
            	switch (alt295) 
            	{
            	    case 1 :
            	        // cs.g:0:0: ';'
            	        {
            	        	char_literal912=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_struct_declaration9409); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal912_tree = (object)adaptor.Create(char_literal912);
            	        		adaptor.AddChild(root_0, char_literal912_tree);
            	        	}

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 253, struct_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "struct_declaration"

    public class struct_modifiers_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "struct_modifiers"
    // cs.g:1601:1: struct_modifiers : ( struct_modifier )+ ;
    public csParser.struct_modifiers_return struct_modifiers() // throws RecognitionException [1]
    {   
        csParser.struct_modifiers_return retval = new csParser.struct_modifiers_return();
        retval.Start = input.LT(1);
        int struct_modifiers_StartIndex = input.Index();
        object root_0 = null;

        csParser.struct_modifier_return struct_modifier913 = default(csParser.struct_modifier_return);



         const string elementName = "struct_modifiers"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 254) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1604:1: ( ( struct_modifier )+ )
            // cs.g:1605:2: ( struct_modifier )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1605:2: ( struct_modifier )+
            	int cnt296 = 0;
            	do 
            	{
            	    int alt296 = 2;
            	    int LA296_0 = input.LA(1);

            	    if ( (LA296_0 == 138 || (LA296_0 >= 170 && LA296_0 <= 174)) )
            	    {
            	        alt296 = 1;
            	    }


            	    switch (alt296) 
            		{
            			case 1 :
            			    // cs.g:0:0: struct_modifier
            			    {
            			    	PushFollow(FOLLOW_struct_modifier_in_struct_modifiers9430);
            			    	struct_modifier913 = struct_modifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_modifier913.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt296 >= 1 ) goto loop296;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee296 =
            		                new EarlyExitException(296, input);
            		            throw eee296;
            	    }
            	    cnt296++;
            	} while (true);

            	loop296:
            		;	// Stops C# compiler whining that label 'loop296' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 254, struct_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "struct_modifiers"

    public class struct_modifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "struct_modifier"
    // cs.g:1606:1: struct_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' );
    public csParser.struct_modifier_return struct_modifier() // throws RecognitionException [1]
    {   
        csParser.struct_modifier_return retval = new csParser.struct_modifier_return();
        retval.Start = input.LT(1);
        int struct_modifier_StartIndex = input.Index();
        object root_0 = null;

        IToken set914 = null;

        object set914_tree=null;

         const string elementName = "struct_modifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 255) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1609:1: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set914 = (IToken)input.LT(1);
            	if ( input.LA(1) == 138 || (input.LA(1) >= 170 && input.LA(1) <= 174) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set914));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 255, struct_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "struct_modifier"

    public class struct_interfaces_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "struct_interfaces"
    // cs.g:1611:1: struct_interfaces : ':' interface_type_list ;
    public csParser.struct_interfaces_return struct_interfaces() // throws RecognitionException [1]
    {   
        csParser.struct_interfaces_return retval = new csParser.struct_interfaces_return();
        retval.Start = input.LT(1);
        int struct_interfaces_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal915 = null;
        csParser.interface_type_list_return interface_type_list916 = default(csParser.interface_type_list_return);


        object char_literal915_tree=null;

         const string elementName = "struct_interfaces"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 256) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1614:1: ( ':' interface_type_list )
            // cs.g:1615:2: ':' interface_type_list
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal915=(IToken)Match(input,100,FOLLOW_100_in_struct_interfaces9491); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal915_tree = (object)adaptor.Create(char_literal915);
            		adaptor.AddChild(root_0, char_literal915_tree);
            	}
            	PushFollow(FOLLOW_interface_type_list_in_struct_interfaces9495);
            	interface_type_list916 = interface_type_list();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_type_list916.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 256, struct_interfaces_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "struct_interfaces"

    public class struct_body_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "struct_body"
    // cs.g:1616:1: struct_body : '{' ( struct_member_declarations )? '}' ;
    public csParser.struct_body_return struct_body() // throws RecognitionException [1]
    {   
        csParser.struct_body_return retval = new csParser.struct_body_return();
        retval.Start = input.LT(1);
        int struct_body_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal917 = null;
        IToken char_literal919 = null;
        csParser.struct_member_declarations_return struct_member_declarations918 = default(csParser.struct_member_declarations_return);


        object char_literal917_tree=null;
        object char_literal919_tree=null;

         const string elementName = "struct_body"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 257) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1619:1: ( '{' ( struct_member_declarations )? '}' )
            // cs.g:1620:2: '{' ( struct_member_declarations )? '}'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal917=(IToken)Match(input,92,FOLLOW_92_in_struct_body9514); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal917_tree = (object)adaptor.Create(char_literal917);
            		adaptor.AddChild(root_0, char_literal917_tree);
            	}
            	// cs.g:1620:8: ( struct_member_declarations )?
            	int alt297 = 2;
            	int LA297_0 = input.LA(1);

            	if ( (LA297_0 == IDENTIFIER || LA297_0 == ENUM || LA297_0 == SET || (LA297_0 >= 94 && LA297_0 <= 95) || LA297_0 == 97 || (LA297_0 >= 101 && LA297_0 <= 107) || LA297_0 == 109 || (LA297_0 >= 113 && LA297_0 <= 122) || (LA297_0 >= 132 && LA297_0 <= 138) || LA297_0 == 144 || (LA297_0 >= 170 && LA297_0 <= 199) || (LA297_0 >= 201 && LA297_0 <= 202) || LA297_0 == 206 || LA297_0 == 208 || (LA297_0 >= 225 && LA297_0 <= 226)) )
            	{
            	    alt297 = 1;
            	}
            	switch (alt297) 
            	{
            	    case 1 :
            	        // cs.g:0:0: struct_member_declarations
            	        {
            	        	PushFollow(FOLLOW_struct_member_declarations_in_struct_body9518);
            	        	struct_member_declarations918 = struct_member_declarations();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_member_declarations918.Tree);

            	        }
            	        break;

            	}

            	char_literal919=(IToken)Match(input,93,FOLLOW_93_in_struct_body9523); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal919_tree = (object)adaptor.Create(char_literal919);
            		adaptor.AddChild(root_0, char_literal919_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 257, struct_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "struct_body"

    public class struct_member_declarations_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "struct_member_declarations"
    // cs.g:1621:1: struct_member_declarations : ( struct_member_declaration )+ ;
    public csParser.struct_member_declarations_return struct_member_declarations() // throws RecognitionException [1]
    {   
        csParser.struct_member_declarations_return retval = new csParser.struct_member_declarations_return();
        retval.Start = input.LT(1);
        int struct_member_declarations_StartIndex = input.Index();
        object root_0 = null;

        csParser.struct_member_declaration_return struct_member_declaration920 = default(csParser.struct_member_declaration_return);



         const string elementName = "struct_member_declarations"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 258) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1624:1: ( ( struct_member_declaration )+ )
            // cs.g:1625:2: ( struct_member_declaration )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1625:2: ( struct_member_declaration )+
            	int cnt298 = 0;
            	do 
            	{
            	    int alt298 = 2;
            	    int LA298_0 = input.LA(1);

            	    if ( (LA298_0 == IDENTIFIER || LA298_0 == ENUM || LA298_0 == SET || (LA298_0 >= 94 && LA298_0 <= 95) || LA298_0 == 97 || (LA298_0 >= 101 && LA298_0 <= 107) || LA298_0 == 109 || (LA298_0 >= 113 && LA298_0 <= 122) || (LA298_0 >= 132 && LA298_0 <= 138) || LA298_0 == 144 || (LA298_0 >= 170 && LA298_0 <= 199) || (LA298_0 >= 201 && LA298_0 <= 202) || LA298_0 == 206 || LA298_0 == 208 || (LA298_0 >= 225 && LA298_0 <= 226)) )
            	    {
            	        alt298 = 1;
            	    }


            	    switch (alt298) 
            		{
            			case 1 :
            			    // cs.g:0:0: struct_member_declaration
            			    {
            			    	PushFollow(FOLLOW_struct_member_declaration_in_struct_member_declarations9542);
            			    	struct_member_declaration920 = struct_member_declaration();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, struct_member_declaration920.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt298 >= 1 ) goto loop298;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee298 =
            		                new EarlyExitException(298, input);
            		            throw eee298;
            	    }
            	    cnt298++;
            	} while (true);

            	loop298:
            		;	// Stops C# compiler whining that label 'loop298' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 258, struct_member_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "struct_member_declarations"

    public class struct_member_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "struct_member_declaration"
    // cs.g:1626:1: struct_member_declaration : ( constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | static_constructor_declaration | type_declaration );
    public csParser.struct_member_declaration_return struct_member_declaration() // throws RecognitionException [1]
    {   
        csParser.struct_member_declaration_return retval = new csParser.struct_member_declaration_return();
        retval.Start = input.LT(1);
        int struct_member_declaration_StartIndex = input.Index();
        object root_0 = null;

        csParser.constant_declaration_return constant_declaration921 = default(csParser.constant_declaration_return);

        csParser.field_declaration_return field_declaration922 = default(csParser.field_declaration_return);

        csParser.method_declaration_return method_declaration923 = default(csParser.method_declaration_return);

        csParser.property_declaration_return property_declaration924 = default(csParser.property_declaration_return);

        csParser.event_declaration_return event_declaration925 = default(csParser.event_declaration_return);

        csParser.indexer_declaration_return indexer_declaration926 = default(csParser.indexer_declaration_return);

        csParser.operator_declaration_return operator_declaration927 = default(csParser.operator_declaration_return);

        csParser.constructor_declaration_return constructor_declaration928 = default(csParser.constructor_declaration_return);

        csParser.static_constructor_declaration_return static_constructor_declaration929 = default(csParser.static_constructor_declaration_return);

        csParser.type_declaration_return type_declaration930 = default(csParser.type_declaration_return);



         const string elementName = "struct_member_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 259) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1629:1: ( constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | static_constructor_declaration | type_declaration )
            int alt299 = 10;
            alt299 = dfa299.Predict(input);
            switch (alt299) 
            {
                case 1 :
                    // cs.g:1630:2: constant_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_constant_declaration_in_struct_member_declaration9563);
                    	constant_declaration921 = constant_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_declaration921.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1631:4: field_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_field_declaration_in_struct_member_declaration9568);
                    	field_declaration922 = field_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, field_declaration922.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:1632:4: method_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_method_declaration_in_struct_member_declaration9573);
                    	method_declaration923 = method_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_declaration923.Tree);

                    }
                    break;
                case 4 :
                    // cs.g:1633:4: property_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_property_declaration_in_struct_member_declaration9578);
                    	property_declaration924 = property_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, property_declaration924.Tree);

                    }
                    break;
                case 5 :
                    // cs.g:1634:4: event_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_event_declaration_in_struct_member_declaration9583);
                    	event_declaration925 = event_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, event_declaration925.Tree);

                    }
                    break;
                case 6 :
                    // cs.g:1635:4: indexer_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_indexer_declaration_in_struct_member_declaration9588);
                    	indexer_declaration926 = indexer_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, indexer_declaration926.Tree);

                    }
                    break;
                case 7 :
                    // cs.g:1636:4: operator_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_operator_declaration_in_struct_member_declaration9593);
                    	operator_declaration927 = operator_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, operator_declaration927.Tree);

                    }
                    break;
                case 8 :
                    // cs.g:1637:4: constructor_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_constructor_declaration_in_struct_member_declaration9598);
                    	constructor_declaration928 = constructor_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constructor_declaration928.Tree);

                    }
                    break;
                case 9 :
                    // cs.g:1638:4: static_constructor_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_static_constructor_declaration_in_struct_member_declaration9603);
                    	static_constructor_declaration929 = static_constructor_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, static_constructor_declaration929.Tree);

                    }
                    break;
                case 10 :
                    // cs.g:1639:4: type_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_type_declaration_in_struct_member_declaration9608);
                    	type_declaration930 = type_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_declaration930.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 259, struct_member_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "struct_member_declaration"

    public class interface_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "interface_declaration"
    // cs.g:1642:1: interface_declaration : ( attributes )? ( interface_modifiers )? ( 'partial' )? 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? ;
    public csParser.interface_declaration_return interface_declaration() // throws RecognitionException [1]
    {   
        csParser.interface_declaration_return retval = new csParser.interface_declaration_return();
        retval.Start = input.LT(1);
        int interface_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal933 = null;
        IToken string_literal934 = null;
        IToken char_literal940 = null;
        csParser.attributes_return attributes931 = default(csParser.attributes_return);

        csParser.interface_modifiers_return interface_modifiers932 = default(csParser.interface_modifiers_return);

        csParser.identifier_return identifier935 = default(csParser.identifier_return);

        csParser.variant_generic_parameter_list_return variant_generic_parameter_list936 = default(csParser.variant_generic_parameter_list_return);

        csParser.interface_base_return interface_base937 = default(csParser.interface_base_return);

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses938 = default(csParser.type_parameter_constraints_clauses_return);

        csParser.interface_body_return interface_body939 = default(csParser.interface_body_return);


        object string_literal933_tree=null;
        object string_literal934_tree=null;
        object char_literal940_tree=null;

         const string elementName = "interface_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 260) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1645:1: ( ( attributes )? ( interface_modifiers )? ( 'partial' )? 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? )
            // cs.g:1646:2: ( attributes )? ( interface_modifiers )? ( 'partial' )? 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1646:2: ( attributes )?
            	int alt300 = 2;
            	int LA300_0 = input.LA(1);

            	if ( (LA300_0 == 97) )
            	{
            	    alt300 = 1;
            	}
            	switch (alt300) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_interface_declaration9630);
            	        	attributes931 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes931.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1646:16: ( interface_modifiers )?
            	int alt301 = 2;
            	int LA301_0 = input.LA(1);

            	if ( (LA301_0 == 138 || (LA301_0 >= 170 && LA301_0 <= 174)) )
            	{
            	    alt301 = 1;
            	}
            	switch (alt301) 
            	{
            	    case 1 :
            	        // cs.g:0:0: interface_modifiers
            	        {
            	        	PushFollow(FOLLOW_interface_modifiers_in_interface_declaration9635);
            	        	interface_modifiers932 = interface_modifiers();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_modifiers932.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1646:39: ( 'partial' )?
            	int alt302 = 2;
            	int LA302_0 = input.LA(1);

            	if ( (LA302_0 == 188) )
            	{
            	    alt302 = 1;
            	}
            	switch (alt302) 
            	{
            	    case 1 :
            	        // cs.g:0:0: 'partial'
            	        {
            	        	string_literal933=(IToken)Match(input,188,FOLLOW_188_in_interface_declaration9640); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal933_tree = (object)adaptor.Create(string_literal933);
            	        		adaptor.AddChild(root_0, string_literal933_tree);
            	        	}

            	        }
            	        break;

            	}

            	string_literal934=(IToken)Match(input,206,FOLLOW_206_in_interface_declaration9645); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal934_tree = (object)adaptor.Create(string_literal934);
            		adaptor.AddChild(root_0, string_literal934_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_interface_declaration9649);
            	identifier935 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier935.Tree);
            	// cs.g:1646:79: ( variant_generic_parameter_list )?
            	int alt303 = 2;
            	int LA303_0 = input.LA(1);

            	if ( (LA303_0 == 123) )
            	{
            	    alt303 = 1;
            	}
            	switch (alt303) 
            	{
            	    case 1 :
            	        // cs.g:0:0: variant_generic_parameter_list
            	        {
            	        	PushFollow(FOLLOW_variant_generic_parameter_list_in_interface_declaration9653);
            	        	variant_generic_parameter_list936 = variant_generic_parameter_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variant_generic_parameter_list936.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1647:6: ( interface_base )?
            	int alt304 = 2;
            	int LA304_0 = input.LA(1);

            	if ( (LA304_0 == 100) )
            	{
            	    alt304 = 1;
            	}
            	switch (alt304) 
            	{
            	    case 1 :
            	        // cs.g:0:0: interface_base
            	        {
            	        	PushFollow(FOLLOW_interface_base_in_interface_declaration9662);
            	        	interface_base937 = interface_base();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_base937.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1647:24: ( type_parameter_constraints_clauses )?
            	int alt305 = 2;
            	int LA305_0 = input.LA(1);

            	if ( (LA305_0 == 187) )
            	{
            	    alt305 = 1;
            	}
            	switch (alt305) 
            	{
            	    case 1 :
            	        // cs.g:0:0: type_parameter_constraints_clauses
            	        {
            	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_declaration9667);
            	        	type_parameter_constraints_clauses938 = type_parameter_constraints_clauses();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameter_constraints_clauses938.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_interface_body_in_interface_declaration9672);
            	interface_body939 = interface_body();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_body939.Tree);
            	// cs.g:1647:79: ( ';' )?
            	int alt306 = 2;
            	int LA306_0 = input.LA(1);

            	if ( (LA306_0 == SEMI) )
            	{
            	    alt306 = 1;
            	}
            	switch (alt306) 
            	{
            	    case 1 :
            	        // cs.g:0:0: ';'
            	        {
            	        	char_literal940=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_interface_declaration9676); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal940_tree = (object)adaptor.Create(char_literal940);
            	        		adaptor.AddChild(root_0, char_literal940_tree);
            	        	}

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 260, interface_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"

    public class interface_modifiers_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "interface_modifiers"
    // cs.g:1649:1: interface_modifiers : ( interface_modifier )+ ;
    public csParser.interface_modifiers_return interface_modifiers() // throws RecognitionException [1]
    {   
        csParser.interface_modifiers_return retval = new csParser.interface_modifiers_return();
        retval.Start = input.LT(1);
        int interface_modifiers_StartIndex = input.Index();
        object root_0 = null;

        csParser.interface_modifier_return interface_modifier941 = default(csParser.interface_modifier_return);



         const string elementName = "interface_modifiers"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 261) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1652:1: ( ( interface_modifier )+ )
            // cs.g:1653:2: ( interface_modifier )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1653:2: ( interface_modifier )+
            	int cnt307 = 0;
            	do 
            	{
            	    int alt307 = 2;
            	    int LA307_0 = input.LA(1);

            	    if ( (LA307_0 == 138 || (LA307_0 >= 170 && LA307_0 <= 174)) )
            	    {
            	        alt307 = 1;
            	    }


            	    switch (alt307) 
            		{
            			case 1 :
            			    // cs.g:0:0: interface_modifier
            			    {
            			    	PushFollow(FOLLOW_interface_modifier_in_interface_modifiers9699);
            			    	interface_modifier941 = interface_modifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_modifier941.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt307 >= 1 ) goto loop307;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee307 =
            		                new EarlyExitException(307, input);
            		            throw eee307;
            	    }
            	    cnt307++;
            	} while (true);

            	loop307:
            		;	// Stops C# compiler whining that label 'loop307' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 261, interface_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_modifiers"

    public class interface_modifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "interface_modifier"
    // cs.g:1654:1: interface_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' );
    public csParser.interface_modifier_return interface_modifier() // throws RecognitionException [1]
    {   
        csParser.interface_modifier_return retval = new csParser.interface_modifier_return();
        retval.Start = input.LT(1);
        int interface_modifier_StartIndex = input.Index();
        object root_0 = null;

        IToken set942 = null;

        object set942_tree=null;

         const string elementName = "interface_modifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 262) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1657:1: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set942 = (IToken)input.LT(1);
            	if ( input.LA(1) == 138 || (input.LA(1) >= 170 && input.LA(1) <= 174) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set942));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 262, interface_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_modifier"

    public class interface_base_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "interface_base"
    // cs.g:1659:1: interface_base : ':' interface_type_list ;
    public csParser.interface_base_return interface_base() // throws RecognitionException [1]
    {   
        csParser.interface_base_return retval = new csParser.interface_base_return();
        retval.Start = input.LT(1);
        int interface_base_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal943 = null;
        csParser.interface_type_list_return interface_type_list944 = default(csParser.interface_type_list_return);


        object char_literal943_tree=null;

         const string elementName = "interface_base"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 263) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1662:1: ( ':' interface_type_list )
            // cs.g:1663:5: ':' interface_type_list
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal943=(IToken)Match(input,100,FOLLOW_100_in_interface_base9763); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal943_tree = (object)adaptor.Create(char_literal943);
            		adaptor.AddChild(root_0, char_literal943_tree);
            	}
            	PushFollow(FOLLOW_interface_type_list_in_interface_base9765);
            	interface_type_list944 = interface_type_list();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_type_list944.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 263, interface_base_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_base"

    public class interface_body_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "interface_body"
    // cs.g:1664:1: interface_body : '{' ( interface_member_declarations )? '}' ;
    public csParser.interface_body_return interface_body() // throws RecognitionException [1]
    {   
        csParser.interface_body_return retval = new csParser.interface_body_return();
        retval.Start = input.LT(1);
        int interface_body_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal945 = null;
        IToken char_literal947 = null;
        csParser.interface_member_declarations_return interface_member_declarations946 = default(csParser.interface_member_declarations_return);


        object char_literal945_tree=null;
        object char_literal947_tree=null;

         const string elementName = "interface_body"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 264) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1667:1: ( '{' ( interface_member_declarations )? '}' )
            // cs.g:1668:2: '{' ( interface_member_declarations )? '}'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal945=(IToken)Match(input,92,FOLLOW_92_in_interface_body9785); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal945_tree = (object)adaptor.Create(char_literal945);
            		adaptor.AddChild(root_0, char_literal945_tree);
            	}
            	// cs.g:1668:8: ( interface_member_declarations )?
            	int alt308 = 2;
            	int LA308_0 = input.LA(1);

            	if ( (LA308_0 == IDENTIFIER || LA308_0 == SET || (LA308_0 >= 94 && LA308_0 <= 95) || LA308_0 == 97 || (LA308_0 >= 101 && LA308_0 <= 107) || LA308_0 == 109 || (LA308_0 >= 113 && LA308_0 <= 122) || (LA308_0 >= 132 && LA308_0 <= 138) || (LA308_0 >= 170 && LA308_0 <= 187) || (LA308_0 >= 190 && LA308_0 <= 192) || (LA308_0 >= 197 && LA308_0 <= 199) || (LA308_0 >= 201 && LA308_0 <= 202) || LA308_0 == 208 || (LA308_0 >= 225 && LA308_0 <= 226)) )
            	{
            	    alt308 = 1;
            	}
            	switch (alt308) 
            	{
            	    case 1 :
            	        // cs.g:0:0: interface_member_declarations
            	        {
            	        	PushFollow(FOLLOW_interface_member_declarations_in_interface_body9789);
            	        	interface_member_declarations946 = interface_member_declarations();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_member_declarations946.Tree);

            	        }
            	        break;

            	}

            	char_literal947=(IToken)Match(input,93,FOLLOW_93_in_interface_body9794); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal947_tree = (object)adaptor.Create(char_literal947);
            		adaptor.AddChild(root_0, char_literal947_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 264, interface_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_body"

    public class interface_member_declarations_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "interface_member_declarations"
    // cs.g:1669:1: interface_member_declarations : ( interface_member_declaration )+ ;
    public csParser.interface_member_declarations_return interface_member_declarations() // throws RecognitionException [1]
    {   
        csParser.interface_member_declarations_return retval = new csParser.interface_member_declarations_return();
        retval.Start = input.LT(1);
        int interface_member_declarations_StartIndex = input.Index();
        object root_0 = null;

        csParser.interface_member_declaration_return interface_member_declaration948 = default(csParser.interface_member_declaration_return);



         const string elementName = "interface_member_declarations"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 265) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1672:1: ( ( interface_member_declaration )+ )
            // cs.g:1673:2: ( interface_member_declaration )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1673:2: ( interface_member_declaration )+
            	int cnt309 = 0;
            	do 
            	{
            	    int alt309 = 2;
            	    int LA309_0 = input.LA(1);

            	    if ( (LA309_0 == IDENTIFIER || LA309_0 == SET || (LA309_0 >= 94 && LA309_0 <= 95) || LA309_0 == 97 || (LA309_0 >= 101 && LA309_0 <= 107) || LA309_0 == 109 || (LA309_0 >= 113 && LA309_0 <= 122) || (LA309_0 >= 132 && LA309_0 <= 138) || (LA309_0 >= 170 && LA309_0 <= 187) || (LA309_0 >= 190 && LA309_0 <= 192) || (LA309_0 >= 197 && LA309_0 <= 199) || (LA309_0 >= 201 && LA309_0 <= 202) || LA309_0 == 208 || (LA309_0 >= 225 && LA309_0 <= 226)) )
            	    {
            	        alt309 = 1;
            	    }


            	    switch (alt309) 
            		{
            			case 1 :
            			    // cs.g:0:0: interface_member_declaration
            			    {
            			    	PushFollow(FOLLOW_interface_member_declaration_in_interface_member_declarations9814);
            			    	interface_member_declaration948 = interface_member_declaration();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_member_declaration948.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt309 >= 1 ) goto loop309;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee309 =
            		                new EarlyExitException(309, input);
            		            throw eee309;
            	    }
            	    cnt309++;
            	} while (true);

            	loop309:
            		;	// Stops C# compiler whining that label 'loop309' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 265, interface_member_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_member_declarations"

    public class interface_member_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "interface_member_declaration"
    // cs.g:1674:1: interface_member_declaration : ( interface_property_declaration | interface_method_declaration | interface_event_declaration | interface_indexer_declaration );
    public csParser.interface_member_declaration_return interface_member_declaration() // throws RecognitionException [1]
    {   
        csParser.interface_member_declaration_return retval = new csParser.interface_member_declaration_return();
        retval.Start = input.LT(1);
        int interface_member_declaration_StartIndex = input.Index();
        object root_0 = null;

        csParser.interface_property_declaration_return interface_property_declaration949 = default(csParser.interface_property_declaration_return);

        csParser.interface_method_declaration_return interface_method_declaration950 = default(csParser.interface_method_declaration_return);

        csParser.interface_event_declaration_return interface_event_declaration951 = default(csParser.interface_event_declaration_return);

        csParser.interface_indexer_declaration_return interface_indexer_declaration952 = default(csParser.interface_indexer_declaration_return);



         const string elementName = "interface_member_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 266) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1677:1: ( interface_property_declaration | interface_method_declaration | interface_event_declaration | interface_indexer_declaration )
            int alt310 = 4;
            alt310 = dfa310.Predict(input);
            switch (alt310) 
            {
                case 1 :
                    // cs.g:1678:2: interface_property_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_interface_property_declaration_in_interface_member_declaration9835);
                    	interface_property_declaration949 = interface_property_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_property_declaration949.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1679:4: interface_method_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_interface_method_declaration_in_interface_member_declaration9841);
                    	interface_method_declaration950 = interface_method_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_method_declaration950.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:1680:4: interface_event_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_interface_event_declaration_in_interface_member_declaration9847);
                    	interface_event_declaration951 = interface_event_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_event_declaration951.Tree);

                    }
                    break;
                case 4 :
                    // cs.g:1681:4: interface_indexer_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_interface_indexer_declaration_in_interface_member_declaration9853);
                    	interface_indexer_declaration952 = interface_indexer_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_indexer_declaration952.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 266, interface_member_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_member_declaration"

    public class interface_method_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "interface_method_declaration"
    // cs.g:1682:1: interface_method_declaration : ( attributes )? ( 'new' )? ( method_modifiers )? return_type identifier ( generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
    public csParser.interface_method_declaration_return interface_method_declaration() // throws RecognitionException [1]
    {   
        csParser.interface_method_declaration_return retval = new csParser.interface_method_declaration_return();
        retval.Start = input.LT(1);
        int interface_method_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal954 = null;
        IToken char_literal959 = null;
        IToken char_literal961 = null;
        IToken char_literal963 = null;
        csParser.attributes_return attributes953 = default(csParser.attributes_return);

        csParser.method_modifiers_return method_modifiers955 = default(csParser.method_modifiers_return);

        csParser.return_type_return return_type956 = default(csParser.return_type_return);

        csParser.identifier_return identifier957 = default(csParser.identifier_return);

        csParser.generic_parameter_list_return generic_parameter_list958 = default(csParser.generic_parameter_list_return);

        csParser.formal_parameter_list_return formal_parameter_list960 = default(csParser.formal_parameter_list_return);

        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses962 = default(csParser.type_parameter_constraints_clauses_return);


        object string_literal954_tree=null;
        object char_literal959_tree=null;
        object char_literal961_tree=null;
        object char_literal963_tree=null;

         const string elementName = "interface_method_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 267) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1685:1: ( ( attributes )? ( 'new' )? ( method_modifiers )? return_type identifier ( generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
            // cs.g:1686:2: ( attributes )? ( 'new' )? ( method_modifiers )? return_type identifier ( generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1686:2: ( attributes )?
            	int alt311 = 2;
            	int LA311_0 = input.LA(1);

            	if ( (LA311_0 == 97) )
            	{
            	    alt311 = 1;
            	}
            	switch (alt311) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_interface_method_declaration9873);
            	        	attributes953 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes953.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1686:16: ( 'new' )?
            	int alt312 = 2;
            	int LA312_0 = input.LA(1);

            	if ( (LA312_0 == 138) )
            	{
            	    int LA312_1 = input.LA(2);

            	    if ( (synpred563_cs()) )
            	    {
            	        alt312 = 1;
            	    }
            	}
            	switch (alt312) 
            	{
            	    case 1 :
            	        // cs.g:0:0: 'new'
            	        {
            	        	string_literal954=(IToken)Match(input,138,FOLLOW_138_in_interface_method_declaration9878); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal954_tree = (object)adaptor.Create(string_literal954);
            	        		adaptor.AddChild(root_0, string_literal954_tree);
            	        	}

            	        }
            	        break;

            	}

            	// cs.g:1686:25: ( method_modifiers )?
            	int alt313 = 2;
            	int LA313_0 = input.LA(1);

            	if ( (LA313_0 == 94 || LA313_0 == 138 || (LA313_0 >= 170 && LA313_0 <= 174) || (LA313_0 >= 190 && LA313_0 <= 192) || (LA313_0 >= 197 && LA313_0 <= 198)) )
            	{
            	    alt313 = 1;
            	}
            	switch (alt313) 
            	{
            	    case 1 :
            	        // cs.g:0:0: method_modifiers
            	        {
            	        	PushFollow(FOLLOW_method_modifiers_in_interface_method_declaration9883);
            	        	method_modifiers955 = method_modifiers();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, method_modifiers955.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_return_type_in_interface_method_declaration9887);
            	return_type956 = return_type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, return_type956.Tree);
            	PushFollow(FOLLOW_identifier_in_interface_method_declaration9891);
            	identifier957 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier957.Tree);
            	// cs.g:1686:71: ( generic_parameter_list )?
            	int alt314 = 2;
            	int LA314_0 = input.LA(1);

            	if ( (LA314_0 == 123) )
            	{
            	    alt314 = 1;
            	}
            	switch (alt314) 
            	{
            	    case 1 :
            	        // cs.g:0:0: generic_parameter_list
            	        {
            	        	PushFollow(FOLLOW_generic_parameter_list_in_interface_method_declaration9895);
            	        	generic_parameter_list958 = generic_parameter_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, generic_parameter_list958.Tree);

            	        }
            	        break;

            	}

            	char_literal959=(IToken)Match(input,110,FOLLOW_110_in_interface_method_declaration9903); if (state.failed) return retval;
            	// cs.g:1687:13: ( formal_parameter_list )?
            	int alt315 = 2;
            	int LA315_0 = input.LA(1);

            	if ( (LA315_0 == IDENTIFIER || LA315_0 == SET || LA315_0 == 90 || LA315_0 == 95 || LA315_0 == 97 || (LA315_0 >= 101 && LA315_0 <= 107) || LA315_0 == 109 || (LA315_0 >= 113 && LA315_0 <= 122) || (LA315_0 >= 130 && LA315_0 <= 137) || (LA315_0 >= 175 && LA315_0 <= 187) || (LA315_0 >= 199 && LA315_0 <= 202) || LA315_0 == 208 || (LA315_0 >= 225 && LA315_0 <= 226)) )
            	{
            	    alt315 = 1;
            	}
            	switch (alt315) 
            	{
            	    case 1 :
            	        // cs.g:0:0: formal_parameter_list
            	        {
            	        	PushFollow(FOLLOW_formal_parameter_list_in_interface_method_declaration9908);
            	        	formal_parameter_list960 = formal_parameter_list();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, formal_parameter_list960.Tree);

            	        }
            	        break;

            	}

            	char_literal961=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_interface_method_declaration9913); if (state.failed) return retval;
            	// cs.g:1687:45: ( type_parameter_constraints_clauses )?
            	int alt316 = 2;
            	int LA316_0 = input.LA(1);

            	if ( (LA316_0 == 187) )
            	{
            	    alt316 = 1;
            	}
            	switch (alt316) 
            	{
            	    case 1 :
            	        // cs.g:0:0: type_parameter_constraints_clauses
            	        {
            	        	PushFollow(FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration9918);
            	        	type_parameter_constraints_clauses962 = type_parameter_constraints_clauses();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type_parameter_constraints_clauses962.Tree);

            	        }
            	        break;

            	}

            	char_literal963=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_interface_method_declaration9923); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal963_tree = (object)adaptor.Create(char_literal963);
            		adaptor.AddChild(root_0, char_literal963_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 267, interface_method_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_method_declaration"

    public class interface_property_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "interface_property_declaration"
    // cs.g:1688:1: interface_property_declaration : ( attributes )? ( 'new' )? type identifier '{' interface_accessor_declarations '}' ;
    public csParser.interface_property_declaration_return interface_property_declaration() // throws RecognitionException [1]
    {   
        csParser.interface_property_declaration_return retval = new csParser.interface_property_declaration_return();
        retval.Start = input.LT(1);
        int interface_property_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal965 = null;
        IToken char_literal968 = null;
        IToken char_literal970 = null;
        csParser.attributes_return attributes964 = default(csParser.attributes_return);

        csParser.type_return type966 = default(csParser.type_return);

        csParser.identifier_return identifier967 = default(csParser.identifier_return);

        csParser.interface_accessor_declarations_return interface_accessor_declarations969 = default(csParser.interface_accessor_declarations_return);


        object string_literal965_tree=null;
        object char_literal968_tree=null;
        object char_literal970_tree=null;

         const string elementName = "interface_property_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 268) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1691:1: ( ( attributes )? ( 'new' )? type identifier '{' interface_accessor_declarations '}' )
            // cs.g:1692:2: ( attributes )? ( 'new' )? type identifier '{' interface_accessor_declarations '}'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1692:2: ( attributes )?
            	int alt317 = 2;
            	int LA317_0 = input.LA(1);

            	if ( (LA317_0 == 97) )
            	{
            	    alt317 = 1;
            	}
            	switch (alt317) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_interface_property_declaration9943);
            	        	attributes964 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes964.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1692:16: ( 'new' )?
            	int alt318 = 2;
            	int LA318_0 = input.LA(1);

            	if ( (LA318_0 == 138) )
            	{
            	    alt318 = 1;
            	}
            	switch (alt318) 
            	{
            	    case 1 :
            	        // cs.g:0:0: 'new'
            	        {
            	        	string_literal965=(IToken)Match(input,138,FOLLOW_138_in_interface_property_declaration9948); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal965_tree = (object)adaptor.Create(string_literal965);
            	        		adaptor.AddChild(root_0, string_literal965_tree);
            	        	}

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_type_in_interface_property_declaration9953);
            	type966 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type966.Tree);
            	PushFollow(FOLLOW_identifier_in_interface_property_declaration9957);
            	identifier967 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier967.Tree);
            	char_literal968=(IToken)Match(input,92,FOLLOW_92_in_interface_property_declaration9961); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal968_tree = (object)adaptor.Create(char_literal968);
            		adaptor.AddChild(root_0, char_literal968_tree);
            	}
            	PushFollow(FOLLOW_interface_accessor_declarations_in_interface_property_declaration9965);
            	interface_accessor_declarations969 = interface_accessor_declarations();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_accessor_declarations969.Tree);
            	char_literal970=(IToken)Match(input,93,FOLLOW_93_in_interface_property_declaration9969); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal970_tree = (object)adaptor.Create(char_literal970);
            		adaptor.AddChild(root_0, char_literal970_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 268, interface_property_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_property_declaration"

    public class interface_accessor_declarations_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "interface_accessor_declarations"
    // cs.g:1693:1: interface_accessor_declarations : ( interface_get_accessor_declaration ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( interface_get_accessor_declaration )? );
    public csParser.interface_accessor_declarations_return interface_accessor_declarations() // throws RecognitionException [1]
    {   
        csParser.interface_accessor_declarations_return retval = new csParser.interface_accessor_declarations_return();
        retval.Start = input.LT(1);
        int interface_accessor_declarations_StartIndex = input.Index();
        object root_0 = null;

        csParser.interface_get_accessor_declaration_return interface_get_accessor_declaration971 = default(csParser.interface_get_accessor_declaration_return);

        csParser.interface_set_accessor_declaration_return interface_set_accessor_declaration972 = default(csParser.interface_set_accessor_declaration_return);

        csParser.interface_set_accessor_declaration_return interface_set_accessor_declaration973 = default(csParser.interface_set_accessor_declaration_return);

        csParser.interface_get_accessor_declaration_return interface_get_accessor_declaration974 = default(csParser.interface_get_accessor_declaration_return);



         const string elementName = "interface_accessor_declarations"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 269) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1696:1: ( interface_get_accessor_declaration ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( interface_get_accessor_declaration )? )
            int alt321 = 2;
            switch ( input.LA(1) ) 
            {
            case 97:
            	{
                int LA321_1 = input.LA(2);

                if ( (synpred571_cs()) )
                {
                    alt321 = 1;
                }
                else if ( (true) )
                {
                    alt321 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d321s1 =
                        new NoViableAltException("", 321, 1, input);

                    throw nvae_d321s1;
                }
                }
                break;
            case GET:
            	{
                alt321 = 1;
                }
                break;
            case SET:
            	{
                alt321 = 2;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d321s0 =
            	        new NoViableAltException("", 321, 0, input);

            	    throw nvae_d321s0;
            }

            switch (alt321) 
            {
                case 1 :
                    // cs.g:1697:2: interface_get_accessor_declaration ( interface_set_accessor_declaration )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations9989);
                    	interface_get_accessor_declaration971 = interface_get_accessor_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_get_accessor_declaration971.Tree);
                    	// cs.g:1697:39: ( interface_set_accessor_declaration )?
                    	int alt319 = 2;
                    	int LA319_0 = input.LA(1);

                    	if ( (LA319_0 == SET || LA319_0 == 97) )
                    	{
                    	    alt319 = 1;
                    	}
                    	switch (alt319) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: interface_set_accessor_declaration
                    	        {
                    	        	PushFollow(FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations9993);
                    	        	interface_set_accessor_declaration972 = interface_set_accessor_declaration();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_set_accessor_declaration972.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:1698:4: interface_set_accessor_declaration ( interface_get_accessor_declaration )?
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations9999);
                    	interface_set_accessor_declaration973 = interface_set_accessor_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_set_accessor_declaration973.Tree);
                    	// cs.g:1698:41: ( interface_get_accessor_declaration )?
                    	int alt320 = 2;
                    	int LA320_0 = input.LA(1);

                    	if ( (LA320_0 == GET || LA320_0 == 97) )
                    	{
                    	    alt320 = 1;
                    	}
                    	switch (alt320) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: interface_get_accessor_declaration
                    	        {
                    	        	PushFollow(FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations10003);
                    	        	interface_get_accessor_declaration974 = interface_get_accessor_declaration();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_get_accessor_declaration974.Tree);

                    	        }
                    	        break;

                    	}


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 269, interface_accessor_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_accessor_declarations"

    public class interface_get_accessor_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "interface_get_accessor_declaration"
    // cs.g:1699:1: interface_get_accessor_declaration : ( attributes )? 'get' ';' ;
    public csParser.interface_get_accessor_declaration_return interface_get_accessor_declaration() // throws RecognitionException [1]
    {   
        csParser.interface_get_accessor_declaration_return retval = new csParser.interface_get_accessor_declaration_return();
        retval.Start = input.LT(1);
        int interface_get_accessor_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal976 = null;
        IToken char_literal977 = null;
        csParser.attributes_return attributes975 = default(csParser.attributes_return);


        object string_literal976_tree=null;
        object char_literal977_tree=null;

         const string elementName = "interface_get_accessor_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 270) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1702:1: ( ( attributes )? 'get' ';' )
            // cs.g:1703:2: ( attributes )? 'get' ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1703:2: ( attributes )?
            	int alt322 = 2;
            	int LA322_0 = input.LA(1);

            	if ( (LA322_0 == 97) )
            	{
            	    alt322 = 1;
            	}
            	switch (alt322) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_interface_get_accessor_declaration10024);
            	        	attributes975 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes975.Tree);

            	        }
            	        break;

            	}

            	string_literal976=(IToken)Match(input,GET,FOLLOW_GET_in_interface_get_accessor_declaration10029); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal976_tree = (object)adaptor.Create(string_literal976);
            		adaptor.AddChild(root_0, string_literal976_tree);
            	}
            	char_literal977=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_interface_get_accessor_declaration10033); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal977_tree = (object)adaptor.Create(char_literal977);
            		adaptor.AddChild(root_0, char_literal977_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 270, interface_get_accessor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_get_accessor_declaration"

    public class interface_set_accessor_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "interface_set_accessor_declaration"
    // cs.g:1704:1: interface_set_accessor_declaration : ( attributes )? 'set' ';' ;
    public csParser.interface_set_accessor_declaration_return interface_set_accessor_declaration() // throws RecognitionException [1]
    {   
        csParser.interface_set_accessor_declaration_return retval = new csParser.interface_set_accessor_declaration_return();
        retval.Start = input.LT(1);
        int interface_set_accessor_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal979 = null;
        IToken char_literal980 = null;
        csParser.attributes_return attributes978 = default(csParser.attributes_return);


        object string_literal979_tree=null;
        object char_literal980_tree=null;

         const string elementName = "interface_set_accessor_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 271) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1707:1: ( ( attributes )? 'set' ';' )
            // cs.g:1708:2: ( attributes )? 'set' ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1708:2: ( attributes )?
            	int alt323 = 2;
            	int LA323_0 = input.LA(1);

            	if ( (LA323_0 == 97) )
            	{
            	    alt323 = 1;
            	}
            	switch (alt323) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_interface_set_accessor_declaration10055);
            	        	attributes978 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes978.Tree);

            	        }
            	        break;

            	}

            	string_literal979=(IToken)Match(input,SET,FOLLOW_SET_in_interface_set_accessor_declaration10060); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal979_tree = (object)adaptor.Create(string_literal979);
            		adaptor.AddChild(root_0, string_literal979_tree);
            	}
            	char_literal980=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_interface_set_accessor_declaration10064); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal980_tree = (object)adaptor.Create(char_literal980);
            		adaptor.AddChild(root_0, char_literal980_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 271, interface_set_accessor_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_set_accessor_declaration"

    public class interface_event_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "interface_event_declaration"
    // cs.g:1709:1: interface_event_declaration : ( attributes )? ( 'new' )? 'event' type identifier ';' ;
    public csParser.interface_event_declaration_return interface_event_declaration() // throws RecognitionException [1]
    {   
        csParser.interface_event_declaration_return retval = new csParser.interface_event_declaration_return();
        retval.Start = input.LT(1);
        int interface_event_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal982 = null;
        IToken string_literal983 = null;
        IToken char_literal986 = null;
        csParser.attributes_return attributes981 = default(csParser.attributes_return);

        csParser.type_return type984 = default(csParser.type_return);

        csParser.identifier_return identifier985 = default(csParser.identifier_return);


        object string_literal982_tree=null;
        object string_literal983_tree=null;
        object char_literal986_tree=null;

         const string elementName = "interface_event_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 272) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1712:1: ( ( attributes )? ( 'new' )? 'event' type identifier ';' )
            // cs.g:1713:2: ( attributes )? ( 'new' )? 'event' type identifier ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1713:2: ( attributes )?
            	int alt324 = 2;
            	int LA324_0 = input.LA(1);

            	if ( (LA324_0 == 97) )
            	{
            	    alt324 = 1;
            	}
            	switch (alt324) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_interface_event_declaration10086);
            	        	attributes981 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes981.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1713:16: ( 'new' )?
            	int alt325 = 2;
            	int LA325_0 = input.LA(1);

            	if ( (LA325_0 == 138) )
            	{
            	    alt325 = 1;
            	}
            	switch (alt325) 
            	{
            	    case 1 :
            	        // cs.g:0:0: 'new'
            	        {
            	        	string_literal982=(IToken)Match(input,138,FOLLOW_138_in_interface_event_declaration10091); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal982_tree = (object)adaptor.Create(string_literal982);
            	        		adaptor.AddChild(root_0, string_literal982_tree);
            	        	}

            	        }
            	        break;

            	}

            	string_literal983=(IToken)Match(input,104,FOLLOW_104_in_interface_event_declaration10096); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal983_tree = (object)adaptor.Create(string_literal983);
            		adaptor.AddChild(root_0, string_literal983_tree);
            	}
            	PushFollow(FOLLOW_type_in_interface_event_declaration10100);
            	type984 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type984.Tree);
            	PushFollow(FOLLOW_identifier_in_interface_event_declaration10104);
            	identifier985 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier985.Tree);
            	char_literal986=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_interface_event_declaration10108); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal986_tree = (object)adaptor.Create(char_literal986);
            		adaptor.AddChild(root_0, char_literal986_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 272, interface_event_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_event_declaration"

    public class interface_indexer_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "interface_indexer_declaration"
    // cs.g:1714:1: interface_indexer_declaration : ( attributes )? ( 'new' )? type 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' ;
    public csParser.interface_indexer_declaration_return interface_indexer_declaration() // throws RecognitionException [1]
    {   
        csParser.interface_indexer_declaration_return retval = new csParser.interface_indexer_declaration_return();
        retval.Start = input.LT(1);
        int interface_indexer_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal988 = null;
        IToken string_literal990 = null;
        IToken char_literal991 = null;
        IToken char_literal993 = null;
        IToken char_literal994 = null;
        IToken char_literal996 = null;
        csParser.attributes_return attributes987 = default(csParser.attributes_return);

        csParser.type_return type989 = default(csParser.type_return);

        csParser.formal_parameter_list_return formal_parameter_list992 = default(csParser.formal_parameter_list_return);

        csParser.interface_accessor_declarations_return interface_accessor_declarations995 = default(csParser.interface_accessor_declarations_return);


        object string_literal988_tree=null;
        object string_literal990_tree=null;
        object char_literal991_tree=null;
        object char_literal993_tree=null;
        object char_literal994_tree=null;
        object char_literal996_tree=null;

         const string elementName = "interface_indexer_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 273) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1717:1: ( ( attributes )? ( 'new' )? type 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' )
            // cs.g:1718:2: ( attributes )? ( 'new' )? type 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1718:2: ( attributes )?
            	int alt326 = 2;
            	int LA326_0 = input.LA(1);

            	if ( (LA326_0 == 97) )
            	{
            	    alt326 = 1;
            	}
            	switch (alt326) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_interface_indexer_declaration10129);
            	        	attributes987 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes987.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1718:17: ( 'new' )?
            	int alt327 = 2;
            	int LA327_0 = input.LA(1);

            	if ( (LA327_0 == 138) )
            	{
            	    alt327 = 1;
            	}
            	switch (alt327) 
            	{
            	    case 1 :
            	        // cs.g:0:0: 'new'
            	        {
            	        	string_literal988=(IToken)Match(input,138,FOLLOW_138_in_interface_indexer_declaration10135); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{string_literal988_tree = (object)adaptor.Create(string_literal988);
            	        		adaptor.AddChild(root_0, string_literal988_tree);
            	        	}

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_type_in_interface_indexer_declaration10141);
            	type989 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type989.Tree);
            	string_literal990=(IToken)Match(input,90,FOLLOW_90_in_interface_indexer_declaration10145); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal990_tree = (object)adaptor.Create(string_literal990);
            		adaptor.AddChild(root_0, string_literal990_tree);
            	}
            	char_literal991=(IToken)Match(input,97,FOLLOW_97_in_interface_indexer_declaration10149); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal991_tree = (object)adaptor.Create(char_literal991);
            		adaptor.AddChild(root_0, char_literal991_tree);
            	}
            	PushFollow(FOLLOW_formal_parameter_list_in_interface_indexer_declaration10153);
            	formal_parameter_list992 = formal_parameter_list();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, formal_parameter_list992.Tree);
            	char_literal993=(IToken)Match(input,99,FOLLOW_99_in_interface_indexer_declaration10157); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal993_tree = (object)adaptor.Create(char_literal993);
            		adaptor.AddChild(root_0, char_literal993_tree);
            	}
            	char_literal994=(IToken)Match(input,92,FOLLOW_92_in_interface_indexer_declaration10161); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal994_tree = (object)adaptor.Create(char_literal994);
            		adaptor.AddChild(root_0, char_literal994_tree);
            	}
            	PushFollow(FOLLOW_interface_accessor_declarations_in_interface_indexer_declaration10165);
            	interface_accessor_declarations995 = interface_accessor_declarations();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, interface_accessor_declarations995.Tree);
            	char_literal996=(IToken)Match(input,93,FOLLOW_93_in_interface_indexer_declaration10169); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal996_tree = (object)adaptor.Create(char_literal996);
            		adaptor.AddChild(root_0, char_literal996_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 273, interface_indexer_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "interface_indexer_declaration"

    public class enum_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "enum_declaration"
    // cs.g:1722:1: enum_declaration : ( attributes )? ( enum_modifiers )? 'enum' identifier ( enum_base )? enum_body ( ';' )? ;
    public csParser.enum_declaration_return enum_declaration() // throws RecognitionException [1]
    {   
        csParser.enum_declaration_return retval = new csParser.enum_declaration_return();
        retval.Start = input.LT(1);
        int enum_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal999 = null;
        IToken char_literal1003 = null;
        csParser.attributes_return attributes997 = default(csParser.attributes_return);

        csParser.enum_modifiers_return enum_modifiers998 = default(csParser.enum_modifiers_return);

        csParser.identifier_return identifier1000 = default(csParser.identifier_return);

        csParser.enum_base_return enum_base1001 = default(csParser.enum_base_return);

        csParser.enum_body_return enum_body1002 = default(csParser.enum_body_return);


        object string_literal999_tree=null;
        object char_literal1003_tree=null;

         const string elementName = "enum_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 274) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1725:1: ( ( attributes )? ( enum_modifiers )? 'enum' identifier ( enum_base )? enum_body ( ';' )? )
            // cs.g:1726:2: ( attributes )? ( enum_modifiers )? 'enum' identifier ( enum_base )? enum_body ( ';' )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1726:2: ( attributes )?
            	int alt328 = 2;
            	int LA328_0 = input.LA(1);

            	if ( (LA328_0 == 97) )
            	{
            	    alt328 = 1;
            	}
            	switch (alt328) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_enum_declaration10192);
            	        	attributes997 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes997.Tree);

            	        }
            	        break;

            	}

            	// cs.g:1726:16: ( enum_modifiers )?
            	int alt329 = 2;
            	int LA329_0 = input.LA(1);

            	if ( (LA329_0 == 138 || (LA329_0 >= 170 && LA329_0 <= 173)) )
            	{
            	    alt329 = 1;
            	}
            	switch (alt329) 
            	{
            	    case 1 :
            	        // cs.g:0:0: enum_modifiers
            	        {
            	        	PushFollow(FOLLOW_enum_modifiers_in_enum_declaration10197);
            	        	enum_modifiers998 = enum_modifiers();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, enum_modifiers998.Tree);

            	        }
            	        break;

            	}

            	string_literal999=(IToken)Match(input,ENUM,FOLLOW_ENUM_in_enum_declaration10202); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal999_tree = (object)adaptor.Create(string_literal999);
            		adaptor.AddChild(root_0, string_literal999_tree);
            	}
            	PushFollow(FOLLOW_identifier_in_enum_declaration10206);
            	identifier1000 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier1000.Tree);
            	// cs.g:1726:56: ( enum_base )?
            	int alt330 = 2;
            	int LA330_0 = input.LA(1);

            	if ( (LA330_0 == 100) )
            	{
            	    alt330 = 1;
            	}
            	switch (alt330) 
            	{
            	    case 1 :
            	        // cs.g:0:0: enum_base
            	        {
            	        	PushFollow(FOLLOW_enum_base_in_enum_declaration10210);
            	        	enum_base1001 = enum_base();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, enum_base1001.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_enum_body_in_enum_declaration10215);
            	enum_body1002 = enum_body();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, enum_body1002.Tree);
            	// cs.g:1726:81: ( ';' )?
            	int alt331 = 2;
            	int LA331_0 = input.LA(1);

            	if ( (LA331_0 == SEMI) )
            	{
            	    alt331 = 1;
            	}
            	switch (alt331) 
            	{
            	    case 1 :
            	        // cs.g:0:0: ';'
            	        {
            	        	char_literal1003=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_enum_declaration10219); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal1003_tree = (object)adaptor.Create(char_literal1003);
            	        		adaptor.AddChild(root_0, char_literal1003_tree);
            	        	}

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 274, enum_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "enum_declaration"

    public class enum_base_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "enum_base"
    // cs.g:1728:1: enum_base : ':' integral_type ;
    public csParser.enum_base_return enum_base() // throws RecognitionException [1]
    {   
        csParser.enum_base_return retval = new csParser.enum_base_return();
        retval.Start = input.LT(1);
        int enum_base_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1004 = null;
        csParser.integral_type_return integral_type1005 = default(csParser.integral_type_return);


        object char_literal1004_tree=null;

         const string elementName = "enum_base"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 275) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1731:1: ( ':' integral_type )
            // cs.g:1732:2: ':' integral_type
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal1004=(IToken)Match(input,100,FOLLOW_100_in_enum_base10242); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1004_tree = (object)adaptor.Create(char_literal1004);
            		adaptor.AddChild(root_0, char_literal1004_tree);
            	}
            	PushFollow(FOLLOW_integral_type_in_enum_base10246);
            	integral_type1005 = integral_type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, integral_type1005.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 275, enum_base_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "enum_base"

    public class enum_body_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "enum_body"
    // cs.g:1733:1: enum_body : '{' ( enum_member_declarations ( ',' )? )? '}' ;
    public csParser.enum_body_return enum_body() // throws RecognitionException [1]
    {   
        csParser.enum_body_return retval = new csParser.enum_body_return();
        retval.Start = input.LT(1);
        int enum_body_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1006 = null;
        IToken char_literal1008 = null;
        IToken char_literal1009 = null;
        csParser.enum_member_declarations_return enum_member_declarations1007 = default(csParser.enum_member_declarations_return);


        object char_literal1006_tree=null;
        object char_literal1008_tree=null;
        object char_literal1009_tree=null;

         const string elementName = "enum_body"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 276) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1736:1: ( '{' ( enum_member_declarations ( ',' )? )? '}' )
            // cs.g:1737:2: '{' ( enum_member_declarations ( ',' )? )? '}'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal1006=(IToken)Match(input,92,FOLLOW_92_in_enum_body10266); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1006_tree = (object)adaptor.Create(char_literal1006);
            		adaptor.AddChild(root_0, char_literal1006_tree);
            	}
            	// cs.g:1737:6: ( enum_member_declarations ( ',' )? )?
            	int alt333 = 2;
            	int LA333_0 = input.LA(1);

            	if ( (LA333_0 == IDENTIFIER || LA333_0 == SET || LA333_0 == 95 || LA333_0 == 97 || (LA333_0 >= 101 && LA333_0 <= 107) || LA333_0 == 109 || (LA333_0 >= 175 && LA333_0 <= 187) || LA333_0 == 199 || (LA333_0 >= 201 && LA333_0 <= 202) || LA333_0 == 208 || (LA333_0 >= 225 && LA333_0 <= 226)) )
            	{
            	    alt333 = 1;
            	}
            	switch (alt333) 
            	{
            	    case 1 :
            	        // cs.g:1737:7: enum_member_declarations ( ',' )?
            	        {
            	        	PushFollow(FOLLOW_enum_member_declarations_in_enum_body10269);
            	        	enum_member_declarations1007 = enum_member_declarations();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, enum_member_declarations1007.Tree);
            	        	// cs.g:1737:32: ( ',' )?
            	        	int alt332 = 2;
            	        	int LA332_0 = input.LA(1);

            	        	if ( (LA332_0 == 98) )
            	        	{
            	        	    alt332 = 1;
            	        	}
            	        	switch (alt332) 
            	        	{
            	        	    case 1 :
            	        	        // cs.g:0:0: ','
            	        	        {
            	        	        	char_literal1008=(IToken)Match(input,98,FOLLOW_98_in_enum_body10271); if (state.failed) return retval;
            	        	        	if ( state.backtracking == 0 )
            	        	        	{char_literal1008_tree = (object)adaptor.Create(char_literal1008);
            	        	        		adaptor.AddChild(root_0, char_literal1008_tree);
            	        	        	}

            	        	        }
            	        	        break;

            	        	}


            	        }
            	        break;

            	}

            	char_literal1009=(IToken)Match(input,93,FOLLOW_93_in_enum_body10278); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1009_tree = (object)adaptor.Create(char_literal1009);
            		adaptor.AddChild(root_0, char_literal1009_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 276, enum_body_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "enum_body"

    public class enum_member_declarations_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "enum_member_declarations"
    // cs.g:1738:1: enum_member_declarations : enum_member_declaration ( ',' enum_member_declaration )* ;
    public csParser.enum_member_declarations_return enum_member_declarations() // throws RecognitionException [1]
    {   
        csParser.enum_member_declarations_return retval = new csParser.enum_member_declarations_return();
        retval.Start = input.LT(1);
        int enum_member_declarations_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1011 = null;
        csParser.enum_member_declaration_return enum_member_declaration1010 = default(csParser.enum_member_declaration_return);

        csParser.enum_member_declaration_return enum_member_declaration1012 = default(csParser.enum_member_declaration_return);


        object char_literal1011_tree=null;

         const string elementName = "enum_member_declarations"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 277) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1741:1: ( enum_member_declaration ( ',' enum_member_declaration )* )
            // cs.g:1742:2: enum_member_declaration ( ',' enum_member_declaration )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations10298);
            	enum_member_declaration1010 = enum_member_declaration();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, enum_member_declaration1010.Tree);
            	// cs.g:1742:26: ( ',' enum_member_declaration )*
            	do 
            	{
            	    int alt334 = 2;
            	    int LA334_0 = input.LA(1);

            	    if ( (LA334_0 == 98) )
            	    {
            	        int LA334_1 = input.LA(2);

            	        if ( (LA334_1 == IDENTIFIER || LA334_1 == SET || LA334_1 == 95 || LA334_1 == 97 || (LA334_1 >= 101 && LA334_1 <= 107) || LA334_1 == 109 || (LA334_1 >= 175 && LA334_1 <= 187) || LA334_1 == 199 || (LA334_1 >= 201 && LA334_1 <= 202) || LA334_1 == 208 || (LA334_1 >= 225 && LA334_1 <= 226)) )
            	        {
            	            alt334 = 1;
            	        }


            	    }


            	    switch (alt334) 
            		{
            			case 1 :
            			    // cs.g:1742:27: ',' enum_member_declaration
            			    {
            			    	char_literal1011=(IToken)Match(input,98,FOLLOW_98_in_enum_member_declarations10301); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1011_tree = (object)adaptor.Create(char_literal1011);
            			    		adaptor.AddChild(root_0, char_literal1011_tree);
            			    	}
            			    	PushFollow(FOLLOW_enum_member_declaration_in_enum_member_declarations10303);
            			    	enum_member_declaration1012 = enum_member_declaration();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, enum_member_declaration1012.Tree);

            			    }
            			    break;

            			default:
            			    goto loop334;
            	    }
            	} while (true);

            	loop334:
            		;	// Stops C# compiler whining that label 'loop334' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 277, enum_member_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "enum_member_declarations"

    public class enum_member_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "enum_member_declaration"
    // cs.g:1743:1: enum_member_declaration : ( attributes )? identifier ( '=' expression )? ;
    public csParser.enum_member_declaration_return enum_member_declaration() // throws RecognitionException [1]
    {   
        csParser.enum_member_declaration_return retval = new csParser.enum_member_declaration_return();
        retval.Start = input.LT(1);
        int enum_member_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1015 = null;
        csParser.attributes_return attributes1013 = default(csParser.attributes_return);

        csParser.identifier_return identifier1014 = default(csParser.identifier_return);

        csParser.expression_return expression1016 = default(csParser.expression_return);


        object char_literal1015_tree=null;

         const string elementName = "enum_member_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 278) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1746:1: ( ( attributes )? identifier ( '=' expression )? )
            // cs.g:1747:2: ( attributes )? identifier ( '=' expression )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1747:2: ( attributes )?
            	int alt335 = 2;
            	int LA335_0 = input.LA(1);

            	if ( (LA335_0 == 97) )
            	{
            	    alt335 = 1;
            	}
            	switch (alt335) 
            	{
            	    case 1 :
            	        // cs.g:0:0: attributes
            	        {
            	        	PushFollow(FOLLOW_attributes_in_enum_member_declaration10325);
            	        	attributes1013 = attributes();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, attributes1013.Tree);

            	        }
            	        break;

            	}

            	PushFollow(FOLLOW_identifier_in_enum_member_declaration10330);
            	identifier1014 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier1014.Tree);
            	// cs.g:1747:29: ( '=' expression )?
            	int alt336 = 2;
            	int LA336_0 = input.LA(1);

            	if ( (LA336_0 == 96) )
            	{
            	    alt336 = 1;
            	}
            	switch (alt336) 
            	{
            	    case 1 :
            	        // cs.g:1747:30: '=' expression
            	        {
            	        	char_literal1015=(IToken)Match(input,96,FOLLOW_96_in_enum_member_declaration10335); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal1015_tree = (object)adaptor.Create(char_literal1015);
            	        		adaptor.AddChild(root_0, char_literal1015_tree);
            	        	}
            	        	PushFollow(FOLLOW_expression_in_enum_member_declaration10339);
            	        	expression1016 = expression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1016.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 278, enum_member_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "enum_member_declaration"

    public class enum_modifiers_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "enum_modifiers"
    // cs.g:1748:1: enum_modifiers : ( enum_modifier )+ ;
    public csParser.enum_modifiers_return enum_modifiers() // throws RecognitionException [1]
    {   
        csParser.enum_modifiers_return retval = new csParser.enum_modifiers_return();
        retval.Start = input.LT(1);
        int enum_modifiers_StartIndex = input.Index();
        object root_0 = null;

        csParser.enum_modifier_return enum_modifier1017 = default(csParser.enum_modifier_return);



         const string elementName = "enum_modifiers"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 279) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1751:1: ( ( enum_modifier )+ )
            // cs.g:1752:2: ( enum_modifier )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1752:2: ( enum_modifier )+
            	int cnt337 = 0;
            	do 
            	{
            	    int alt337 = 2;
            	    int LA337_0 = input.LA(1);

            	    if ( (LA337_0 == 138 || (LA337_0 >= 170 && LA337_0 <= 173)) )
            	    {
            	        alt337 = 1;
            	    }


            	    switch (alt337) 
            		{
            			case 1 :
            			    // cs.g:0:0: enum_modifier
            			    {
            			    	PushFollow(FOLLOW_enum_modifier_in_enum_modifiers10361);
            			    	enum_modifier1017 = enum_modifier();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, enum_modifier1017.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt337 >= 1 ) goto loop337;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee337 =
            		                new EarlyExitException(337, input);
            		            throw eee337;
            	    }
            	    cnt337++;
            	} while (true);

            	loop337:
            		;	// Stops C# compiler whining that label 'loop337' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 279, enum_modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "enum_modifiers"

    public class enum_modifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "enum_modifier"
    // cs.g:1753:1: enum_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' );
    public csParser.enum_modifier_return enum_modifier() // throws RecognitionException [1]
    {   
        csParser.enum_modifier_return retval = new csParser.enum_modifier_return();
        retval.Start = input.LT(1);
        int enum_modifier_StartIndex = input.Index();
        object root_0 = null;

        IToken set1018 = null;

        object set1018_tree=null;

         const string elementName = "enum_modifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 280) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1756:1: ( 'new' | 'public' | 'protected' | 'internal' | 'private' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set1018 = (IToken)input.LT(1);
            	if ( input.LA(1) == 138 || (input.LA(1) >= 170 && input.LA(1) <= 173) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set1018));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 280, enum_modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "enum_modifier"

    public class statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "statement"
    // cs.g:1760:1: statement : ( labeled_statement | declaration_statement | embedded_statement );
    public csParser.statement_return statement() // throws RecognitionException [1]
    {   
        csParser.statement_return retval = new csParser.statement_return();
        retval.Start = input.LT(1);
        int statement_StartIndex = input.Index();
        object root_0 = null;

        csParser.labeled_statement_return labeled_statement1019 = default(csParser.labeled_statement_return);

        csParser.declaration_statement_return declaration_statement1020 = default(csParser.declaration_statement_return);

        csParser.embedded_statement_return embedded_statement1021 = default(csParser.embedded_statement_return);



         const string elementName = "statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 281) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1763:1: ( labeled_statement | declaration_statement | embedded_statement )
            int alt338 = 3;
            alt338 = dfa338.Predict(input);
            switch (alt338) 
            {
                case 1 :
                    // cs.g:1764:2: labeled_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_labeled_statement_in_statement10420);
                    	labeled_statement1019 = labeled_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, labeled_statement1019.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1765:4: declaration_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_declaration_statement_in_statement10425);
                    	declaration_statement1020 = declaration_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, declaration_statement1020.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:1766:4: embedded_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_embedded_statement_in_statement10430);
                    	embedded_statement1021 = embedded_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement1021.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 281, statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public class embedded_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "embedded_statement"
    // cs.g:1767:1: embedded_statement : ( block | empty_statement | expression_statement | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement );
    public csParser.embedded_statement_return embedded_statement() // throws RecognitionException [1]
    {   
        csParser.embedded_statement_return retval = new csParser.embedded_statement_return();
        retval.Start = input.LT(1);
        int embedded_statement_StartIndex = input.Index();
        object root_0 = null;

        csParser.block_return block1022 = default(csParser.block_return);

        csParser.empty_statement_return empty_statement1023 = default(csParser.empty_statement_return);

        csParser.expression_statement_return expression_statement1024 = default(csParser.expression_statement_return);

        csParser.selection_statement_return selection_statement1025 = default(csParser.selection_statement_return);

        csParser.iteration_statement_return iteration_statement1026 = default(csParser.iteration_statement_return);

        csParser.jump_statement_return jump_statement1027 = default(csParser.jump_statement_return);

        csParser.try_statement_return try_statement1028 = default(csParser.try_statement_return);

        csParser.checked_statement_return checked_statement1029 = default(csParser.checked_statement_return);

        csParser.unchecked_statement_return unchecked_statement1030 = default(csParser.unchecked_statement_return);

        csParser.lock_statement_return lock_statement1031 = default(csParser.lock_statement_return);

        csParser.using_statement_return using_statement1032 = default(csParser.using_statement_return);

        csParser.yield_statement_return yield_statement1033 = default(csParser.yield_statement_return);

        csParser.unsafe_statement_return unsafe_statement1034 = default(csParser.unsafe_statement_return);

        csParser.fixed_statement_return fixed_statement1035 = default(csParser.fixed_statement_return);



         const string elementName = "embedded_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 282) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1770:1: ( block | empty_statement | expression_statement | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement )
            int alt339 = 14;
            alt339 = dfa339.Predict(input);
            switch (alt339) 
            {
                case 1 :
                    // cs.g:1771:2: block
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_block_in_embedded_statement10450);
                    	block1022 = block();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block1022.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1772:4: empty_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_empty_statement_in_embedded_statement10455);
                    	empty_statement1023 = empty_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, empty_statement1023.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:1773:4: expression_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_expression_statement_in_embedded_statement10460);
                    	expression_statement1024 = expression_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression_statement1024.Tree);

                    }
                    break;
                case 4 :
                    // cs.g:1774:4: selection_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_selection_statement_in_embedded_statement10465);
                    	selection_statement1025 = selection_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, selection_statement1025.Tree);

                    }
                    break;
                case 5 :
                    // cs.g:1775:4: iteration_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_iteration_statement_in_embedded_statement10470);
                    	iteration_statement1026 = iteration_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, iteration_statement1026.Tree);

                    }
                    break;
                case 6 :
                    // cs.g:1776:4: jump_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_jump_statement_in_embedded_statement10475);
                    	jump_statement1027 = jump_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, jump_statement1027.Tree);

                    }
                    break;
                case 7 :
                    // cs.g:1777:4: try_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_try_statement_in_embedded_statement10480);
                    	try_statement1028 = try_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, try_statement1028.Tree);

                    }
                    break;
                case 8 :
                    // cs.g:1778:4: checked_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_checked_statement_in_embedded_statement10485);
                    	checked_statement1029 = checked_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, checked_statement1029.Tree);

                    }
                    break;
                case 9 :
                    // cs.g:1779:4: unchecked_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_unchecked_statement_in_embedded_statement10490);
                    	unchecked_statement1030 = unchecked_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unchecked_statement1030.Tree);

                    }
                    break;
                case 10 :
                    // cs.g:1780:4: lock_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_lock_statement_in_embedded_statement10495);
                    	lock_statement1031 = lock_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, lock_statement1031.Tree);

                    }
                    break;
                case 11 :
                    // cs.g:1781:4: using_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_using_statement_in_embedded_statement10500);
                    	using_statement1032 = using_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, using_statement1032.Tree);

                    }
                    break;
                case 12 :
                    // cs.g:1782:4: yield_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_yield_statement_in_embedded_statement10506);
                    	yield_statement1033 = yield_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, yield_statement1033.Tree);

                    }
                    break;
                case 13 :
                    // cs.g:1783:4: unsafe_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_unsafe_statement_in_embedded_statement10512);
                    	unsafe_statement1034 = unsafe_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unsafe_statement1034.Tree);

                    }
                    break;
                case 14 :
                    // cs.g:1784:4: fixed_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_fixed_statement_in_embedded_statement10517);
                    	fixed_statement1035 = fixed_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fixed_statement1035.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 282, embedded_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "embedded_statement"

    public class fixed_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "fixed_statement"
    // cs.g:1785:1: fixed_statement : 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement ;
    public csParser.fixed_statement_return fixed_statement() // throws RecognitionException [1]
    {   
        csParser.fixed_statement_return retval = new csParser.fixed_statement_return();
        retval.Start = input.LT(1);
        int fixed_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1036 = null;
        IToken char_literal1037 = null;
        IToken char_literal1040 = null;
        csParser.pointer_type_return pointer_type1038 = default(csParser.pointer_type_return);

        csParser.fixed_pointer_declarators_return fixed_pointer_declarators1039 = default(csParser.fixed_pointer_declarators_return);

        csParser.embedded_statement_return embedded_statement1041 = default(csParser.embedded_statement_return);


        object string_literal1036_tree=null;
        object char_literal1037_tree=null;
        object char_literal1040_tree=null;

         const string elementName = "fixed_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 283) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1788:1: ( 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement )
            // cs.g:1789:2: 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1036=(IToken)Match(input,207,FOLLOW_207_in_fixed_statement10536); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1036_tree = (object)adaptor.Create(string_literal1036);
            		adaptor.AddChild(root_0, string_literal1036_tree);
            	}
            	char_literal1037=(IToken)Match(input,110,FOLLOW_110_in_fixed_statement10540); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1037_tree = (object)adaptor.Create(char_literal1037);
            		adaptor.AddChild(root_0, char_literal1037_tree);
            	}
            	PushFollow(FOLLOW_pointer_type_in_fixed_statement10544);
            	pointer_type1038 = pointer_type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, pointer_type1038.Tree);
            	PushFollow(FOLLOW_fixed_pointer_declarators_in_fixed_statement10546);
            	fixed_pointer_declarators1039 = fixed_pointer_declarators();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fixed_pointer_declarators1039.Tree);
            	char_literal1040=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_fixed_statement10550); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1040_tree = (object)adaptor.Create(char_literal1040);
            		adaptor.AddChild(root_0, char_literal1040_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_fixed_statement10554);
            	embedded_statement1041 = embedded_statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement1041.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 283, fixed_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "fixed_statement"

    public class fixed_pointer_declarators_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "fixed_pointer_declarators"
    // cs.g:1790:1: fixed_pointer_declarators : fixed_pointer_declarator ( ',' fixed_pointer_declarator )* ;
    public csParser.fixed_pointer_declarators_return fixed_pointer_declarators() // throws RecognitionException [1]
    {   
        csParser.fixed_pointer_declarators_return retval = new csParser.fixed_pointer_declarators_return();
        retval.Start = input.LT(1);
        int fixed_pointer_declarators_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1043 = null;
        csParser.fixed_pointer_declarator_return fixed_pointer_declarator1042 = default(csParser.fixed_pointer_declarator_return);

        csParser.fixed_pointer_declarator_return fixed_pointer_declarator1044 = default(csParser.fixed_pointer_declarator_return);


        object char_literal1043_tree=null;

         const string elementName = "fixed_pointer_declarators"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 284) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1793:1: ( fixed_pointer_declarator ( ',' fixed_pointer_declarator )* )
            // cs.g:1794:2: fixed_pointer_declarator ( ',' fixed_pointer_declarator )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators10574);
            	fixed_pointer_declarator1042 = fixed_pointer_declarator();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fixed_pointer_declarator1042.Tree);
            	// cs.g:1794:29: ( ',' fixed_pointer_declarator )*
            	do 
            	{
            	    int alt340 = 2;
            	    int LA340_0 = input.LA(1);

            	    if ( (LA340_0 == 98) )
            	    {
            	        alt340 = 1;
            	    }


            	    switch (alt340) 
            		{
            			case 1 :
            			    // cs.g:1794:30: ',' fixed_pointer_declarator
            			    {
            			    	char_literal1043=(IToken)Match(input,98,FOLLOW_98_in_fixed_pointer_declarators10579); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1043_tree = (object)adaptor.Create(char_literal1043);
            			    		adaptor.AddChild(root_0, char_literal1043_tree);
            			    	}
            			    	PushFollow(FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators10583);
            			    	fixed_pointer_declarator1044 = fixed_pointer_declarator();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fixed_pointer_declarator1044.Tree);

            			    }
            			    break;

            			default:
            			    goto loop340;
            	    }
            	} while (true);

            	loop340:
            		;	// Stops C# compiler whining that label 'loop340' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 284, fixed_pointer_declarators_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_declarators"

    public class fixed_pointer_declarator_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "fixed_pointer_declarator"
    // cs.g:1795:1: fixed_pointer_declarator : identifier '=' fixed_pointer_initializer ;
    public csParser.fixed_pointer_declarator_return fixed_pointer_declarator() // throws RecognitionException [1]
    {   
        csParser.fixed_pointer_declarator_return retval = new csParser.fixed_pointer_declarator_return();
        retval.Start = input.LT(1);
        int fixed_pointer_declarator_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1046 = null;
        csParser.identifier_return identifier1045 = default(csParser.identifier_return);

        csParser.fixed_pointer_initializer_return fixed_pointer_initializer1047 = default(csParser.fixed_pointer_initializer_return);


        object char_literal1046_tree=null;

         const string elementName = "fixed_pointer_declarator"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 285) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1798:1: ( identifier '=' fixed_pointer_initializer )
            // cs.g:1799:2: identifier '=' fixed_pointer_initializer
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_identifier_in_fixed_pointer_declarator10605);
            	identifier1045 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier1045.Tree);
            	char_literal1046=(IToken)Match(input,96,FOLLOW_96_in_fixed_pointer_declarator10609); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1046_tree = (object)adaptor.Create(char_literal1046);
            		adaptor.AddChild(root_0, char_literal1046_tree);
            	}
            	PushFollow(FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator10613);
            	fixed_pointer_initializer1047 = fixed_pointer_initializer();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, fixed_pointer_initializer1047.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 285, fixed_pointer_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_declarator"

    public class fixed_pointer_initializer_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "fixed_pointer_initializer"
    // cs.g:1800:1: fixed_pointer_initializer : ( '&' variable_reference | expression );
    public csParser.fixed_pointer_initializer_return fixed_pointer_initializer() // throws RecognitionException [1]
    {   
        csParser.fixed_pointer_initializer_return retval = new csParser.fixed_pointer_initializer_return();
        retval.Start = input.LT(1);
        int fixed_pointer_initializer_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1048 = null;
        csParser.variable_reference_return variable_reference1049 = default(csParser.variable_reference_return);

        csParser.expression_return expression1050 = default(csParser.expression_return);


        object char_literal1048_tree=null;

         const string elementName = "fixed_pointer_initializer"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 286) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1803:1: ( '&' variable_reference | expression )
            int alt341 = 2;
            alt341 = dfa341.Predict(input);
            switch (alt341) 
            {
                case 1 :
                    // cs.g:1804:2: '&' variable_reference
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal1048=(IToken)Match(input,129,FOLLOW_129_in_fixed_pointer_initializer10633); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal1048_tree = (object)adaptor.Create(char_literal1048);
                    		adaptor.AddChild(root_0, char_literal1048_tree);
                    	}
                    	PushFollow(FOLLOW_variable_reference_in_fixed_pointer_initializer10637);
                    	variable_reference1049 = variable_reference();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, variable_reference1049.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1805:4: expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_expression_in_fixed_pointer_initializer10645);
                    	expression1050 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1050.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 286, fixed_pointer_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "fixed_pointer_initializer"

    public class unsafe_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "unsafe_statement"
    // cs.g:1806:1: unsafe_statement : 'unsafe' block ;
    public csParser.unsafe_statement_return unsafe_statement() // throws RecognitionException [1]
    {   
        csParser.unsafe_statement_return retval = new csParser.unsafe_statement_return();
        retval.Start = input.LT(1);
        int unsafe_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1051 = null;
        csParser.block_return block1052 = default(csParser.block_return);


        object string_literal1051_tree=null;

         const string elementName = "unsafe_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 287) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1809:1: ( 'unsafe' block )
            // cs.g:1810:2: 'unsafe' block
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1051=(IToken)Match(input,174,FOLLOW_174_in_unsafe_statement10664); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1051_tree = (object)adaptor.Create(string_literal1051);
            		adaptor.AddChild(root_0, string_literal1051_tree);
            	}
            	PushFollow(FOLLOW_block_in_unsafe_statement10668);
            	block1052 = block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block1052.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 287, unsafe_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unsafe_statement"

    public class block_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "block"
    // cs.g:1811:1: block : ( ';' | '{' ( statement_list )? '}' );
    public csParser.block_return block() // throws RecognitionException [1]
    {   
        csParser.block_return retval = new csParser.block_return();
        retval.Start = input.LT(1);
        int block_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1053 = null;
        IToken char_literal1054 = null;
        IToken char_literal1056 = null;
        csParser.statement_list_return statement_list1055 = default(csParser.statement_list_return);


        object char_literal1053_tree=null;
        object char_literal1054_tree=null;
        object char_literal1056_tree=null;

         const string elementName = "block"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 288) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1814:1: ( ';' | '{' ( statement_list )? '}' )
            int alt343 = 2;
            int LA343_0 = input.LA(1);

            if ( (LA343_0 == SEMI) )
            {
                alt343 = 1;
            }
            else if ( (LA343_0 == 92) )
            {
                alt343 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d343s0 =
                    new NoViableAltException("", 343, 0, input);

                throw nvae_d343s0;
            }
            switch (alt343) 
            {
                case 1 :
                    // cs.g:1815:2: ';'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal1053=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_block10687); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal1053_tree = (object)adaptor.Create(char_literal1053);
                    		adaptor.AddChild(root_0, char_literal1053_tree);
                    	}

                    }
                    break;
                case 2 :
                    // cs.g:1816:4: '{' ( statement_list )? '}'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	char_literal1054=(IToken)Match(input,92,FOLLOW_92_in_block10692); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal1054_tree = (object)adaptor.Create(char_literal1054);
                    		adaptor.AddChild(root_0, char_literal1054_tree);
                    	}
                    	// cs.g:1816:10: ( statement_list )?
                    	int alt342 = 2;
                    	int LA342_0 = input.LA(1);

                    	if ( (LA342_0 == IF || (LA342_0 >= IDENTIFIER && LA342_0 <= NULL) || LA342_0 == MINUS || LA342_0 == USING || LA342_0 == SET || LA342_0 == SEMI || (LA342_0 >= 90 && LA342_0 <= 92) || LA342_0 == 95 || (LA342_0 >= 101 && LA342_0 <= 111) || (LA342_0 >= 113 && LA342_0 <= 122) || (LA342_0 >= 124 && LA342_0 <= 129) || (LA342_0 >= 132 && LA342_0 <= 144) || (LA342_0 >= 174 && LA342_0 <= 187) || LA342_0 == 194 || LA342_0 == 199 || (LA342_0 >= 201 && LA342_0 <= 202) || (LA342_0 >= 207 && LA342_0 <= 209) || LA342_0 == 211 || (LA342_0 >= 213 && LA342_0 <= 221) || (LA342_0 >= 224 && LA342_0 <= 226)) )
                    	{
                    	    alt342 = 1;
                    	}
                    	switch (alt342) 
                    	{
                    	    case 1 :
                    	        // cs.g:0:0: statement_list
                    	        {
                    	        	PushFollow(FOLLOW_statement_list_in_block10696);
                    	        	statement_list1055 = statement_list();
                    	        	state.followingStackPointer--;
                    	        	if (state.failed) return retval;
                    	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement_list1055.Tree);

                    	        }
                    	        break;

                    	}

                    	char_literal1056=(IToken)Match(input,93,FOLLOW_93_in_block10701); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{char_literal1056_tree = (object)adaptor.Create(char_literal1056);
                    		adaptor.AddChild(root_0, char_literal1056_tree);
                    	}

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 288, block_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "block"

    public class statement_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "statement_list"
    // cs.g:1817:1: statement_list : ( statement )+ ;
    public csParser.statement_list_return statement_list() // throws RecognitionException [1]
    {   
        csParser.statement_list_return retval = new csParser.statement_list_return();
        retval.Start = input.LT(1);
        int statement_list_StartIndex = input.Index();
        object root_0 = null;

        csParser.statement_return statement1057 = default(csParser.statement_return);



         const string elementName = "statement_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 289) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1820:1: ( ( statement )+ )
            // cs.g:1821:2: ( statement )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1821:2: ( statement )+
            	int cnt344 = 0;
            	do 
            	{
            	    int alt344 = 2;
            	    int LA344_0 = input.LA(1);

            	    if ( (LA344_0 == 143) )
            	    {
            	        int LA344_2 = input.LA(2);

            	        if ( (LA344_2 == 110) )
            	        {
            	            alt344 = 1;
            	        }


            	    }
            	    else if ( (LA344_0 == IF || (LA344_0 >= IDENTIFIER && LA344_0 <= NULL) || LA344_0 == MINUS || LA344_0 == USING || LA344_0 == SET || LA344_0 == SEMI || (LA344_0 >= 90 && LA344_0 <= 92) || LA344_0 == 95 || (LA344_0 >= 101 && LA344_0 <= 111) || (LA344_0 >= 113 && LA344_0 <= 122) || (LA344_0 >= 124 && LA344_0 <= 129) || (LA344_0 >= 132 && LA344_0 <= 142) || LA344_0 == 144 || (LA344_0 >= 174 && LA344_0 <= 187) || LA344_0 == 194 || LA344_0 == 199 || (LA344_0 >= 201 && LA344_0 <= 202) || (LA344_0 >= 207 && LA344_0 <= 209) || LA344_0 == 211 || (LA344_0 >= 213 && LA344_0 <= 221) || (LA344_0 >= 224 && LA344_0 <= 226)) )
            	    {
            	        alt344 = 1;
            	    }


            	    switch (alt344) 
            		{
            			case 1 :
            			    // cs.g:0:0: statement
            			    {
            			    	PushFollow(FOLLOW_statement_in_statement_list10721);
            			    	statement1057 = statement();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement1057.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt344 >= 1 ) goto loop344;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee344 =
            		                new EarlyExitException(344, input);
            		            throw eee344;
            	    }
            	    cnt344++;
            	} while (true);

            	loop344:
            		;	// Stops C# compiler whining that label 'loop344' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 289, statement_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "statement_list"

    public class empty_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "empty_statement"
    // cs.g:1822:1: empty_statement : ';' ;
    public csParser.empty_statement_return empty_statement() // throws RecognitionException [1]
    {   
        csParser.empty_statement_return retval = new csParser.empty_statement_return();
        retval.Start = input.LT(1);
        int empty_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1058 = null;

        object char_literal1058_tree=null;

         const string elementName = "empty_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 290) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1825:1: ( ';' )
            // cs.g:1826:2: ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal1058=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_empty_statement10742); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1058_tree = (object)adaptor.Create(char_literal1058);
            		adaptor.AddChild(root_0, char_literal1058_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 290, empty_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "empty_statement"

    public class labeled_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "labeled_statement"
    // cs.g:1827:1: labeled_statement : identifier ':' statement ;
    public csParser.labeled_statement_return labeled_statement() // throws RecognitionException [1]
    {   
        csParser.labeled_statement_return retval = new csParser.labeled_statement_return();
        retval.Start = input.LT(1);
        int labeled_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1060 = null;
        csParser.identifier_return identifier1059 = default(csParser.identifier_return);

        csParser.statement_return statement1061 = default(csParser.statement_return);


        object char_literal1060_tree=null;

         const string elementName = "labeled_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 291) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1830:1: ( identifier ':' statement )
            // cs.g:1831:2: identifier ':' statement
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_identifier_in_labeled_statement10762);
            	identifier1059 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier1059.Tree);
            	char_literal1060=(IToken)Match(input,100,FOLLOW_100_in_labeled_statement10766); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1060_tree = (object)adaptor.Create(char_literal1060);
            		adaptor.AddChild(root_0, char_literal1060_tree);
            	}
            	PushFollow(FOLLOW_statement_in_labeled_statement10770);
            	statement1061 = statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement1061.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 291, labeled_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "labeled_statement"

    public class declaration_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "declaration_statement"
    // cs.g:1832:1: declaration_statement : ( local_variable_declaration | local_constant_declaration ) ';' ;
    public csParser.declaration_statement_return declaration_statement() // throws RecognitionException [1]
    {   
        csParser.declaration_statement_return retval = new csParser.declaration_statement_return();
        retval.Start = input.LT(1);
        int declaration_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1064 = null;
        csParser.local_variable_declaration_return local_variable_declaration1062 = default(csParser.local_variable_declaration_return);

        csParser.local_constant_declaration_return local_constant_declaration1063 = default(csParser.local_constant_declaration_return);


        object char_literal1064_tree=null;

         const string elementName = "declaration_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 292) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1835:1: ( ( local_variable_declaration | local_constant_declaration ) ';' )
            // cs.g:1836:2: ( local_variable_declaration | local_constant_declaration ) ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1836:2: ( local_variable_declaration | local_constant_declaration )
            	int alt345 = 2;
            	int LA345_0 = input.LA(1);

            	if ( (LA345_0 == IDENTIFIER || LA345_0 == SET || LA345_0 == 95 || (LA345_0 >= 101 && LA345_0 <= 107) || LA345_0 == 109 || (LA345_0 >= 113 && LA345_0 <= 122) || (LA345_0 >= 132 && LA345_0 <= 137) || (LA345_0 >= 175 && LA345_0 <= 187) || LA345_0 == 199 || (LA345_0 >= 201 && LA345_0 <= 202) || (LA345_0 >= 208 && LA345_0 <= 209) || (LA345_0 >= 225 && LA345_0 <= 226)) )
            	{
            	    alt345 = 1;
            	}
            	else if ( (LA345_0 == 194) )
            	{
            	    alt345 = 2;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d345s0 =
            	        new NoViableAltException("", 345, 0, input);

            	    throw nvae_d345s0;
            	}
            	switch (alt345) 
            	{
            	    case 1 :
            	        // cs.g:1836:3: local_variable_declaration
            	        {
            	        	PushFollow(FOLLOW_local_variable_declaration_in_declaration_statement10791);
            	        	local_variable_declaration1062 = local_variable_declaration();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_declaration1062.Tree);

            	        }
            	        break;
            	    case 2 :
            	        // cs.g:1837:4: local_constant_declaration
            	        {
            	        	PushFollow(FOLLOW_local_constant_declaration_in_declaration_statement10797);
            	        	local_constant_declaration1063 = local_constant_declaration();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_constant_declaration1063.Tree);

            	        }
            	        break;

            	}

            	char_literal1064=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_declaration_statement10800); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1064_tree = (object)adaptor.Create(char_literal1064);
            		adaptor.AddChild(root_0, char_literal1064_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 292, declaration_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "declaration_statement"

    public class local_variable_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "local_variable_declaration"
    // cs.g:1838:1: local_variable_declaration : local_variable_type local_variable_declarators ;
    public csParser.local_variable_declaration_return local_variable_declaration() // throws RecognitionException [1]
    {   
        csParser.local_variable_declaration_return retval = new csParser.local_variable_declaration_return();
        retval.Start = input.LT(1);
        int local_variable_declaration_StartIndex = input.Index();
        object root_0 = null;

        csParser.local_variable_type_return local_variable_type1065 = default(csParser.local_variable_type_return);

        csParser.local_variable_declarators_return local_variable_declarators1066 = default(csParser.local_variable_declarators_return);



         const string elementName = "local_variable_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 293) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1841:1: ( local_variable_type local_variable_declarators )
            // cs.g:1842:2: local_variable_type local_variable_declarators
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_local_variable_type_in_local_variable_declaration10820);
            	local_variable_type1065 = local_variable_type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_type1065.Tree);
            	PushFollow(FOLLOW_local_variable_declarators_in_local_variable_declaration10824);
            	local_variable_declarators1066 = local_variable_declarators();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_declarators1066.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 293, local_variable_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "local_variable_declaration"

    public class local_variable_type_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "local_variable_type"
    // cs.g:1843:1: local_variable_type : ( type | 'var' | 'dynamic' );
    public csParser.local_variable_type_return local_variable_type() // throws RecognitionException [1]
    {   
        csParser.local_variable_type_return retval = new csParser.local_variable_type_return();
        retval.Start = input.LT(1);
        int local_variable_type_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1068 = null;
        IToken string_literal1069 = null;
        csParser.type_return type1067 = default(csParser.type_return);


        object string_literal1068_tree=null;
        object string_literal1069_tree=null;

         const string elementName = "local_variable_type"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 294) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1846:1: ( type | 'var' | 'dynamic' )
            int alt346 = 3;
            switch ( input.LA(1) ) 
            {
            case IDENTIFIER:
            case SET:
            case 95:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 109:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 199:
            case 201:
            case 202:
            case 225:
            case 226:
            	{
                alt346 = 1;
                }
                break;
            case 208:
            	{
                int LA346_2 = input.LA(2);

                if ( (synpred614_cs()) )
                {
                    alt346 = 1;
                }
                else if ( (synpred615_cs()) )
                {
                    alt346 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d346s2 =
                        new NoViableAltException("", 346, 2, input);

                    throw nvae_d346s2;
                }
                }
                break;
            case 209:
            	{
                alt346 = 3;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d346s0 =
            	        new NoViableAltException("", 346, 0, input);

            	    throw nvae_d346s0;
            }

            switch (alt346) 
            {
                case 1 :
                    // cs.g:1847:2: type
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_type_in_local_variable_type10844);
                    	type1067 = type();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type1067.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1848:4: 'var'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal1068=(IToken)Match(input,208,FOLLOW_208_in_local_variable_type10849); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal1068_tree = (object)adaptor.Create(string_literal1068);
                    		adaptor.AddChild(root_0, string_literal1068_tree);
                    	}

                    }
                    break;
                case 3 :
                    // cs.g:1849:4: 'dynamic'
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	string_literal1069=(IToken)Match(input,209,FOLLOW_209_in_local_variable_type10855); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{string_literal1069_tree = (object)adaptor.Create(string_literal1069);
                    		adaptor.AddChild(root_0, string_literal1069_tree);
                    	}

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 294, local_variable_type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "local_variable_type"

    public class local_variable_declarators_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "local_variable_declarators"
    // cs.g:1850:1: local_variable_declarators : local_variable_declarator ( ',' local_variable_declarator )* ;
    public csParser.local_variable_declarators_return local_variable_declarators() // throws RecognitionException [1]
    {   
        csParser.local_variable_declarators_return retval = new csParser.local_variable_declarators_return();
        retval.Start = input.LT(1);
        int local_variable_declarators_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1071 = null;
        csParser.local_variable_declarator_return local_variable_declarator1070 = default(csParser.local_variable_declarator_return);

        csParser.local_variable_declarator_return local_variable_declarator1072 = default(csParser.local_variable_declarator_return);


        object char_literal1071_tree=null;

         const string elementName = "local_variable_declarators"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 295) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1853:1: ( local_variable_declarator ( ',' local_variable_declarator )* )
            // cs.g:1854:2: local_variable_declarator ( ',' local_variable_declarator )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators10874);
            	local_variable_declarator1070 = local_variable_declarator();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_declarator1070.Tree);
            	// cs.g:1854:28: ( ',' local_variable_declarator )*
            	do 
            	{
            	    int alt347 = 2;
            	    int LA347_0 = input.LA(1);

            	    if ( (LA347_0 == 98) )
            	    {
            	        alt347 = 1;
            	    }


            	    switch (alt347) 
            		{
            			case 1 :
            			    // cs.g:1854:29: ',' local_variable_declarator
            			    {
            			    	char_literal1071=(IToken)Match(input,98,FOLLOW_98_in_local_variable_declarators10877); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1071_tree = (object)adaptor.Create(char_literal1071);
            			    		adaptor.AddChild(root_0, char_literal1071_tree);
            			    	}
            			    	PushFollow(FOLLOW_local_variable_declarator_in_local_variable_declarators10879);
            			    	local_variable_declarator1072 = local_variable_declarator();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_declarator1072.Tree);

            			    }
            			    break;

            			default:
            			    goto loop347;
            	    }
            	} while (true);

            	loop347:
            		;	// Stops C# compiler whining that label 'loop347' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 295, local_variable_declarators_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "local_variable_declarators"

    public class local_variable_declarator_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "local_variable_declarator"
    // cs.g:1855:1: local_variable_declarator : identifier ( '=' local_variable_initializer )? ;
    public csParser.local_variable_declarator_return local_variable_declarator() // throws RecognitionException [1]
    {   
        csParser.local_variable_declarator_return retval = new csParser.local_variable_declarator_return();
        retval.Start = input.LT(1);
        int local_variable_declarator_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1074 = null;
        csParser.identifier_return identifier1073 = default(csParser.identifier_return);

        csParser.local_variable_initializer_return local_variable_initializer1075 = default(csParser.local_variable_initializer_return);


        object char_literal1074_tree=null;

         const string elementName = "local_variable_declarator"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 296) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1858:1: ( identifier ( '=' local_variable_initializer )? )
            // cs.g:1859:2: identifier ( '=' local_variable_initializer )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_identifier_in_local_variable_declarator10901);
            	identifier1073 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier1073.Tree);
            	// cs.g:1859:13: ( '=' local_variable_initializer )?
            	int alt348 = 2;
            	int LA348_0 = input.LA(1);

            	if ( (LA348_0 == 96) )
            	{
            	    alt348 = 1;
            	}
            	switch (alt348) 
            	{
            	    case 1 :
            	        // cs.g:1859:14: '=' local_variable_initializer
            	        {
            	        	char_literal1074=(IToken)Match(input,96,FOLLOW_96_in_local_variable_declarator10904); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal1074_tree = (object)adaptor.Create(char_literal1074);
            	        		adaptor.AddChild(root_0, char_literal1074_tree);
            	        	}
            	        	PushFollow(FOLLOW_local_variable_initializer_in_local_variable_declarator10908);
            	        	local_variable_initializer1075 = local_variable_initializer();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_initializer1075.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 296, local_variable_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "local_variable_declarator"

    public class local_variable_initializer_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "local_variable_initializer"
    // cs.g:1861:1: local_variable_initializer : ( expression | array_initializer | stackalloc_initializer );
    public csParser.local_variable_initializer_return local_variable_initializer() // throws RecognitionException [1]
    {   
        csParser.local_variable_initializer_return retval = new csParser.local_variable_initializer_return();
        retval.Start = input.LT(1);
        int local_variable_initializer_StartIndex = input.Index();
        object root_0 = null;

        csParser.expression_return expression1076 = default(csParser.expression_return);

        csParser.array_initializer_return array_initializer1077 = default(csParser.array_initializer_return);

        csParser.stackalloc_initializer_return stackalloc_initializer1078 = default(csParser.stackalloc_initializer_return);



         const string elementName = "local_variable_initializer"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 297) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1864:1: ( expression | array_initializer | stackalloc_initializer )
            int alt349 = 3;
            switch ( input.LA(1) ) 
            {
            case IDENTIFIER:
            case Real_literal:
            case NUMBER:
            case Hex_number:
            case Character_literal:
            case STRINGLITERAL:
            case Verbatim_string_literal:
            case TRUE:
            case FALSE:
            case NULL:
            case MINUS:
            case SET:
            case 90:
            case 91:
            case 95:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 109:
            case 110:
            case 111:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 199:
            case 201:
            case 202:
            case 208:
            case 225:
            case 226:
            	{
                alt349 = 1;
                }
                break;
            case 92:
            	{
                alt349 = 2;
                }
                break;
            case 210:
            	{
                alt349 = 3;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d349s0 =
            	        new NoViableAltException("", 349, 0, input);

            	    throw nvae_d349s0;
            }

            switch (alt349) 
            {
                case 1 :
                    // cs.g:1865:2: expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_expression_in_local_variable_initializer10933);
                    	expression1076 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1076.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1866:4: array_initializer
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_array_initializer_in_local_variable_initializer10938);
                    	array_initializer1077 = array_initializer();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, array_initializer1077.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:1867:4: stackalloc_initializer
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_stackalloc_initializer_in_local_variable_initializer10944);
                    	stackalloc_initializer1078 = stackalloc_initializer();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, stackalloc_initializer1078.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 297, local_variable_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "local_variable_initializer"

    public class stackalloc_initializer_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "stackalloc_initializer"
    // cs.g:1868:1: stackalloc_initializer : 'stackalloc' unmanaged_type '[' expression ']' ;
    public csParser.stackalloc_initializer_return stackalloc_initializer() // throws RecognitionException [1]
    {   
        csParser.stackalloc_initializer_return retval = new csParser.stackalloc_initializer_return();
        retval.Start = input.LT(1);
        int stackalloc_initializer_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1079 = null;
        IToken char_literal1081 = null;
        IToken char_literal1083 = null;
        csParser.unmanaged_type_return unmanaged_type1080 = default(csParser.unmanaged_type_return);

        csParser.expression_return expression1082 = default(csParser.expression_return);


        object string_literal1079_tree=null;
        object char_literal1081_tree=null;
        object char_literal1083_tree=null;

         const string elementName = "stackalloc_initializer"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 298) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1871:1: ( 'stackalloc' unmanaged_type '[' expression ']' )
            // cs.g:1872:2: 'stackalloc' unmanaged_type '[' expression ']'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1079=(IToken)Match(input,210,FOLLOW_210_in_stackalloc_initializer10963); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1079_tree = (object)adaptor.Create(string_literal1079);
            		adaptor.AddChild(root_0, string_literal1079_tree);
            	}
            	PushFollow(FOLLOW_unmanaged_type_in_stackalloc_initializer10967);
            	unmanaged_type1080 = unmanaged_type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unmanaged_type1080.Tree);
            	char_literal1081=(IToken)Match(input,97,FOLLOW_97_in_stackalloc_initializer10971); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1081_tree = (object)adaptor.Create(char_literal1081);
            		adaptor.AddChild(root_0, char_literal1081_tree);
            	}
            	PushFollow(FOLLOW_expression_in_stackalloc_initializer10975);
            	expression1082 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1082.Tree);
            	char_literal1083=(IToken)Match(input,99,FOLLOW_99_in_stackalloc_initializer10979); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1083_tree = (object)adaptor.Create(char_literal1083);
            		adaptor.AddChild(root_0, char_literal1083_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 298, stackalloc_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "stackalloc_initializer"

    public class local_constant_declaration_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "local_constant_declaration"
    // cs.g:1873:1: local_constant_declaration : 'const' type constant_declarators ;
    public csParser.local_constant_declaration_return local_constant_declaration() // throws RecognitionException [1]
    {   
        csParser.local_constant_declaration_return retval = new csParser.local_constant_declaration_return();
        retval.Start = input.LT(1);
        int local_constant_declaration_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1084 = null;
        csParser.type_return type1085 = default(csParser.type_return);

        csParser.constant_declarators_return constant_declarators1086 = default(csParser.constant_declarators_return);


        object string_literal1084_tree=null;

         const string elementName = "local_constant_declaration"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 299) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1876:1: ( 'const' type constant_declarators )
            // cs.g:1877:2: 'const' type constant_declarators
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1084=(IToken)Match(input,194,FOLLOW_194_in_local_constant_declaration10999); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1084_tree = (object)adaptor.Create(string_literal1084);
            		adaptor.AddChild(root_0, string_literal1084_tree);
            	}
            	PushFollow(FOLLOW_type_in_local_constant_declaration11003);
            	type1085 = type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, type1085.Tree);
            	PushFollow(FOLLOW_constant_declarators_in_local_constant_declaration11007);
            	constant_declarators1086 = constant_declarators();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_declarators1086.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 299, local_constant_declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "local_constant_declaration"

    public class constant_declarators_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "constant_declarators"
    // cs.g:1878:1: constant_declarators : constant_declarator ( ',' constant_declarator )* ;
    public csParser.constant_declarators_return constant_declarators() // throws RecognitionException [1]
    {   
        csParser.constant_declarators_return retval = new csParser.constant_declarators_return();
        retval.Start = input.LT(1);
        int constant_declarators_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1088 = null;
        csParser.constant_declarator_return constant_declarator1087 = default(csParser.constant_declarator_return);

        csParser.constant_declarator_return constant_declarator1089 = default(csParser.constant_declarator_return);


        object char_literal1088_tree=null;

         const string elementName = "constant_declarators"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 300) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1881:1: ( constant_declarator ( ',' constant_declarator )* )
            // cs.g:1882:2: constant_declarator ( ',' constant_declarator )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_constant_declarator_in_constant_declarators11027);
            	constant_declarator1087 = constant_declarator();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_declarator1087.Tree);
            	// cs.g:1882:22: ( ',' constant_declarator )*
            	do 
            	{
            	    int alt350 = 2;
            	    int LA350_0 = input.LA(1);

            	    if ( (LA350_0 == 98) )
            	    {
            	        alt350 = 1;
            	    }


            	    switch (alt350) 
            		{
            			case 1 :
            			    // cs.g:1882:23: ',' constant_declarator
            			    {
            			    	char_literal1088=(IToken)Match(input,98,FOLLOW_98_in_constant_declarators11030); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1088_tree = (object)adaptor.Create(char_literal1088);
            			    		adaptor.AddChild(root_0, char_literal1088_tree);
            			    	}
            			    	PushFollow(FOLLOW_constant_declarator_in_constant_declarators11032);
            			    	constant_declarator1089 = constant_declarator();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_declarator1089.Tree);

            			    }
            			    break;

            			default:
            			    goto loop350;
            	    }
            	} while (true);

            	loop350:
            		;	// Stops C# compiler whining that label 'loop350' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 300, constant_declarators_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constant_declarators"

    public class constant_declarator_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "constant_declarator"
    // cs.g:1883:1: constant_declarator : identifier ( '=' constant_expression )? ;
    public csParser.constant_declarator_return constant_declarator() // throws RecognitionException [1]
    {   
        csParser.constant_declarator_return retval = new csParser.constant_declarator_return();
        retval.Start = input.LT(1);
        int constant_declarator_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1091 = null;
        csParser.identifier_return identifier1090 = default(csParser.identifier_return);

        csParser.constant_expression_return constant_expression1092 = default(csParser.constant_expression_return);


        object char_literal1091_tree=null;

         const string elementName = "constant_declarator"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 301) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1886:1: ( identifier ( '=' constant_expression )? )
            // cs.g:1887:2: identifier ( '=' constant_expression )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_identifier_in_constant_declarator11054);
            	identifier1090 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier1090.Tree);
            	// cs.g:1887:15: ( '=' constant_expression )?
            	int alt351 = 2;
            	int LA351_0 = input.LA(1);

            	if ( (LA351_0 == 96) )
            	{
            	    alt351 = 1;
            	}
            	switch (alt351) 
            	{
            	    case 1 :
            	        // cs.g:1887:16: '=' constant_expression
            	        {
            	        	char_literal1091=(IToken)Match(input,96,FOLLOW_96_in_constant_declarator11059); if (state.failed) return retval;
            	        	if ( state.backtracking == 0 )
            	        	{char_literal1091_tree = (object)adaptor.Create(char_literal1091);
            	        		adaptor.AddChild(root_0, char_literal1091_tree);
            	        	}
            	        	PushFollow(FOLLOW_constant_expression_in_constant_declarator11063);
            	        	constant_expression1092 = constant_expression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_expression1092.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 301, constant_declarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constant_declarator"

    public class expression_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "expression_statement"
    // cs.g:1889:1: expression_statement : expression ';' ;
    public csParser.expression_statement_return expression_statement() // throws RecognitionException [1]
    {   
        csParser.expression_statement_return retval = new csParser.expression_statement_return();
        retval.Start = input.LT(1);
        int expression_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1094 = null;
        csParser.expression_return expression1093 = default(csParser.expression_return);


        object char_literal1094_tree=null;

         const string elementName = "expression_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 302) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1892:1: ( expression ';' )
            // cs.g:1893:2: expression ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_expression_in_expression_statement11086);
            	expression1093 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1093.Tree);
            	char_literal1094=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_expression_statement11090); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1094_tree = (object)adaptor.Create(char_literal1094);
            		adaptor.AddChild(root_0, char_literal1094_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 302, expression_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "expression_statement"

    public class statement_expression_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "statement_expression"
    // cs.g:1894:1: statement_expression : ( invocation_expression | object_creation_expression | assignment | unary_expression );
    public csParser.statement_expression_return statement_expression() // throws RecognitionException [1]
    {   
        csParser.statement_expression_return retval = new csParser.statement_expression_return();
        retval.Start = input.LT(1);
        int statement_expression_StartIndex = input.Index();
        object root_0 = null;

        csParser.invocation_expression_return invocation_expression1095 = default(csParser.invocation_expression_return);

        csParser.object_creation_expression_return object_creation_expression1096 = default(csParser.object_creation_expression_return);

        csParser.assignment_return assignment1097 = default(csParser.assignment_return);

        csParser.unary_expression_return unary_expression1098 = default(csParser.unary_expression_return);



         const string elementName = "statement_expression"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 303) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1897:1: ( invocation_expression | object_creation_expression | assignment | unary_expression )
            int alt352 = 4;
            alt352 = dfa352.Predict(input);
            switch (alt352) 
            {
                case 1 :
                    // cs.g:1898:2: invocation_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_invocation_expression_in_statement_expression11110);
                    	invocation_expression1095 = invocation_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, invocation_expression1095.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1899:4: object_creation_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_object_creation_expression_in_statement_expression11115);
                    	object_creation_expression1096 = object_creation_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, object_creation_expression1096.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:1900:4: assignment
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_assignment_in_statement_expression11120);
                    	assignment1097 = assignment();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignment1097.Tree);

                    }
                    break;
                case 4 :
                    // cs.g:1901:4: unary_expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_unary_expression_in_statement_expression11125);
                    	unary_expression1098 = unary_expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression1098.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 303, statement_expression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "statement_expression"

    public class selection_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "selection_statement"
    // cs.g:1902:1: selection_statement : ( if_statement | switch_statement );
    public csParser.selection_statement_return selection_statement() // throws RecognitionException [1]
    {   
        csParser.selection_statement_return retval = new csParser.selection_statement_return();
        retval.Start = input.LT(1);
        int selection_statement_StartIndex = input.Index();
        object root_0 = null;

        csParser.if_statement_return if_statement1099 = default(csParser.if_statement_return);

        csParser.switch_statement_return switch_statement1100 = default(csParser.switch_statement_return);



         const string elementName = "selection_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 304) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1905:1: ( if_statement | switch_statement )
            int alt353 = 2;
            int LA353_0 = input.LA(1);

            if ( (LA353_0 == IF) )
            {
                alt353 = 1;
            }
            else if ( (LA353_0 == 211) )
            {
                alt353 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d353s0 =
                    new NoViableAltException("", 353, 0, input);

                throw nvae_d353s0;
            }
            switch (alt353) 
            {
                case 1 :
                    // cs.g:1906:2: if_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_if_statement_in_selection_statement11144);
                    	if_statement1099 = if_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, if_statement1099.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1907:4: switch_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_switch_statement_in_selection_statement11149);
                    	switch_statement1100 = switch_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, switch_statement1100.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 304, selection_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "selection_statement"

    public class if_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "if_statement"
    // cs.g:1908:1: if_statement : 'if' '(' boolean_expression ')' embedded_statement ( else_statement )? ;
    public csParser.if_statement_return if_statement() // throws RecognitionException [1]
    {   
        csParser.if_statement_return retval = new csParser.if_statement_return();
        retval.Start = input.LT(1);
        int if_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1101 = null;
        IToken char_literal1102 = null;
        IToken char_literal1104 = null;
        csParser.boolean_expression_return boolean_expression1103 = default(csParser.boolean_expression_return);

        csParser.embedded_statement_return embedded_statement1105 = default(csParser.embedded_statement_return);

        csParser.else_statement_return else_statement1106 = default(csParser.else_statement_return);


        object string_literal1101_tree=null;
        object char_literal1102_tree=null;
        object char_literal1104_tree=null;

         const string elementName = "if_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 305) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1911:1: ( 'if' '(' boolean_expression ')' embedded_statement ( else_statement )? )
            // cs.g:1912:2: 'if' '(' boolean_expression ')' embedded_statement ( else_statement )?
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1101=(IToken)Match(input,IF,FOLLOW_IF_in_if_statement11169); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1101_tree = (object)adaptor.Create(string_literal1101);
            		adaptor.AddChild(root_0, string_literal1101_tree);
            	}
            	char_literal1102=(IToken)Match(input,110,FOLLOW_110_in_if_statement11173); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1102_tree = (object)adaptor.Create(char_literal1102);
            		adaptor.AddChild(root_0, char_literal1102_tree);
            	}
            	PushFollow(FOLLOW_boolean_expression_in_if_statement11177);
            	boolean_expression1103 = boolean_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, boolean_expression1103.Tree);
            	char_literal1104=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_if_statement11181); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1104_tree = (object)adaptor.Create(char_literal1104);
            		adaptor.AddChild(root_0, char_literal1104_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_if_statement11185);
            	embedded_statement1105 = embedded_statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement1105.Tree);
            	// cs.g:1912:63: ( else_statement )?
            	int alt354 = 2;
            	int LA354_0 = input.LA(1);

            	if ( (LA354_0 == ELSE) )
            	{
            	    int LA354_1 = input.LA(2);

            	    if ( (synpred626_cs()) )
            	    {
            	        alt354 = 1;
            	    }
            	}
            	switch (alt354) 
            	{
            	    case 1 :
            	        // cs.g:0:0: else_statement
            	        {
            	        	PushFollow(FOLLOW_else_statement_in_if_statement11189);
            	        	else_statement1106 = else_statement();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, else_statement1106.Tree);

            	        }
            	        break;

            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 305, if_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "if_statement"

    public class else_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "else_statement"
    // cs.g:1914:1: else_statement : 'else' embedded_statement ;
    public csParser.else_statement_return else_statement() // throws RecognitionException [1]
    {   
        csParser.else_statement_return retval = new csParser.else_statement_return();
        retval.Start = input.LT(1);
        int else_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1107 = null;
        csParser.embedded_statement_return embedded_statement1108 = default(csParser.embedded_statement_return);


        object string_literal1107_tree=null;

         const string elementName = "else_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 306) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1917:1: ( 'else' embedded_statement )
            // cs.g:1918:2: 'else' embedded_statement
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1107=(IToken)Match(input,ELSE,FOLLOW_ELSE_in_else_statement11211); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1107_tree = (object)adaptor.Create(string_literal1107);
            		adaptor.AddChild(root_0, string_literal1107_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_else_statement11215);
            	embedded_statement1108 = embedded_statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement1108.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 306, else_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "else_statement"

    public class switch_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "switch_statement"
    // cs.g:1920:1: switch_statement : 'switch' '(' expression ')' switch_block ;
    public csParser.switch_statement_return switch_statement() // throws RecognitionException [1]
    {   
        csParser.switch_statement_return retval = new csParser.switch_statement_return();
        retval.Start = input.LT(1);
        int switch_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1109 = null;
        IToken char_literal1110 = null;
        IToken char_literal1112 = null;
        csParser.expression_return expression1111 = default(csParser.expression_return);

        csParser.switch_block_return switch_block1113 = default(csParser.switch_block_return);


        object string_literal1109_tree=null;
        object char_literal1110_tree=null;
        object char_literal1112_tree=null;

         const string elementName = "switch_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 307) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1923:1: ( 'switch' '(' expression ')' switch_block )
            // cs.g:1924:2: 'switch' '(' expression ')' switch_block
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1109=(IToken)Match(input,211,FOLLOW_211_in_switch_statement11237); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1109_tree = (object)adaptor.Create(string_literal1109);
            		adaptor.AddChild(root_0, string_literal1109_tree);
            	}
            	char_literal1110=(IToken)Match(input,110,FOLLOW_110_in_switch_statement11241); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1110_tree = (object)adaptor.Create(char_literal1110);
            		adaptor.AddChild(root_0, char_literal1110_tree);
            	}
            	PushFollow(FOLLOW_expression_in_switch_statement11245);
            	expression1111 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1111.Tree);
            	char_literal1112=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_switch_statement11249); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1112_tree = (object)adaptor.Create(char_literal1112);
            		adaptor.AddChild(root_0, char_literal1112_tree);
            	}
            	PushFollow(FOLLOW_switch_block_in_switch_statement11253);
            	switch_block1113 = switch_block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, switch_block1113.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 307, switch_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "switch_statement"

    public class switch_block_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "switch_block"
    // cs.g:1925:1: switch_block : '{' ( switch_sections )? '}' ;
    public csParser.switch_block_return switch_block() // throws RecognitionException [1]
    {   
        csParser.switch_block_return retval = new csParser.switch_block_return();
        retval.Start = input.LT(1);
        int switch_block_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1114 = null;
        IToken char_literal1116 = null;
        csParser.switch_sections_return switch_sections1115 = default(csParser.switch_sections_return);


        object char_literal1114_tree=null;
        object char_literal1116_tree=null;

         const string elementName = "switch_block"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 308) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1928:1: ( '{' ( switch_sections )? '}' )
            // cs.g:1929:2: '{' ( switch_sections )? '}'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	char_literal1114=(IToken)Match(input,92,FOLLOW_92_in_switch_block11273); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1114_tree = (object)adaptor.Create(char_literal1114);
            		adaptor.AddChild(root_0, char_literal1114_tree);
            	}
            	// cs.g:1929:8: ( switch_sections )?
            	int alt355 = 2;
            	int LA355_0 = input.LA(1);

            	if ( (LA355_0 == 143 || LA355_0 == 212) )
            	{
            	    alt355 = 1;
            	}
            	switch (alt355) 
            	{
            	    case 1 :
            	        // cs.g:0:0: switch_sections
            	        {
            	        	PushFollow(FOLLOW_switch_sections_in_switch_block11277);
            	        	switch_sections1115 = switch_sections();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, switch_sections1115.Tree);

            	        }
            	        break;

            	}

            	char_literal1116=(IToken)Match(input,93,FOLLOW_93_in_switch_block11282); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1116_tree = (object)adaptor.Create(char_literal1116);
            		adaptor.AddChild(root_0, char_literal1116_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 308, switch_block_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "switch_block"

    public class switch_sections_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "switch_sections"
    // cs.g:1930:1: switch_sections : ( switch_section )+ ;
    public csParser.switch_sections_return switch_sections() // throws RecognitionException [1]
    {   
        csParser.switch_sections_return retval = new csParser.switch_sections_return();
        retval.Start = input.LT(1);
        int switch_sections_StartIndex = input.Index();
        object root_0 = null;

        csParser.switch_section_return switch_section1117 = default(csParser.switch_section_return);



         const string elementName = "switch_sections"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 309) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1933:1: ( ( switch_section )+ )
            // cs.g:1934:2: ( switch_section )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1934:2: ( switch_section )+
            	int cnt356 = 0;
            	do 
            	{
            	    int alt356 = 2;
            	    int LA356_0 = input.LA(1);

            	    if ( (LA356_0 == 143 || LA356_0 == 212) )
            	    {
            	        alt356 = 1;
            	    }


            	    switch (alt356) 
            		{
            			case 1 :
            			    // cs.g:0:0: switch_section
            			    {
            			    	PushFollow(FOLLOW_switch_section_in_switch_sections11302);
            			    	switch_section1117 = switch_section();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, switch_section1117.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt356 >= 1 ) goto loop356;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee356 =
            		                new EarlyExitException(356, input);
            		            throw eee356;
            	    }
            	    cnt356++;
            	} while (true);

            	loop356:
            		;	// Stops C# compiler whining that label 'loop356' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 309, switch_sections_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "switch_sections"

    public class switch_section_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "switch_section"
    // cs.g:1935:1: switch_section : switch_labels statement_list ;
    public csParser.switch_section_return switch_section() // throws RecognitionException [1]
    {   
        csParser.switch_section_return retval = new csParser.switch_section_return();
        retval.Start = input.LT(1);
        int switch_section_StartIndex = input.Index();
        object root_0 = null;

        csParser.switch_labels_return switch_labels1118 = default(csParser.switch_labels_return);

        csParser.statement_list_return statement_list1119 = default(csParser.statement_list_return);



         const string elementName = "switch_section"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 310) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1938:1: ( switch_labels statement_list )
            // cs.g:1939:2: switch_labels statement_list
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_switch_labels_in_switch_section11323);
            	switch_labels1118 = switch_labels();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, switch_labels1118.Tree);
            	PushFollow(FOLLOW_statement_list_in_switch_section11327);
            	statement_list1119 = statement_list();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement_list1119.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 310, switch_section_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "switch_section"

    public class switch_labels_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "switch_labels"
    // cs.g:1940:1: switch_labels : ( switch_label )+ ;
    public csParser.switch_labels_return switch_labels() // throws RecognitionException [1]
    {   
        csParser.switch_labels_return retval = new csParser.switch_labels_return();
        retval.Start = input.LT(1);
        int switch_labels_StartIndex = input.Index();
        object root_0 = null;

        csParser.switch_label_return switch_label1120 = default(csParser.switch_label_return);



         const string elementName = "switch_labels"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 311) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1943:1: ( ( switch_label )+ )
            // cs.g:1944:2: ( switch_label )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:1944:2: ( switch_label )+
            	int cnt357 = 0;
            	do 
            	{
            	    int alt357 = 2;
            	    int LA357_0 = input.LA(1);

            	    if ( (LA357_0 == 143) )
            	    {
            	        int LA357_2 = input.LA(2);

            	        if ( (LA357_2 == 100) )
            	        {
            	            alt357 = 1;
            	        }


            	    }
            	    else if ( (LA357_0 == 212) )
            	    {
            	        alt357 = 1;
            	    }


            	    switch (alt357) 
            		{
            			case 1 :
            			    // cs.g:0:0: switch_label
            			    {
            			    	PushFollow(FOLLOW_switch_label_in_switch_labels11347);
            			    	switch_label1120 = switch_label();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, switch_label1120.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt357 >= 1 ) goto loop357;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee357 =
            		                new EarlyExitException(357, input);
            		            throw eee357;
            	    }
            	    cnt357++;
            	} while (true);

            	loop357:
            		;	// Stops C# compiler whining that label 'loop357' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 311, switch_labels_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "switch_labels"

    public class switch_label_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "switch_label"
    // cs.g:1945:1: switch_label : ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) );
    public csParser.switch_label_return switch_label() // throws RecognitionException [1]
    {   
        csParser.switch_label_return retval = new csParser.switch_label_return();
        retval.Start = input.LT(1);
        int switch_label_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1121 = null;
        IToken char_literal1123 = null;
        IToken string_literal1124 = null;
        IToken char_literal1125 = null;
        csParser.constant_expression_return constant_expression1122 = default(csParser.constant_expression_return);


        object string_literal1121_tree=null;
        object char_literal1123_tree=null;
        object string_literal1124_tree=null;
        object char_literal1125_tree=null;

         const string elementName = "switch_label"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 312) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1948:1: ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) )
            int alt358 = 2;
            int LA358_0 = input.LA(1);

            if ( (LA358_0 == 212) )
            {
                alt358 = 1;
            }
            else if ( (LA358_0 == 143) )
            {
                alt358 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d358s0 =
                    new NoViableAltException("", 358, 0, input);

                throw nvae_d358s0;
            }
            switch (alt358) 
            {
                case 1 :
                    // cs.g:1949:2: ( 'case' constant_expression ':' )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:1949:2: ( 'case' constant_expression ':' )
                    	// cs.g:1949:3: 'case' constant_expression ':'
                    	{
                    		string_literal1121=(IToken)Match(input,212,FOLLOW_212_in_switch_label11369); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal1121_tree = (object)adaptor.Create(string_literal1121);
                    			adaptor.AddChild(root_0, string_literal1121_tree);
                    		}
                    		PushFollow(FOLLOW_constant_expression_in_switch_label11373);
                    		constant_expression1122 = constant_expression();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_expression1122.Tree);
                    		char_literal1123=(IToken)Match(input,100,FOLLOW_100_in_switch_label11377); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal1123_tree = (object)adaptor.Create(char_literal1123);
                    			adaptor.AddChild(root_0, char_literal1123_tree);
                    		}

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:1950:4: ( 'default' ':' )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:1950:4: ( 'default' ':' )
                    	// cs.g:1950:5: 'default' ':'
                    	{
                    		string_literal1124=(IToken)Match(input,143,FOLLOW_143_in_switch_label11384); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal1124_tree = (object)adaptor.Create(string_literal1124);
                    			adaptor.AddChild(root_0, string_literal1124_tree);
                    		}
                    		char_literal1125=(IToken)Match(input,100,FOLLOW_100_in_switch_label11388); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal1125_tree = (object)adaptor.Create(char_literal1125);
                    			adaptor.AddChild(root_0, char_literal1125_tree);
                    		}

                    	}


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 312, switch_label_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "switch_label"

    public class iteration_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "iteration_statement"
    // cs.g:1951:1: iteration_statement : ( while_statement | do_statement | for_statement | foreach_statement );
    public csParser.iteration_statement_return iteration_statement() // throws RecognitionException [1]
    {   
        csParser.iteration_statement_return retval = new csParser.iteration_statement_return();
        retval.Start = input.LT(1);
        int iteration_statement_StartIndex = input.Index();
        object root_0 = null;

        csParser.while_statement_return while_statement1126 = default(csParser.while_statement_return);

        csParser.do_statement_return do_statement1127 = default(csParser.do_statement_return);

        csParser.for_statement_return for_statement1128 = default(csParser.for_statement_return);

        csParser.foreach_statement_return foreach_statement1129 = default(csParser.foreach_statement_return);



         const string elementName = "iteration_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 313) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1954:1: ( while_statement | do_statement | for_statement | foreach_statement )
            int alt359 = 4;
            switch ( input.LA(1) ) 
            {
            case 213:
            	{
                alt359 = 1;
                }
                break;
            case 214:
            	{
                alt359 = 2;
                }
                break;
            case 215:
            	{
                alt359 = 3;
                }
                break;
            case 216:
            	{
                alt359 = 4;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d359s0 =
            	        new NoViableAltException("", 359, 0, input);

            	    throw nvae_d359s0;
            }

            switch (alt359) 
            {
                case 1 :
                    // cs.g:1955:2: while_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_while_statement_in_iteration_statement11409);
                    	while_statement1126 = while_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, while_statement1126.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1956:4: do_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_do_statement_in_iteration_statement11414);
                    	do_statement1127 = do_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, do_statement1127.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:1957:4: for_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_for_statement_in_iteration_statement11419);
                    	for_statement1128 = for_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, for_statement1128.Tree);

                    }
                    break;
                case 4 :
                    // cs.g:1958:4: foreach_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_foreach_statement_in_iteration_statement11424);
                    	foreach_statement1129 = foreach_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, foreach_statement1129.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 313, iteration_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "iteration_statement"

    public class while_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "while_statement"
    // cs.g:1959:1: while_statement : 'while' '(' boolean_expression ')' embedded_statement ;
    public csParser.while_statement_return while_statement() // throws RecognitionException [1]
    {   
        csParser.while_statement_return retval = new csParser.while_statement_return();
        retval.Start = input.LT(1);
        int while_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1130 = null;
        IToken char_literal1131 = null;
        IToken char_literal1133 = null;
        csParser.boolean_expression_return boolean_expression1132 = default(csParser.boolean_expression_return);

        csParser.embedded_statement_return embedded_statement1134 = default(csParser.embedded_statement_return);


        object string_literal1130_tree=null;
        object char_literal1131_tree=null;
        object char_literal1133_tree=null;

         const string elementName = "while_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 314) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1962:1: ( 'while' '(' boolean_expression ')' embedded_statement )
            // cs.g:1963:2: 'while' '(' boolean_expression ')' embedded_statement
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1130=(IToken)Match(input,213,FOLLOW_213_in_while_statement11444); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1130_tree = (object)adaptor.Create(string_literal1130);
            		adaptor.AddChild(root_0, string_literal1130_tree);
            	}
            	char_literal1131=(IToken)Match(input,110,FOLLOW_110_in_while_statement11448); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1131_tree = (object)adaptor.Create(char_literal1131);
            		adaptor.AddChild(root_0, char_literal1131_tree);
            	}
            	PushFollow(FOLLOW_boolean_expression_in_while_statement11452);
            	boolean_expression1132 = boolean_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, boolean_expression1132.Tree);
            	char_literal1133=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_while_statement11456); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1133_tree = (object)adaptor.Create(char_literal1133);
            		adaptor.AddChild(root_0, char_literal1133_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_while_statement11460);
            	embedded_statement1134 = embedded_statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement1134.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 314, while_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "while_statement"

    public class do_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "do_statement"
    // cs.g:1964:1: do_statement : 'do' embedded_statement 'while' '(' boolean_expression ')' ';' ;
    public csParser.do_statement_return do_statement() // throws RecognitionException [1]
    {   
        csParser.do_statement_return retval = new csParser.do_statement_return();
        retval.Start = input.LT(1);
        int do_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1135 = null;
        IToken string_literal1137 = null;
        IToken char_literal1138 = null;
        IToken char_literal1140 = null;
        IToken char_literal1141 = null;
        csParser.embedded_statement_return embedded_statement1136 = default(csParser.embedded_statement_return);

        csParser.boolean_expression_return boolean_expression1139 = default(csParser.boolean_expression_return);


        object string_literal1135_tree=null;
        object string_literal1137_tree=null;
        object char_literal1138_tree=null;
        object char_literal1140_tree=null;
        object char_literal1141_tree=null;

         const string elementName = "do_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 315) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1967:1: ( 'do' embedded_statement 'while' '(' boolean_expression ')' ';' )
            // cs.g:1968:2: 'do' embedded_statement 'while' '(' boolean_expression ')' ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1135=(IToken)Match(input,214,FOLLOW_214_in_do_statement11480); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1135_tree = (object)adaptor.Create(string_literal1135);
            		adaptor.AddChild(root_0, string_literal1135_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_do_statement11484);
            	embedded_statement1136 = embedded_statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement1136.Tree);
            	string_literal1137=(IToken)Match(input,213,FOLLOW_213_in_do_statement11488); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1137_tree = (object)adaptor.Create(string_literal1137);
            		adaptor.AddChild(root_0, string_literal1137_tree);
            	}
            	char_literal1138=(IToken)Match(input,110,FOLLOW_110_in_do_statement11492); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1138_tree = (object)adaptor.Create(char_literal1138);
            		adaptor.AddChild(root_0, char_literal1138_tree);
            	}
            	PushFollow(FOLLOW_boolean_expression_in_do_statement11496);
            	boolean_expression1139 = boolean_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, boolean_expression1139.Tree);
            	char_literal1140=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_do_statement11500); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1140_tree = (object)adaptor.Create(char_literal1140);
            		adaptor.AddChild(root_0, char_literal1140_tree);
            	}
            	char_literal1141=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_do_statement11504); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1141_tree = (object)adaptor.Create(char_literal1141);
            		adaptor.AddChild(root_0, char_literal1141_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 315, do_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "do_statement"

    public class for_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "for_statement"
    // cs.g:1969:1: for_statement : 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement ;
    public csParser.for_statement_return for_statement() // throws RecognitionException [1]
    {   
        csParser.for_statement_return retval = new csParser.for_statement_return();
        retval.Start = input.LT(1);
        int for_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1142 = null;
        IToken char_literal1143 = null;
        IToken char_literal1145 = null;
        IToken char_literal1147 = null;
        IToken char_literal1149 = null;
        csParser.for_initializer_return for_initializer1144 = default(csParser.for_initializer_return);

        csParser.for_condition_return for_condition1146 = default(csParser.for_condition_return);

        csParser.for_iterator_return for_iterator1148 = default(csParser.for_iterator_return);

        csParser.embedded_statement_return embedded_statement1150 = default(csParser.embedded_statement_return);


        object string_literal1142_tree=null;
        object char_literal1143_tree=null;
        object char_literal1145_tree=null;
        object char_literal1147_tree=null;
        object char_literal1149_tree=null;

         const string elementName = "for_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 316) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1972:1: ( 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement )
            // cs.g:1973:2: 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1142=(IToken)Match(input,215,FOLLOW_215_in_for_statement11524); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1142_tree = (object)adaptor.Create(string_literal1142);
            		adaptor.AddChild(root_0, string_literal1142_tree);
            	}
            	char_literal1143=(IToken)Match(input,110,FOLLOW_110_in_for_statement11528); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1143_tree = (object)adaptor.Create(char_literal1143);
            		adaptor.AddChild(root_0, char_literal1143_tree);
            	}
            	// cs.g:1973:16: ( for_initializer )?
            	int alt360 = 2;
            	int LA360_0 = input.LA(1);

            	if ( ((LA360_0 >= IDENTIFIER && LA360_0 <= NULL) || LA360_0 == MINUS || LA360_0 == SET || (LA360_0 >= 90 && LA360_0 <= 91) || LA360_0 == 95 || (LA360_0 >= 101 && LA360_0 <= 107) || (LA360_0 >= 109 && LA360_0 <= 111) || (LA360_0 >= 113 && LA360_0 <= 122) || (LA360_0 >= 124 && LA360_0 <= 129) || (LA360_0 >= 132 && LA360_0 <= 144) || (LA360_0 >= 175 && LA360_0 <= 187) || LA360_0 == 199 || (LA360_0 >= 201 && LA360_0 <= 202) || (LA360_0 >= 208 && LA360_0 <= 209) || (LA360_0 >= 225 && LA360_0 <= 226)) )
            	{
            	    alt360 = 1;
            	}
            	switch (alt360) 
            	{
            	    case 1 :
            	        // cs.g:0:0: for_initializer
            	        {
            	        	PushFollow(FOLLOW_for_initializer_in_for_statement11532);
            	        	for_initializer1144 = for_initializer();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, for_initializer1144.Tree);

            	        }
            	        break;

            	}

            	char_literal1145=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_for_statement11537); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1145_tree = (object)adaptor.Create(char_literal1145);
            		adaptor.AddChild(root_0, char_literal1145_tree);
            	}
            	// cs.g:1973:41: ( for_condition )?
            	int alt361 = 2;
            	int LA361_0 = input.LA(1);

            	if ( ((LA361_0 >= IDENTIFIER && LA361_0 <= NULL) || LA361_0 == MINUS || LA361_0 == SET || (LA361_0 >= 90 && LA361_0 <= 91) || LA361_0 == 95 || (LA361_0 >= 101 && LA361_0 <= 107) || (LA361_0 >= 109 && LA361_0 <= 111) || (LA361_0 >= 114 && LA361_0 <= 122) || (LA361_0 >= 124 && LA361_0 <= 129) || (LA361_0 >= 132 && LA361_0 <= 144) || (LA361_0 >= 175 && LA361_0 <= 187) || LA361_0 == 199 || (LA361_0 >= 201 && LA361_0 <= 202) || LA361_0 == 208 || (LA361_0 >= 225 && LA361_0 <= 226)) )
            	{
            	    alt361 = 1;
            	}
            	switch (alt361) 
            	{
            	    case 1 :
            	        // cs.g:0:0: for_condition
            	        {
            	        	PushFollow(FOLLOW_for_condition_in_for_statement11541);
            	        	for_condition1146 = for_condition();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, for_condition1146.Tree);

            	        }
            	        break;

            	}

            	char_literal1147=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_for_statement11546); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1147_tree = (object)adaptor.Create(char_literal1147);
            		adaptor.AddChild(root_0, char_literal1147_tree);
            	}
            	// cs.g:1973:64: ( for_iterator )?
            	int alt362 = 2;
            	int LA362_0 = input.LA(1);

            	if ( ((LA362_0 >= IDENTIFIER && LA362_0 <= NULL) || LA362_0 == MINUS || LA362_0 == SET || (LA362_0 >= 90 && LA362_0 <= 91) || LA362_0 == 95 || (LA362_0 >= 101 && LA362_0 <= 107) || (LA362_0 >= 109 && LA362_0 <= 111) || (LA362_0 >= 114 && LA362_0 <= 122) || (LA362_0 >= 124 && LA362_0 <= 129) || (LA362_0 >= 132 && LA362_0 <= 144) || (LA362_0 >= 175 && LA362_0 <= 187) || LA362_0 == 199 || (LA362_0 >= 201 && LA362_0 <= 202) || LA362_0 == 208 || (LA362_0 >= 225 && LA362_0 <= 226)) )
            	{
            	    alt362 = 1;
            	}
            	switch (alt362) 
            	{
            	    case 1 :
            	        // cs.g:0:0: for_iterator
            	        {
            	        	PushFollow(FOLLOW_for_iterator_in_for_statement11550);
            	        	for_iterator1148 = for_iterator();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, for_iterator1148.Tree);

            	        }
            	        break;

            	}

            	char_literal1149=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_for_statement11555); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1149_tree = (object)adaptor.Create(char_literal1149);
            		adaptor.AddChild(root_0, char_literal1149_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_for_statement11559);
            	embedded_statement1150 = embedded_statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement1150.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 316, for_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "for_statement"

    public class for_initializer_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "for_initializer"
    // cs.g:1974:1: for_initializer : ( local_variable_declaration | statement_expression_list );
    public csParser.for_initializer_return for_initializer() // throws RecognitionException [1]
    {   
        csParser.for_initializer_return retval = new csParser.for_initializer_return();
        retval.Start = input.LT(1);
        int for_initializer_StartIndex = input.Index();
        object root_0 = null;

        csParser.local_variable_declaration_return local_variable_declaration1151 = default(csParser.local_variable_declaration_return);

        csParser.statement_expression_list_return statement_expression_list1152 = default(csParser.statement_expression_list_return);



         const string elementName = "for_initializer"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 317) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1977:1: ( local_variable_declaration | statement_expression_list )
            int alt363 = 2;
            alt363 = dfa363.Predict(input);
            switch (alt363) 
            {
                case 1 :
                    // cs.g:1978:2: local_variable_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_local_variable_declaration_in_for_initializer11579);
                    	local_variable_declaration1151 = local_variable_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_declaration1151.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:1979:4: statement_expression_list
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_statement_expression_list_in_for_initializer11584);
                    	statement_expression_list1152 = statement_expression_list();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement_expression_list1152.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 317, for_initializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "for_initializer"

    public class for_condition_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "for_condition"
    // cs.g:1980:1: for_condition : boolean_expression ;
    public csParser.for_condition_return for_condition() // throws RecognitionException [1]
    {   
        csParser.for_condition_return retval = new csParser.for_condition_return();
        retval.Start = input.LT(1);
        int for_condition_StartIndex = input.Index();
        object root_0 = null;

        csParser.boolean_expression_return boolean_expression1153 = default(csParser.boolean_expression_return);



         const string elementName = "for_condition"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 318) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1983:1: ( boolean_expression )
            // cs.g:1984:2: boolean_expression
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_boolean_expression_in_for_condition11604);
            	boolean_expression1153 = boolean_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, boolean_expression1153.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 318, for_condition_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "for_condition"

    public class for_iterator_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "for_iterator"
    // cs.g:1985:1: for_iterator : statement_expression_list ;
    public csParser.for_iterator_return for_iterator() // throws RecognitionException [1]
    {   
        csParser.for_iterator_return retval = new csParser.for_iterator_return();
        retval.Start = input.LT(1);
        int for_iterator_StartIndex = input.Index();
        object root_0 = null;

        csParser.statement_expression_list_return statement_expression_list1154 = default(csParser.statement_expression_list_return);



         const string elementName = "for_iterator"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 319) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1988:1: ( statement_expression_list )
            // cs.g:1989:2: statement_expression_list
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_statement_expression_list_in_for_iterator11624);
            	statement_expression_list1154 = statement_expression_list();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement_expression_list1154.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 319, for_iterator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "for_iterator"

    public class statement_expression_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "statement_expression_list"
    // cs.g:1990:1: statement_expression_list : statement_expression ( ',' statement_expression )* ;
    public csParser.statement_expression_list_return statement_expression_list() // throws RecognitionException [1]
    {   
        csParser.statement_expression_list_return retval = new csParser.statement_expression_list_return();
        retval.Start = input.LT(1);
        int statement_expression_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1156 = null;
        csParser.statement_expression_return statement_expression1155 = default(csParser.statement_expression_return);

        csParser.statement_expression_return statement_expression1157 = default(csParser.statement_expression_return);


        object char_literal1156_tree=null;

         const string elementName = "statement_expression_list"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 320) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1993:1: ( statement_expression ( ',' statement_expression )* )
            // cs.g:1994:2: statement_expression ( ',' statement_expression )*
            {
            	root_0 = (object)adaptor.GetNilNode();

            	PushFollow(FOLLOW_statement_expression_in_statement_expression_list11644);
            	statement_expression1155 = statement_expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement_expression1155.Tree);
            	// cs.g:1994:23: ( ',' statement_expression )*
            	do 
            	{
            	    int alt364 = 2;
            	    int LA364_0 = input.LA(1);

            	    if ( (LA364_0 == 98) )
            	    {
            	        alt364 = 1;
            	    }


            	    switch (alt364) 
            		{
            			case 1 :
            			    // cs.g:1994:24: ',' statement_expression
            			    {
            			    	char_literal1156=(IToken)Match(input,98,FOLLOW_98_in_statement_expression_list11647); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1156_tree = (object)adaptor.Create(char_literal1156);
            			    		adaptor.AddChild(root_0, char_literal1156_tree);
            			    	}
            			    	PushFollow(FOLLOW_statement_expression_in_statement_expression_list11649);
            			    	statement_expression1157 = statement_expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, statement_expression1157.Tree);

            			    }
            			    break;

            			default:
            			    goto loop364;
            	    }
            	} while (true);

            	loop364:
            		;	// Stops C# compiler whining that label 'loop364' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 320, statement_expression_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "statement_expression_list"

    public class foreach_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "foreach_statement"
    // cs.g:1995:1: foreach_statement : 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement ;
    public csParser.foreach_statement_return foreach_statement() // throws RecognitionException [1]
    {   
        csParser.foreach_statement_return retval = new csParser.foreach_statement_return();
        retval.Start = input.LT(1);
        int foreach_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1158 = null;
        IToken char_literal1159 = null;
        IToken string_literal1162 = null;
        IToken char_literal1164 = null;
        csParser.local_variable_type_return local_variable_type1160 = default(csParser.local_variable_type_return);

        csParser.identifier_return identifier1161 = default(csParser.identifier_return);

        csParser.expression_return expression1163 = default(csParser.expression_return);

        csParser.embedded_statement_return embedded_statement1165 = default(csParser.embedded_statement_return);


        object string_literal1158_tree=null;
        object char_literal1159_tree=null;
        object string_literal1162_tree=null;
        object char_literal1164_tree=null;

         const string elementName = "foreach_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 321) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:1998:1: ( 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement )
            // cs.g:1999:2: 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1158=(IToken)Match(input,216,FOLLOW_216_in_foreach_statement11671); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1158_tree = (object)adaptor.Create(string_literal1158);
            		adaptor.AddChild(root_0, string_literal1158_tree);
            	}
            	char_literal1159=(IToken)Match(input,110,FOLLOW_110_in_foreach_statement11675); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1159_tree = (object)adaptor.Create(char_literal1159);
            		adaptor.AddChild(root_0, char_literal1159_tree);
            	}
            	PushFollow(FOLLOW_local_variable_type_in_foreach_statement11679);
            	local_variable_type1160 = local_variable_type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_type1160.Tree);
            	PushFollow(FOLLOW_identifier_in_foreach_statement11683);
            	identifier1161 = identifier();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier1161.Tree);
            	string_literal1162=(IToken)Match(input,145,FOLLOW_145_in_foreach_statement11687); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1162_tree = (object)adaptor.Create(string_literal1162);
            		adaptor.AddChild(root_0, string_literal1162_tree);
            	}
            	PushFollow(FOLLOW_expression_in_foreach_statement11691);
            	expression1163 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1163.Tree);
            	char_literal1164=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_foreach_statement11695); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1164_tree = (object)adaptor.Create(char_literal1164);
            		adaptor.AddChild(root_0, char_literal1164_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_foreach_statement11699);
            	embedded_statement1165 = embedded_statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement1165.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 321, foreach_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "foreach_statement"

    public class jump_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "jump_statement"
    // cs.g:2000:1: jump_statement : ( break_statement | continue_statement | goto_statement | return_statement | throw_statement );
    public csParser.jump_statement_return jump_statement() // throws RecognitionException [1]
    {   
        csParser.jump_statement_return retval = new csParser.jump_statement_return();
        retval.Start = input.LT(1);
        int jump_statement_StartIndex = input.Index();
        object root_0 = null;

        csParser.break_statement_return break_statement1166 = default(csParser.break_statement_return);

        csParser.continue_statement_return continue_statement1167 = default(csParser.continue_statement_return);

        csParser.goto_statement_return goto_statement1168 = default(csParser.goto_statement_return);

        csParser.return_statement_return return_statement1169 = default(csParser.return_statement_return);

        csParser.throw_statement_return throw_statement1170 = default(csParser.throw_statement_return);



         const string elementName = "jump_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 322) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2003:1: ( break_statement | continue_statement | goto_statement | return_statement | throw_statement )
            int alt365 = 5;
            switch ( input.LA(1) ) 
            {
            case 217:
            	{
                alt365 = 1;
                }
                break;
            case 218:
            	{
                alt365 = 2;
                }
                break;
            case 219:
            	{
                alt365 = 3;
                }
                break;
            case 108:
            	{
                alt365 = 4;
                }
                break;
            case 220:
            	{
                alt365 = 5;
                }
                break;
            	default:
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    NoViableAltException nvae_d365s0 =
            	        new NoViableAltException("", 365, 0, input);

            	    throw nvae_d365s0;
            }

            switch (alt365) 
            {
                case 1 :
                    // cs.g:2004:2: break_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_break_statement_in_jump_statement11719);
                    	break_statement1166 = break_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, break_statement1166.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:2005:4: continue_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_continue_statement_in_jump_statement11724);
                    	continue_statement1167 = continue_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, continue_statement1167.Tree);

                    }
                    break;
                case 3 :
                    // cs.g:2006:4: goto_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_goto_statement_in_jump_statement11729);
                    	goto_statement1168 = goto_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, goto_statement1168.Tree);

                    }
                    break;
                case 4 :
                    // cs.g:2007:4: return_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_return_statement_in_jump_statement11734);
                    	return_statement1169 = return_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, return_statement1169.Tree);

                    }
                    break;
                case 5 :
                    // cs.g:2008:4: throw_statement
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_throw_statement_in_jump_statement11739);
                    	throw_statement1170 = throw_statement();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, throw_statement1170.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 322, jump_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "jump_statement"

    public class break_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "break_statement"
    // cs.g:2009:1: break_statement : 'break' ';' ;
    public csParser.break_statement_return break_statement() // throws RecognitionException [1]
    {   
        csParser.break_statement_return retval = new csParser.break_statement_return();
        retval.Start = input.LT(1);
        int break_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1171 = null;
        IToken char_literal1172 = null;

        object string_literal1171_tree=null;
        object char_literal1172_tree=null;

         const string elementName = "break_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 323) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2012:1: ( 'break' ';' )
            // cs.g:2013:2: 'break' ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1171=(IToken)Match(input,217,FOLLOW_217_in_break_statement11759); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1171_tree = (object)adaptor.Create(string_literal1171);
            		adaptor.AddChild(root_0, string_literal1171_tree);
            	}
            	char_literal1172=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_break_statement11763); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1172_tree = (object)adaptor.Create(char_literal1172);
            		adaptor.AddChild(root_0, char_literal1172_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 323, break_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "break_statement"

    public class continue_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "continue_statement"
    // cs.g:2014:1: continue_statement : 'continue' ';' ;
    public csParser.continue_statement_return continue_statement() // throws RecognitionException [1]
    {   
        csParser.continue_statement_return retval = new csParser.continue_statement_return();
        retval.Start = input.LT(1);
        int continue_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1173 = null;
        IToken char_literal1174 = null;

        object string_literal1173_tree=null;
        object char_literal1174_tree=null;

         const string elementName = "continue_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 324) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2017:1: ( 'continue' ';' )
            // cs.g:2018:2: 'continue' ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1173=(IToken)Match(input,218,FOLLOW_218_in_continue_statement11783); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1173_tree = (object)adaptor.Create(string_literal1173);
            		adaptor.AddChild(root_0, string_literal1173_tree);
            	}
            	char_literal1174=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_continue_statement11787); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1174_tree = (object)adaptor.Create(char_literal1174);
            		adaptor.AddChild(root_0, char_literal1174_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 324, continue_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "continue_statement"

    public class goto_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "goto_statement"
    // cs.g:2019:1: goto_statement : ( ( 'goto' identifier ';' ) | ( 'goto' 'case' constant_expression ';' ) | ( 'goto' 'default' ';' ) );
    public csParser.goto_statement_return goto_statement() // throws RecognitionException [1]
    {   
        csParser.goto_statement_return retval = new csParser.goto_statement_return();
        retval.Start = input.LT(1);
        int goto_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1175 = null;
        IToken char_literal1177 = null;
        IToken string_literal1178 = null;
        IToken string_literal1179 = null;
        IToken char_literal1181 = null;
        IToken string_literal1182 = null;
        IToken string_literal1183 = null;
        IToken char_literal1184 = null;
        csParser.identifier_return identifier1176 = default(csParser.identifier_return);

        csParser.constant_expression_return constant_expression1180 = default(csParser.constant_expression_return);


        object string_literal1175_tree=null;
        object char_literal1177_tree=null;
        object string_literal1178_tree=null;
        object string_literal1179_tree=null;
        object char_literal1181_tree=null;
        object string_literal1182_tree=null;
        object string_literal1183_tree=null;
        object char_literal1184_tree=null;

         const string elementName = "goto_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 325) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2022:1: ( ( 'goto' identifier ';' ) | ( 'goto' 'case' constant_expression ';' ) | ( 'goto' 'default' ';' ) )
            int alt366 = 3;
            int LA366_0 = input.LA(1);

            if ( (LA366_0 == 219) )
            {
                switch ( input.LA(2) ) 
                {
                case 212:
                	{
                    alt366 = 2;
                    }
                    break;
                case 143:
                	{
                    alt366 = 3;
                    }
                    break;
                case IDENTIFIER:
                case SET:
                case 95:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 109:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 199:
                case 201:
                case 202:
                case 208:
                case 225:
                case 226:
                	{
                    alt366 = 1;
                    }
                    break;
                	default:
                	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                	    NoViableAltException nvae_d366s1 =
                	        new NoViableAltException("", 366, 1, input);

                	    throw nvae_d366s1;
                }

            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d366s0 =
                    new NoViableAltException("", 366, 0, input);

                throw nvae_d366s0;
            }
            switch (alt366) 
            {
                case 1 :
                    // cs.g:2023:2: ( 'goto' identifier ';' )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:2023:2: ( 'goto' identifier ';' )
                    	// cs.g:2023:3: 'goto' identifier ';'
                    	{
                    		string_literal1175=(IToken)Match(input,219,FOLLOW_219_in_goto_statement11808); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal1175_tree = (object)adaptor.Create(string_literal1175);
                    			adaptor.AddChild(root_0, string_literal1175_tree);
                    		}
                    		PushFollow(FOLLOW_identifier_in_goto_statement11812);
                    		identifier1176 = identifier();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier1176.Tree);
                    		char_literal1177=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_goto_statement11816); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal1177_tree = (object)adaptor.Create(char_literal1177);
                    			adaptor.AddChild(root_0, char_literal1177_tree);
                    		}

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:2024:4: ( 'goto' 'case' constant_expression ';' )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:2024:4: ( 'goto' 'case' constant_expression ';' )
                    	// cs.g:2024:5: 'goto' 'case' constant_expression ';'
                    	{
                    		string_literal1178=(IToken)Match(input,219,FOLLOW_219_in_goto_statement11823); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal1178_tree = (object)adaptor.Create(string_literal1178);
                    			adaptor.AddChild(root_0, string_literal1178_tree);
                    		}
                    		string_literal1179=(IToken)Match(input,212,FOLLOW_212_in_goto_statement11827); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal1179_tree = (object)adaptor.Create(string_literal1179);
                    			adaptor.AddChild(root_0, string_literal1179_tree);
                    		}
                    		PushFollow(FOLLOW_constant_expression_in_goto_statement11831);
                    		constant_expression1180 = constant_expression();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_expression1180.Tree);
                    		char_literal1181=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_goto_statement11835); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal1181_tree = (object)adaptor.Create(char_literal1181);
                    			adaptor.AddChild(root_0, char_literal1181_tree);
                    		}

                    	}


                    }
                    break;
                case 3 :
                    // cs.g:2025:4: ( 'goto' 'default' ';' )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:2025:4: ( 'goto' 'default' ';' )
                    	// cs.g:2025:5: 'goto' 'default' ';'
                    	{
                    		string_literal1182=(IToken)Match(input,219,FOLLOW_219_in_goto_statement11842); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal1182_tree = (object)adaptor.Create(string_literal1182);
                    			adaptor.AddChild(root_0, string_literal1182_tree);
                    		}
                    		string_literal1183=(IToken)Match(input,143,FOLLOW_143_in_goto_statement11846); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal1183_tree = (object)adaptor.Create(string_literal1183);
                    			adaptor.AddChild(root_0, string_literal1183_tree);
                    		}
                    		char_literal1184=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_goto_statement11850); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal1184_tree = (object)adaptor.Create(char_literal1184);
                    			adaptor.AddChild(root_0, char_literal1184_tree);
                    		}

                    	}


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 325, goto_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "goto_statement"

    public class return_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "return_statement"
    // cs.g:2026:1: return_statement : 'return' ( expression )? ';' ;
    public csParser.return_statement_return return_statement() // throws RecognitionException [1]
    {   
        csParser.return_statement_return retval = new csParser.return_statement_return();
        retval.Start = input.LT(1);
        int return_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1185 = null;
        IToken char_literal1187 = null;
        csParser.expression_return expression1186 = default(csParser.expression_return);


        object string_literal1185_tree=null;
        object char_literal1187_tree=null;

         const string elementName = "return_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 326) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2029:1: ( 'return' ( expression )? ';' )
            // cs.g:2030:2: 'return' ( expression )? ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1185=(IToken)Match(input,108,FOLLOW_108_in_return_statement11871); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1185_tree = (object)adaptor.Create(string_literal1185);
            		adaptor.AddChild(root_0, string_literal1185_tree);
            	}
            	// cs.g:2030:13: ( expression )?
            	int alt367 = 2;
            	int LA367_0 = input.LA(1);

            	if ( ((LA367_0 >= IDENTIFIER && LA367_0 <= NULL) || LA367_0 == MINUS || LA367_0 == SET || (LA367_0 >= 90 && LA367_0 <= 91) || LA367_0 == 95 || (LA367_0 >= 101 && LA367_0 <= 107) || (LA367_0 >= 109 && LA367_0 <= 111) || (LA367_0 >= 114 && LA367_0 <= 122) || (LA367_0 >= 124 && LA367_0 <= 129) || (LA367_0 >= 132 && LA367_0 <= 144) || (LA367_0 >= 175 && LA367_0 <= 187) || LA367_0 == 199 || (LA367_0 >= 201 && LA367_0 <= 202) || LA367_0 == 208 || (LA367_0 >= 225 && LA367_0 <= 226)) )
            	{
            	    alt367 = 1;
            	}
            	switch (alt367) 
            	{
            	    case 1 :
            	        // cs.g:0:0: expression
            	        {
            	        	PushFollow(FOLLOW_expression_in_return_statement11875);
            	        	expression1186 = expression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1186.Tree);

            	        }
            	        break;

            	}

            	char_literal1187=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_return_statement11880); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1187_tree = (object)adaptor.Create(char_literal1187);
            		adaptor.AddChild(root_0, char_literal1187_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 326, return_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "return_statement"

    public class throw_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "throw_statement"
    // cs.g:2031:1: throw_statement : 'throw' ( expression )? ';' ;
    public csParser.throw_statement_return throw_statement() // throws RecognitionException [1]
    {   
        csParser.throw_statement_return retval = new csParser.throw_statement_return();
        retval.Start = input.LT(1);
        int throw_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1188 = null;
        IToken char_literal1190 = null;
        csParser.expression_return expression1189 = default(csParser.expression_return);


        object string_literal1188_tree=null;
        object char_literal1190_tree=null;

         const string elementName = "throw_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 327) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2034:1: ( 'throw' ( expression )? ';' )
            // cs.g:2035:2: 'throw' ( expression )? ';'
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1188=(IToken)Match(input,220,FOLLOW_220_in_throw_statement11900); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1188_tree = (object)adaptor.Create(string_literal1188);
            		adaptor.AddChild(root_0, string_literal1188_tree);
            	}
            	// cs.g:2035:12: ( expression )?
            	int alt368 = 2;
            	int LA368_0 = input.LA(1);

            	if ( ((LA368_0 >= IDENTIFIER && LA368_0 <= NULL) || LA368_0 == MINUS || LA368_0 == SET || (LA368_0 >= 90 && LA368_0 <= 91) || LA368_0 == 95 || (LA368_0 >= 101 && LA368_0 <= 107) || (LA368_0 >= 109 && LA368_0 <= 111) || (LA368_0 >= 114 && LA368_0 <= 122) || (LA368_0 >= 124 && LA368_0 <= 129) || (LA368_0 >= 132 && LA368_0 <= 144) || (LA368_0 >= 175 && LA368_0 <= 187) || LA368_0 == 199 || (LA368_0 >= 201 && LA368_0 <= 202) || LA368_0 == 208 || (LA368_0 >= 225 && LA368_0 <= 226)) )
            	{
            	    alt368 = 1;
            	}
            	switch (alt368) 
            	{
            	    case 1 :
            	        // cs.g:0:0: expression
            	        {
            	        	PushFollow(FOLLOW_expression_in_throw_statement11904);
            	        	expression1189 = expression();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1189.Tree);

            	        }
            	        break;

            	}

            	char_literal1190=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_throw_statement11909); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1190_tree = (object)adaptor.Create(char_literal1190);
            		adaptor.AddChild(root_0, char_literal1190_tree);
            	}

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 327, throw_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "throw_statement"

    public class try_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "try_statement"
    // cs.g:2036:1: try_statement : ( ( 'try' block catch_clauses ( finally_clause )? ) | ( 'try' block finally_clause ) );
    public csParser.try_statement_return try_statement() // throws RecognitionException [1]
    {   
        csParser.try_statement_return retval = new csParser.try_statement_return();
        retval.Start = input.LT(1);
        int try_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1191 = null;
        IToken string_literal1195 = null;
        csParser.block_return block1192 = default(csParser.block_return);

        csParser.catch_clauses_return catch_clauses1193 = default(csParser.catch_clauses_return);

        csParser.finally_clause_return finally_clause1194 = default(csParser.finally_clause_return);

        csParser.block_return block1196 = default(csParser.block_return);

        csParser.finally_clause_return finally_clause1197 = default(csParser.finally_clause_return);


        object string_literal1191_tree=null;
        object string_literal1195_tree=null;

         const string elementName = "try_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 328) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2039:1: ( ( 'try' block catch_clauses ( finally_clause )? ) | ( 'try' block finally_clause ) )
            int alt370 = 2;
            int LA370_0 = input.LA(1);

            if ( (LA370_0 == 221) )
            {
                int LA370_1 = input.LA(2);

                if ( (synpred648_cs()) )
                {
                    alt370 = 1;
                }
                else if ( (true) )
                {
                    alt370 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d370s1 =
                        new NoViableAltException("", 370, 1, input);

                    throw nvae_d370s1;
                }
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d370s0 =
                    new NoViableAltException("", 370, 0, input);

                throw nvae_d370s0;
            }
            switch (alt370) 
            {
                case 1 :
                    // cs.g:2040:7: ( 'try' block catch_clauses ( finally_clause )? )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:2040:7: ( 'try' block catch_clauses ( finally_clause )? )
                    	// cs.g:2040:8: 'try' block catch_clauses ( finally_clause )?
                    	{
                    		string_literal1191=(IToken)Match(input,221,FOLLOW_221_in_try_statement11935); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal1191_tree = (object)adaptor.Create(string_literal1191);
                    			adaptor.AddChild(root_0, string_literal1191_tree);
                    		}
                    		PushFollow(FOLLOW_block_in_try_statement11939);
                    		block1192 = block();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block1192.Tree);
                    		PushFollow(FOLLOW_catch_clauses_in_try_statement11943);
                    		catch_clauses1193 = catch_clauses();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, catch_clauses1193.Tree);
                    		// cs.g:2040:40: ( finally_clause )?
                    		int alt369 = 2;
                    		int LA369_0 = input.LA(1);

                    		if ( (LA369_0 == 223) )
                    		{
                    		    alt369 = 1;
                    		}
                    		switch (alt369) 
                    		{
                    		    case 1 :
                    		        // cs.g:0:0: finally_clause
                    		        {
                    		        	PushFollow(FOLLOW_finally_clause_in_try_statement11947);
                    		        	finally_clause1194 = finally_clause();
                    		        	state.followingStackPointer--;
                    		        	if (state.failed) return retval;
                    		        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, finally_clause1194.Tree);

                    		        }
                    		        break;

                    		}


                    	}


                    }
                    break;
                case 2 :
                    // cs.g:2041:4: ( 'try' block finally_clause )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:2041:4: ( 'try' block finally_clause )
                    	// cs.g:2041:5: 'try' block finally_clause
                    	{
                    		string_literal1195=(IToken)Match(input,221,FOLLOW_221_in_try_statement11955); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal1195_tree = (object)adaptor.Create(string_literal1195);
                    			adaptor.AddChild(root_0, string_literal1195_tree);
                    		}
                    		PushFollow(FOLLOW_block_in_try_statement11959);
                    		block1196 = block();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block1196.Tree);
                    		PushFollow(FOLLOW_finally_clause_in_try_statement11963);
                    		finally_clause1197 = finally_clause();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, finally_clause1197.Tree);

                    	}


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 328, try_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "try_statement"

    public class catch_clauses_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "catch_clauses"
    // cs.g:2042:1: catch_clauses : ( ( specific_catch_clauses ( general_catch_clause )? ) | ( ( specific_catch_clauses )? general_catch_clause ) );
    public csParser.catch_clauses_return catch_clauses() // throws RecognitionException [1]
    {   
        csParser.catch_clauses_return retval = new csParser.catch_clauses_return();
        retval.Start = input.LT(1);
        int catch_clauses_StartIndex = input.Index();
        object root_0 = null;

        csParser.specific_catch_clauses_return specific_catch_clauses1198 = default(csParser.specific_catch_clauses_return);

        csParser.general_catch_clause_return general_catch_clause1199 = default(csParser.general_catch_clause_return);

        csParser.specific_catch_clauses_return specific_catch_clauses1200 = default(csParser.specific_catch_clauses_return);

        csParser.general_catch_clause_return general_catch_clause1201 = default(csParser.general_catch_clause_return);



         const string elementName = "catch_clauses"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 329) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2045:1: ( ( specific_catch_clauses ( general_catch_clause )? ) | ( ( specific_catch_clauses )? general_catch_clause ) )
            int alt373 = 2;
            int LA373_0 = input.LA(1);

            if ( (LA373_0 == 222) )
            {
                int LA373_1 = input.LA(2);

                if ( (synpred650_cs()) )
                {
                    alt373 = 1;
                }
                else if ( (true) )
                {
                    alt373 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d373s1 =
                        new NoViableAltException("", 373, 1, input);

                    throw nvae_d373s1;
                }
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d373s0 =
                    new NoViableAltException("", 373, 0, input);

                throw nvae_d373s0;
            }
            switch (alt373) 
            {
                case 1 :
                    // cs.g:2046:2: ( specific_catch_clauses ( general_catch_clause )? )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:2046:2: ( specific_catch_clauses ( general_catch_clause )? )
                    	// cs.g:2046:3: specific_catch_clauses ( general_catch_clause )?
                    	{
                    		PushFollow(FOLLOW_specific_catch_clauses_in_catch_clauses11984);
                    		specific_catch_clauses1198 = specific_catch_clauses();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, specific_catch_clauses1198.Tree);
                    		// cs.g:2046:28: ( general_catch_clause )?
                    		int alt371 = 2;
                    		int LA371_0 = input.LA(1);

                    		if ( (LA371_0 == 222) )
                    		{
                    		    alt371 = 1;
                    		}
                    		switch (alt371) 
                    		{
                    		    case 1 :
                    		        // cs.g:0:0: general_catch_clause
                    		        {
                    		        	PushFollow(FOLLOW_general_catch_clause_in_catch_clauses11988);
                    		        	general_catch_clause1199 = general_catch_clause();
                    		        	state.followingStackPointer--;
                    		        	if (state.failed) return retval;
                    		        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, general_catch_clause1199.Tree);

                    		        }
                    		        break;

                    		}


                    	}


                    }
                    break;
                case 2 :
                    // cs.g:2047:4: ( ( specific_catch_clauses )? general_catch_clause )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:2047:4: ( ( specific_catch_clauses )? general_catch_clause )
                    	// cs.g:2047:5: ( specific_catch_clauses )? general_catch_clause
                    	{
                    		// cs.g:2047:5: ( specific_catch_clauses )?
                    		int alt372 = 2;
                    		int LA372_0 = input.LA(1);

                    		if ( (LA372_0 == 222) )
                    		{
                    		    int LA372_1 = input.LA(2);

                    		    if ( (LA372_1 == 110) )
                    		    {
                    		        alt372 = 1;
                    		    }
                    		}
                    		switch (alt372) 
                    		{
                    		    case 1 :
                    		        // cs.g:0:0: specific_catch_clauses
                    		        {
                    		        	PushFollow(FOLLOW_specific_catch_clauses_in_catch_clauses11996);
                    		        	specific_catch_clauses1200 = specific_catch_clauses();
                    		        	state.followingStackPointer--;
                    		        	if (state.failed) return retval;
                    		        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, specific_catch_clauses1200.Tree);

                    		        }
                    		        break;

                    		}

                    		PushFollow(FOLLOW_general_catch_clause_in_catch_clauses12001);
                    		general_catch_clause1201 = general_catch_clause();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, general_catch_clause1201.Tree);

                    	}


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 329, catch_clauses_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "catch_clauses"

    public class specific_catch_clauses_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "specific_catch_clauses"
    // cs.g:2048:1: specific_catch_clauses : ( specific_catch_clause )+ ;
    public csParser.specific_catch_clauses_return specific_catch_clauses() // throws RecognitionException [1]
    {   
        csParser.specific_catch_clauses_return retval = new csParser.specific_catch_clauses_return();
        retval.Start = input.LT(1);
        int specific_catch_clauses_StartIndex = input.Index();
        object root_0 = null;

        csParser.specific_catch_clause_return specific_catch_clause1202 = default(csParser.specific_catch_clause_return);



         const string elementName = "specific_catch_clauses"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 330) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2051:1: ( ( specific_catch_clause )+ )
            // cs.g:2052:2: ( specific_catch_clause )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:2052:2: ( specific_catch_clause )+
            	int cnt374 = 0;
            	do 
            	{
            	    int alt374 = 2;
            	    int LA374_0 = input.LA(1);

            	    if ( (LA374_0 == 222) )
            	    {
            	        int LA374_1 = input.LA(2);

            	        if ( (LA374_1 == 110) )
            	        {
            	            alt374 = 1;
            	        }


            	    }


            	    switch (alt374) 
            		{
            			case 1 :
            			    // cs.g:0:0: specific_catch_clause
            			    {
            			    	PushFollow(FOLLOW_specific_catch_clause_in_specific_catch_clauses12022);
            			    	specific_catch_clause1202 = specific_catch_clause();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, specific_catch_clause1202.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt374 >= 1 ) goto loop374;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee374 =
            		                new EarlyExitException(374, input);
            		            throw eee374;
            	    }
            	    cnt374++;
            	} while (true);

            	loop374:
            		;	// Stops C# compiler whining that label 'loop374' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 330, specific_catch_clauses_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "specific_catch_clauses"

    public class specific_catch_clause_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "specific_catch_clause"
    // cs.g:2053:1: specific_catch_clause : 'catch' '(' class_type ( identifier )? ')' block ;
    public csParser.specific_catch_clause_return specific_catch_clause() // throws RecognitionException [1]
    {   
        csParser.specific_catch_clause_return retval = new csParser.specific_catch_clause_return();
        retval.Start = input.LT(1);
        int specific_catch_clause_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1203 = null;
        IToken char_literal1204 = null;
        IToken char_literal1207 = null;
        csParser.class_type_return class_type1205 = default(csParser.class_type_return);

        csParser.identifier_return identifier1206 = default(csParser.identifier_return);

        csParser.block_return block1208 = default(csParser.block_return);


        object string_literal1203_tree=null;
        object char_literal1204_tree=null;
        object char_literal1207_tree=null;

         const string elementName = "specific_catch_clause"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 331) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2056:1: ( 'catch' '(' class_type ( identifier )? ')' block )
            // cs.g:2057:2: 'catch' '(' class_type ( identifier )? ')' block
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1203=(IToken)Match(input,222,FOLLOW_222_in_specific_catch_clause12043); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1203_tree = (object)adaptor.Create(string_literal1203);
            		adaptor.AddChild(root_0, string_literal1203_tree);
            	}
            	char_literal1204=(IToken)Match(input,110,FOLLOW_110_in_specific_catch_clause12047); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1204_tree = (object)adaptor.Create(char_literal1204);
            		adaptor.AddChild(root_0, char_literal1204_tree);
            	}
            	PushFollow(FOLLOW_class_type_in_specific_catch_clause12051);
            	class_type1205 = class_type();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, class_type1205.Tree);
            	// cs.g:2057:31: ( identifier )?
            	int alt375 = 2;
            	int LA375_0 = input.LA(1);

            	if ( (LA375_0 == IDENTIFIER || LA375_0 == SET || LA375_0 == 95 || (LA375_0 >= 101 && LA375_0 <= 107) || LA375_0 == 109 || (LA375_0 >= 175 && LA375_0 <= 187) || LA375_0 == 199 || (LA375_0 >= 201 && LA375_0 <= 202) || LA375_0 == 208 || (LA375_0 >= 225 && LA375_0 <= 226)) )
            	{
            	    alt375 = 1;
            	}
            	switch (alt375) 
            	{
            	    case 1 :
            	        // cs.g:0:0: identifier
            	        {
            	        	PushFollow(FOLLOW_identifier_in_specific_catch_clause12055);
            	        	identifier1206 = identifier();
            	        	state.followingStackPointer--;
            	        	if (state.failed) return retval;
            	        	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, identifier1206.Tree);

            	        }
            	        break;

            	}

            	char_literal1207=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_specific_catch_clause12060); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1207_tree = (object)adaptor.Create(char_literal1207);
            		adaptor.AddChild(root_0, char_literal1207_tree);
            	}
            	PushFollow(FOLLOW_block_in_specific_catch_clause12064);
            	block1208 = block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block1208.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 331, specific_catch_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "specific_catch_clause"

    public class general_catch_clause_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "general_catch_clause"
    // cs.g:2058:1: general_catch_clause : 'catch' block ;
    public csParser.general_catch_clause_return general_catch_clause() // throws RecognitionException [1]
    {   
        csParser.general_catch_clause_return retval = new csParser.general_catch_clause_return();
        retval.Start = input.LT(1);
        int general_catch_clause_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1209 = null;
        csParser.block_return block1210 = default(csParser.block_return);


        object string_literal1209_tree=null;

         const string elementName = "general_catch_clause"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 332) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2061:1: ( 'catch' block )
            // cs.g:2062:2: 'catch' block
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1209=(IToken)Match(input,222,FOLLOW_222_in_general_catch_clause12084); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1209_tree = (object)adaptor.Create(string_literal1209);
            		adaptor.AddChild(root_0, string_literal1209_tree);
            	}
            	PushFollow(FOLLOW_block_in_general_catch_clause12088);
            	block1210 = block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block1210.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 332, general_catch_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "general_catch_clause"

    public class finally_clause_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "finally_clause"
    // cs.g:2063:1: finally_clause : 'finally' block ;
    public csParser.finally_clause_return finally_clause() // throws RecognitionException [1]
    {   
        csParser.finally_clause_return retval = new csParser.finally_clause_return();
        retval.Start = input.LT(1);
        int finally_clause_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1211 = null;
        csParser.block_return block1212 = default(csParser.block_return);


        object string_literal1211_tree=null;

         const string elementName = "finally_clause"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 333) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2066:1: ( 'finally' block )
            // cs.g:2067:2: 'finally' block
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1211=(IToken)Match(input,223,FOLLOW_223_in_finally_clause12108); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1211_tree = (object)adaptor.Create(string_literal1211);
            		adaptor.AddChild(root_0, string_literal1211_tree);
            	}
            	PushFollow(FOLLOW_block_in_finally_clause12112);
            	block1212 = block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block1212.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 333, finally_clause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "finally_clause"

    public class checked_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "checked_statement"
    // cs.g:2068:1: checked_statement : 'checked' block ;
    public csParser.checked_statement_return checked_statement() // throws RecognitionException [1]
    {   
        csParser.checked_statement_return retval = new csParser.checked_statement_return();
        retval.Start = input.LT(1);
        int checked_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1213 = null;
        csParser.block_return block1214 = default(csParser.block_return);


        object string_literal1213_tree=null;

         const string elementName = "checked_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 334) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2071:1: ( 'checked' block )
            // cs.g:2072:2: 'checked' block
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1213=(IToken)Match(input,141,FOLLOW_141_in_checked_statement12132); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1213_tree = (object)adaptor.Create(string_literal1213);
            		adaptor.AddChild(root_0, string_literal1213_tree);
            	}
            	PushFollow(FOLLOW_block_in_checked_statement12136);
            	block1214 = block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block1214.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 334, checked_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "checked_statement"

    public class unchecked_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "unchecked_statement"
    // cs.g:2073:1: unchecked_statement : 'unchecked' block ;
    public csParser.unchecked_statement_return unchecked_statement() // throws RecognitionException [1]
    {   
        csParser.unchecked_statement_return retval = new csParser.unchecked_statement_return();
        retval.Start = input.LT(1);
        int unchecked_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1215 = null;
        csParser.block_return block1216 = default(csParser.block_return);


        object string_literal1215_tree=null;

         const string elementName = "unchecked_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 335) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2076:1: ( 'unchecked' block )
            // cs.g:2077:2: 'unchecked' block
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1215=(IToken)Match(input,142,FOLLOW_142_in_unchecked_statement12156); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1215_tree = (object)adaptor.Create(string_literal1215);
            		adaptor.AddChild(root_0, string_literal1215_tree);
            	}
            	PushFollow(FOLLOW_block_in_unchecked_statement12160);
            	block1216 = block();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block1216.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 335, unchecked_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unchecked_statement"

    public class lock_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "lock_statement"
    // cs.g:2078:1: lock_statement : 'lock' '(' expression ')' embedded_statement ;
    public csParser.lock_statement_return lock_statement() // throws RecognitionException [1]
    {   
        csParser.lock_statement_return retval = new csParser.lock_statement_return();
        retval.Start = input.LT(1);
        int lock_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1217 = null;
        IToken char_literal1218 = null;
        IToken char_literal1220 = null;
        csParser.expression_return expression1219 = default(csParser.expression_return);

        csParser.embedded_statement_return embedded_statement1221 = default(csParser.embedded_statement_return);


        object string_literal1217_tree=null;
        object char_literal1218_tree=null;
        object char_literal1220_tree=null;

         const string elementName = "lock_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 336) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2081:1: ( 'lock' '(' expression ')' embedded_statement )
            // cs.g:2082:2: 'lock' '(' expression ')' embedded_statement
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1217=(IToken)Match(input,224,FOLLOW_224_in_lock_statement12180); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1217_tree = (object)adaptor.Create(string_literal1217);
            		adaptor.AddChild(root_0, string_literal1217_tree);
            	}
            	char_literal1218=(IToken)Match(input,110,FOLLOW_110_in_lock_statement12184); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1218_tree = (object)adaptor.Create(char_literal1218);
            		adaptor.AddChild(root_0, char_literal1218_tree);
            	}
            	PushFollow(FOLLOW_expression_in_lock_statement12187);
            	expression1219 = expression();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1219.Tree);
            	char_literal1220=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_lock_statement12191); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1220_tree = (object)adaptor.Create(char_literal1220);
            		adaptor.AddChild(root_0, char_literal1220_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_lock_statement12195);
            	embedded_statement1221 = embedded_statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement1221.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 336, lock_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "lock_statement"

    public class using_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "using_statement"
    // cs.g:2083:1: using_statement : 'using' '(' resource_acquisition ')' embedded_statement ;
    public csParser.using_statement_return using_statement() // throws RecognitionException [1]
    {   
        csParser.using_statement_return retval = new csParser.using_statement_return();
        retval.Start = input.LT(1);
        int using_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1222 = null;
        IToken char_literal1223 = null;
        IToken char_literal1225 = null;
        csParser.resource_acquisition_return resource_acquisition1224 = default(csParser.resource_acquisition_return);

        csParser.embedded_statement_return embedded_statement1226 = default(csParser.embedded_statement_return);


        object string_literal1222_tree=null;
        object char_literal1223_tree=null;
        object char_literal1225_tree=null;

         const string elementName = "using_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 337) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2086:1: ( 'using' '(' resource_acquisition ')' embedded_statement )
            // cs.g:2087:2: 'using' '(' resource_acquisition ')' embedded_statement
            {
            	root_0 = (object)adaptor.GetNilNode();

            	string_literal1222=(IToken)Match(input,USING,FOLLOW_USING_in_using_statement12215); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{string_literal1222_tree = (object)adaptor.Create(string_literal1222);
            		adaptor.AddChild(root_0, string_literal1222_tree);
            	}
            	char_literal1223=(IToken)Match(input,110,FOLLOW_110_in_using_statement12219); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1223_tree = (object)adaptor.Create(char_literal1223);
            		adaptor.AddChild(root_0, char_literal1223_tree);
            	}
            	PushFollow(FOLLOW_resource_acquisition_in_using_statement12224);
            	resource_acquisition1224 = resource_acquisition();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, resource_acquisition1224.Tree);
            	char_literal1225=(IToken)Match(input,RPAREN,FOLLOW_RPAREN_in_using_statement12228); if (state.failed) return retval;
            	if ( state.backtracking == 0 )
            	{char_literal1225_tree = (object)adaptor.Create(char_literal1225);
            		adaptor.AddChild(root_0, char_literal1225_tree);
            	}
            	PushFollow(FOLLOW_embedded_statement_in_using_statement12233);
            	embedded_statement1226 = embedded_statement();
            	state.followingStackPointer--;
            	if (state.failed) return retval;
            	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, embedded_statement1226.Tree);

            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 337, using_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "using_statement"

    public class resource_acquisition_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "resource_acquisition"
    // cs.g:2088:1: resource_acquisition : ( local_variable_declaration | expression );
    public csParser.resource_acquisition_return resource_acquisition() // throws RecognitionException [1]
    {   
        csParser.resource_acquisition_return retval = new csParser.resource_acquisition_return();
        retval.Start = input.LT(1);
        int resource_acquisition_StartIndex = input.Index();
        object root_0 = null;

        csParser.local_variable_declaration_return local_variable_declaration1227 = default(csParser.local_variable_declaration_return);

        csParser.expression_return expression1228 = default(csParser.expression_return);



         const string elementName = "resource_acquisition"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 338) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2091:1: ( local_variable_declaration | expression )
            int alt376 = 2;
            alt376 = dfa376.Predict(input);
            switch (alt376) 
            {
                case 1 :
                    // cs.g:2092:2: local_variable_declaration
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_local_variable_declaration_in_resource_acquisition12253);
                    	local_variable_declaration1227 = local_variable_declaration();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_declaration1227.Tree);

                    }
                    break;
                case 2 :
                    // cs.g:2093:4: expression
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_expression_in_resource_acquisition12258);
                    	expression1228 = expression();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1228.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 338, resource_acquisition_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "resource_acquisition"

    public class yield_statement_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "yield_statement"
    // cs.g:2094:1: yield_statement : ( ( 'yield' 'return' expression ';' ) | ( 'yield' 'break' ';' ) );
    public csParser.yield_statement_return yield_statement() // throws RecognitionException [1]
    {   
        csParser.yield_statement_return retval = new csParser.yield_statement_return();
        retval.Start = input.LT(1);
        int yield_statement_StartIndex = input.Index();
        object root_0 = null;

        IToken string_literal1229 = null;
        IToken string_literal1230 = null;
        IToken char_literal1232 = null;
        IToken string_literal1233 = null;
        IToken string_literal1234 = null;
        IToken char_literal1235 = null;
        csParser.expression_return expression1231 = default(csParser.expression_return);


        object string_literal1229_tree=null;
        object string_literal1230_tree=null;
        object char_literal1232_tree=null;
        object string_literal1233_tree=null;
        object string_literal1234_tree=null;
        object char_literal1235_tree=null;

         const string elementName = "yield_statement"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 339) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2097:1: ( ( 'yield' 'return' expression ';' ) | ( 'yield' 'break' ';' ) )
            int alt377 = 2;
            int LA377_0 = input.LA(1);

            if ( (LA377_0 == 225) )
            {
                int LA377_1 = input.LA(2);

                if ( (LA377_1 == 108) )
                {
                    alt377 = 1;
                }
                else if ( (LA377_1 == 217) )
                {
                    alt377 = 2;
                }
                else 
                {
                    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                    NoViableAltException nvae_d377s1 =
                        new NoViableAltException("", 377, 1, input);

                    throw nvae_d377s1;
                }
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d377s0 =
                    new NoViableAltException("", 377, 0, input);

                throw nvae_d377s0;
            }
            switch (alt377) 
            {
                case 1 :
                    // cs.g:2098:2: ( 'yield' 'return' expression ';' )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:2098:2: ( 'yield' 'return' expression ';' )
                    	// cs.g:2098:3: 'yield' 'return' expression ';'
                    	{
                    		string_literal1229=(IToken)Match(input,225,FOLLOW_225_in_yield_statement12279); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal1229_tree = (object)adaptor.Create(string_literal1229);
                    			adaptor.AddChild(root_0, string_literal1229_tree);
                    		}
                    		string_literal1230=(IToken)Match(input,108,FOLLOW_108_in_yield_statement12283); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal1230_tree = (object)adaptor.Create(string_literal1230);
                    			adaptor.AddChild(root_0, string_literal1230_tree);
                    		}
                    		PushFollow(FOLLOW_expression_in_yield_statement12287);
                    		expression1231 = expression();
                    		state.followingStackPointer--;
                    		if (state.failed) return retval;
                    		if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1231.Tree);
                    		char_literal1232=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_yield_statement12291); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal1232_tree = (object)adaptor.Create(char_literal1232);
                    			adaptor.AddChild(root_0, char_literal1232_tree);
                    		}

                    	}


                    }
                    break;
                case 2 :
                    // cs.g:2099:4: ( 'yield' 'break' ';' )
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	// cs.g:2099:4: ( 'yield' 'break' ';' )
                    	// cs.g:2099:5: 'yield' 'break' ';'
                    	{
                    		string_literal1233=(IToken)Match(input,225,FOLLOW_225_in_yield_statement12298); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal1233_tree = (object)adaptor.Create(string_literal1233);
                    			adaptor.AddChild(root_0, string_literal1233_tree);
                    		}
                    		string_literal1234=(IToken)Match(input,217,FOLLOW_217_in_yield_statement12302); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{string_literal1234_tree = (object)adaptor.Create(string_literal1234);
                    			adaptor.AddChild(root_0, string_literal1234_tree);
                    		}
                    		char_literal1235=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_yield_statement12306); if (state.failed) return retval;
                    		if ( state.backtracking == 0 )
                    		{char_literal1235_tree = (object)adaptor.Create(char_literal1235);
                    			adaptor.AddChild(root_0, char_literal1235_tree);
                    		}

                    	}


                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 339, yield_statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "yield_statement"

    public class identifier_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "identifier"
    // cs.g:2101:1: identifier : ( IDENTIFIER | also_keyword );
    public csParser.identifier_return identifier() // throws RecognitionException [1]
    {   
        csParser.identifier_return retval = new csParser.identifier_return();
        retval.Start = input.LT(1);
        int identifier_StartIndex = input.Index();
        object root_0 = null;

        IToken IDENTIFIER1236 = null;
        csParser.also_keyword_return also_keyword1237 = default(csParser.also_keyword_return);


        object IDENTIFIER1236_tree=null;

         const string elementName = "identifier"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 340) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2104:1: ( IDENTIFIER | also_keyword )
            int alt378 = 2;
            int LA378_0 = input.LA(1);

            if ( (LA378_0 == IDENTIFIER) )
            {
                alt378 = 1;
            }
            else if ( (LA378_0 == SET || LA378_0 == 95 || (LA378_0 >= 101 && LA378_0 <= 107) || LA378_0 == 109 || (LA378_0 >= 175 && LA378_0 <= 187) || LA378_0 == 199 || (LA378_0 >= 201 && LA378_0 <= 202) || LA378_0 == 208 || (LA378_0 >= 225 && LA378_0 <= 226)) )
            {
                alt378 = 2;
            }
            else 
            {
                if ( state.backtracking > 0 ) {state.failed = true; return retval;}
                NoViableAltException nvae_d378s0 =
                    new NoViableAltException("", 378, 0, input);

                throw nvae_d378s0;
            }
            switch (alt378) 
            {
                case 1 :
                    // cs.g:2105:2: IDENTIFIER
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	IDENTIFIER1236=(IToken)Match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_identifier12328); if (state.failed) return retval;
                    	if ( state.backtracking == 0 )
                    	{IDENTIFIER1236_tree = (object)adaptor.Create(IDENTIFIER1236);
                    		adaptor.AddChild(root_0, IDENTIFIER1236_tree);
                    	}

                    }
                    break;
                case 2 :
                    // cs.g:2106:4: also_keyword
                    {
                    	root_0 = (object)adaptor.GetNilNode();

                    	PushFollow(FOLLOW_also_keyword_in_identifier12334);
                    	also_keyword1237 = also_keyword();
                    	state.followingStackPointer--;
                    	if (state.failed) return retval;
                    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, also_keyword1237.Tree);

                    }
                    break;

            }
            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 340, identifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "identifier"

    public class literal_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "literal"
    // cs.g:2108:1: literal : ( Real_literal | NUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL );
    public csParser.literal_return literal() // throws RecognitionException [1]
    {   
        csParser.literal_return retval = new csParser.literal_return();
        retval.Start = input.LT(1);
        int literal_StartIndex = input.Index();
        object root_0 = null;

        IToken set1238 = null;

        object set1238_tree=null;

         const string elementName = "literal"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 341) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2111:1: ( Real_literal | NUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set1238 = (IToken)input.LT(1);
            	if ( (input.LA(1) >= Real_literal && input.LA(1) <= NULL) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set1238));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 341, literal_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public class keyword_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "keyword"
    // cs.g:2123:1: keyword : ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' );
    public csParser.keyword_return keyword() // throws RecognitionException [1]
    {   
        csParser.keyword_return retval = new csParser.keyword_return();
        retval.Start = input.LT(1);
        int keyword_StartIndex = input.Index();
        object root_0 = null;

        IToken set1239 = null;

        object set1239_tree=null;

         const string elementName = "keyword"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 342) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2126:1: ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set1239 = (IToken)input.LT(1);
            	if ( input.LA(1) == ELSE || input.LA(1) == IF || (input.LA(1) >= TRUE && input.LA(1) <= NULL) || (input.LA(1) >= USING && input.LA(1) <= ENUM) || input.LA(1) == 88 || (input.LA(1) >= 90 && input.LA(1) <= 91) || input.LA(1) == 94 || input.LA(1) == 104 || input.LA(1) == 108 || (input.LA(1) >= 113 && input.LA(1) <= 122) || (input.LA(1) >= 130 && input.LA(1) <= 145) || (input.LA(1) >= 151 && input.LA(1) <= 152) || (input.LA(1) >= 170 && input.LA(1) <= 174) || (input.LA(1) >= 189 && input.LA(1) <= 198) || input.LA(1) == 200 || (input.LA(1) >= 203 && input.LA(1) <= 207) || (input.LA(1) >= 210 && input.LA(1) <= 212) || (input.LA(1) >= 214 && input.LA(1) <= 224) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set1239));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 342, keyword_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "keyword"

    public class also_keyword_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "also_keyword"
    // cs.g:2129:1: also_keyword : ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'event' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' );
    public csParser.also_keyword_return also_keyword() // throws RecognitionException [1]
    {   
        csParser.also_keyword_return retval = new csParser.also_keyword_return();
        retval.Start = input.LT(1);
        int also_keyword_StartIndex = input.Index();
        object root_0 = null;

        IToken set1240 = null;

        object set1240_tree=null;

         const string elementName = "also_keyword"; var elementsIndex = Elements.Count; Elements.Add(null); 
        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 343) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2132:1: ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'event' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' )
            // cs.g:
            {
            	root_0 = (object)adaptor.GetNilNode();

            	set1240 = (IToken)input.LT(1);
            	if ( input.LA(1) == SET || input.LA(1) == 95 || (input.LA(1) >= 101 && input.LA(1) <= 107) || input.LA(1) == 109 || (input.LA(1) >= 175 && input.LA(1) <= 187) || input.LA(1) == 199 || (input.LA(1) >= 201 && input.LA(1) <= 202) || input.LA(1) == 208 || (input.LA(1) >= 225 && input.LA(1) <= 226) ) 
            	{
            	    input.Consume();
            	    if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (object)adaptor.Create(set1240));
            	    state.errorRecovery = false;state.failed = false;
            	}
            	else 
            	{
            	    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            	    MismatchedSetException mse = new MismatchedSetException(null,input);
            	    throw mse;
            	}


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
            if ( (state.backtracking==0) )
            {
               Elements[elementsIndex] = new XElement(elementName); Elements.Add(new XElement(LeaveElementName)); 
            }
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 343, also_keyword_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "also_keyword"

    public class assignment_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "assignment_list"
    // cs.g:2410:1: assignment_list : ( assignment ';' )+ ;
    public csParser.assignment_list_return assignment_list() // throws RecognitionException [1]
    {   
        csParser.assignment_list_return retval = new csParser.assignment_list_return();
        retval.Start = input.LT(1);
        int assignment_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1242 = null;
        csParser.assignment_return assignment1241 = default(csParser.assignment_return);


        object char_literal1242_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 344) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2410:16: ( ( assignment ';' )+ )
            // cs.g:2411:2: ( assignment ';' )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:2411:2: ( assignment ';' )+
            	int cnt379 = 0;
            	do 
            	{
            	    int alt379 = 2;
            	    int LA379_0 = input.LA(1);

            	    if ( ((LA379_0 >= IDENTIFIER && LA379_0 <= NULL) || LA379_0 == MINUS || LA379_0 == SET || (LA379_0 >= 90 && LA379_0 <= 91) || LA379_0 == 95 || (LA379_0 >= 101 && LA379_0 <= 107) || (LA379_0 >= 109 && LA379_0 <= 111) || (LA379_0 >= 114 && LA379_0 <= 122) || (LA379_0 >= 124 && LA379_0 <= 129) || (LA379_0 >= 132 && LA379_0 <= 144) || (LA379_0 >= 175 && LA379_0 <= 187) || LA379_0 == 199 || (LA379_0 >= 201 && LA379_0 <= 202) || LA379_0 == 208 || (LA379_0 >= 225 && LA379_0 <= 226)) )
            	    {
            	        alt379 = 1;
            	    }


            	    switch (alt379) 
            		{
            			case 1 :
            			    // cs.g:2411:3: assignment ';'
            			    {
            			    	PushFollow(FOLLOW_assignment_in_assignment_list14865);
            			    	assignment1241 = assignment();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, assignment1241.Tree);
            			    	char_literal1242=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_assignment_list14867); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1242_tree = (object)adaptor.Create(char_literal1242);
            			    		adaptor.AddChild(root_0, char_literal1242_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt379 >= 1 ) goto loop379;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee379 =
            		                new EarlyExitException(379, input);
            		            throw eee379;
            	    }
            	    cnt379++;
            	} while (true);

            	loop379:
            		;	// Stops C# compiler whining that label 'loop379' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 344, assignment_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "assignment_list"

    public class field_declarations_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "field_declarations"
    // cs.g:2412:1: field_declarations : ( field_declaration )+ ;
    public csParser.field_declarations_return field_declarations() // throws RecognitionException [1]
    {   
        csParser.field_declarations_return retval = new csParser.field_declarations_return();
        retval.Start = input.LT(1);
        int field_declarations_StartIndex = input.Index();
        object root_0 = null;

        csParser.field_declaration_return field_declaration1243 = default(csParser.field_declaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 345) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2412:19: ( ( field_declaration )+ )
            // cs.g:2413:2: ( field_declaration )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:2413:2: ( field_declaration )+
            	int cnt380 = 0;
            	do 
            	{
            	    int alt380 = 2;
            	    int LA380_0 = input.LA(1);

            	    if ( (LA380_0 == IDENTIFIER || LA380_0 == SET || LA380_0 == 95 || LA380_0 == 97 || (LA380_0 >= 101 && LA380_0 <= 107) || LA380_0 == 109 || (LA380_0 >= 113 && LA380_0 <= 122) || (LA380_0 >= 132 && LA380_0 <= 138) || (LA380_0 >= 170 && LA380_0 <= 187) || LA380_0 == 192 || (LA380_0 >= 195 && LA380_0 <= 196) || LA380_0 == 199 || (LA380_0 >= 201 && LA380_0 <= 202) || LA380_0 == 208 || (LA380_0 >= 225 && LA380_0 <= 226)) )
            	    {
            	        alt380 = 1;
            	    }


            	    switch (alt380) 
            		{
            			case 1 :
            			    // cs.g:0:0: field_declaration
            			    {
            			    	PushFollow(FOLLOW_field_declaration_in_field_declarations14877);
            			    	field_declaration1243 = field_declaration();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, field_declaration1243.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt380 >= 1 ) goto loop380;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee380 =
            		                new EarlyExitException(380, input);
            		            throw eee380;
            	    }
            	    cnt380++;
            	} while (true);

            	loop380:
            		;	// Stops C# compiler whining that label 'loop380' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 345, field_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "field_declarations"

    public class property_declaration_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "property_declaration_list"
    // cs.g:2414:1: property_declaration_list : ( property_declaration )+ ;
    public csParser.property_declaration_list_return property_declaration_list() // throws RecognitionException [1]
    {   
        csParser.property_declaration_list_return retval = new csParser.property_declaration_list_return();
        retval.Start = input.LT(1);
        int property_declaration_list_StartIndex = input.Index();
        object root_0 = null;

        csParser.property_declaration_return property_declaration1244 = default(csParser.property_declaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 346) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2414:26: ( ( property_declaration )+ )
            // cs.g:2415:2: ( property_declaration )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:2415:2: ( property_declaration )+
            	int cnt381 = 0;
            	do 
            	{
            	    int alt381 = 2;
            	    int LA381_0 = input.LA(1);

            	    if ( (LA381_0 == IDENTIFIER || LA381_0 == SET || (LA381_0 >= 94 && LA381_0 <= 95) || LA381_0 == 97 || (LA381_0 >= 101 && LA381_0 <= 107) || LA381_0 == 109 || (LA381_0 >= 113 && LA381_0 <= 122) || (LA381_0 >= 132 && LA381_0 <= 138) || (LA381_0 >= 170 && LA381_0 <= 187) || (LA381_0 >= 190 && LA381_0 <= 192) || (LA381_0 >= 197 && LA381_0 <= 199) || (LA381_0 >= 201 && LA381_0 <= 202) || LA381_0 == 208 || (LA381_0 >= 225 && LA381_0 <= 226)) )
            	    {
            	        alt381 = 1;
            	    }


            	    switch (alt381) 
            		{
            			case 1 :
            			    // cs.g:0:0: property_declaration
            			    {
            			    	PushFollow(FOLLOW_property_declaration_in_property_declaration_list14886);
            			    	property_declaration1244 = property_declaration();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, property_declaration1244.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt381 >= 1 ) goto loop381;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee381 =
            		                new EarlyExitException(381, input);
            		            throw eee381;
            	    }
            	    cnt381++;
            	} while (true);

            	loop381:
            		;	// Stops C# compiler whining that label 'loop381' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 346, property_declaration_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "property_declaration_list"

    public class member_access_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "member_access_list"
    // cs.g:2416:1: member_access_list : ( member_access )+ ;
    public csParser.member_access_list_return member_access_list() // throws RecognitionException [1]
    {   
        csParser.member_access_list_return retval = new csParser.member_access_list_return();
        retval.Start = input.LT(1);
        int member_access_list_StartIndex = input.Index();
        object root_0 = null;

        csParser.member_access_return member_access1245 = default(csParser.member_access_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 347) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2416:19: ( ( member_access )+ )
            // cs.g:2417:2: ( member_access )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:2417:2: ( member_access )+
            	int cnt382 = 0;
            	do 
            	{
            	    int alt382 = 2;
            	    int LA382_0 = input.LA(1);

            	    if ( (LA382_0 == IDENTIFIER || LA382_0 == SET || LA382_0 == 95 || (LA382_0 >= 101 && LA382_0 <= 107) || LA382_0 == 109 || (LA382_0 >= 175 && LA382_0 <= 187) || LA382_0 == 199 || (LA382_0 >= 201 && LA382_0 <= 202) || LA382_0 == 208 || (LA382_0 >= 225 && LA382_0 <= 226)) )
            	    {
            	        alt382 = 1;
            	    }


            	    switch (alt382) 
            		{
            			case 1 :
            			    // cs.g:0:0: member_access
            			    {
            			    	PushFollow(FOLLOW_member_access_in_member_access_list14896);
            			    	member_access1245 = member_access();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, member_access1245.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt382 >= 1 ) goto loop382;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee382 =
            		                new EarlyExitException(382, input);
            		            throw eee382;
            	    }
            	    cnt382++;
            	} while (true);

            	loop382:
            		;	// Stops C# compiler whining that label 'loop382' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 347, member_access_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "member_access_list"

    public class constant_declarations_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "constant_declarations"
    // cs.g:2418:1: constant_declarations : ( constant_declaration )+ ;
    public csParser.constant_declarations_return constant_declarations() // throws RecognitionException [1]
    {   
        csParser.constant_declarations_return retval = new csParser.constant_declarations_return();
        retval.Start = input.LT(1);
        int constant_declarations_StartIndex = input.Index();
        object root_0 = null;

        csParser.constant_declaration_return constant_declaration1246 = default(csParser.constant_declaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 348) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2418:22: ( ( constant_declaration )+ )
            // cs.g:2419:2: ( constant_declaration )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:2419:2: ( constant_declaration )+
            	int cnt383 = 0;
            	do 
            	{
            	    int alt383 = 2;
            	    int LA383_0 = input.LA(1);

            	    if ( (LA383_0 == 97 || LA383_0 == 138 || (LA383_0 >= 170 && LA383_0 <= 173) || LA383_0 == 194) )
            	    {
            	        alt383 = 1;
            	    }


            	    switch (alt383) 
            		{
            			case 1 :
            			    // cs.g:0:0: constant_declaration
            			    {
            			    	PushFollow(FOLLOW_constant_declaration_in_constant_declarations14905);
            			    	constant_declaration1246 = constant_declaration();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, constant_declaration1246.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt383 >= 1 ) goto loop383;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee383 =
            		                new EarlyExitException(383, input);
            		            throw eee383;
            	    }
            	    cnt383++;
            	} while (true);

            	loop383:
            		;	// Stops C# compiler whining that label 'loop383' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 348, constant_declarations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "constant_declarations"

    public class literals_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "literals"
    // cs.g:2420:1: literals : ( literal )+ ;
    public csParser.literals_return literals() // throws RecognitionException [1]
    {   
        csParser.literals_return retval = new csParser.literals_return();
        retval.Start = input.LT(1);
        int literals_StartIndex = input.Index();
        object root_0 = null;

        csParser.literal_return literal1247 = default(csParser.literal_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 349) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2420:9: ( ( literal )+ )
            // cs.g:2421:2: ( literal )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:2421:2: ( literal )+
            	int cnt384 = 0;
            	do 
            	{
            	    int alt384 = 2;
            	    int LA384_0 = input.LA(1);

            	    if ( ((LA384_0 >= Real_literal && LA384_0 <= NULL)) )
            	    {
            	        alt384 = 1;
            	    }


            	    switch (alt384) 
            		{
            			case 1 :
            			    // cs.g:0:0: literal
            			    {
            			    	PushFollow(FOLLOW_literal_in_literals14913);
            			    	literal1247 = literal();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, literal1247.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt384 >= 1 ) goto loop384;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee384 =
            		                new EarlyExitException(384, input);
            		            throw eee384;
            	    }
            	    cnt384++;
            	} while (true);

            	loop384:
            		;	// Stops C# compiler whining that label 'loop384' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 349, literals_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "literals"

    public class delegate_declaration_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "delegate_declaration_list"
    // cs.g:2422:1: delegate_declaration_list : ( delegate_declaration )+ ;
    public csParser.delegate_declaration_list_return delegate_declaration_list() // throws RecognitionException [1]
    {   
        csParser.delegate_declaration_list_return retval = new csParser.delegate_declaration_list_return();
        retval.Start = input.LT(1);
        int delegate_declaration_list_StartIndex = input.Index();
        object root_0 = null;

        csParser.delegate_declaration_return delegate_declaration1248 = default(csParser.delegate_declaration_return);



        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 350) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2422:26: ( ( delegate_declaration )+ )
            // cs.g:2423:2: ( delegate_declaration )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:2423:2: ( delegate_declaration )+
            	int cnt385 = 0;
            	do 
            	{
            	    int alt385 = 2;
            	    int LA385_0 = input.LA(1);

            	    if ( (LA385_0 == 97 || LA385_0 == 138 || LA385_0 == 144 || (LA385_0 >= 170 && LA385_0 <= 174)) )
            	    {
            	        alt385 = 1;
            	    }


            	    switch (alt385) 
            		{
            			case 1 :
            			    // cs.g:0:0: delegate_declaration
            			    {
            			    	PushFollow(FOLLOW_delegate_declaration_in_delegate_declaration_list14922);
            			    	delegate_declaration1248 = delegate_declaration();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, delegate_declaration1248.Tree);

            			    }
            			    break;

            			default:
            			    if ( cnt385 >= 1 ) goto loop385;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee385 =
            		                new EarlyExitException(385, input);
            		            throw eee385;
            	    }
            	    cnt385++;
            	} while (true);

            	loop385:
            		;	// Stops C# compiler whining that label 'loop385' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 350, delegate_declaration_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "delegate_declaration_list"

    public class local_variable_declaration_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "local_variable_declaration_list"
    // cs.g:2424:1: local_variable_declaration_list : ( local_variable_declaration ';' )+ ;
    public csParser.local_variable_declaration_list_return local_variable_declaration_list() // throws RecognitionException [1]
    {   
        csParser.local_variable_declaration_list_return retval = new csParser.local_variable_declaration_list_return();
        retval.Start = input.LT(1);
        int local_variable_declaration_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1250 = null;
        csParser.local_variable_declaration_return local_variable_declaration1249 = default(csParser.local_variable_declaration_return);


        object char_literal1250_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 351) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2424:32: ( ( local_variable_declaration ';' )+ )
            // cs.g:2425:2: ( local_variable_declaration ';' )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:2425:2: ( local_variable_declaration ';' )+
            	int cnt386 = 0;
            	do 
            	{
            	    int alt386 = 2;
            	    int LA386_0 = input.LA(1);

            	    if ( (LA386_0 == IDENTIFIER || LA386_0 == SET || LA386_0 == 95 || (LA386_0 >= 101 && LA386_0 <= 107) || LA386_0 == 109 || (LA386_0 >= 113 && LA386_0 <= 122) || (LA386_0 >= 132 && LA386_0 <= 137) || (LA386_0 >= 175 && LA386_0 <= 187) || LA386_0 == 199 || (LA386_0 >= 201 && LA386_0 <= 202) || (LA386_0 >= 208 && LA386_0 <= 209) || (LA386_0 >= 225 && LA386_0 <= 226)) )
            	    {
            	        alt386 = 1;
            	    }


            	    switch (alt386) 
            		{
            			case 1 :
            			    // cs.g:2425:3: local_variable_declaration ';'
            			    {
            			    	PushFollow(FOLLOW_local_variable_declaration_in_local_variable_declaration_list14932);
            			    	local_variable_declaration1249 = local_variable_declaration();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_declaration1249.Tree);
            			    	char_literal1250=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_local_variable_declaration_list14934); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1250_tree = (object)adaptor.Create(char_literal1250);
            			    		adaptor.AddChild(root_0, char_literal1250_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt386 >= 1 ) goto loop386;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee386 =
            		                new EarlyExitException(386, input);
            		            throw eee386;
            	    }
            	    cnt386++;
            	} while (true);

            	loop386:
            		;	// Stops C# compiler whining that label 'loop386' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 351, local_variable_declaration_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "local_variable_declaration_list"

    public class local_variable_initializer_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "local_variable_initializer_list"
    // cs.g:2426:1: local_variable_initializer_list : ( local_variable_initializer ';' )+ ;
    public csParser.local_variable_initializer_list_return local_variable_initializer_list() // throws RecognitionException [1]
    {   
        csParser.local_variable_initializer_list_return retval = new csParser.local_variable_initializer_list_return();
        retval.Start = input.LT(1);
        int local_variable_initializer_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1252 = null;
        csParser.local_variable_initializer_return local_variable_initializer1251 = default(csParser.local_variable_initializer_return);


        object char_literal1252_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 352) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2426:32: ( ( local_variable_initializer ';' )+ )
            // cs.g:2427:2: ( local_variable_initializer ';' )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:2427:2: ( local_variable_initializer ';' )+
            	int cnt387 = 0;
            	do 
            	{
            	    int alt387 = 2;
            	    int LA387_0 = input.LA(1);

            	    if ( ((LA387_0 >= IDENTIFIER && LA387_0 <= NULL) || LA387_0 == MINUS || LA387_0 == SET || (LA387_0 >= 90 && LA387_0 <= 92) || LA387_0 == 95 || (LA387_0 >= 101 && LA387_0 <= 107) || (LA387_0 >= 109 && LA387_0 <= 111) || (LA387_0 >= 114 && LA387_0 <= 122) || (LA387_0 >= 124 && LA387_0 <= 129) || (LA387_0 >= 132 && LA387_0 <= 144) || (LA387_0 >= 175 && LA387_0 <= 187) || LA387_0 == 199 || (LA387_0 >= 201 && LA387_0 <= 202) || LA387_0 == 208 || LA387_0 == 210 || (LA387_0 >= 225 && LA387_0 <= 226)) )
            	    {
            	        alt387 = 1;
            	    }


            	    switch (alt387) 
            		{
            			case 1 :
            			    // cs.g:2427:3: local_variable_initializer ';'
            			    {
            			    	PushFollow(FOLLOW_local_variable_initializer_in_local_variable_initializer_list14945);
            			    	local_variable_initializer1251 = local_variable_initializer();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, local_variable_initializer1251.Tree);
            			    	char_literal1252=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_local_variable_initializer_list14947); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1252_tree = (object)adaptor.Create(char_literal1252);
            			    		adaptor.AddChild(root_0, char_literal1252_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt387 >= 1 ) goto loop387;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee387 =
            		                new EarlyExitException(387, input);
            		            throw eee387;
            	    }
            	    cnt387++;
            	} while (true);

            	loop387:
            		;	// Stops C# compiler whining that label 'loop387' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 352, local_variable_initializer_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "local_variable_initializer_list"

    public class expression_list_test_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "expression_list_test"
    // cs.g:2428:1: expression_list_test : ( expression ';' )+ ;
    public csParser.expression_list_test_return expression_list_test() // throws RecognitionException [1]
    {   
        csParser.expression_list_test_return retval = new csParser.expression_list_test_return();
        retval.Start = input.LT(1);
        int expression_list_test_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1254 = null;
        csParser.expression_return expression1253 = default(csParser.expression_return);


        object char_literal1254_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 353) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2428:21: ( ( expression ';' )+ )
            // cs.g:2429:2: ( expression ';' )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:2429:2: ( expression ';' )+
            	int cnt388 = 0;
            	do 
            	{
            	    int alt388 = 2;
            	    int LA388_0 = input.LA(1);

            	    if ( ((LA388_0 >= IDENTIFIER && LA388_0 <= NULL) || LA388_0 == MINUS || LA388_0 == SET || (LA388_0 >= 90 && LA388_0 <= 91) || LA388_0 == 95 || (LA388_0 >= 101 && LA388_0 <= 107) || (LA388_0 >= 109 && LA388_0 <= 111) || (LA388_0 >= 114 && LA388_0 <= 122) || (LA388_0 >= 124 && LA388_0 <= 129) || (LA388_0 >= 132 && LA388_0 <= 144) || (LA388_0 >= 175 && LA388_0 <= 187) || LA388_0 == 199 || (LA388_0 >= 201 && LA388_0 <= 202) || LA388_0 == 208 || (LA388_0 >= 225 && LA388_0 <= 226)) )
            	    {
            	        alt388 = 1;
            	    }


            	    switch (alt388) 
            		{
            			case 1 :
            			    // cs.g:2429:3: expression ';'
            			    {
            			    	PushFollow(FOLLOW_expression_in_expression_list_test14958);
            			    	expression1253 = expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, expression1253.Tree);
            			    	char_literal1254=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_expression_list_test14960); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1254_tree = (object)adaptor.Create(char_literal1254);
            			    		adaptor.AddChild(root_0, char_literal1254_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt388 >= 1 ) goto loop388;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee388 =
            		                new EarlyExitException(388, input);
            		            throw eee388;
            	    }
            	    cnt388++;
            	} while (true);

            	loop388:
            		;	// Stops C# compiler whining that label 'loop388' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 353, expression_list_test_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "expression_list_test"

    public class unary_expression_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "unary_expression_list"
    // cs.g:2430:1: unary_expression_list : ( unary_expression ';' )+ ;
    public csParser.unary_expression_list_return unary_expression_list() // throws RecognitionException [1]
    {   
        csParser.unary_expression_list_return retval = new csParser.unary_expression_list_return();
        retval.Start = input.LT(1);
        int unary_expression_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1256 = null;
        csParser.unary_expression_return unary_expression1255 = default(csParser.unary_expression_return);


        object char_literal1256_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 354) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2430:22: ( ( unary_expression ';' )+ )
            // cs.g:2431:2: ( unary_expression ';' )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:2431:2: ( unary_expression ';' )+
            	int cnt389 = 0;
            	do 
            	{
            	    int alt389 = 2;
            	    int LA389_0 = input.LA(1);

            	    if ( ((LA389_0 >= IDENTIFIER && LA389_0 <= NULL) || LA389_0 == MINUS || LA389_0 == SET || (LA389_0 >= 90 && LA389_0 <= 91) || LA389_0 == 95 || (LA389_0 >= 101 && LA389_0 <= 107) || (LA389_0 >= 109 && LA389_0 <= 111) || (LA389_0 >= 114 && LA389_0 <= 122) || (LA389_0 >= 124 && LA389_0 <= 129) || (LA389_0 >= 132 && LA389_0 <= 144) || (LA389_0 >= 175 && LA389_0 <= 187) || LA389_0 == 199 || (LA389_0 >= 201 && LA389_0 <= 202) || LA389_0 == 208 || (LA389_0 >= 225 && LA389_0 <= 226)) )
            	    {
            	        alt389 = 1;
            	    }


            	    switch (alt389) 
            		{
            			case 1 :
            			    // cs.g:2431:3: unary_expression ';'
            			    {
            			    	PushFollow(FOLLOW_unary_expression_in_unary_expression_list14971);
            			    	unary_expression1255 = unary_expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, unary_expression1255.Tree);
            			    	char_literal1256=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_unary_expression_list14973); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1256_tree = (object)adaptor.Create(char_literal1256);
            			    		adaptor.AddChild(root_0, char_literal1256_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt389 >= 1 ) goto loop389;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee389 =
            		                new EarlyExitException(389, input);
            		            throw eee389;
            	    }
            	    cnt389++;
            	} while (true);

            	loop389:
            		;	// Stops C# compiler whining that label 'loop389' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 354, unary_expression_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "unary_expression_list"

    public class invocation_expression_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "invocation_expression_list"
    // cs.g:2432:1: invocation_expression_list : ( invocation_expression ';' )+ ;
    public csParser.invocation_expression_list_return invocation_expression_list() // throws RecognitionException [1]
    {   
        csParser.invocation_expression_list_return retval = new csParser.invocation_expression_list_return();
        retval.Start = input.LT(1);
        int invocation_expression_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1258 = null;
        csParser.invocation_expression_return invocation_expression1257 = default(csParser.invocation_expression_return);


        object char_literal1258_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 355) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2432:27: ( ( invocation_expression ';' )+ )
            // cs.g:2433:2: ( invocation_expression ';' )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:2433:2: ( invocation_expression ';' )+
            	int cnt390 = 0;
            	do 
            	{
            	    int alt390 = 2;
            	    int LA390_0 = input.LA(1);

            	    if ( ((LA390_0 >= IDENTIFIER && LA390_0 <= NULL) || LA390_0 == SET || (LA390_0 >= 90 && LA390_0 <= 91) || LA390_0 == 95 || (LA390_0 >= 101 && LA390_0 <= 107) || (LA390_0 >= 109 && LA390_0 <= 110) || (LA390_0 >= 114 && LA390_0 <= 122) || (LA390_0 >= 132 && LA390_0 <= 137) || (LA390_0 >= 175 && LA390_0 <= 187) || LA390_0 == 199 || (LA390_0 >= 201 && LA390_0 <= 202) || LA390_0 == 208 || (LA390_0 >= 225 && LA390_0 <= 226)) )
            	    {
            	        alt390 = 1;
            	    }


            	    switch (alt390) 
            		{
            			case 1 :
            			    // cs.g:2433:3: invocation_expression ';'
            			    {
            			    	PushFollow(FOLLOW_invocation_expression_in_invocation_expression_list14984);
            			    	invocation_expression1257 = invocation_expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, invocation_expression1257.Tree);
            			    	char_literal1258=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_invocation_expression_list14986); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1258_tree = (object)adaptor.Create(char_literal1258);
            			    		adaptor.AddChild(root_0, char_literal1258_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt390 >= 1 ) goto loop390;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee390 =
            		                new EarlyExitException(390, input);
            		            throw eee390;
            	    }
            	    cnt390++;
            	} while (true);

            	loop390:
            		;	// Stops C# compiler whining that label 'loop390' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 355, invocation_expression_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "invocation_expression_list"

    public class primary_expression_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "primary_expression_list"
    // cs.g:2434:1: primary_expression_list : ( primary_expression ';' )+ ;
    public csParser.primary_expression_list_return primary_expression_list() // throws RecognitionException [1]
    {   
        csParser.primary_expression_list_return retval = new csParser.primary_expression_list_return();
        retval.Start = input.LT(1);
        int primary_expression_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1260 = null;
        csParser.primary_expression_return primary_expression1259 = default(csParser.primary_expression_return);


        object char_literal1260_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 356) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2434:24: ( ( primary_expression ';' )+ )
            // cs.g:2435:2: ( primary_expression ';' )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:2435:2: ( primary_expression ';' )+
            	int cnt391 = 0;
            	do 
            	{
            	    int alt391 = 2;
            	    int LA391_0 = input.LA(1);

            	    if ( ((LA391_0 >= IDENTIFIER && LA391_0 <= NULL) || LA391_0 == SET || (LA391_0 >= 90 && LA391_0 <= 91) || LA391_0 == 95 || (LA391_0 >= 101 && LA391_0 <= 107) || (LA391_0 >= 109 && LA391_0 <= 110) || (LA391_0 >= 114 && LA391_0 <= 122) || (LA391_0 >= 132 && LA391_0 <= 144) || (LA391_0 >= 175 && LA391_0 <= 187) || LA391_0 == 199 || (LA391_0 >= 201 && LA391_0 <= 202) || LA391_0 == 208 || (LA391_0 >= 225 && LA391_0 <= 226)) )
            	    {
            	        alt391 = 1;
            	    }


            	    switch (alt391) 
            		{
            			case 1 :
            			    // cs.g:2435:3: primary_expression ';'
            			    {
            			    	PushFollow(FOLLOW_primary_expression_in_primary_expression_list14997);
            			    	primary_expression1259 = primary_expression();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, primary_expression1259.Tree);
            			    	char_literal1260=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_primary_expression_list14999); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1260_tree = (object)adaptor.Create(char_literal1260);
            			    		adaptor.AddChild(root_0, char_literal1260_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt391 >= 1 ) goto loop391;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee391 =
            		                new EarlyExitException(391, input);
            		            throw eee391;
            	    }
            	    cnt391++;
            	} while (true);

            	loop391:
            		;	// Stops C# compiler whining that label 'loop391' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 356, primary_expression_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "primary_expression_list"

    public class static_constructor_modifiers_list_return : ParserRuleReturnScope
    {
        private object tree;
        override public object Tree
        {
        	get { return tree; }
        	set { tree = (object) value; }
        }
    };

    // $ANTLR start "static_constructor_modifiers_list"
    // cs.g:2436:1: static_constructor_modifiers_list : ( static_constructor_modifiers ';' )+ ;
    public csParser.static_constructor_modifiers_list_return static_constructor_modifiers_list() // throws RecognitionException [1]
    {   
        csParser.static_constructor_modifiers_list_return retval = new csParser.static_constructor_modifiers_list_return();
        retval.Start = input.LT(1);
        int static_constructor_modifiers_list_StartIndex = input.Index();
        object root_0 = null;

        IToken char_literal1262 = null;
        csParser.static_constructor_modifiers_return static_constructor_modifiers1261 = default(csParser.static_constructor_modifiers_return);


        object char_literal1262_tree=null;

        try 
    	{
    	    if ( (state.backtracking > 0) && AlreadyParsedRule(input, 357) ) 
    	    {
    	    	return retval; 
    	    }
            // cs.g:2436:34: ( ( static_constructor_modifiers ';' )+ )
            // cs.g:2437:2: ( static_constructor_modifiers ';' )+
            {
            	root_0 = (object)adaptor.GetNilNode();

            	// cs.g:2437:2: ( static_constructor_modifiers ';' )+
            	int cnt392 = 0;
            	do 
            	{
            	    int alt392 = 2;
            	    int LA392_0 = input.LA(1);

            	    if ( (LA392_0 == 94 || LA392_0 == 174 || LA392_0 == 192) )
            	    {
            	        alt392 = 1;
            	    }


            	    switch (alt392) 
            		{
            			case 1 :
            			    // cs.g:2437:3: static_constructor_modifiers ';'
            			    {
            			    	PushFollow(FOLLOW_static_constructor_modifiers_in_static_constructor_modifiers_list15010);
            			    	static_constructor_modifiers1261 = static_constructor_modifiers();
            			    	state.followingStackPointer--;
            			    	if (state.failed) return retval;
            			    	if ( state.backtracking == 0 ) adaptor.AddChild(root_0, static_constructor_modifiers1261.Tree);
            			    	char_literal1262=(IToken)Match(input,SEMI,FOLLOW_SEMI_in_static_constructor_modifiers_list15012); if (state.failed) return retval;
            			    	if ( state.backtracking == 0 )
            			    	{char_literal1262_tree = (object)adaptor.Create(char_literal1262);
            			    		adaptor.AddChild(root_0, char_literal1262_tree);
            			    	}

            			    }
            			    break;

            			default:
            			    if ( cnt392 >= 1 ) goto loop392;
            			    if ( state.backtracking > 0 ) {state.failed = true; return retval;}
            		            EarlyExitException eee392 =
            		                new EarlyExitException(392, input);
            		            throw eee392;
            	    }
            	    cnt392++;
            	} while (true);

            	loop392:
            		;	// Stops C# compiler whining that label 'loop392' has no statements


            }

            retval.Stop = input.LT(-1);

            if ( (state.backtracking==0) )
            {	retval.Tree = (object)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, (IToken) retval.Start, (IToken) retval.Stop);}
        }
        catch (RecognitionException re) 
    	{
            ReportError(re);
            Recover(input,re);
    	// Conversion of the second argument necessary, but harmless
    	retval.Tree = (object)adaptor.ErrorNode(input, (IToken) retval.Start, input.LT(-1), re);

        }
        finally 
    	{
            if ( state.backtracking > 0 ) 
            {
            	Memoize(input, 357, static_constructor_modifiers_list_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end "static_constructor_modifiers_list"

    // $ANTLR start "synpred1_cs"
    public void synpred1_cs_fragment() {
        // cs.g:90:2: ( using_directives )
        // cs.g:90:2: using_directives
        {
        	PushFollow(FOLLOW_using_directives_in_synpred1_cs224);
        	using_directives();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred1_cs"

    // $ANTLR start "synpred3_cs"
    public void synpred3_cs_fragment() {
        // cs.g:92:2: ( namespace_declaration )
        // cs.g:92:2: namespace_declaration
        {
        	PushFollow(FOLLOW_namespace_declaration_in_synpred3_cs238);
        	namespace_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred3_cs"

    // $ANTLR start "synpred8_cs"
    public void synpred8_cs_fragment() {
        // cs.g:116:32: ( generic_argument_list )
        // cs.g:116:32: generic_argument_list
        {
        	PushFollow(FOLLOW_generic_argument_list_in_synpred8_cs359);
        	generic_argument_list();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred8_cs"

    // $ANTLR start "synpred13_cs"
    public void synpred13_cs_fragment() {
        // cs.g:125:33: ( generic_argument_list )
        // cs.g:125:33: generic_argument_list
        {
        	PushFollow(FOLLOW_generic_argument_list_in_synpred13_cs410);
        	generic_argument_list();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred13_cs"

    // $ANTLR start "synpred18_cs"
    public void synpred18_cs_fragment() {
        // cs.g:152:2: ( using_directive )
        // cs.g:152:2: using_directive
        {
        	PushFollow(FOLLOW_using_directive_in_synpred18_cs544);
        	using_directive();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred18_cs"

    // $ANTLR start "synpred22_cs"
    public void synpred22_cs_fragment() {
        // cs.g:185:2: ( class_declaration )
        // cs.g:185:2: class_declaration
        {
        	PushFollow(FOLLOW_class_declaration_in_synpred22_cs703);
        	class_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred22_cs"

    // $ANTLR start "synpred23_cs"
    public void synpred23_cs_fragment() {
        // cs.g:186:4: ( struct_declaration )
        // cs.g:186:4: struct_declaration
        {
        	PushFollow(FOLLOW_struct_declaration_in_synpred23_cs708);
        	struct_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred23_cs"

    // $ANTLR start "synpred24_cs"
    public void synpred24_cs_fragment() {
        // cs.g:187:4: ( interface_declaration )
        // cs.g:187:4: interface_declaration
        {
        	PushFollow(FOLLOW_interface_declaration_in_synpred24_cs713);
        	interface_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred24_cs"

    // $ANTLR start "synpred25_cs"
    public void synpred25_cs_fragment() {
        // cs.g:188:4: ( enum_declaration )
        // cs.g:188:4: enum_declaration
        {
        	PushFollow(FOLLOW_enum_declaration_in_synpred25_cs718);
        	enum_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred25_cs"

    // $ANTLR start "synpred47_cs"
    public void synpred47_cs_fragment() {
        // cs.g:276:2: ( '(' ( positional_argument_list )? ')' )
        // cs.g:276:2: '(' ( positional_argument_list )? ')'
        {
        	Match(input,110,FOLLOW_110_in_synpred47_cs1231); if (state.failed) return ;
        	// cs.g:276:8: ( positional_argument_list )?
        	int alt397 = 2;
        	int LA397_0 = input.LA(1);

        	if ( ((LA397_0 >= IDENTIFIER && LA397_0 <= NULL) || LA397_0 == MINUS || LA397_0 == SET || (LA397_0 >= 90 && LA397_0 <= 91) || LA397_0 == 95 || (LA397_0 >= 101 && LA397_0 <= 107) || (LA397_0 >= 109 && LA397_0 <= 111) || (LA397_0 >= 114 && LA397_0 <= 122) || (LA397_0 >= 124 && LA397_0 <= 129) || (LA397_0 >= 132 && LA397_0 <= 144) || (LA397_0 >= 175 && LA397_0 <= 187) || LA397_0 == 199 || (LA397_0 >= 201 && LA397_0 <= 202) || LA397_0 == 208 || (LA397_0 >= 225 && LA397_0 <= 226)) )
        	{
        	    alt397 = 1;
        	}
        	switch (alt397) 
        	{
        	    case 1 :
        	        // cs.g:0:0: positional_argument_list
        	        {
        	        	PushFollow(FOLLOW_positional_argument_list_in_synpred47_cs1235);
        	        	positional_argument_list();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}

        	Match(input,RPAREN,FOLLOW_RPAREN_in_synpred47_cs1239); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred47_cs"

    // $ANTLR start "synpred48_cs"
    public void synpred48_cs_fragment() {
        // cs.g:277:4: ( '(' positional_argument_list ',' named_argument_list ')' )
        // cs.g:277:4: '(' positional_argument_list ',' named_argument_list ')'
        {
        	Match(input,110,FOLLOW_110_in_synpred48_cs1245); if (state.failed) return ;
        	PushFollow(FOLLOW_positional_argument_list_in_synpred48_cs1249);
        	positional_argument_list();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	Match(input,98,FOLLOW_98_in_synpred48_cs1253); if (state.failed) return ;
        	PushFollow(FOLLOW_named_argument_list_in_synpred48_cs1257);
        	named_argument_list();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	Match(input,RPAREN,FOLLOW_RPAREN_in_synpred48_cs1261); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred48_cs"

    // $ANTLR start "synpred49_cs"
    public void synpred49_cs_fragment() {
        IList list_pa = null;
        csParser.positional_argument_return pa = default(csParser.positional_argument_return);
         pa = null;
        // cs.g:283:29: ( ',' pa+= positional_argument )
        // cs.g:283:29: ',' pa+= positional_argument
        {
        	Match(input,98,FOLLOW_98_in_synpred49_cs1302); if (state.failed) return ;
        	PushFollow(FOLLOW_positional_argument_in_synpred49_cs1308);
        	pa = positional_argument();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	if (list_pa == null) list_pa = new ArrayList();
        	list_pa.Add(pa);


        }
    }
    // $ANTLR end "synpred49_cs"

    // $ANTLR start "synpred53_cs"
    public void synpred53_cs_fragment() {
        // cs.g:314:2: ( ( type_name | predefined_type ) rank_specifiers ( '*' )* )
        // cs.g:314:2: ( type_name | predefined_type ) rank_specifiers ( '*' )*
        {
        	// cs.g:314:2: ( type_name | predefined_type )
        	int alt398 = 2;
        	int LA398_0 = input.LA(1);

        	if ( (LA398_0 == IDENTIFIER || LA398_0 == SET || LA398_0 == 95 || (LA398_0 >= 101 && LA398_0 <= 107) || LA398_0 == 109 || (LA398_0 >= 175 && LA398_0 <= 187) || LA398_0 == 199 || (LA398_0 >= 201 && LA398_0 <= 202) || LA398_0 == 208 || (LA398_0 >= 225 && LA398_0 <= 226)) )
        	{
        	    alt398 = 1;
        	}
        	else if ( ((LA398_0 >= 114 && LA398_0 <= 122) || (LA398_0 >= 132 && LA398_0 <= 137)) )
        	{
        	    alt398 = 2;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    NoViableAltException nvae_d398s0 =
        	        new NoViableAltException("", 398, 0, input);

        	    throw nvae_d398s0;
        	}
        	switch (alt398) 
        	{
        	    case 1 :
        	        // cs.g:314:3: type_name
        	        {
        	        	PushFollow(FOLLOW_type_name_in_synpred53_cs1443);
        	        	type_name();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;
        	    case 2 :
        	        // cs.g:314:19: predefined_type
        	        {
        	        	PushFollow(FOLLOW_predefined_type_in_synpred53_cs1451);
        	        	predefined_type();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}

        	PushFollow(FOLLOW_rank_specifiers_in_synpred53_cs1456);
        	rank_specifiers();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	// cs.g:314:56: ( '*' )*
        	do 
        	{
        	    int alt399 = 2;
        	    int LA399_0 = input.LA(1);

        	    if ( (LA399_0 == 111) )
        	    {
        	        alt399 = 1;
        	    }


        	    switch (alt399) 
        		{
        			case 1 :
        			    // cs.g:0:0: '*'
        			    {
        			    	Match(input,111,FOLLOW_111_in_synpred53_cs1460); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop399;
        	    }
        	} while (true);

        	loop399:
        		;	// Stops C# compiler whining that label 'loop399' has no statements


        }
    }
    // $ANTLR end "synpred53_cs"

    // $ANTLR start "synpred55_cs"
    public void synpred55_cs_fragment() {
        // cs.g:315:4: ( type_name ( '*' )+ )
        // cs.g:315:4: type_name ( '*' )+
        {
        	PushFollow(FOLLOW_type_name_in_synpred55_cs1466);
        	type_name();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	// cs.g:315:14: ( '*' )+
        	int cnt400 = 0;
        	do 
        	{
        	    int alt400 = 2;
        	    int LA400_0 = input.LA(1);

        	    if ( (LA400_0 == 111) )
        	    {
        	        alt400 = 1;
        	    }


        	    switch (alt400) 
        		{
        			case 1 :
        			    // cs.g:0:0: '*'
        			    {
        			    	Match(input,111,FOLLOW_111_in_synpred55_cs1468); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    if ( cnt400 >= 1 ) goto loop400;
        			    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        		            EarlyExitException eee400 =
        		                new EarlyExitException(400, input);
        		            throw eee400;
        	    }
        	    cnt400++;
        	} while (true);

        	loop400:
        		;	// Stops C# compiler whining that label 'loop400' has no statements


        }
    }
    // $ANTLR end "synpred55_cs"

    // $ANTLR start "synpred56_cs"
    public void synpred56_cs_fragment() {
        // cs.g:316:4: ( type_name '?' )
        // cs.g:316:4: type_name '?'
        {
        	PushFollow(FOLLOW_type_name_in_synpred56_cs1474);
        	type_name();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	Match(input,112,FOLLOW_112_in_synpred56_cs1476); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred56_cs"

    // $ANTLR start "synpred57_cs"
    public void synpred57_cs_fragment() {
        // cs.g:317:4: ( type_name )
        // cs.g:317:4: type_name
        {
        	PushFollow(FOLLOW_type_name_in_synpred57_cs1481);
        	type_name();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred57_cs"

    // $ANTLR start "synpred59_cs"
    public void synpred59_cs_fragment() {
        // cs.g:318:4: ( predefined_type ( '*' )+ )
        // cs.g:318:4: predefined_type ( '*' )+
        {
        	PushFollow(FOLLOW_predefined_type_in_synpred59_cs1486);
        	predefined_type();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	// cs.g:318:20: ( '*' )+
        	int cnt401 = 0;
        	do 
        	{
        	    int alt401 = 2;
        	    int LA401_0 = input.LA(1);

        	    if ( (LA401_0 == 111) )
        	    {
        	        alt401 = 1;
        	    }


        	    switch (alt401) 
        		{
        			case 1 :
        			    // cs.g:0:0: '*'
        			    {
        			    	Match(input,111,FOLLOW_111_in_synpred59_cs1488); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    if ( cnt401 >= 1 ) goto loop401;
        			    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        		            EarlyExitException eee401 =
        		                new EarlyExitException(401, input);
        		            throw eee401;
        	    }
        	    cnt401++;
        	} while (true);

        	loop401:
        		;	// Stops C# compiler whining that label 'loop401' has no statements


        }
    }
    // $ANTLR end "synpred59_cs"

    // $ANTLR start "synpred60_cs"
    public void synpred60_cs_fragment() {
        // cs.g:319:4: ( predefined_type '?' )
        // cs.g:319:4: predefined_type '?'
        {
        	PushFollow(FOLLOW_predefined_type_in_synpred60_cs1494);
        	predefined_type();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	Match(input,112,FOLLOW_112_in_synpred60_cs1496); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred60_cs"

    // $ANTLR start "synpred61_cs"
    public void synpred61_cs_fragment() {
        // cs.g:320:4: ( predefined_type )
        // cs.g:320:4: predefined_type
        {
        	PushFollow(FOLLOW_predefined_type_in_synpred61_cs1501);
        	predefined_type();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred61_cs"

    // $ANTLR start "synpred64_cs"
    public void synpred64_cs_fragment() {
        // cs.g:326:56: ( '*' )
        // cs.g:326:56: '*'
        {
        	Match(input,111,FOLLOW_111_in_synpred64_cs1549); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred64_cs"

    // $ANTLR start "synpred65_cs"
    public void synpred65_cs_fragment() {
        // cs.g:326:2: ( ( type_name | predefined_type ) rank_specifiers ( '*' )* )
        // cs.g:326:2: ( type_name | predefined_type ) rank_specifiers ( '*' )*
        {
        	// cs.g:326:2: ( type_name | predefined_type )
        	int alt402 = 2;
        	int LA402_0 = input.LA(1);

        	if ( (LA402_0 == IDENTIFIER || LA402_0 == SET || LA402_0 == 95 || (LA402_0 >= 101 && LA402_0 <= 107) || LA402_0 == 109 || (LA402_0 >= 175 && LA402_0 <= 187) || LA402_0 == 199 || (LA402_0 >= 201 && LA402_0 <= 202) || LA402_0 == 208 || (LA402_0 >= 225 && LA402_0 <= 226)) )
        	{
        	    alt402 = 1;
        	}
        	else if ( ((LA402_0 >= 114 && LA402_0 <= 122) || (LA402_0 >= 132 && LA402_0 <= 137)) )
        	{
        	    alt402 = 2;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    NoViableAltException nvae_d402s0 =
        	        new NoViableAltException("", 402, 0, input);

        	    throw nvae_d402s0;
        	}
        	switch (alt402) 
        	{
        	    case 1 :
        	        // cs.g:326:3: type_name
        	        {
        	        	PushFollow(FOLLOW_type_name_in_synpred65_cs1532);
        	        	type_name();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;
        	    case 2 :
        	        // cs.g:326:19: predefined_type
        	        {
        	        	PushFollow(FOLLOW_predefined_type_in_synpred65_cs1540);
        	        	predefined_type();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}

        	PushFollow(FOLLOW_rank_specifiers_in_synpred65_cs1545);
        	rank_specifiers();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	// cs.g:326:56: ( '*' )*
        	do 
        	{
        	    int alt403 = 2;
        	    int LA403_0 = input.LA(1);

        	    if ( (LA403_0 == 111) )
        	    {
        	        alt403 = 1;
        	    }


        	    switch (alt403) 
        		{
        			case 1 :
        			    // cs.g:0:0: '*'
        			    {
        			    	Match(input,111,FOLLOW_111_in_synpred65_cs1549); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop403;
        	    }
        	} while (true);

        	loop403:
        		;	// Stops C# compiler whining that label 'loop403' has no statements


        }
    }
    // $ANTLR end "synpred65_cs"

    // $ANTLR start "synpred66_cs"
    public void synpred66_cs_fragment() {
        // cs.g:327:14: ( '*' )
        // cs.g:327:14: '*'
        {
        	Match(input,111,FOLLOW_111_in_synpred66_cs1557); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred66_cs"

    // $ANTLR start "synpred67_cs"
    public void synpred67_cs_fragment() {
        // cs.g:327:4: ( type_name ( '*' )+ )
        // cs.g:327:4: type_name ( '*' )+
        {
        	PushFollow(FOLLOW_type_name_in_synpred67_cs1555);
        	type_name();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	// cs.g:327:14: ( '*' )+
        	int cnt404 = 0;
        	do 
        	{
        	    int alt404 = 2;
        	    int LA404_0 = input.LA(1);

        	    if ( (LA404_0 == 111) )
        	    {
        	        alt404 = 1;
        	    }


        	    switch (alt404) 
        		{
        			case 1 :
        			    // cs.g:0:0: '*'
        			    {
        			    	Match(input,111,FOLLOW_111_in_synpred67_cs1557); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    if ( cnt404 >= 1 ) goto loop404;
        			    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        		            EarlyExitException eee404 =
        		                new EarlyExitException(404, input);
        		            throw eee404;
        	    }
        	    cnt404++;
        	} while (true);

        	loop404:
        		;	// Stops C# compiler whining that label 'loop404' has no statements


        }
    }
    // $ANTLR end "synpred67_cs"

    // $ANTLR start "synpred68_cs"
    public void synpred68_cs_fragment() {
        // cs.g:328:4: ( type_name )
        // cs.g:328:4: type_name
        {
        	PushFollow(FOLLOW_type_name_in_synpred68_cs1563);
        	type_name();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred68_cs"

    // $ANTLR start "synpred69_cs"
    public void synpred69_cs_fragment() {
        // cs.g:329:20: ( '*' )
        // cs.g:329:20: '*'
        {
        	Match(input,111,FOLLOW_111_in_synpred69_cs1570); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred69_cs"

    // $ANTLR start "synpred70_cs"
    public void synpred70_cs_fragment() {
        // cs.g:329:4: ( predefined_type ( '*' )+ )
        // cs.g:329:4: predefined_type ( '*' )+
        {
        	PushFollow(FOLLOW_predefined_type_in_synpred70_cs1568);
        	predefined_type();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	// cs.g:329:20: ( '*' )+
        	int cnt405 = 0;
        	do 
        	{
        	    int alt405 = 2;
        	    int LA405_0 = input.LA(1);

        	    if ( (LA405_0 == 111) )
        	    {
        	        alt405 = 1;
        	    }


        	    switch (alt405) 
        		{
        			case 1 :
        			    // cs.g:0:0: '*'
        			    {
        			    	Match(input,111,FOLLOW_111_in_synpred70_cs1570); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    if ( cnt405 >= 1 ) goto loop405;
        			    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        		            EarlyExitException eee405 =
        		                new EarlyExitException(405, input);
        		            throw eee405;
        	    }
        	    cnt405++;
        	} while (true);

        	loop405:
        		;	// Stops C# compiler whining that label 'loop405' has no statements


        }
    }
    // $ANTLR end "synpred70_cs"

    // $ANTLR start "synpred71_cs"
    public void synpred71_cs_fragment() {
        // cs.g:330:4: ( predefined_type )
        // cs.g:330:4: predefined_type
        {
        	PushFollow(FOLLOW_predefined_type_in_synpred71_cs1576);
        	predefined_type();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred71_cs"

    // $ANTLR start "synpred72_cs"
    public void synpred72_cs_fragment() {
        // cs.g:331:13: ( '*' )
        // cs.g:331:13: '*'
        {
        	Match(input,111,FOLLOW_111_in_synpred72_cs1585); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred72_cs"

    // $ANTLR start "synpred86_cs"
    public void synpred86_cs_fragment() {
        // cs.g:410:2: ( non_assignment_expression )
        // cs.g:410:2: non_assignment_expression
        {
        	PushFollow(FOLLOW_non_assignment_expression_in_synpred86_cs1968);
        	non_assignment_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred86_cs"

    // $ANTLR start "synpred87_cs"
    public void synpred87_cs_fragment() {
        // cs.g:416:2: ( cast_expression )
        // cs.g:416:2: cast_expression
        {
        	PushFollow(FOLLOW_cast_expression_in_synpred87_cs1993);
        	cast_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred87_cs"

    // $ANTLR start "synpred92_cs"
    public void synpred92_cs_fragment() {
        // cs.g:421:4: ( '*' unary_expression )
        // cs.g:421:4: '*' unary_expression
        {
        	Match(input,111,FOLLOW_111_in_synpred92_cs2042); if (state.failed) return ;
        	PushFollow(FOLLOW_unary_expression_in_synpred92_cs2046);
        	unary_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred92_cs"

    // $ANTLR start "synpred95_cs"
    public void synpred95_cs_fragment() {
        // cs.g:424:43: ( '++' )
        // cs.g:424:43: '++'
        {
        	Match(input,127,FOLLOW_127_in_synpred95_cs2067); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred95_cs"

    // $ANTLR start "synpred96_cs"
    public void synpred96_cs_fragment() {
        // cs.g:424:51: ( '--' )
        // cs.g:424:51: '--'
        {
        	Match(input,128,FOLLOW_128_in_synpred96_cs2072); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred96_cs"

    // $ANTLR start "synpred97_cs"
    public void synpred97_cs_fragment() {
        // cs.g:424:4: ( primary_or_array_creation_expression ( '++' )? ( '--' )? )
        // cs.g:424:4: primary_or_array_creation_expression ( '++' )? ( '--' )?
        {
        	PushFollow(FOLLOW_primary_or_array_creation_expression_in_synpred97_cs2063);
        	primary_or_array_creation_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	// cs.g:424:43: ( '++' )?
        	int alt406 = 2;
        	int LA406_0 = input.LA(1);

        	if ( (LA406_0 == 127) )
        	{
        	    alt406 = 1;
        	}
        	switch (alt406) 
        	{
        	    case 1 :
        	        // cs.g:0:0: '++'
        	        {
        	        	Match(input,127,FOLLOW_127_in_synpred97_cs2067); if (state.failed) return ;

        	        }
        	        break;

        	}

        	// cs.g:424:51: ( '--' )?
        	int alt407 = 2;
        	int LA407_0 = input.LA(1);

        	if ( (LA407_0 == 128) )
        	{
        	    alt407 = 1;
        	}
        	switch (alt407) 
        	{
        	    case 1 :
        	        // cs.g:0:0: '--'
        	        {
        	        	Match(input,128,FOLLOW_128_in_synpred97_cs2072); if (state.failed) return ;

        	        }
        	        break;

        	}


        }
    }
    // $ANTLR end "synpred97_cs"

    // $ANTLR start "synpred98_cs"
    public void synpred98_cs_fragment() {
        // cs.g:425:4: ( pointer_indirection_expression )
        // cs.g:425:4: pointer_indirection_expression
        {
        	PushFollow(FOLLOW_pointer_indirection_expression_in_synpred98_cs2078);
        	pointer_indirection_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred98_cs"

    // $ANTLR start "synpred99_cs"
    public void synpred99_cs_fragment() {
        // cs.g:451:2: ( conditional_expression )
        // cs.g:451:2: conditional_expression
        {
        	PushFollow(FOLLOW_conditional_expression_in_synpred99_cs2199);
        	conditional_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred99_cs"

    // $ANTLR start "synpred100_cs"
    public void synpred100_cs_fragment() {
        // cs.g:452:4: ( lambda_expression )
        // cs.g:452:4: lambda_expression
        {
        	PushFollow(FOLLOW_lambda_expression_in_synpred100_cs2204);
        	lambda_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred100_cs"

    // $ANTLR start "synpred111_cs"
    public void synpred111_cs_fragment() {
        // cs.g:494:2: ( 'ref' '(' ( ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )? | 'void' ( '*' )+ ( rank_specifiers )? ) ')' ref_variable_reference )
        // cs.g:494:2: 'ref' '(' ( ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )? | 'void' ( '*' )+ ( rank_specifiers )? ) ')' ref_variable_reference
        {
        	Match(input,131,FOLLOW_131_in_synpred111_cs2402); if (state.failed) return ;
        	Match(input,110,FOLLOW_110_in_synpred111_cs2404); if (state.failed) return ;
        	// cs.g:495:3: ( ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )? | 'void' ( '*' )+ ( rank_specifiers )? )
        	int alt416 = 2;
        	int LA416_0 = input.LA(1);

        	if ( (LA416_0 == IDENTIFIER || LA416_0 == SET || LA416_0 == 95 || (LA416_0 >= 101 && LA416_0 <= 107) || LA416_0 == 109 || (LA416_0 >= 114 && LA416_0 <= 122) || (LA416_0 >= 132 && LA416_0 <= 137) || (LA416_0 >= 175 && LA416_0 <= 187) || LA416_0 == 199 || (LA416_0 >= 201 && LA416_0 <= 202) || LA416_0 == 208 || (LA416_0 >= 225 && LA416_0 <= 226)) )
        	{
        	    alt416 = 1;
        	}
        	else if ( (LA416_0 == 113) )
        	{
        	    alt416 = 2;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    NoViableAltException nvae_d416s0 =
        	        new NoViableAltException("", 416, 0, input);

        	    throw nvae_d416s0;
        	}
        	switch (alt416) 
        	{
        	    case 1 :
        	        // cs.g:495:4: ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )?
        	        {
        	        	// cs.g:495:4: ( namespace_or_type_name | predefined_type )
        	        	int alt411 = 2;
        	        	int LA411_0 = input.LA(1);

        	        	if ( (LA411_0 == IDENTIFIER || LA411_0 == SET || LA411_0 == 95 || (LA411_0 >= 101 && LA411_0 <= 107) || LA411_0 == 109 || (LA411_0 >= 175 && LA411_0 <= 187) || LA411_0 == 199 || (LA411_0 >= 201 && LA411_0 <= 202) || LA411_0 == 208 || (LA411_0 >= 225 && LA411_0 <= 226)) )
        	        	{
        	        	    alt411 = 1;
        	        	}
        	        	else if ( ((LA411_0 >= 114 && LA411_0 <= 122) || (LA411_0 >= 132 && LA411_0 <= 137)) )
        	        	{
        	        	    alt411 = 2;
        	        	}
        	        	else 
        	        	{
        	        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	        	    NoViableAltException nvae_d411s0 =
        	        	        new NoViableAltException("", 411, 0, input);

        	        	    throw nvae_d411s0;
        	        	}
        	        	switch (alt411) 
        	        	{
        	        	    case 1 :
        	        	        // cs.g:495:7: namespace_or_type_name
        	        	        {
        	        	        	PushFollow(FOLLOW_namespace_or_type_name_in_synpred111_cs2414);
        	        	        	namespace_or_type_name();
        	        	        	state.followingStackPointer--;
        	        	        	if (state.failed) return ;

        	        	        }
        	        	        break;
        	        	    case 2 :
        	        	        // cs.g:495:36: predefined_type
        	        	        {
        	        	        	PushFollow(FOLLOW_predefined_type_in_synpred111_cs2422);
        	        	        	predefined_type();
        	        	        	state.followingStackPointer--;
        	        	        	if (state.failed) return ;

        	        	        }
        	        	        break;

        	        	}

        	        	// cs.g:495:56: ( '*' )*
        	        	do 
        	        	{
        	        	    int alt412 = 2;
        	        	    int LA412_0 = input.LA(1);

        	        	    if ( (LA412_0 == 111) )
        	        	    {
        	        	        alt412 = 1;
        	        	    }


        	        	    switch (alt412) 
        	        		{
        	        			case 1 :
        	        			    // cs.g:0:0: '*'
        	        			    {
        	        			    	Match(input,111,FOLLOW_111_in_synpred111_cs2428); if (state.failed) return ;

        	        			    }
        	        			    break;

        	        			default:
        	        			    goto loop412;
        	        	    }
        	        	} while (true);

        	        	loop412:
        	        		;	// Stops C# compiler whining that label 'loop412' has no statements

        	        	// cs.g:495:63: ( rank_specifiers )?
        	        	int alt413 = 2;
        	        	int LA413_0 = input.LA(1);

        	        	if ( (LA413_0 == 97) )
        	        	{
        	        	    alt413 = 1;
        	        	}
        	        	switch (alt413) 
        	        	{
        	        	    case 1 :
        	        	        // cs.g:0:0: rank_specifiers
        	        	        {
        	        	        	PushFollow(FOLLOW_rank_specifiers_in_synpred111_cs2433);
        	        	        	rank_specifiers();
        	        	        	state.followingStackPointer--;
        	        	        	if (state.failed) return ;

        	        	        }
        	        	        break;

        	        	}


        	        }
        	        break;
        	    case 2 :
        	        // cs.g:496:5: 'void' ( '*' )+ ( rank_specifiers )?
        	        {
        	        	Match(input,113,FOLLOW_113_in_synpred111_cs2440); if (state.failed) return ;
        	        	// cs.g:496:14: ( '*' )+
        	        	int cnt414 = 0;
        	        	do 
        	        	{
        	        	    int alt414 = 2;
        	        	    int LA414_0 = input.LA(1);

        	        	    if ( (LA414_0 == 111) )
        	        	    {
        	        	        alt414 = 1;
        	        	    }


        	        	    switch (alt414) 
        	        		{
        	        			case 1 :
        	        			    // cs.g:0:0: '*'
        	        			    {
        	        			    	Match(input,111,FOLLOW_111_in_synpred111_cs2444); if (state.failed) return ;

        	        			    }
        	        			    break;

        	        			default:
        	        			    if ( cnt414 >= 1 ) goto loop414;
        	        			    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	        		            EarlyExitException eee414 =
        	        		                new EarlyExitException(414, input);
        	        		            throw eee414;
        	        	    }
        	        	    cnt414++;
        	        	} while (true);

        	        	loop414:
        	        		;	// Stops C# compiler whining that label 'loop414' has no statements

        	        	// cs.g:496:21: ( rank_specifiers )?
        	        	int alt415 = 2;
        	        	int LA415_0 = input.LA(1);

        	        	if ( (LA415_0 == 97) )
        	        	{
        	        	    alt415 = 1;
        	        	}
        	        	switch (alt415) 
        	        	{
        	        	    case 1 :
        	        	        // cs.g:0:0: rank_specifiers
        	        	        {
        	        	        	PushFollow(FOLLOW_rank_specifiers_in_synpred111_cs2449);
        	        	        	rank_specifiers();
        	        	        	state.followingStackPointer--;
        	        	        	if (state.failed) return ;

        	        	        }
        	        	        break;

        	        	}


        	        }
        	        break;

        	}

        	Match(input,RPAREN,FOLLOW_RPAREN_in_synpred111_cs2458); if (state.failed) return ;
        	PushFollow(FOLLOW_ref_variable_reference_in_synpred111_cs2462);
        	ref_variable_reference();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred111_cs"

    // $ANTLR start "synpred112_cs"
    public void synpred112_cs_fragment() {
        // cs.g:504:2: ( primary_expression )
        // cs.g:504:2: primary_expression
        {
        	PushFollow(FOLLOW_primary_expression_in_synpred112_cs2489);
        	primary_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred112_cs"

    // $ANTLR start "synpred115_cs"
    public void synpred115_cs_fragment() {
        // cs.g:525:2: ( ( arguments )+ ( access_operator tinvocation ) )
        // cs.g:525:2: ( arguments )+ ( access_operator tinvocation )
        {
        	// cs.g:525:2: ( arguments )+
        	int cnt417 = 0;
        	do 
        	{
        	    int alt417 = 2;
        	    int LA417_0 = input.LA(1);

        	    if ( (LA417_0 == 110) )
        	    {
        	        alt417 = 1;
        	    }


        	    switch (alt417) 
        		{
        			case 1 :
        			    // cs.g:0:0: arguments
        			    {
        			    	PushFollow(FOLLOW_arguments_in_synpred115_cs2565);
        			    	arguments();
        			    	state.followingStackPointer--;
        			    	if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    if ( cnt417 >= 1 ) goto loop417;
        			    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        		            EarlyExitException eee417 =
        		                new EarlyExitException(417, input);
        		            throw eee417;
        	    }
        	    cnt417++;
        	} while (true);

        	loop417:
        		;	// Stops C# compiler whining that label 'loop417' has no statements

        	// cs.g:525:15: ( access_operator tinvocation )
        	// cs.g:525:16: access_operator tinvocation
        	{
        		PushFollow(FOLLOW_access_operator_in_synpred115_cs2571);
        		access_operator();
        		state.followingStackPointer--;
        		if (state.failed) return ;
        		PushFollow(FOLLOW_tinvocation_in_synpred115_cs2576);
        		tinvocation();
        		state.followingStackPointer--;
        		if (state.failed) return ;

        	}


        }
    }
    // $ANTLR end "synpred115_cs"

    // $ANTLR start "synpred117_cs"
    public void synpred117_cs_fragment() {
        // cs.g:526:4: ( ( arguments )+ telement_part )
        // cs.g:526:4: ( arguments )+ telement_part
        {
        	// cs.g:526:4: ( arguments )+
        	int cnt418 = 0;
        	do 
        	{
        	    int alt418 = 2;
        	    int LA418_0 = input.LA(1);

        	    if ( (LA418_0 == 110) )
        	    {
        	        alt418 = 1;
        	    }


        	    switch (alt418) 
        		{
        			case 1 :
        			    // cs.g:0:0: arguments
        			    {
        			    	PushFollow(FOLLOW_arguments_in_synpred117_cs2582);
        			    	arguments();
        			    	state.followingStackPointer--;
        			    	if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    if ( cnt418 >= 1 ) goto loop418;
        			    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        		            EarlyExitException eee418 =
        		                new EarlyExitException(418, input);
        		            throw eee418;
        	    }
        	    cnt418++;
        	} while (true);

        	loop418:
        		;	// Stops C# compiler whining that label 'loop418' has no statements

        	PushFollow(FOLLOW_telement_part_in_synpred117_cs2587);
        	telement_part();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred117_cs"

    // $ANTLR start "synpred121_cs"
    public void synpred121_cs_fragment() {
        // cs.g:538:2: ( ( bracket_expression )+ ( access_operator telement ) )
        // cs.g:538:2: ( bracket_expression )+ ( access_operator telement )
        {
        	// cs.g:538:2: ( bracket_expression )+
        	int cnt419 = 0;
        	do 
        	{
        	    int alt419 = 2;
        	    int LA419_0 = input.LA(1);

        	    if ( (LA419_0 == 97) )
        	    {
        	        alt419 = 1;
        	    }


        	    switch (alt419) 
        		{
        			case 1 :
        			    // cs.g:0:0: bracket_expression
        			    {
        			    	PushFollow(FOLLOW_bracket_expression_in_synpred121_cs2644);
        			    	bracket_expression();
        			    	state.followingStackPointer--;
        			    	if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    if ( cnt419 >= 1 ) goto loop419;
        			    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        		            EarlyExitException eee419 =
        		                new EarlyExitException(419, input);
        		            throw eee419;
        	    }
        	    cnt419++;
        	} while (true);

        	loop419:
        		;	// Stops C# compiler whining that label 'loop419' has no statements

        	// cs.g:538:24: ( access_operator telement )
        	// cs.g:538:25: access_operator telement
        	{
        		PushFollow(FOLLOW_access_operator_in_synpred121_cs2650);
        		access_operator();
        		state.followingStackPointer--;
        		if (state.failed) return ;
        		PushFollow(FOLLOW_telement_in_synpred121_cs2654);
        		telement();
        		state.followingStackPointer--;
        		if (state.failed) return ;

        	}


        }
    }
    // $ANTLR end "synpred121_cs"

    // $ANTLR start "synpred123_cs"
    public void synpred123_cs_fragment() {
        // cs.g:539:4: ( ( bracket_expression )+ tinvocation_part )
        // cs.g:539:4: ( bracket_expression )+ tinvocation_part
        {
        	// cs.g:539:4: ( bracket_expression )+
        	int cnt420 = 0;
        	do 
        	{
        	    int alt420 = 2;
        	    int LA420_0 = input.LA(1);

        	    if ( (LA420_0 == 97) )
        	    {
        	        alt420 = 1;
        	    }


        	    switch (alt420) 
        		{
        			case 1 :
        			    // cs.g:0:0: bracket_expression
        			    {
        			    	PushFollow(FOLLOW_bracket_expression_in_synpred123_cs2660);
        			    	bracket_expression();
        			    	state.followingStackPointer--;
        			    	if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    if ( cnt420 >= 1 ) goto loop420;
        			    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        		            EarlyExitException eee420 =
        		                new EarlyExitException(420, input);
        		            throw eee420;
        	    }
        	    cnt420++;
        	} while (true);

        	loop420:
        		;	// Stops C# compiler whining that label 'loop420' has no statements

        	PushFollow(FOLLOW_tinvocation_part_in_synpred123_cs2665);
        	tinvocation_part();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred123_cs"

    // $ANTLR start "synpred126_cs"
    public void synpred126_cs_fragment() {
        // cs.g:552:29: ( primary_expression_part )
        // cs.g:552:29: primary_expression_part
        {
        	PushFollow(FOLLOW_primary_expression_part_in_synpred126_cs2734);
        	primary_expression_part();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred126_cs"

    // $ANTLR start "synpred127_cs"
    public void synpred127_cs_fragment() {
        // cs.g:552:2: ( primary_expression_start ( primary_expression_part )* )
        // cs.g:552:2: primary_expression_start ( primary_expression_part )*
        {
        	PushFollow(FOLLOW_primary_expression_start_in_synpred127_cs2730);
        	primary_expression_start();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	// cs.g:552:29: ( primary_expression_part )*
        	do 
        	{
        	    int alt421 = 2;
        	    int LA421_0 = input.LA(1);

        	    if ( ((LA421_0 >= DOT && LA421_0 <= PTR) || LA421_0 == 97 || LA421_0 == 110) )
        	    {
        	        alt421 = 1;
        	    }


        	    switch (alt421) 
        		{
        			case 1 :
        			    // cs.g:0:0: primary_expression_part
        			    {
        			    	PushFollow(FOLLOW_primary_expression_part_in_synpred127_cs2734);
        			    	primary_expression_part();
        			    	state.followingStackPointer--;
        			    	if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop421;
        	    }
        	} while (true);

        	loop421:
        		;	// Stops C# compiler whining that label 'loop421' has no statements


        }
    }
    // $ANTLR end "synpred127_cs"

    // $ANTLR start "synpred128_cs"
    public void synpred128_cs_fragment() {
        // cs.g:553:4: ( delegate_creation_expression )
        // cs.g:553:4: delegate_creation_expression
        {
        	PushFollow(FOLLOW_delegate_creation_expression_in_synpred128_cs2740);
        	delegate_creation_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred128_cs"

    // $ANTLR start "synpred129_cs"
    public void synpred129_cs_fragment() {
        // cs.g:554:4: ( anonymous_object_creation_expression )
        // cs.g:554:4: anonymous_object_creation_expression
        {
        	PushFollow(FOLLOW_anonymous_object_creation_expression_in_synpred129_cs2749);
        	anonymous_object_creation_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred129_cs"

    // $ANTLR start "synpred136_cs"
    public void synpred136_cs_fragment() {
        // cs.g:565:45: ( generic_argument_list )
        // cs.g:565:45: generic_argument_list
        {
        	PushFollow(FOLLOW_generic_argument_list_in_synpred136_cs2853);
        	generic_argument_list();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred136_cs"

    // $ANTLR start "synpred138_cs"
    public void synpred138_cs_fragment() {
        // cs.g:566:14: ( bracket_expression )
        // cs.g:566:14: bracket_expression
        {
        	PushFollow(FOLLOW_bracket_expression_in_synpred138_cs2864);
        	bracket_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred138_cs"

    // $ANTLR start "synpred140_cs"
    public void synpred140_cs_fragment() {
        // cs.g:567:14: ( bracket_expression )
        // cs.g:567:14: bracket_expression
        {
        	PushFollow(FOLLOW_bracket_expression_in_synpred140_cs2875);
        	bracket_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred140_cs"

    // $ANTLR start "synpred143_cs"
    public void synpred143_cs_fragment() {
        // cs.g:569:23: ( brackets_or_arguments )
        // cs.g:569:23: brackets_or_arguments
        {
        	PushFollow(FOLLOW_brackets_or_arguments_in_synpred143_cs2898);
        	brackets_or_arguments();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred143_cs"

    // $ANTLR start "synpred146_cs"
    public void synpred146_cs_fragment() {
        // cs.g:577:24: ( brackets_or_arguments )
        // cs.g:577:24: brackets_or_arguments
        {
        	PushFollow(FOLLOW_brackets_or_arguments_in_synpred146_cs2950);
        	brackets_or_arguments();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred146_cs"

    // $ANTLR start "synpred148_cs"
    public void synpred148_cs_fragment() {
        // cs.g:584:22: ( bracket_expression )
        // cs.g:584:22: bracket_expression
        {
        	PushFollow(FOLLOW_bracket_expression_in_synpred148_cs2981);
        	bracket_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred148_cs"

    // $ANTLR start "synpred153_cs"
    public void synpred153_cs_fragment() {
        // cs.g:602:33: ( generic_argument_list )
        // cs.g:602:33: generic_argument_list
        {
        	PushFollow(FOLLOW_generic_argument_list_in_synpred153_cs3077);
        	generic_argument_list();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred153_cs"

    // $ANTLR start "synpred154_cs"
    public void synpred154_cs_fragment() {
        // cs.g:612:2: ( bracket_expression )
        // cs.g:612:2: bracket_expression
        {
        	PushFollow(FOLLOW_bracket_expression_in_synpred154_cs3126);
        	bracket_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred154_cs"

    // $ANTLR start "synpred155_cs"
    public void synpred155_cs_fragment() {
        // cs.g:612:24: ( arguments )
        // cs.g:612:24: arguments
        {
        	PushFollow(FOLLOW_arguments_in_synpred155_cs3131);
        	arguments();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred155_cs"

    // $ANTLR start "synpred157_cs"
    public void synpred157_cs_fragment() {
        // cs.g:613:16: ( bracket_expression )
        // cs.g:613:16: bracket_expression
        {
        	PushFollow(FOLLOW_bracket_expression_in_synpred157_cs3141);
        	bracket_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred157_cs"

    // $ANTLR start "synpred176_cs"
    public void synpred176_cs_fragment() {
        // cs.g:665:24: ( access )
        // cs.g:665:24: access
        {
        	PushFollow(FOLLOW_access_in_synpred176_cs3435);
        	access();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred176_cs"

    // $ANTLR start "synpred178_cs"
    public void synpred178_cs_fragment() {
        // cs.g:667:16: ( access_part )
        // cs.g:667:16: access_part
        {
        	PushFollow(FOLLOW_access_part_in_synpred178_cs3459);
        	access_part();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred178_cs"

    // $ANTLR start "synpred179_cs"
    public void synpred179_cs_fragment() {
        // cs.g:673:11: ( access_part )
        // cs.g:673:11: access_part
        {
        	PushFollow(FOLLOW_access_part_in_synpred179_cs3483);
        	access_part();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred179_cs"

    // $ANTLR start "synpred181_cs"
    public void synpred181_cs_fragment() {
        // cs.g:674:23: ( access_part )
        // cs.g:674:23: access_part
        {
        	PushFollow(FOLLOW_access_part_in_synpred181_cs3495);
        	access_part();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred181_cs"

    // $ANTLR start "synpred189_cs"
    public void synpred189_cs_fragment() {
        // cs.g:706:2: ( '{' ( member_initializer_list )? '}' )
        // cs.g:706:2: '{' ( member_initializer_list )? '}'
        {
        	Match(input,92,FOLLOW_92_in_synpred189_cs3668); if (state.failed) return ;
        	// cs.g:706:8: ( member_initializer_list )?
        	int alt438 = 2;
        	int LA438_0 = input.LA(1);

        	if ( (LA438_0 == IDENTIFIER || LA438_0 == SET || LA438_0 == 95 || (LA438_0 >= 101 && LA438_0 <= 107) || LA438_0 == 109 || (LA438_0 >= 175 && LA438_0 <= 187) || LA438_0 == 199 || (LA438_0 >= 201 && LA438_0 <= 202) || LA438_0 == 208 || (LA438_0 >= 225 && LA438_0 <= 226)) )
        	{
        	    alt438 = 1;
        	}
        	switch (alt438) 
        	{
        	    case 1 :
        	        // cs.g:0:0: member_initializer_list
        	        {
        	        	PushFollow(FOLLOW_member_initializer_list_in_synpred189_cs3672);
        	        	member_initializer_list();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}

        	Match(input,93,FOLLOW_93_in_synpred189_cs3677); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred189_cs"

    // $ANTLR start "synpred197_cs"
    public void synpred197_cs_fragment() {
        // cs.g:746:11: ( non_array_type '[' expression_list ']' ( rank_specifiers )? ( array_initializer )? ( access_operator primary_expression )* )
        // cs.g:746:11: non_array_type '[' expression_list ']' ( rank_specifiers )? ( array_initializer )? ( access_operator primary_expression )*
        {
        	PushFollow(FOLLOW_non_array_type_in_synpred197_cs3917);
        	non_array_type();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	Match(input,97,FOLLOW_97_in_synpred197_cs3919); if (state.failed) return ;
        	PushFollow(FOLLOW_expression_list_in_synpred197_cs3923);
        	expression_list();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	Match(input,99,FOLLOW_99_in_synpred197_cs3927); if (state.failed) return ;
        	// cs.g:746:56: ( rank_specifiers )?
        	int alt439 = 2;
        	int LA439_0 = input.LA(1);

        	if ( (LA439_0 == 97) )
        	{
        	    alt439 = 1;
        	}
        	switch (alt439) 
        	{
        	    case 1 :
        	        // cs.g:0:0: rank_specifiers
        	        {
        	        	PushFollow(FOLLOW_rank_specifiers_in_synpred197_cs3931);
        	        	rank_specifiers();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}

        	// cs.g:746:75: ( array_initializer )?
        	int alt440 = 2;
        	int LA440_0 = input.LA(1);

        	if ( (LA440_0 == 92) )
        	{
        	    alt440 = 1;
        	}
        	switch (alt440) 
        	{
        	    case 1 :
        	        // cs.g:0:0: array_initializer
        	        {
        	        	PushFollow(FOLLOW_array_initializer_in_synpred197_cs3936);
        	        	array_initializer();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}

        	// cs.g:746:96: ( access_operator primary_expression )*
        	do 
        	{
        	    int alt441 = 2;
        	    int LA441_0 = input.LA(1);

        	    if ( ((LA441_0 >= DOT && LA441_0 <= PTR)) )
        	    {
        	        alt441 = 1;
        	    }


        	    switch (alt441) 
        		{
        			case 1 :
        			    // cs.g:746:97: access_operator primary_expression
        			    {
        			    	PushFollow(FOLLOW_access_operator_in_synpred197_cs3942);
        			    	access_operator();
        			    	state.followingStackPointer--;
        			    	if (state.failed) return ;
        			    	PushFollow(FOLLOW_primary_expression_in_synpred197_cs3946);
        			    	primary_expression();
        			    	state.followingStackPointer--;
        			    	if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop441;
        	    }
        	} while (true);

        	loop441:
        		;	// Stops C# compiler whining that label 'loop441' has no statements


        }
    }
    // $ANTLR end "synpred197_cs"

    // $ANTLR start "synpred198_cs"
    public void synpred198_cs_fragment() {
        // cs.g:747:5: ( array_type array_initializer )
        // cs.g:747:5: array_type array_initializer
        {
        	PushFollow(FOLLOW_array_type_in_synpred198_cs3954);
        	array_type();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	PushFollow(FOLLOW_array_initializer_in_synpred198_cs3958);
        	array_initializer();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred198_cs"

    // $ANTLR start "synpred200_cs"
    public void synpred200_cs_fragment() {
        // cs.g:763:2: ( '{' ( member_declarator_list )? '}' )
        // cs.g:763:2: '{' ( member_declarator_list )? '}'
        {
        	Match(input,92,FOLLOW_92_in_synpred200_cs4048); if (state.failed) return ;
        	// cs.g:763:8: ( member_declarator_list )?
        	int alt442 = 2;
        	int LA442_0 = input.LA(1);

        	if ( (LA442_0 == IDENTIFIER || LA442_0 == SET || LA442_0 == 95 || (LA442_0 >= 101 && LA442_0 <= 107) || LA442_0 == 109 || (LA442_0 >= 175 && LA442_0 <= 187) || LA442_0 == 199 || (LA442_0 >= 201 && LA442_0 <= 202) || LA442_0 == 208 || (LA442_0 >= 225 && LA442_0 <= 226)) )
        	{
        	    alt442 = 1;
        	}
        	switch (alt442) 
        	{
        	    case 1 :
        	        // cs.g:0:0: member_declarator_list
        	        {
        	        	PushFollow(FOLLOW_member_declarator_list_in_synpred200_cs4052);
        	        	member_declarator_list();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}

        	Match(input,93,FOLLOW_93_in_synpred200_cs4057); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred200_cs"

    // $ANTLR start "synpred202_cs"
    public void synpred202_cs_fragment() {
        // cs.g:775:2: ( identifier ( generic_argument_list )? )
        // cs.g:775:2: identifier ( generic_argument_list )?
        {
        	PushFollow(FOLLOW_identifier_in_synpred202_cs4132);
        	identifier();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	// cs.g:775:15: ( generic_argument_list )?
        	int alt443 = 2;
        	int LA443_0 = input.LA(1);

        	if ( (LA443_0 == 123) )
        	{
        	    alt443 = 1;
        	}
        	switch (alt443) 
        	{
        	    case 1 :
        	        // cs.g:0:0: generic_argument_list
        	        {
        	        	PushFollow(FOLLOW_generic_argument_list_in_synpred202_cs4136);
        	        	generic_argument_list();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}


        }
    }
    // $ANTLR end "synpred202_cs"

    // $ANTLR start "synpred203_cs"
    public void synpred203_cs_fragment() {
        // cs.g:776:4: ( member_access )
        // cs.g:776:4: member_access
        {
        	PushFollow(FOLLOW_member_access_in_synpred203_cs4144);
        	member_access();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred203_cs"

    // $ANTLR start "synpred204_cs"
    public void synpred204_cs_fragment() {
        // cs.g:787:2: ( 'typeof' '(' type ')' )
        // cs.g:787:2: 'typeof' '(' type ')'
        {
        	Match(input,140,FOLLOW_140_in_synpred204_cs4209); if (state.failed) return ;
        	Match(input,110,FOLLOW_110_in_synpred204_cs4213); if (state.failed) return ;
        	PushFollow(FOLLOW_type_in_synpred204_cs4217);
        	type();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	Match(input,RPAREN,FOLLOW_RPAREN_in_synpred204_cs4221); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred204_cs"

    // $ANTLR start "synpred205_cs"
    public void synpred205_cs_fragment() {
        // cs.g:788:4: ( 'typeof' '(' unbound_type_name ')' )
        // cs.g:788:4: 'typeof' '(' unbound_type_name ')'
        {
        	Match(input,140,FOLLOW_140_in_synpred205_cs4227); if (state.failed) return ;
        	Match(input,110,FOLLOW_110_in_synpred205_cs4229); if (state.failed) return ;
        	PushFollow(FOLLOW_unbound_type_name_in_synpred205_cs4233);
        	unbound_type_name();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	Match(input,RPAREN,FOLLOW_RPAREN_in_synpred205_cs4237); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred205_cs"

    // $ANTLR start "synpred226_cs"
    public void synpred226_cs_fragment() {
        // cs.g:915:3: ( ( namespace_or_type_name | predefined_type ) ( '*' )+ ( rank_specifiers )? )
        // cs.g:915:3: ( namespace_or_type_name | predefined_type ) ( '*' )+ ( rank_specifiers )?
        {
        	// cs.g:915:3: ( namespace_or_type_name | predefined_type )
        	int alt444 = 2;
        	int LA444_0 = input.LA(1);

        	if ( (LA444_0 == IDENTIFIER || LA444_0 == SET || LA444_0 == 95 || (LA444_0 >= 101 && LA444_0 <= 107) || LA444_0 == 109 || (LA444_0 >= 175 && LA444_0 <= 187) || LA444_0 == 199 || (LA444_0 >= 201 && LA444_0 <= 202) || LA444_0 == 208 || (LA444_0 >= 225 && LA444_0 <= 226)) )
        	{
        	    alt444 = 1;
        	}
        	else if ( ((LA444_0 >= 114 && LA444_0 <= 122) || (LA444_0 >= 132 && LA444_0 <= 137)) )
        	{
        	    alt444 = 2;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    NoViableAltException nvae_d444s0 =
        	        new NoViableAltException("", 444, 0, input);

        	    throw nvae_d444s0;
        	}
        	switch (alt444) 
        	{
        	    case 1 :
        	        // cs.g:915:6: namespace_or_type_name
        	        {
        	        	PushFollow(FOLLOW_namespace_or_type_name_in_synpred226_cs4913);
        	        	namespace_or_type_name();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;
        	    case 2 :
        	        // cs.g:915:32: predefined_type
        	        {
        	        	PushFollow(FOLLOW_predefined_type_in_synpred226_cs4918);
        	        	predefined_type();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}

        	// cs.g:915:52: ( '*' )+
        	int cnt445 = 0;
        	do 
        	{
        	    int alt445 = 2;
        	    int LA445_0 = input.LA(1);

        	    if ( (LA445_0 == 111) )
        	    {
        	        alt445 = 1;
        	    }


        	    switch (alt445) 
        		{
        			case 1 :
        			    // cs.g:0:0: '*'
        			    {
        			    	Match(input,111,FOLLOW_111_in_synpred226_cs4924); if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    if ( cnt445 >= 1 ) goto loop445;
        			    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        		            EarlyExitException eee445 =
        		                new EarlyExitException(445, input);
        		            throw eee445;
        	    }
        	    cnt445++;
        	} while (true);

        	loop445:
        		;	// Stops C# compiler whining that label 'loop445' has no statements

        	// cs.g:915:59: ( rank_specifiers )?
        	int alt446 = 2;
        	int LA446_0 = input.LA(1);

        	if ( (LA446_0 == 97) )
        	{
        	    alt446 = 1;
        	}
        	switch (alt446) 
        	{
        	    case 1 :
        	        // cs.g:0:0: rank_specifiers
        	        {
        	        	PushFollow(FOLLOW_rank_specifiers_in_synpred226_cs4929);
        	        	rank_specifiers();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}


        }
    }
    // $ANTLR end "synpred226_cs"

    // $ANTLR start "synpred229_cs"
    public void synpred229_cs_fragment() {
        // cs.g:916:5: ( ( namespace_or_type_name | predefined_type ) '?' ( rank_specifiers )? )
        // cs.g:916:5: ( namespace_or_type_name | predefined_type ) '?' ( rank_specifiers )?
        {
        	// cs.g:916:5: ( namespace_or_type_name | predefined_type )
        	int alt447 = 2;
        	int LA447_0 = input.LA(1);

        	if ( (LA447_0 == IDENTIFIER || LA447_0 == SET || LA447_0 == 95 || (LA447_0 >= 101 && LA447_0 <= 107) || LA447_0 == 109 || (LA447_0 >= 175 && LA447_0 <= 187) || LA447_0 == 199 || (LA447_0 >= 201 && LA447_0 <= 202) || LA447_0 == 208 || (LA447_0 >= 225 && LA447_0 <= 226)) )
        	{
        	    alt447 = 1;
        	}
        	else if ( ((LA447_0 >= 114 && LA447_0 <= 122) || (LA447_0 >= 132 && LA447_0 <= 137)) )
        	{
        	    alt447 = 2;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    NoViableAltException nvae_d447s0 =
        	        new NoViableAltException("", 447, 0, input);

        	    throw nvae_d447s0;
        	}
        	switch (alt447) 
        	{
        	    case 1 :
        	        // cs.g:916:8: namespace_or_type_name
        	        {
        	        	PushFollow(FOLLOW_namespace_or_type_name_in_synpred229_cs4939);
        	        	namespace_or_type_name();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;
        	    case 2 :
        	        // cs.g:916:34: predefined_type
        	        {
        	        	PushFollow(FOLLOW_predefined_type_in_synpred229_cs4944);
        	        	predefined_type();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}

        	Match(input,112,FOLLOW_112_in_synpred229_cs4950); if (state.failed) return ;
        	// cs.g:916:60: ( rank_specifiers )?
        	int alt448 = 2;
        	int LA448_0 = input.LA(1);

        	if ( (LA448_0 == 97) )
        	{
        	    alt448 = 1;
        	}
        	switch (alt448) 
        	{
        	    case 1 :
        	        // cs.g:0:0: rank_specifiers
        	        {
        	        	PushFollow(FOLLOW_rank_specifiers_in_synpred229_cs4954);
        	        	rank_specifiers();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}


        }
    }
    // $ANTLR end "synpred229_cs"

    // $ANTLR start "synpred232_cs"
    public void synpred232_cs_fragment() {
        // cs.g:917:5: ( ( namespace_or_type_name | predefined_type ) ( rank_specifiers )? )
        // cs.g:917:5: ( namespace_or_type_name | predefined_type ) ( rank_specifiers )?
        {
        	// cs.g:917:5: ( namespace_or_type_name | predefined_type )
        	int alt449 = 2;
        	int LA449_0 = input.LA(1);

        	if ( (LA449_0 == IDENTIFIER || LA449_0 == SET || LA449_0 == 95 || (LA449_0 >= 101 && LA449_0 <= 107) || LA449_0 == 109 || (LA449_0 >= 175 && LA449_0 <= 187) || LA449_0 == 199 || (LA449_0 >= 201 && LA449_0 <= 202) || LA449_0 == 208 || (LA449_0 >= 225 && LA449_0 <= 226)) )
        	{
        	    alt449 = 1;
        	}
        	else if ( ((LA449_0 >= 114 && LA449_0 <= 122) || (LA449_0 >= 132 && LA449_0 <= 137)) )
        	{
        	    alt449 = 2;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    NoViableAltException nvae_d449s0 =
        	        new NoViableAltException("", 449, 0, input);

        	    throw nvae_d449s0;
        	}
        	switch (alt449) 
        	{
        	    case 1 :
        	        // cs.g:917:8: namespace_or_type_name
        	        {
        	        	PushFollow(FOLLOW_namespace_or_type_name_in_synpred232_cs4964);
        	        	namespace_or_type_name();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;
        	    case 2 :
        	        // cs.g:917:34: predefined_type
        	        {
        	        	PushFollow(FOLLOW_predefined_type_in_synpred232_cs4969);
        	        	predefined_type();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}

        	// cs.g:917:54: ( rank_specifiers )?
        	int alt450 = 2;
        	int LA450_0 = input.LA(1);

        	if ( (LA450_0 == 97) )
        	{
        	    alt450 = 1;
        	}
        	switch (alt450) 
        	{
        	    case 1 :
        	        // cs.g:0:0: rank_specifiers
        	        {
        	        	PushFollow(FOLLOW_rank_specifiers_in_synpred232_cs4975);
        	        	rank_specifiers();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}


        }
    }
    // $ANTLR end "synpred232_cs"

    // $ANTLR start "synpred238_cs"
    public void synpred238_cs_fragment() {
        // cs.g:926:22: ( ( '*' | '/' | '%' ) unary_expression )
        // cs.g:926:22: ( '*' | '/' | '%' ) unary_expression
        {
        	if ( input.LA(1) == 111 || (input.LA(1) >= 146 && input.LA(1) <= 147) ) 
        	{
        	    input.Consume();
        	    state.errorRecovery = false;state.failed = false;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    MismatchedSetException mse = new MismatchedSetException(null,input);
        	    throw mse;
        	}

        	PushFollow(FOLLOW_unary_expression_in_synpred238_cs5048);
        	unary_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred238_cs"

    // $ANTLR start "synpred240_cs"
    public void synpred240_cs_fragment() {
        // cs.g:931:29: ( ( '+' | '-' ) multiplicative_expression )
        // cs.g:931:29: ( '+' | '-' ) multiplicative_expression
        {
        	if ( input.LA(1) == MINUS || input.LA(1) == 124 ) 
        	{
        	    input.Consume();
        	    state.errorRecovery = false;state.failed = false;
        	}
        	else 
        	{
        	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        	    MismatchedSetException mse = new MismatchedSetException(null,input);
        	    throw mse;
        	}

        	PushFollow(FOLLOW_multiplicative_expression_in_synpred240_cs5081);
        	multiplicative_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred240_cs"

    // $ANTLR start "synpred247_cs"
    public void synpred247_cs_fragment() {
        // cs.g:943:9: ( ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* )
        // cs.g:943:9: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
        {
        	// cs.g:943:9: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
        	do 
        	{
        	    int alt452 = 2;
        	    int LA452_0 = input.LA(1);

        	    if ( (LA452_0 == GT || LA452_0 == 123 || (LA452_0 >= 149 && LA452_0 <= 150)) )
        	    {
        	        alt452 = 1;
        	    }


        	    switch (alt452) 
        		{
        			case 1 :
        			    // cs.g:943:10: ( '<' | '>' | '<=' | '>=' ) shift_expression
        			    {
        			    	if ( input.LA(1) == GT || input.LA(1) == 123 || (input.LA(1) >= 149 && input.LA(1) <= 150) ) 
        			    	{
        			    	    input.Consume();
        			    	    state.errorRecovery = false;state.failed = false;
        			    	}
        			    	else 
        			    	{
        			    	    if ( state.backtracking > 0 ) {state.failed = true; return ;}
        			    	    MismatchedSetException mse = new MismatchedSetException(null,input);
        			    	    throw mse;
        			    	}

        			    	PushFollow(FOLLOW_shift_expression_in_synpred247_cs5161);
        			    	shift_expression();
        			    	state.followingStackPointer--;
        			    	if (state.failed) return ;

        			    }
        			    break;

        			default:
        			    goto loop452;
        	    }
        	} while (true);

        	loop452:
        		;	// Stops C# compiler whining that label 'loop452' has no statements


        }
    }
    // $ANTLR end "synpred247_cs"

    // $ANTLR start "synpred252_cs"
    public void synpred252_cs_fragment() {
        // cs.g:956:23: ( '&' equality_expression )
        // cs.g:956:23: '&' equality_expression
        {
        	Match(input,129,FOLLOW_129_in_synpred252_cs5246); if (state.failed) return ;
        	PushFollow(FOLLOW_equality_expression_in_synpred252_cs5250);
        	equality_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred252_cs"

    // $ANTLR start "synpred257_cs"
    public void synpred257_cs_fragment() {
        // cs.g:981:31: ( '??' null_coalescing_expression )
        // cs.g:981:31: '??' null_coalescing_expression
        {
        	Match(input,159,FOLLOW_159_in_synpred257_cs5398); if (state.failed) return ;
        	PushFollow(FOLLOW_null_coalescing_expression_in_synpred257_cs5402);
        	null_coalescing_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred257_cs"

    // $ANTLR start "synpred272_cs"
    public void synpred272_cs_fragment() {
        // cs.g:1014:2: ( explicit_anonymous_function_signature )
        // cs.g:1014:2: explicit_anonymous_function_signature
        {
        	PushFollow(FOLLOW_explicit_anonymous_function_signature_in_synpred272_cs5615);
        	explicit_anonymous_function_signature();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred272_cs"

    // $ANTLR start "synpred291_cs"
    public void synpred291_cs_fragment() {
        // cs.g:1071:49: ( query_continuation )
        // cs.g:1071:49: query_continuation
        {
        	PushFollow(FOLLOW_query_continuation_in_synpred291_cs5955);
        	query_continuation();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred291_cs"

    // $ANTLR start "synpred299_cs"
    public void synpred299_cs_fragment() {
        // cs.g:1110:2: ( ordering )
        // cs.g:1110:2: ordering
        {
        	PushFollow(FOLLOW_ordering_in_synpred299_cs6177);
        	ordering();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred299_cs"

    // $ANTLR start "synpred300_cs"
    public void synpred300_cs_fragment() {
        // cs.g:1115:16: ( ordering_direction )
        // cs.g:1115:16: ordering_direction
        {
        	PushFollow(FOLLOW_ordering_direction_in_synpred300_cs6203);
        	ordering_direction();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred300_cs"

    // $ANTLR start "synpred320_cs"
    public void synpred320_cs_fragment() {
        // cs.g:1166:2: ( ':' class_type ( ',' interface_type_list )? )
        // cs.g:1166:2: ':' class_type ( ',' interface_type_list )?
        {
        	Match(input,100,FOLLOW_100_in_synpred320_cs6487); if (state.failed) return ;
        	PushFollow(FOLLOW_class_type_in_synpred320_cs6491);
        	class_type();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	// cs.g:1166:19: ( ',' interface_type_list )?
        	int alt454 = 2;
        	int LA454_0 = input.LA(1);

        	if ( (LA454_0 == 98) )
        	{
        	    alt454 = 1;
        	}
        	switch (alt454) 
        	{
        	    case 1 :
        	        // cs.g:1166:20: ',' interface_type_list
        	        {
        	        	Match(input,98,FOLLOW_98_in_synpred320_cs6494); if (state.failed) return ;
        	        	PushFollow(FOLLOW_interface_type_list_in_synpred320_cs6496);
        	        	interface_type_list();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}


        }
    }
    // $ANTLR end "synpred320_cs"

    // $ANTLR start "synpred323_cs"
    public void synpred323_cs_fragment() {
        // cs.g:1188:2: ( ( primary_constraint ',' secondary_constraint_list ',' constructor_constraint ) )
        // cs.g:1188:2: ( primary_constraint ',' secondary_constraint_list ',' constructor_constraint )
        {
        	// cs.g:1188:2: ( primary_constraint ',' secondary_constraint_list ',' constructor_constraint )
        	// cs.g:1188:3: primary_constraint ',' secondary_constraint_list ',' constructor_constraint
        	{
        		PushFollow(FOLLOW_primary_constraint_in_synpred323_cs6620);
        		primary_constraint();
        		state.followingStackPointer--;
        		if (state.failed) return ;
        		Match(input,98,FOLLOW_98_in_synpred323_cs6626); if (state.failed) return ;
        		PushFollow(FOLLOW_secondary_constraint_list_in_synpred323_cs6630);
        		secondary_constraint_list();
        		state.followingStackPointer--;
        		if (state.failed) return ;
        		Match(input,98,FOLLOW_98_in_synpred323_cs6634); if (state.failed) return ;
        		PushFollow(FOLLOW_constructor_constraint_in_synpred323_cs6638);
        		constructor_constraint();
        		state.followingStackPointer--;
        		if (state.failed) return ;

        	}


        }
    }
    // $ANTLR end "synpred323_cs"

    // $ANTLR start "synpred324_cs"
    public void synpred324_cs_fragment() {
        // cs.g:1189:4: ( ( primary_constraint ',' secondary_constraint_list ) )
        // cs.g:1189:4: ( primary_constraint ',' secondary_constraint_list )
        {
        	// cs.g:1189:4: ( primary_constraint ',' secondary_constraint_list )
        	// cs.g:1189:5: primary_constraint ',' secondary_constraint_list
        	{
        		PushFollow(FOLLOW_primary_constraint_in_synpred324_cs6645);
        		primary_constraint();
        		state.followingStackPointer--;
        		if (state.failed) return ;
        		Match(input,98,FOLLOW_98_in_synpred324_cs6651); if (state.failed) return ;
        		PushFollow(FOLLOW_secondary_constraint_list_in_synpred324_cs6655);
        		secondary_constraint_list();
        		state.followingStackPointer--;
        		if (state.failed) return ;

        	}


        }
    }
    // $ANTLR end "synpred324_cs"

    // $ANTLR start "synpred325_cs"
    public void synpred325_cs_fragment() {
        // cs.g:1190:4: ( ( primary_constraint ',' constructor_constraint ) )
        // cs.g:1190:4: ( primary_constraint ',' constructor_constraint )
        {
        	// cs.g:1190:4: ( primary_constraint ',' constructor_constraint )
        	// cs.g:1190:5: primary_constraint ',' constructor_constraint
        	{
        		PushFollow(FOLLOW_primary_constraint_in_synpred325_cs6662);
        		primary_constraint();
        		state.followingStackPointer--;
        		if (state.failed) return ;
        		Match(input,98,FOLLOW_98_in_synpred325_cs6668); if (state.failed) return ;
        		PushFollow(FOLLOW_constructor_constraint_in_synpred325_cs6672);
        		constructor_constraint();
        		state.followingStackPointer--;
        		if (state.failed) return ;

        	}


        }
    }
    // $ANTLR end "synpred325_cs"

    // $ANTLR start "synpred326_cs"
    public void synpred326_cs_fragment() {
        // cs.g:1191:4: ( ( secondary_constraint_list ',' constructor_constraint ) )
        // cs.g:1191:4: ( secondary_constraint_list ',' constructor_constraint )
        {
        	// cs.g:1191:4: ( secondary_constraint_list ',' constructor_constraint )
        	// cs.g:1191:5: secondary_constraint_list ',' constructor_constraint
        	{
        		PushFollow(FOLLOW_secondary_constraint_list_in_synpred326_cs6679);
        		secondary_constraint_list();
        		state.followingStackPointer--;
        		if (state.failed) return ;
        		Match(input,98,FOLLOW_98_in_synpred326_cs6684); if (state.failed) return ;
        		PushFollow(FOLLOW_constructor_constraint_in_synpred326_cs6688);
        		constructor_constraint();
        		state.followingStackPointer--;
        		if (state.failed) return ;

        	}


        }
    }
    // $ANTLR end "synpred326_cs"

    // $ANTLR start "synpred327_cs"
    public void synpred327_cs_fragment() {
        // cs.g:1192:4: ( primary_constraint )
        // cs.g:1192:4: primary_constraint
        {
        	PushFollow(FOLLOW_primary_constraint_in_synpred327_cs6694);
        	primary_constraint();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred327_cs"

    // $ANTLR start "synpred328_cs"
    public void synpred328_cs_fragment() {
        // cs.g:1193:4: ( secondary_constraint_list )
        // cs.g:1193:4: secondary_constraint_list
        {
        	PushFollow(FOLLOW_secondary_constraint_list_in_synpred328_cs6699);
        	secondary_constraint_list();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred328_cs"

    // $ANTLR start "synpred332_cs"
    public void synpred332_cs_fragment() {
        // cs.g:1213:3: ( type_name )
        // cs.g:1213:3: type_name
        {
        	PushFollow(FOLLOW_type_name_in_synpred332_cs6793);
        	type_name();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred332_cs"

    // $ANTLR start "synpred335_cs"
    public void synpred335_cs_fragment() {
        // cs.g:1233:2: ( constant_declaration )
        // cs.g:1233:2: constant_declaration
        {
        	PushFollow(FOLLOW_constant_declaration_in_synpred335_cs6896);
        	constant_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred335_cs"

    // $ANTLR start "synpred336_cs"
    public void synpred336_cs_fragment() {
        // cs.g:1234:4: ( field_declaration )
        // cs.g:1234:4: field_declaration
        {
        	PushFollow(FOLLOW_field_declaration_in_synpred336_cs6901);
        	field_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred336_cs"

    // $ANTLR start "synpred337_cs"
    public void synpred337_cs_fragment() {
        // cs.g:1235:4: ( method_declaration )
        // cs.g:1235:4: method_declaration
        {
        	PushFollow(FOLLOW_method_declaration_in_synpred337_cs6906);
        	method_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred337_cs"

    // $ANTLR start "synpred338_cs"
    public void synpred338_cs_fragment() {
        // cs.g:1236:4: ( property_declaration )
        // cs.g:1236:4: property_declaration
        {
        	PushFollow(FOLLOW_property_declaration_in_synpred338_cs6911);
        	property_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred338_cs"

    // $ANTLR start "synpred339_cs"
    public void synpred339_cs_fragment() {
        // cs.g:1237:4: ( event_declaration )
        // cs.g:1237:4: event_declaration
        {
        	PushFollow(FOLLOW_event_declaration_in_synpred339_cs6916);
        	event_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred339_cs"

    // $ANTLR start "synpred340_cs"
    public void synpred340_cs_fragment() {
        // cs.g:1238:4: ( indexer_declaration )
        // cs.g:1238:4: indexer_declaration
        {
        	PushFollow(FOLLOW_indexer_declaration_in_synpred340_cs6921);
        	indexer_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred340_cs"

    // $ANTLR start "synpred341_cs"
    public void synpred341_cs_fragment() {
        // cs.g:1239:4: ( operator_declaration )
        // cs.g:1239:4: operator_declaration
        {
        	PushFollow(FOLLOW_operator_declaration_in_synpred341_cs6926);
        	operator_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred341_cs"

    // $ANTLR start "synpred342_cs"
    public void synpred342_cs_fragment() {
        // cs.g:1240:4: ( constructor_declaration )
        // cs.g:1240:4: constructor_declaration
        {
        	PushFollow(FOLLOW_constructor_declaration_in_synpred342_cs6931);
        	constructor_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred342_cs"

    // $ANTLR start "synpred343_cs"
    public void synpred343_cs_fragment() {
        // cs.g:1241:4: ( destructor_declaration )
        // cs.g:1241:4: destructor_declaration
        {
        	PushFollow(FOLLOW_destructor_declaration_in_synpred343_cs6936);
        	destructor_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred343_cs"

    // $ANTLR start "synpred344_cs"
    public void synpred344_cs_fragment() {
        // cs.g:1242:4: ( static_constructor_declaration )
        // cs.g:1242:4: static_constructor_declaration
        {
        	PushFollow(FOLLOW_static_constructor_declaration_in_synpred344_cs6941);
        	static_constructor_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred344_cs"

    // $ANTLR start "synpred345_cs"
    public void synpred345_cs_fragment() {
        // cs.g:1243:4: ( type_declaration )
        // cs.g:1243:4: type_declaration
        {
        	PushFollow(FOLLOW_type_declaration_in_synpred345_cs6946);
        	type_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred345_cs"

    // $ANTLR start "synpred386_cs"
    public void synpred386_cs_fragment() {
        // cs.g:1325:2: ( type )
        // cs.g:1325:2: type
        {
        	PushFollow(FOLLOW_type_in_synpred386_cs7464);
        	type();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred386_cs"

    // $ANTLR start "synpred389_cs"
    public void synpred389_cs_fragment() {
        // cs.g:1342:2: ( fixed_parameter )
        // cs.g:1342:2: fixed_parameter
        {
        	PushFollow(FOLLOW_fixed_parameter_in_synpred389_cs7549);
        	fixed_parameter();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred389_cs"

    // $ANTLR start "synpred390_cs"
    public void synpred390_cs_fragment() {
        // cs.g:1342:20: ( parameter_array )
        // cs.g:1342:20: parameter_array
        {
        	PushFollow(FOLLOW_parameter_array_in_synpred390_cs7553);
        	parameter_array();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred390_cs"

    // $ANTLR start "synpred413_cs"
    public void synpred413_cs_fragment() {
        // cs.g:1390:7: ( generic_parameter_list qid_part )
        // cs.g:1390:7: generic_parameter_list qid_part
        {
        	PushFollow(FOLLOW_generic_parameter_list_in_synpred413_cs7854);
        	generic_parameter_list();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	PushFollow(FOLLOW_qid_part_in_synpred413_cs7856);
        	qid_part();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred413_cs"

    // $ANTLR start "synpred415_cs"
    public void synpred415_cs_fragment() {
        // cs.g:1395:2: ( ( get_accessor_declaration ( set_accessor_declaration )? ) )
        // cs.g:1395:2: ( get_accessor_declaration ( set_accessor_declaration )? )
        {
        	// cs.g:1395:2: ( get_accessor_declaration ( set_accessor_declaration )? )
        	// cs.g:1395:3: get_accessor_declaration ( set_accessor_declaration )?
        	{
        		PushFollow(FOLLOW_get_accessor_declaration_in_synpred415_cs7881);
        		get_accessor_declaration();
        		state.followingStackPointer--;
        		if (state.failed) return ;
        		// cs.g:1395:30: ( set_accessor_declaration )?
        		int alt455 = 2;
        		int LA455_0 = input.LA(1);

        		if ( (LA455_0 == SET || LA455_0 == 97 || (LA455_0 >= 170 && LA455_0 <= 173)) )
        		{
        		    alt455 = 1;
        		}
        		switch (alt455) 
        		{
        		    case 1 :
        		        // cs.g:0:0: set_accessor_declaration
        		        {
        		        	PushFollow(FOLLOW_set_accessor_declaration_in_synpred415_cs7885);
        		        	set_accessor_declaration();
        		        	state.followingStackPointer--;
        		        	if (state.failed) return ;

        		        }
        		        break;

        		}


        	}


        }
    }
    // $ANTLR end "synpred415_cs"

    // $ANTLR start "synpred428_cs"
    public void synpred428_cs_fragment() {
        // cs.g:1422:2: ( ( ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';' ) )
        // cs.g:1422:2: ( ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';' )
        {
        	// cs.g:1422:2: ( ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';' )
        	// cs.g:1422:4: ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';'
        	{
        		// cs.g:1422:4: ( attributes )?
        		int alt456 = 2;
        		int LA456_0 = input.LA(1);

        		if ( (LA456_0 == 97) )
        		{
        		    alt456 = 1;
        		}
        		switch (alt456) 
        		{
        		    case 1 :
        		        // cs.g:0:0: attributes
        		        {
        		        	PushFollow(FOLLOW_attributes_in_synpred428_cs8065);
        		        	attributes();
        		        	state.followingStackPointer--;
        		        	if (state.failed) return ;

        		        }
        		        break;

        		}

        		// cs.g:1422:18: ( event_modifiers )?
        		int alt457 = 2;
        		int LA457_0 = input.LA(1);

        		if ( (LA457_0 == 94 || LA457_0 == 138 || (LA457_0 >= 170 && LA457_0 <= 174) || (LA457_0 >= 190 && LA457_0 <= 192) || (LA457_0 >= 197 && LA457_0 <= 198)) )
        		{
        		    alt457 = 1;
        		}
        		switch (alt457) 
        		{
        		    case 1 :
        		        // cs.g:0:0: event_modifiers
        		        {
        		        	PushFollow(FOLLOW_event_modifiers_in_synpred428_cs8070);
        		        	event_modifiers();
        		        	state.followingStackPointer--;
        		        	if (state.failed) return ;

        		        }
        		        break;

        		}

        		Match(input,104,FOLLOW_104_in_synpred428_cs8075); if (state.failed) return ;
        		PushFollow(FOLLOW_type_in_synpred428_cs8079);
        		type();
        		state.followingStackPointer--;
        		if (state.failed) return ;
        		PushFollow(FOLLOW_variable_declarators_in_synpred428_cs8083);
        		variable_declarators();
        		state.followingStackPointer--;
        		if (state.failed) return ;
        		Match(input,SEMI,FOLLOW_SEMI_in_synpred428_cs8087); if (state.failed) return ;

        	}


        }
    }
    // $ANTLR end "synpred428_cs"

    // $ANTLR start "synpred443_cs"
    public void synpred443_cs_fragment() {
        // cs.g:1439:2: ( ( add_accessor_declaration remove_accessor_declaration ) )
        // cs.g:1439:2: ( add_accessor_declaration remove_accessor_declaration )
        {
        	// cs.g:1439:2: ( add_accessor_declaration remove_accessor_declaration )
        	// cs.g:1439:3: add_accessor_declaration remove_accessor_declaration
        	{
        		PushFollow(FOLLOW_add_accessor_declaration_in_synpred443_cs8234);
        		add_accessor_declaration();
        		state.followingStackPointer--;
        		if (state.failed) return ;
        		PushFollow(FOLLOW_remove_accessor_declaration_in_synpred443_cs8238);
        		remove_accessor_declaration();
        		state.followingStackPointer--;
        		if (state.failed) return ;

        	}


        }
    }
    // $ANTLR end "synpred443_cs"

    // $ANTLR start "synpred465_cs"
    public void synpred465_cs_fragment() {
        // cs.g:1490:2: ( unary_operator_declarator )
        // cs.g:1490:2: unary_operator_declarator
        {
        	PushFollow(FOLLOW_unary_operator_declarator_in_synpred465_cs8580);
        	unary_operator_declarator();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred465_cs"

    // $ANTLR start "synpred466_cs"
    public void synpred466_cs_fragment() {
        // cs.g:1491:4: ( binary_operator_declarator )
        // cs.g:1491:4: binary_operator_declarator
        {
        	PushFollow(FOLLOW_binary_operator_declarator_in_synpred466_cs8585);
        	binary_operator_declarator();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred466_cs"

    // $ANTLR start "synpred518_cs"
    public void synpred518_cs_fragment() {
        // cs.g:1586:2: ( ( ( 'extern' )? 'unsafe' ) )
        // cs.g:1586:2: ( ( 'extern' )? 'unsafe' )
        {
        	// cs.g:1586:2: ( ( 'extern' )? 'unsafe' )
        	// cs.g:1586:3: ( 'extern' )? 'unsafe'
        	{
        		// cs.g:1586:3: ( 'extern' )?
        		int alt462 = 2;
        		int LA462_0 = input.LA(1);

        		if ( (LA462_0 == 94) )
        		{
        		    alt462 = 1;
        		}
        		switch (alt462) 
        		{
        		    case 1 :
        		        // cs.g:0:0: 'extern'
        		        {
        		        	Match(input,94,FOLLOW_94_in_synpred518_cs9310); if (state.failed) return ;

        		        }
        		        break;

        		}

        		Match(input,174,FOLLOW_174_in_synpred518_cs9313); if (state.failed) return ;

        	}


        }
    }
    // $ANTLR end "synpred518_cs"

    // $ANTLR start "synpred535_cs"
    public void synpred535_cs_fragment() {
        // cs.g:1630:2: ( constant_declaration )
        // cs.g:1630:2: constant_declaration
        {
        	PushFollow(FOLLOW_constant_declaration_in_synpred535_cs9563);
        	constant_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred535_cs"

    // $ANTLR start "synpred536_cs"
    public void synpred536_cs_fragment() {
        // cs.g:1631:4: ( field_declaration )
        // cs.g:1631:4: field_declaration
        {
        	PushFollow(FOLLOW_field_declaration_in_synpred536_cs9568);
        	field_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred536_cs"

    // $ANTLR start "synpred537_cs"
    public void synpred537_cs_fragment() {
        // cs.g:1632:4: ( method_declaration )
        // cs.g:1632:4: method_declaration
        {
        	PushFollow(FOLLOW_method_declaration_in_synpred537_cs9573);
        	method_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred537_cs"

    // $ANTLR start "synpred538_cs"
    public void synpred538_cs_fragment() {
        // cs.g:1633:4: ( property_declaration )
        // cs.g:1633:4: property_declaration
        {
        	PushFollow(FOLLOW_property_declaration_in_synpred538_cs9578);
        	property_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred538_cs"

    // $ANTLR start "synpred539_cs"
    public void synpred539_cs_fragment() {
        // cs.g:1634:4: ( event_declaration )
        // cs.g:1634:4: event_declaration
        {
        	PushFollow(FOLLOW_event_declaration_in_synpred539_cs9583);
        	event_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred539_cs"

    // $ANTLR start "synpred540_cs"
    public void synpred540_cs_fragment() {
        // cs.g:1635:4: ( indexer_declaration )
        // cs.g:1635:4: indexer_declaration
        {
        	PushFollow(FOLLOW_indexer_declaration_in_synpred540_cs9588);
        	indexer_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred540_cs"

    // $ANTLR start "synpred541_cs"
    public void synpred541_cs_fragment() {
        // cs.g:1636:4: ( operator_declaration )
        // cs.g:1636:4: operator_declaration
        {
        	PushFollow(FOLLOW_operator_declaration_in_synpred541_cs9593);
        	operator_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred541_cs"

    // $ANTLR start "synpred542_cs"
    public void synpred542_cs_fragment() {
        // cs.g:1637:4: ( constructor_declaration )
        // cs.g:1637:4: constructor_declaration
        {
        	PushFollow(FOLLOW_constructor_declaration_in_synpred542_cs9598);
        	constructor_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred542_cs"

    // $ANTLR start "synpred543_cs"
    public void synpred543_cs_fragment() {
        // cs.g:1638:4: ( static_constructor_declaration )
        // cs.g:1638:4: static_constructor_declaration
        {
        	PushFollow(FOLLOW_static_constructor_declaration_in_synpred543_cs9603);
        	static_constructor_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred543_cs"

    // $ANTLR start "synpred559_cs"
    public void synpred559_cs_fragment() {
        // cs.g:1678:2: ( interface_property_declaration )
        // cs.g:1678:2: interface_property_declaration
        {
        	PushFollow(FOLLOW_interface_property_declaration_in_synpred559_cs9835);
        	interface_property_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred559_cs"

    // $ANTLR start "synpred560_cs"
    public void synpred560_cs_fragment() {
        // cs.g:1679:4: ( interface_method_declaration )
        // cs.g:1679:4: interface_method_declaration
        {
        	PushFollow(FOLLOW_interface_method_declaration_in_synpred560_cs9841);
        	interface_method_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred560_cs"

    // $ANTLR start "synpred561_cs"
    public void synpred561_cs_fragment() {
        // cs.g:1680:4: ( interface_event_declaration )
        // cs.g:1680:4: interface_event_declaration
        {
        	PushFollow(FOLLOW_interface_event_declaration_in_synpred561_cs9847);
        	interface_event_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred561_cs"

    // $ANTLR start "synpred563_cs"
    public void synpred563_cs_fragment() {
        // cs.g:1686:16: ( 'new' )
        // cs.g:1686:16: 'new'
        {
        	Match(input,138,FOLLOW_138_in_synpred563_cs9878); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred563_cs"

    // $ANTLR start "synpred571_cs"
    public void synpred571_cs_fragment() {
        // cs.g:1697:2: ( interface_get_accessor_declaration ( interface_set_accessor_declaration )? )
        // cs.g:1697:2: interface_get_accessor_declaration ( interface_set_accessor_declaration )?
        {
        	PushFollow(FOLLOW_interface_get_accessor_declaration_in_synpred571_cs9989);
        	interface_get_accessor_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;
        	// cs.g:1697:39: ( interface_set_accessor_declaration )?
        	int alt463 = 2;
        	int LA463_0 = input.LA(1);

        	if ( (LA463_0 == SET || LA463_0 == 97) )
        	{
        	    alt463 = 1;
        	}
        	switch (alt463) 
        	{
        	    case 1 :
        	        // cs.g:0:0: interface_set_accessor_declaration
        	        {
        	        	PushFollow(FOLLOW_interface_set_accessor_declaration_in_synpred571_cs9993);
        	        	interface_set_accessor_declaration();
        	        	state.followingStackPointer--;
        	        	if (state.failed) return ;

        	        }
        	        break;

        	}


        }
    }
    // $ANTLR end "synpred571_cs"

    // $ANTLR start "synpred593_cs"
    public void synpred593_cs_fragment() {
        // cs.g:1764:2: ( labeled_statement )
        // cs.g:1764:2: labeled_statement
        {
        	PushFollow(FOLLOW_labeled_statement_in_synpred593_cs10420);
        	labeled_statement();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred593_cs"

    // $ANTLR start "synpred594_cs"
    public void synpred594_cs_fragment() {
        // cs.g:1765:4: ( declaration_statement )
        // cs.g:1765:4: declaration_statement
        {
        	PushFollow(FOLLOW_declaration_statement_in_synpred594_cs10425);
        	declaration_statement();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred594_cs"

    // $ANTLR start "synpred595_cs"
    public void synpred595_cs_fragment() {
        // cs.g:1771:2: ( block )
        // cs.g:1771:2: block
        {
        	PushFollow(FOLLOW_block_in_synpred595_cs10450);
        	block();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred595_cs"

    // $ANTLR start "synpred596_cs"
    public void synpred596_cs_fragment() {
        // cs.g:1772:4: ( empty_statement )
        // cs.g:1772:4: empty_statement
        {
        	PushFollow(FOLLOW_empty_statement_in_synpred596_cs10455);
        	empty_statement();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred596_cs"

    // $ANTLR start "synpred609_cs"
    public void synpred609_cs_fragment() {
        // cs.g:1804:2: ( '&' variable_reference )
        // cs.g:1804:2: '&' variable_reference
        {
        	Match(input,129,FOLLOW_129_in_synpred609_cs10633); if (state.failed) return ;
        	PushFollow(FOLLOW_variable_reference_in_synpred609_cs10637);
        	variable_reference();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred609_cs"

    // $ANTLR start "synpred614_cs"
    public void synpred614_cs_fragment() {
        // cs.g:1847:2: ( type )
        // cs.g:1847:2: type
        {
        	PushFollow(FOLLOW_type_in_synpred614_cs10844);
        	type();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred614_cs"

    // $ANTLR start "synpred615_cs"
    public void synpred615_cs_fragment() {
        // cs.g:1848:4: ( 'var' )
        // cs.g:1848:4: 'var'
        {
        	Match(input,208,FOLLOW_208_in_synpred615_cs10849); if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred615_cs"

    // $ANTLR start "synpred622_cs"
    public void synpred622_cs_fragment() {
        // cs.g:1898:2: ( invocation_expression )
        // cs.g:1898:2: invocation_expression
        {
        	PushFollow(FOLLOW_invocation_expression_in_synpred622_cs11110);
        	invocation_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred622_cs"

    // $ANTLR start "synpred623_cs"
    public void synpred623_cs_fragment() {
        // cs.g:1899:4: ( object_creation_expression )
        // cs.g:1899:4: object_creation_expression
        {
        	PushFollow(FOLLOW_object_creation_expression_in_synpred623_cs11115);
        	object_creation_expression();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred623_cs"

    // $ANTLR start "synpred624_cs"
    public void synpred624_cs_fragment() {
        // cs.g:1900:4: ( assignment )
        // cs.g:1900:4: assignment
        {
        	PushFollow(FOLLOW_assignment_in_synpred624_cs11120);
        	assignment();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred624_cs"

    // $ANTLR start "synpred626_cs"
    public void synpred626_cs_fragment() {
        // cs.g:1912:63: ( else_statement )
        // cs.g:1912:63: else_statement
        {
        	PushFollow(FOLLOW_else_statement_in_synpred626_cs11189);
        	else_statement();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred626_cs"

    // $ANTLR start "synpred637_cs"
    public void synpred637_cs_fragment() {
        // cs.g:1978:2: ( local_variable_declaration )
        // cs.g:1978:2: local_variable_declaration
        {
        	PushFollow(FOLLOW_local_variable_declaration_in_synpred637_cs11579);
        	local_variable_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred637_cs"

    // $ANTLR start "synpred648_cs"
    public void synpred648_cs_fragment() {
        // cs.g:2040:7: ( ( 'try' block catch_clauses ( finally_clause )? ) )
        // cs.g:2040:7: ( 'try' block catch_clauses ( finally_clause )? )
        {
        	// cs.g:2040:7: ( 'try' block catch_clauses ( finally_clause )? )
        	// cs.g:2040:8: 'try' block catch_clauses ( finally_clause )?
        	{
        		Match(input,221,FOLLOW_221_in_synpred648_cs11935); if (state.failed) return ;
        		PushFollow(FOLLOW_block_in_synpred648_cs11939);
        		block();
        		state.followingStackPointer--;
        		if (state.failed) return ;
        		PushFollow(FOLLOW_catch_clauses_in_synpred648_cs11943);
        		catch_clauses();
        		state.followingStackPointer--;
        		if (state.failed) return ;
        		// cs.g:2040:40: ( finally_clause )?
        		int alt465 = 2;
        		int LA465_0 = input.LA(1);

        		if ( (LA465_0 == 223) )
        		{
        		    alt465 = 1;
        		}
        		switch (alt465) 
        		{
        		    case 1 :
        		        // cs.g:0:0: finally_clause
        		        {
        		        	PushFollow(FOLLOW_finally_clause_in_synpred648_cs11947);
        		        	finally_clause();
        		        	state.followingStackPointer--;
        		        	if (state.failed) return ;

        		        }
        		        break;

        		}


        	}


        }
    }
    // $ANTLR end "synpred648_cs"

    // $ANTLR start "synpred650_cs"
    public void synpred650_cs_fragment() {
        // cs.g:2046:2: ( ( specific_catch_clauses ( general_catch_clause )? ) )
        // cs.g:2046:2: ( specific_catch_clauses ( general_catch_clause )? )
        {
        	// cs.g:2046:2: ( specific_catch_clauses ( general_catch_clause )? )
        	// cs.g:2046:3: specific_catch_clauses ( general_catch_clause )?
        	{
        		PushFollow(FOLLOW_specific_catch_clauses_in_synpred650_cs11984);
        		specific_catch_clauses();
        		state.followingStackPointer--;
        		if (state.failed) return ;
        		// cs.g:2046:28: ( general_catch_clause )?
        		int alt466 = 2;
        		int LA466_0 = input.LA(1);

        		if ( (LA466_0 == 222) )
        		{
        		    alt466 = 1;
        		}
        		switch (alt466) 
        		{
        		    case 1 :
        		        // cs.g:0:0: general_catch_clause
        		        {
        		        	PushFollow(FOLLOW_general_catch_clause_in_synpred650_cs11988);
        		        	general_catch_clause();
        		        	state.followingStackPointer--;
        		        	if (state.failed) return ;

        		        }
        		        break;

        		}


        	}


        }
    }
    // $ANTLR end "synpred650_cs"

    // $ANTLR start "synpred654_cs"
    public void synpred654_cs_fragment() {
        // cs.g:2092:2: ( local_variable_declaration )
        // cs.g:2092:2: local_variable_declaration
        {
        	PushFollow(FOLLOW_local_variable_declaration_in_synpred654_cs12253);
        	local_variable_declaration();
        	state.followingStackPointer--;
        	if (state.failed) return ;

        }
    }
    // $ANTLR end "synpred654_cs"

    // Delegated rules

   	public bool synpred24_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred24_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred624_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred624_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred542_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred542_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred338_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred338_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred127_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred127_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred56_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred56_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred179_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred179_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred157_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred157_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred561_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred561_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred428_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred428_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred650_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred650_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred413_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred413_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred320_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred320_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred337_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred337_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred96_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred96_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred181_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred181_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred342_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred342_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred593_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred593_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred335_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred335_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred99_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred99_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred100_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred100_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred98_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred98_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred61_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred61_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred623_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred623_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred341_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred341_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred229_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred229_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred86_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred86_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred240_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred240_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred1_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred1_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred594_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred594_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred202_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred202_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred326_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred326_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred112_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred112_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred68_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred68_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred136_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred136_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred543_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred543_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred70_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred70_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred559_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred559_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred92_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred92_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred291_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred291_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred121_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred121_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred117_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred117_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred153_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred153_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred538_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred538_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred327_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred327_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred64_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred64_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred65_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred65_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred143_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred143_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred205_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred205_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred336_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred336_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred466_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred466_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred443_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred443_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred126_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred126_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred154_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred154_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred148_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred148_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred115_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred115_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred339_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred339_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred57_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred57_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred23_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred23_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred300_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred300_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred247_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred247_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred123_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred123_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred60_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred60_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred48_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred48_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred518_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred518_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred204_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred204_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred328_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred328_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred203_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred203_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred389_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred389_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred71_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred71_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred53_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred53_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred47_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred47_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred299_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred299_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred323_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred323_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred138_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred138_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred540_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred540_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred571_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred571_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred332_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred332_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred155_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred155_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred340_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred340_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred18_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred18_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred67_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred67_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred140_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred140_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred252_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred252_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred622_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred622_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred386_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred386_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred87_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred87_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred615_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred615_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred25_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred25_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred176_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred176_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred596_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred596_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred146_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred146_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred257_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred257_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred345_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred345_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred189_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred189_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred13_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred13_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred200_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred200_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred8_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred8_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred614_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred614_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred197_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred197_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred226_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred226_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred324_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred324_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred637_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred637_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred129_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred129_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred3_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred3_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred272_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred272_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred232_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred232_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred609_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred609_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred66_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred66_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred97_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred97_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred563_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred563_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred539_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred539_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred325_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred325_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred541_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred541_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred128_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred128_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred537_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred537_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred595_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred595_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred178_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred178_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred55_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred55_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred198_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred198_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred654_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred654_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred465_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred465_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred111_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred111_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred536_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred536_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred72_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred72_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred344_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred344_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred49_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred49_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred22_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred22_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred343_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred343_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred626_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred626_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred95_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred95_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred648_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred648_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred535_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred535_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred560_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred560_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred69_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred69_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred238_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred238_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred390_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred390_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred59_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred59_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}
   	public bool synpred415_cs() 
   	{
   	    state.backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred415_cs_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !state.failed;
   	    input.Rewind(start);
   	    state.backtracking--;
   	    state.failed = false;
   	    return success;
   	}


   	protected DFA1 dfa1;
   	protected DFA3 dfa3;
   	protected DFA8 dfa8;
   	protected DFA10 dfa10;
   	protected DFA19 dfa19;
   	protected DFA42 dfa42;
   	protected DFA48 dfa48;
   	protected DFA44 dfa44;
   	protected DFA45 dfa45;
   	protected DFA46 dfa46;
   	protected DFA47 dfa47;
   	protected DFA54 dfa54;
   	protected DFA57 dfa57;
   	protected DFA55 dfa55;
   	protected DFA56 dfa56;
   	protected DFA58 dfa58;
   	protected DFA69 dfa69;
   	protected DFA82 dfa82;
   	protected DFA81 dfa81;
   	protected DFA88 dfa88;
   	protected DFA84 dfa84;
   	protected DFA85 dfa85;
   	protected DFA86 dfa86;
   	protected DFA87 dfa87;
   	protected DFA89 dfa89;
   	protected DFA96 dfa96;
   	protected DFA98 dfa98;
   	protected DFA99 dfa99;
   	protected DFA104 dfa104;
   	protected DFA129 dfa129;
   	protected DFA156 dfa156;
   	protected DFA157 dfa157;
   	protected DFA162 dfa162;
   	protected DFA164 dfa164;
   	protected DFA194 dfa194;
   	protected DFA209 dfa209;
   	protected DFA215 dfa215;
   	protected DFA236 dfa236;
   	protected DFA271 dfa271;
   	protected DFA283 dfa283;
   	protected DFA299 dfa299;
   	protected DFA310 dfa310;
   	protected DFA338 dfa338;
   	protected DFA339 dfa339;
   	protected DFA341 dfa341;
   	protected DFA352 dfa352;
   	protected DFA363 dfa363;
   	protected DFA376 dfa376;
	private void InitializeCyclicDFAs()
	{
    	this.dfa1 = new DFA1(this);
    	this.dfa3 = new DFA3(this);
    	this.dfa8 = new DFA8(this);
    	this.dfa10 = new DFA10(this);
    	this.dfa19 = new DFA19(this);
    	this.dfa42 = new DFA42(this);
    	this.dfa48 = new DFA48(this);
    	this.dfa44 = new DFA44(this);
    	this.dfa45 = new DFA45(this);
    	this.dfa46 = new DFA46(this);
    	this.dfa47 = new DFA47(this);
    	this.dfa54 = new DFA54(this);
    	this.dfa57 = new DFA57(this);
    	this.dfa55 = new DFA55(this);
    	this.dfa56 = new DFA56(this);
    	this.dfa58 = new DFA58(this);
    	this.dfa69 = new DFA69(this);
    	this.dfa82 = new DFA82(this);
    	this.dfa81 = new DFA81(this);
    	this.dfa88 = new DFA88(this);
    	this.dfa84 = new DFA84(this);
    	this.dfa85 = new DFA85(this);
    	this.dfa86 = new DFA86(this);
    	this.dfa87 = new DFA87(this);
    	this.dfa89 = new DFA89(this);
    	this.dfa96 = new DFA96(this);
    	this.dfa98 = new DFA98(this);
    	this.dfa99 = new DFA99(this);
    	this.dfa104 = new DFA104(this);
    	this.dfa129 = new DFA129(this);
    	this.dfa156 = new DFA156(this);
    	this.dfa157 = new DFA157(this);
    	this.dfa162 = new DFA162(this);
    	this.dfa164 = new DFA164(this);
    	this.dfa194 = new DFA194(this);
    	this.dfa209 = new DFA209(this);
    	this.dfa215 = new DFA215(this);
    	this.dfa236 = new DFA236(this);
    	this.dfa271 = new DFA271(this);
    	this.dfa283 = new DFA283(this);
    	this.dfa299 = new DFA299(this);
    	this.dfa310 = new DFA310(this);
    	this.dfa338 = new DFA338(this);
    	this.dfa339 = new DFA339(this);
    	this.dfa341 = new DFA341(this);
    	this.dfa352 = new DFA352(this);
    	this.dfa363 = new DFA363(this);
    	this.dfa376 = new DFA376(this);
	    this.dfa1.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA1_SpecialStateTransition);
	    this.dfa3.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA3_SpecialStateTransition);
	    this.dfa8.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA8_SpecialStateTransition);
	    this.dfa10.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA10_SpecialStateTransition);
	    this.dfa19.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA19_SpecialStateTransition);
	    this.dfa42.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA42_SpecialStateTransition);
	    this.dfa48.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA48_SpecialStateTransition);
	    this.dfa44.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA44_SpecialStateTransition);
	    this.dfa45.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA45_SpecialStateTransition);
	    this.dfa46.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA46_SpecialStateTransition);
	    this.dfa47.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA47_SpecialStateTransition);
	    this.dfa54.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA54_SpecialStateTransition);
	    this.dfa57.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA57_SpecialStateTransition);
	    this.dfa55.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA55_SpecialStateTransition);
	    this.dfa56.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA56_SpecialStateTransition);
	    this.dfa58.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA58_SpecialStateTransition);
	    this.dfa69.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA69_SpecialStateTransition);
	    this.dfa82.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA82_SpecialStateTransition);
	    this.dfa81.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA81_SpecialStateTransition);
	    this.dfa84.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA84_SpecialStateTransition);
	    this.dfa85.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA85_SpecialStateTransition);
	    this.dfa86.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA86_SpecialStateTransition);
	    this.dfa87.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA87_SpecialStateTransition);
	    this.dfa89.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA89_SpecialStateTransition);
	    this.dfa96.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA96_SpecialStateTransition);
	    this.dfa98.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA98_SpecialStateTransition);
	    this.dfa99.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA99_SpecialStateTransition);
	    this.dfa104.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA104_SpecialStateTransition);
	    this.dfa129.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA129_SpecialStateTransition);
	    this.dfa156.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA156_SpecialStateTransition);
	    this.dfa157.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA157_SpecialStateTransition);
	    this.dfa162.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA162_SpecialStateTransition);
	    this.dfa164.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA164_SpecialStateTransition);
	    this.dfa194.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA194_SpecialStateTransition);
	    this.dfa209.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA209_SpecialStateTransition);
	    this.dfa215.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA215_SpecialStateTransition);
	    this.dfa236.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA236_SpecialStateTransition);
	    this.dfa299.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA299_SpecialStateTransition);
	    this.dfa310.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA310_SpecialStateTransition);
	    this.dfa338.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA338_SpecialStateTransition);
	    this.dfa339.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA339_SpecialStateTransition);
	    this.dfa341.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA341_SpecialStateTransition);
	    this.dfa352.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA352_SpecialStateTransition);
	    this.dfa363.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA363_SpecialStateTransition);
	    this.dfa376.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA376_SpecialStateTransition);
	}

    const string DFA1_eotS =
        "\x10\uffff";
    const string DFA1_eofS =
        "\x01\x02\x0f\uffff";
    const string DFA1_minS =
        "\x01\x2c\x01\x00\x0e\uffff";
    const string DFA1_maxS =
        "\x01\u00ce\x01\x00\x0e\uffff";
    const string DFA1_acceptS =
        "\x02\uffff\x01\x02\x0c\uffff\x01\x01";
    const string DFA1_specialS =
        "\x01\uffff\x01\x00\x0e\uffff}>";
    static readonly string[] DFA1_transitionS = {
            "\x01\x01\x01\x02\x2a\uffff\x01\x02\x05\uffff\x01\x02\x02\uffff"+
            "\x01\x02\x28\uffff\x01\x02\x05\uffff\x01\x02\x19\uffff\x05\x02"+
            "\x0d\uffff\x06\x02\x0c\uffff\x01\x02",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA1_eot = DFA.UnpackEncodedString(DFA1_eotS);
    static readonly short[] DFA1_eof = DFA.UnpackEncodedString(DFA1_eofS);
    static readonly char[] DFA1_min = DFA.UnpackEncodedStringToUnsignedChars(DFA1_minS);
    static readonly char[] DFA1_max = DFA.UnpackEncodedStringToUnsignedChars(DFA1_maxS);
    static readonly short[] DFA1_accept = DFA.UnpackEncodedString(DFA1_acceptS);
    static readonly short[] DFA1_special = DFA.UnpackEncodedString(DFA1_specialS);
    static readonly short[][] DFA1_transition = DFA.UnpackEncodedStringArray(DFA1_transitionS);

    protected class DFA1 : DFA
    {
        public DFA1(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;

        }

        override public string Description
        {
            get { return "90:2: ( using_directives )?"; }
        }

    }


    protected internal int DFA1_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA1_1 = input.LA(1);

                   	 
                   	int index1_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred1_cs()) ) { s = 15; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index1_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae1 =
            new NoViableAltException(dfa.Description, 1, _s, input);
        dfa.Error(nvae1);
        throw nvae1;
    }
    const string DFA3_eotS =
        "\x10\uffff";
    const string DFA3_eofS =
        "\x01\x02\x0f\uffff";
    const string DFA3_minS =
        "\x01\x2c\x01\x00\x0e\uffff";
    const string DFA3_maxS =
        "\x01\u00ce\x01\x00\x0e\uffff";
    const string DFA3_acceptS =
        "\x02\uffff\x01\x02\x0c\uffff\x01\x01";
    const string DFA3_specialS =
        "\x01\uffff\x01\x00\x0e\uffff}>";
    static readonly string[] DFA3_transitionS = {
            "\x02\x02\x2a\uffff\x01\x01\x05\uffff\x01\x02\x02\uffff\x01"+
            "\x02\x28\uffff\x01\x02\x05\uffff\x01\x02\x19\uffff\x05\x02\x0d"+
            "\uffff\x06\x02\x0c\uffff\x01\x02",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
    static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
    static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
    static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
    static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
    static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
    static readonly short[][] DFA3_transition = DFA.UnpackEncodedStringArray(DFA3_transitionS);

    protected class DFA3 : DFA
    {
        public DFA3(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;

        }

        override public string Description
        {
            get { return "92:2: ( namespace_declaration )?"; }
        }

    }


    protected internal int DFA3_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA3_1 = input.LA(1);

                   	 
                   	int index3_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred3_cs()) ) { s = 15; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index3_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae3 =
            new NoViableAltException(dfa.Description, 3, _s, input);
        dfa.Error(nvae3);
        throw nvae3;
    }
    const string DFA8_eotS =
        "\x0a\uffff";
    const string DFA8_eofS =
        "\x01\x02\x09\uffff";
    const string DFA8_minS =
        "\x01\x28\x01\x1e\x01\uffff\x02\x28\x01\uffff\x01\x1e\x01\x00\x02"+
        "\x28";
    const string DFA8_maxS =
        "\x01\x7b\x01\u00e2\x01\uffff\x02\x7b\x01\uffff\x01\u00e2\x01\x00"+
        "\x02\x7b";
    const string DFA8_acceptS =
        "\x02\uffff\x01\x02\x02\uffff\x01\x01\x04\uffff";
    const string DFA8_specialS =
        "\x07\uffff\x01\x00\x02\uffff}>";
    static readonly string[] DFA8_transitionS = {
            "\x02\x02\x32\uffff\x01\x02\x04\uffff\x01\x02\x0c\uffff\x01"+
            "\x02\x0c\uffff\x01\x01",
            "\x01\x03\x10\uffff\x01\x04\x2f\uffff\x01\x04\x01\uffff\x01"+
            "\x02\x03\uffff\x07\x04\x01\uffff\x01\x04\x03\uffff\x0a\x05\x09"+
            "\uffff\x06\x05\x25\uffff\x0d\x04\x0b\uffff\x01\x04\x01\uffff"+
            "\x02\x04\x05\uffff\x01\x04\x10\uffff\x02\x04",
            "",
            "\x01\x05\x02\uffff\x01\x07\x2d\uffff\x01\x05\x07\uffff\x01"+
            "\x05\x01\x06\x0c\uffff\x02\x05\x0a\uffff\x01\x05",
            "\x01\x05\x02\uffff\x01\x07\x2d\uffff\x01\x05\x07\uffff\x01"+
            "\x05\x01\x06\x0c\uffff\x02\x05\x0a\uffff\x01\x05",
            "",
            "\x01\x08\x10\uffff\x01\x09\x2f\uffff\x01\x09\x01\uffff\x01"+
            "\x02\x03\uffff\x07\x09\x01\uffff\x01\x09\x03\uffff\x0a\x05\x09"+
            "\uffff\x06\x05\x25\uffff\x0d\x09\x0b\uffff\x01\x09\x01\uffff"+
            "\x02\x09\x05\uffff\x01\x09\x10\uffff\x02\x09",
            "\x01\uffff",
            "\x01\x05\x02\uffff\x01\x07\x2d\uffff\x01\x05\x07\uffff\x01"+
            "\x05\x01\x06\x0c\uffff\x02\x05\x0a\uffff\x01\x05",
            "\x01\x05\x02\uffff\x01\x07\x2d\uffff\x01\x05\x07\uffff\x01"+
            "\x05\x01\x06\x0c\uffff\x02\x05\x0a\uffff\x01\x05"
    };

    static readonly short[] DFA8_eot = DFA.UnpackEncodedString(DFA8_eotS);
    static readonly short[] DFA8_eof = DFA.UnpackEncodedString(DFA8_eofS);
    static readonly char[] DFA8_min = DFA.UnpackEncodedStringToUnsignedChars(DFA8_minS);
    static readonly char[] DFA8_max = DFA.UnpackEncodedStringToUnsignedChars(DFA8_maxS);
    static readonly short[] DFA8_accept = DFA.UnpackEncodedString(DFA8_acceptS);
    static readonly short[] DFA8_special = DFA.UnpackEncodedString(DFA8_specialS);
    static readonly short[][] DFA8_transition = DFA.UnpackEncodedStringArray(DFA8_transitionS);

    protected class DFA8 : DFA
    {
        public DFA8(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;

        }

        override public string Description
        {
            get { return "116:32: ( generic_argument_list )?"; }
        }

    }


    protected internal int DFA8_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA8_7 = input.LA(1);

                   	 
                   	int index8_7 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred8_cs()) ) { s = 5; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index8_7);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae8 =
            new NoViableAltException(dfa.Description, 8, _s, input);
        dfa.Error(nvae8);
        throw nvae8;
    }
    const string DFA10_eotS =
        "\x0a\uffff";
    const string DFA10_eofS =
        "\x01\x02\x09\uffff";
    const string DFA10_minS =
        "\x01\x28\x01\x1e\x01\uffff\x02\x28\x01\uffff\x01\x1e\x01\x00\x02"+
        "\x28";
    const string DFA10_maxS =
        "\x01\x7b\x01\u00e2\x01\uffff\x02\x7b\x01\uffff\x01\u00e2\x01\x00"+
        "\x02\x7b";
    const string DFA10_acceptS =
        "\x02\uffff\x01\x02\x02\uffff\x01\x01\x04\uffff";
    const string DFA10_specialS =
        "\x07\uffff\x01\x00\x02\uffff}>";
    static readonly string[] DFA10_transitionS = {
            "\x02\x02\x32\uffff\x01\x02\x04\uffff\x01\x02\x0c\uffff\x01"+
            "\x02\x0c\uffff\x01\x01",
            "\x01\x03\x10\uffff\x01\x04\x2f\uffff\x01\x04\x01\uffff\x01"+
            "\x02\x03\uffff\x07\x04\x01\uffff\x01\x04\x03\uffff\x0a\x05\x09"+
            "\uffff\x06\x05\x25\uffff\x0d\x04\x0b\uffff\x01\x04\x01\uffff"+
            "\x02\x04\x05\uffff\x01\x04\x10\uffff\x02\x04",
            "",
            "\x01\x05\x02\uffff\x01\x07\x2d\uffff\x01\x05\x07\uffff\x01"+
            "\x05\x01\x06\x0c\uffff\x02\x05\x0a\uffff\x01\x05",
            "\x01\x05\x02\uffff\x01\x07\x2d\uffff\x01\x05\x07\uffff\x01"+
            "\x05\x01\x06\x0c\uffff\x02\x05\x0a\uffff\x01\x05",
            "",
            "\x01\x08\x10\uffff\x01\x09\x2f\uffff\x01\x09\x01\uffff\x01"+
            "\x02\x03\uffff\x07\x09\x01\uffff\x01\x09\x03\uffff\x0a\x05\x09"+
            "\uffff\x06\x05\x25\uffff\x0d\x09\x0b\uffff\x01\x09\x01\uffff"+
            "\x02\x09\x05\uffff\x01\x09\x10\uffff\x02\x09",
            "\x01\uffff",
            "\x01\x05\x02\uffff\x01\x07\x2d\uffff\x01\x05\x07\uffff\x01"+
            "\x05\x01\x06\x0c\uffff\x02\x05\x0a\uffff\x01\x05",
            "\x01\x05\x02\uffff\x01\x07\x2d\uffff\x01\x05\x07\uffff\x01"+
            "\x05\x01\x06\x0c\uffff\x02\x05\x0a\uffff\x01\x05"
    };

    static readonly short[] DFA10_eot = DFA.UnpackEncodedString(DFA10_eotS);
    static readonly short[] DFA10_eof = DFA.UnpackEncodedString(DFA10_eofS);
    static readonly char[] DFA10_min = DFA.UnpackEncodedStringToUnsignedChars(DFA10_minS);
    static readonly char[] DFA10_max = DFA.UnpackEncodedStringToUnsignedChars(DFA10_maxS);
    static readonly short[] DFA10_accept = DFA.UnpackEncodedString(DFA10_acceptS);
    static readonly short[] DFA10_special = DFA.UnpackEncodedString(DFA10_specialS);
    static readonly short[][] DFA10_transition = DFA.UnpackEncodedStringArray(DFA10_transitionS);

    protected class DFA10 : DFA
    {
        public DFA10(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = DFA10_eot;
            this.eof = DFA10_eof;
            this.min = DFA10_min;
            this.max = DFA10_max;
            this.accept = DFA10_accept;
            this.special = DFA10_special;
            this.transition = DFA10_transition;

        }

        override public string Description
        {
            get { return "125:33: ( generic_argument_list )?"; }
        }

    }


    protected internal int DFA10_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA10_7 = input.LA(1);

                   	 
                   	int index10_7 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred13_cs()) ) { s = 5; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index10_7);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae10 =
            new NoViableAltException(dfa.Description, 10, _s, input);
        dfa.Error(nvae10);
        throw nvae10;
    }
    const string DFA19_eotS =
        "\x0b\uffff";
    const string DFA19_eofS =
        "\x0b\uffff";
    const string DFA19_minS =
        "\x01\x2d\x03\x00\x04\uffff\x01\x00\x02\uffff";
    const string DFA19_maxS =
        "\x01\u00ce\x03\x00\x04\uffff\x01\x00\x02\uffff";
    const string DFA19_acceptS =
        "\x04\uffff\x01\x01\x01\uffff\x01\x02\x01\x03\x01\uffff\x01\x04"+
        "\x01\x05";
    const string DFA19_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\x02\x04\uffff\x01\x03\x02\uffff}>";
    static readonly string[] DFA19_transitionS = {
            "\x01\x09\x33\uffff\x01\x01\x28\uffff\x01\x02\x05\uffff\x01"+
            "\x0a\x19\uffff\x04\x02\x01\x08\x0d\uffff\x01\x03\x04\x04\x01"+
            "\x06\x0c\uffff\x01\x07",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            ""
    };

    static readonly short[] DFA19_eot = DFA.UnpackEncodedString(DFA19_eotS);
    static readonly short[] DFA19_eof = DFA.UnpackEncodedString(DFA19_eofS);
    static readonly char[] DFA19_min = DFA.UnpackEncodedStringToUnsignedChars(DFA19_minS);
    static readonly char[] DFA19_max = DFA.UnpackEncodedStringToUnsignedChars(DFA19_maxS);
    static readonly short[] DFA19_accept = DFA.UnpackEncodedString(DFA19_acceptS);
    static readonly short[] DFA19_special = DFA.UnpackEncodedString(DFA19_specialS);
    static readonly short[][] DFA19_transition = DFA.UnpackEncodedStringArray(DFA19_transitionS);

    protected class DFA19 : DFA
    {
        public DFA19(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = DFA19_eot;
            this.eof = DFA19_eof;
            this.min = DFA19_min;
            this.max = DFA19_max;
            this.accept = DFA19_accept;
            this.special = DFA19_special;
            this.transition = DFA19_transition;

        }

        override public string Description
        {
            get { return "181:1: type_declaration : ( class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration );"; }
        }

    }


    protected internal int DFA19_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA19_1 = input.LA(1);

                   	 
                   	int index19_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred22_cs()) ) { s = 4; }

                   	else if ( (synpred23_cs()) ) { s = 6; }

                   	else if ( (synpred24_cs()) ) { s = 7; }

                   	else if ( (synpred25_cs()) ) { s = 9; }

                   	else if ( (true) ) { s = 10; }

                   	 
                   	input.Seek(index19_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA19_2 = input.LA(1);

                   	 
                   	int index19_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred22_cs()) ) { s = 4; }

                   	else if ( (synpred23_cs()) ) { s = 6; }

                   	else if ( (synpred24_cs()) ) { s = 7; }

                   	else if ( (synpred25_cs()) ) { s = 9; }

                   	else if ( (true) ) { s = 10; }

                   	 
                   	input.Seek(index19_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA19_3 = input.LA(1);

                   	 
                   	int index19_3 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred22_cs()) ) { s = 4; }

                   	else if ( (synpred23_cs()) ) { s = 6; }

                   	else if ( (synpred24_cs()) ) { s = 7; }

                   	 
                   	input.Seek(index19_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA19_8 = input.LA(1);

                   	 
                   	int index19_8 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred22_cs()) ) { s = 4; }

                   	else if ( (synpred23_cs()) ) { s = 6; }

                   	else if ( (synpred24_cs()) ) { s = 7; }

                   	else if ( (true) ) { s = 10; }

                   	 
                   	input.Seek(index19_8);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae19 =
            new NoViableAltException(dfa.Description, 19, _s, input);
        dfa.Error(nvae19);
        throw nvae19;
    }
    const string DFA42_eotS =
        "\x0c\uffff";
    const string DFA42_eofS =
        "\x0c\uffff";
    const string DFA42_minS =
        "\x01\x1e\x03\x00\x08\uffff";
    const string DFA42_maxS =
        "\x01\u00e2\x03\x00\x08\uffff";
    const string DFA42_acceptS =
        "\x04\uffff\x01\x08\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01"+
        "\x06\x01\x07";
    const string DFA42_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\x02\x08\uffff}>";
    static readonly string[] DFA42_transitionS = {
            "\x01\x01\x10\uffff\x01\x02\x2f\uffff\x01\x02\x05\uffff\x07"+
            "\x02\x01\uffff\x01\x02\x03\uffff\x01\x04\x09\x03\x09\uffff\x06"+
            "\x03\x25\uffff\x0d\x02\x0b\uffff\x01\x02\x01\uffff\x02\x02\x05"+
            "\uffff\x01\x02\x10\uffff\x02\x02",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA42_eot = DFA.UnpackEncodedString(DFA42_eotS);
    static readonly short[] DFA42_eof = DFA.UnpackEncodedString(DFA42_eofS);
    static readonly char[] DFA42_min = DFA.UnpackEncodedStringToUnsignedChars(DFA42_minS);
    static readonly char[] DFA42_max = DFA.UnpackEncodedStringToUnsignedChars(DFA42_maxS);
    static readonly short[] DFA42_accept = DFA.UnpackEncodedString(DFA42_acceptS);
    static readonly short[] DFA42_special = DFA.UnpackEncodedString(DFA42_specialS);
    static readonly short[][] DFA42_transition = DFA.UnpackEncodedStringArray(DFA42_transitionS);

    protected class DFA42 : DFA
    {
        public DFA42(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;

        }

        override public string Description
        {
            get { return "310:1: type : ( ( type_name | predefined_type ) rank_specifiers ( '*' )* | type_name ( '*' )+ | type_name '?' | type_name | predefined_type ( '*' )+ | predefined_type '?' | predefined_type | 'void' ( '*' )+ );"; }
        }

    }


    protected internal int DFA42_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA42_1 = input.LA(1);

                   	 
                   	int index42_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred53_cs()) ) { s = 5; }

                   	else if ( (synpred55_cs()) ) { s = 6; }

                   	else if ( (synpred56_cs()) ) { s = 7; }

                   	else if ( (synpred57_cs()) ) { s = 8; }

                   	 
                   	input.Seek(index42_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA42_2 = input.LA(1);

                   	 
                   	int index42_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred53_cs()) ) { s = 5; }

                   	else if ( (synpred55_cs()) ) { s = 6; }

                   	else if ( (synpred56_cs()) ) { s = 7; }

                   	else if ( (synpred57_cs()) ) { s = 8; }

                   	 
                   	input.Seek(index42_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA42_3 = input.LA(1);

                   	 
                   	int index42_3 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred53_cs()) ) { s = 5; }

                   	else if ( (synpred59_cs()) ) { s = 9; }

                   	else if ( (synpred60_cs()) ) { s = 10; }

                   	else if ( (synpred61_cs()) ) { s = 11; }

                   	 
                   	input.Seek(index42_3);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae42 =
            new NoViableAltException(dfa.Description, 42, _s, input);
        dfa.Error(nvae42);
        throw nvae42;
    }
    const string DFA48_eotS =
        "\x0a\uffff";
    const string DFA48_eofS =
        "\x0a\uffff";
    const string DFA48_minS =
        "\x01\x1e\x03\x00\x06\uffff";
    const string DFA48_maxS =
        "\x01\u00e2\x03\x00\x06\uffff";
    const string DFA48_acceptS =
        "\x04\uffff\x01\x06\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05";
    const string DFA48_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\x02\x06\uffff}>";
    static readonly string[] DFA48_transitionS = {
            "\x01\x01\x10\uffff\x01\x02\x2f\uffff\x01\x02\x05\uffff\x07"+
            "\x02\x01\uffff\x01\x02\x03\uffff\x01\x04\x09\x03\x09\uffff\x06"+
            "\x03\x25\uffff\x0d\x02\x0b\uffff\x01\x02\x01\uffff\x02\x02\x05"+
            "\uffff\x01\x02\x10\uffff\x02\x02",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA48_eot = DFA.UnpackEncodedString(DFA48_eotS);
    static readonly short[] DFA48_eof = DFA.UnpackEncodedString(DFA48_eofS);
    static readonly char[] DFA48_min = DFA.UnpackEncodedStringToUnsignedChars(DFA48_minS);
    static readonly char[] DFA48_max = DFA.UnpackEncodedStringToUnsignedChars(DFA48_maxS);
    static readonly short[] DFA48_accept = DFA.UnpackEncodedString(DFA48_acceptS);
    static readonly short[] DFA48_special = DFA.UnpackEncodedString(DFA48_specialS);
    static readonly short[][] DFA48_transition = DFA.UnpackEncodedStringArray(DFA48_transitionS);

    protected class DFA48 : DFA
    {
        public DFA48(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;

        }

        override public string Description
        {
            get { return "322:1: non_nullable_type : ( ( type_name | predefined_type ) rank_specifiers ( '*' )* | type_name ( '*' )+ | type_name | predefined_type ( '*' )+ | predefined_type | 'void' ( '*' )+ );"; }
        }

    }


    protected internal int DFA48_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA48_1 = input.LA(1);

                   	 
                   	int index48_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred65_cs()) ) { s = 5; }

                   	else if ( (synpred67_cs()) ) { s = 6; }

                   	else if ( (synpred68_cs()) ) { s = 7; }

                   	 
                   	input.Seek(index48_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA48_2 = input.LA(1);

                   	 
                   	int index48_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred65_cs()) ) { s = 5; }

                   	else if ( (synpred67_cs()) ) { s = 6; }

                   	else if ( (synpred68_cs()) ) { s = 7; }

                   	 
                   	input.Seek(index48_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA48_3 = input.LA(1);

                   	 
                   	int index48_3 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred65_cs()) ) { s = 5; }

                   	else if ( (synpred70_cs()) ) { s = 8; }

                   	else if ( (synpred71_cs()) ) { s = 9; }

                   	 
                   	input.Seek(index48_3);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae48 =
            new NoViableAltException(dfa.Description, 48, _s, input);
        dfa.Error(nvae48);
        throw nvae48;
    }
    const string DFA44_eotS =
        "\x36\uffff";
    const string DFA44_eofS =
        "\x01\x01\x35\uffff";
    const string DFA44_minS =
        "\x01\x1e\x1f\uffff\x01\x00\x15\uffff";
    const string DFA44_maxS =
        "\x01\u00e2\x1f\uffff\x01\x00\x15\uffff";
    const string DFA44_acceptS =
        "\x01\uffff\x01\x02\x33\uffff\x01\x01";
    const string DFA44_specialS =
        "\x20\uffff\x01\x00\x15\uffff}>";
    static readonly string[] DFA44_transitionS = {
            "\x0a\x01\x02\uffff\x01\x01\x04\uffff\x01\x01\x04\uffff\x02"+
            "\x01\x24\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x01\x01\x01"+
            "\uffff\x0b\x01\x01\uffff\x02\x01\x01\x20\x0b\x01\x01\uffff\x15"+
            "\x01\x06\uffff\x09\x01\x0f\uffff\x0d\x01\x0b\uffff\x01\x01\x01"+
            "\uffff\x02\x01\x05\uffff\x01\x01\x10\uffff\x02\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
    static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
    static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
    static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
    static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
    static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
    static readonly short[][] DFA44_transition = DFA.UnpackEncodedStringArray(DFA44_transitionS);

    protected class DFA44 : DFA
    {
        public DFA44(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 326:56: ( '*' )*"; }
        }

    }


    protected internal int DFA44_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA44_32 = input.LA(1);

                   	 
                   	int index44_32 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred64_cs()) ) { s = 53; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index44_32);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae44 =
            new NoViableAltException(dfa.Description, 44, _s, input);
        dfa.Error(nvae44);
        throw nvae44;
    }
    const string DFA45_eotS =
        "\x36\uffff";
    const string DFA45_eofS =
        "\x01\x01\x35\uffff";
    const string DFA45_minS =
        "\x01\x1e\x1f\uffff\x01\x00\x15\uffff";
    const string DFA45_maxS =
        "\x01\u00e2\x1f\uffff\x01\x00\x15\uffff";
    const string DFA45_acceptS =
        "\x01\uffff\x01\x02\x33\uffff\x01\x01";
    const string DFA45_specialS =
        "\x20\uffff\x01\x00\x15\uffff}>";
    static readonly string[] DFA45_transitionS = {
            "\x0a\x01\x02\uffff\x01\x01\x04\uffff\x01\x01\x04\uffff\x02"+
            "\x01\x24\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x01\x01\x01"+
            "\uffff\x0b\x01\x01\uffff\x02\x01\x01\x20\x0b\x01\x01\uffff\x15"+
            "\x01\x06\uffff\x09\x01\x0f\uffff\x0d\x01\x0b\uffff\x01\x01\x01"+
            "\uffff\x02\x01\x05\uffff\x01\x01\x10\uffff\x02\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA45_eot = DFA.UnpackEncodedString(DFA45_eotS);
    static readonly short[] DFA45_eof = DFA.UnpackEncodedString(DFA45_eofS);
    static readonly char[] DFA45_min = DFA.UnpackEncodedStringToUnsignedChars(DFA45_minS);
    static readonly char[] DFA45_max = DFA.UnpackEncodedStringToUnsignedChars(DFA45_maxS);
    static readonly short[] DFA45_accept = DFA.UnpackEncodedString(DFA45_acceptS);
    static readonly short[] DFA45_special = DFA.UnpackEncodedString(DFA45_specialS);
    static readonly short[][] DFA45_transition = DFA.UnpackEncodedStringArray(DFA45_transitionS);

    protected class DFA45 : DFA
    {
        public DFA45(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;

        }

        override public string Description
        {
            get { return "()+ loopback of 327:14: ( '*' )+"; }
        }

    }


    protected internal int DFA45_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA45_32 = input.LA(1);

                   	 
                   	int index45_32 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred66_cs()) ) { s = 53; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index45_32);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae45 =
            new NoViableAltException(dfa.Description, 45, _s, input);
        dfa.Error(nvae45);
        throw nvae45;
    }
    const string DFA46_eotS =
        "\x36\uffff";
    const string DFA46_eofS =
        "\x01\x01\x35\uffff";
    const string DFA46_minS =
        "\x01\x1e\x1f\uffff\x01\x00\x15\uffff";
    const string DFA46_maxS =
        "\x01\u00e2\x1f\uffff\x01\x00\x15\uffff";
    const string DFA46_acceptS =
        "\x01\uffff\x01\x02\x33\uffff\x01\x01";
    const string DFA46_specialS =
        "\x20\uffff\x01\x00\x15\uffff}>";
    static readonly string[] DFA46_transitionS = {
            "\x0a\x01\x02\uffff\x01\x01\x04\uffff\x01\x01\x04\uffff\x02"+
            "\x01\x24\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x01\x01\x01"+
            "\uffff\x0b\x01\x01\uffff\x02\x01\x01\x20\x0b\x01\x01\uffff\x15"+
            "\x01\x06\uffff\x09\x01\x0f\uffff\x0d\x01\x0b\uffff\x01\x01\x01"+
            "\uffff\x02\x01\x05\uffff\x01\x01\x10\uffff\x02\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA46_eot = DFA.UnpackEncodedString(DFA46_eotS);
    static readonly short[] DFA46_eof = DFA.UnpackEncodedString(DFA46_eofS);
    static readonly char[] DFA46_min = DFA.UnpackEncodedStringToUnsignedChars(DFA46_minS);
    static readonly char[] DFA46_max = DFA.UnpackEncodedStringToUnsignedChars(DFA46_maxS);
    static readonly short[] DFA46_accept = DFA.UnpackEncodedString(DFA46_acceptS);
    static readonly short[] DFA46_special = DFA.UnpackEncodedString(DFA46_specialS);
    static readonly short[][] DFA46_transition = DFA.UnpackEncodedStringArray(DFA46_transitionS);

    protected class DFA46 : DFA
    {
        public DFA46(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;

        }

        override public string Description
        {
            get { return "()+ loopback of 329:20: ( '*' )+"; }
        }

    }


    protected internal int DFA46_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA46_32 = input.LA(1);

                   	 
                   	int index46_32 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred69_cs()) ) { s = 53; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index46_32);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae46 =
            new NoViableAltException(dfa.Description, 46, _s, input);
        dfa.Error(nvae46);
        throw nvae46;
    }
    const string DFA47_eotS =
        "\x36\uffff";
    const string DFA47_eofS =
        "\x01\x01\x35\uffff";
    const string DFA47_minS =
        "\x01\x1e\x1f\uffff\x01\x00\x15\uffff";
    const string DFA47_maxS =
        "\x01\u00e2\x1f\uffff\x01\x00\x15\uffff";
    const string DFA47_acceptS =
        "\x01\uffff\x01\x02\x33\uffff\x01\x01";
    const string DFA47_specialS =
        "\x20\uffff\x01\x00\x15\uffff}>";
    static readonly string[] DFA47_transitionS = {
            "\x0a\x01\x02\uffff\x01\x01\x04\uffff\x01\x01\x04\uffff\x02"+
            "\x01\x24\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x01\x01\x01"+
            "\uffff\x0b\x01\x01\uffff\x02\x01\x01\x20\x0b\x01\x01\uffff\x15"+
            "\x01\x06\uffff\x09\x01\x0f\uffff\x0d\x01\x0b\uffff\x01\x01\x01"+
            "\uffff\x02\x01\x05\uffff\x01\x01\x10\uffff\x02\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA47_eot = DFA.UnpackEncodedString(DFA47_eotS);
    static readonly short[] DFA47_eof = DFA.UnpackEncodedString(DFA47_eofS);
    static readonly char[] DFA47_min = DFA.UnpackEncodedStringToUnsignedChars(DFA47_minS);
    static readonly char[] DFA47_max = DFA.UnpackEncodedStringToUnsignedChars(DFA47_maxS);
    static readonly short[] DFA47_accept = DFA.UnpackEncodedString(DFA47_acceptS);
    static readonly short[] DFA47_special = DFA.UnpackEncodedString(DFA47_specialS);
    static readonly short[][] DFA47_transition = DFA.UnpackEncodedStringArray(DFA47_transitionS);

    protected class DFA47 : DFA
    {
        public DFA47(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = DFA47_eot;
            this.eof = DFA47_eof;
            this.min = DFA47_min;
            this.max = DFA47_max;
            this.accept = DFA47_accept;
            this.special = DFA47_special;
            this.transition = DFA47_transition;

        }

        override public string Description
        {
            get { return "()+ loopback of 331:13: ( '*' )+"; }
        }

    }


    protected internal int DFA47_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA47_32 = input.LA(1);

                   	 
                   	int index47_32 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred72_cs()) ) { s = 53; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index47_32);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae47 =
            new NoViableAltException(dfa.Description, 47, _s, input);
        dfa.Error(nvae47);
        throw nvae47;
    }
    const string DFA54_eotS =
        "\x1a\uffff";
    const string DFA54_eofS =
        "\x1a\uffff";
    const string DFA54_minS =
        "\x01\x1e\x17\x00\x02\uffff";
    const string DFA54_maxS =
        "\x01\u00e2\x17\x00\x02\uffff";
    const string DFA54_acceptS =
        "\x18\uffff\x01\x01\x01\x02";
    const string DFA54_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01"+
        "\x06\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01"+
        "\x0e\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01"+
        "\x16\x02\uffff}>";
    static readonly string[] DFA54_transitionS = {
            "\x01\x0a\x09\x0c\x02\uffff\x01\x03\x04\uffff\x01\x17\x2a\uffff"+
            "\x01\x0d\x01\x0e\x03\uffff\x01\x17\x05\uffff\x07\x17\x01\uffff"+
            "\x01\x17\x01\x01\x01\x06\x02\uffff\x09\x09\x01\uffff\x01\x02"+
            "\x01\x04\x01\x05\x01\x07\x01\x08\x01\x16\x02\uffff\x06\x09\x01"+
            "\x0f\x01\x11\x01\x10\x01\x12\x01\x13\x01\x14\x01\x15\x1e\uffff"+
            "\x01\x0b\x0c\x17\x0b\uffff\x01\x17\x01\uffff\x02\x17\x05\uffff"+
            "\x01\x17\x10\uffff\x02\x17",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            ""
    };

    static readonly short[] DFA54_eot = DFA.UnpackEncodedString(DFA54_eotS);
    static readonly short[] DFA54_eof = DFA.UnpackEncodedString(DFA54_eofS);
    static readonly char[] DFA54_min = DFA.UnpackEncodedStringToUnsignedChars(DFA54_minS);
    static readonly char[] DFA54_max = DFA.UnpackEncodedStringToUnsignedChars(DFA54_maxS);
    static readonly short[] DFA54_accept = DFA.UnpackEncodedString(DFA54_acceptS);
    static readonly short[] DFA54_special = DFA.UnpackEncodedString(DFA54_specialS);
    static readonly short[][] DFA54_transition = DFA.UnpackEncodedStringArray(DFA54_transitionS);

    protected class DFA54 : DFA
    {
        public DFA54(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;

        }

        override public string Description
        {
            get { return "406:1: expression : ( non_assignment_expression | assignment );"; }
        }

    }


    protected internal int DFA54_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA54_1 = input.LA(1);

                   	 
                   	int index54_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA54_2 = input.LA(1);

                   	 
                   	int index54_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA54_3 = input.LA(1);

                   	 
                   	int index54_3 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA54_4 = input.LA(1);

                   	 
                   	int index54_4 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_4);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA54_5 = input.LA(1);

                   	 
                   	int index54_5 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_5);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA54_6 = input.LA(1);

                   	 
                   	int index54_6 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_6);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA54_7 = input.LA(1);

                   	 
                   	int index54_7 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_7);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA54_8 = input.LA(1);

                   	 
                   	int index54_8 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_8);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA54_9 = input.LA(1);

                   	 
                   	int index54_9 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_9);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 9 : 
                   	int LA54_10 = input.LA(1);

                   	 
                   	int index54_10 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_10);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 10 : 
                   	int LA54_11 = input.LA(1);

                   	 
                   	int index54_11 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_11);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 11 : 
                   	int LA54_12 = input.LA(1);

                   	 
                   	int index54_12 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_12);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 12 : 
                   	int LA54_13 = input.LA(1);

                   	 
                   	int index54_13 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_13);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 13 : 
                   	int LA54_14 = input.LA(1);

                   	 
                   	int index54_14 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_14);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 14 : 
                   	int LA54_15 = input.LA(1);

                   	 
                   	int index54_15 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_15);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 15 : 
                   	int LA54_16 = input.LA(1);

                   	 
                   	int index54_16 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_16);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 16 : 
                   	int LA54_17 = input.LA(1);

                   	 
                   	int index54_17 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_17);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 17 : 
                   	int LA54_18 = input.LA(1);

                   	 
                   	int index54_18 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_18);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 18 : 
                   	int LA54_19 = input.LA(1);

                   	 
                   	int index54_19 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_19);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 19 : 
                   	int LA54_20 = input.LA(1);

                   	 
                   	int index54_20 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_20);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 20 : 
                   	int LA54_21 = input.LA(1);

                   	 
                   	int index54_21 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_21);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 21 : 
                   	int LA54_22 = input.LA(1);

                   	 
                   	int index54_22 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_22);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 22 : 
                   	int LA54_23 = input.LA(1);

                   	 
                   	int index54_23 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred86_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index54_23);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae54 =
            new NoViableAltException(dfa.Description, 54, _s, input);
        dfa.Error(nvae54);
        throw nvae54;
    }
    const string DFA57_eotS =
        "\x1a\uffff";
    const string DFA57_eofS =
        "\x1a\uffff";
    const string DFA57_minS =
        "\x01\x1e\x01\x00\x04\uffff\x01\x00\x13\uffff";
    const string DFA57_maxS =
        "\x01\u00e2\x01\x00\x04\uffff\x01\x00\x13\uffff";
    const string DFA57_acceptS =
        "\x02\uffff\x01\x02\x01\x03\x01\x04\x01\x05\x01\uffff\x01\x07\x01"+
        "\x08\x01\x09\x0c\uffff\x01\x0b\x01\x01\x01\x06\x01\x0a";
    const string DFA57_specialS =
        "\x01\uffff\x01\x00\x04\uffff\x01\x01\x13\uffff}>";
    static readonly string[] DFA57_transitionS = {
            "\x0a\x09\x02\uffff\x01\x03\x04\uffff\x01\x09\x2a\uffff\x02"+
            "\x09\x03\uffff\x01\x09\x05\uffff\x07\x09\x01\uffff\x01\x09\x01"+
            "\x01\x01\x06\x02\uffff\x09\x09\x01\uffff\x01\x02\x01\x04\x01"+
            "\x05\x01\x07\x01\x08\x01\x16\x02\uffff\x0d\x09\x1e\uffff\x0d"+
            "\x09\x0b\uffff\x01\x09\x01\uffff\x02\x09\x05\uffff\x01\x09\x10"+
            "\uffff\x02\x09",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA57_eot = DFA.UnpackEncodedString(DFA57_eotS);
    static readonly short[] DFA57_eof = DFA.UnpackEncodedString(DFA57_eofS);
    static readonly char[] DFA57_min = DFA.UnpackEncodedStringToUnsignedChars(DFA57_minS);
    static readonly char[] DFA57_max = DFA.UnpackEncodedStringToUnsignedChars(DFA57_maxS);
    static readonly short[] DFA57_accept = DFA.UnpackEncodedString(DFA57_acceptS);
    static readonly short[] DFA57_special = DFA.UnpackEncodedString(DFA57_specialS);
    static readonly short[][] DFA57_transition = DFA.UnpackEncodedStringArray(DFA57_transitionS);

    protected class DFA57 : DFA
    {
        public DFA57(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;

        }

        override public string Description
        {
            get { return "412:1: unary_expression : ( cast_expression | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | '*' unary_expression | pre_increment_expression | pre_decrement_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | pointer_indirection_expression | addressof_expression );"; }
        }

    }


    protected internal int DFA57_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA57_1 = input.LA(1);

                   	 
                   	int index57_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred87_cs()) ) { s = 23; }

                   	else if ( (synpred97_cs()) ) { s = 9; }

                   	 
                   	input.Seek(index57_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA57_6 = input.LA(1);

                   	 
                   	int index57_6 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred92_cs()) ) { s = 24; }

                   	else if ( (synpred98_cs()) ) { s = 25; }

                   	 
                   	input.Seek(index57_6);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae57 =
            new NoViableAltException(dfa.Description, 57, _s, input);
        dfa.Error(nvae57);
        throw nvae57;
    }
    const string DFA55_eotS =
        "\x44\uffff";
    const string DFA55_eofS =
        "\x01\x02\x43\uffff";
    const string DFA55_minS =
        "\x01\x1e\x01\x00\x42\uffff";
    const string DFA55_maxS =
        "\x01\u00e2\x01\x00\x42\uffff";
    const string DFA55_acceptS =
        "\x02\uffff\x01\x02\x40\uffff\x01\x01";
    const string DFA55_specialS =
        "\x01\uffff\x01\x00\x42\uffff}>";
    static readonly string[] DFA55_transitionS = {
            "\x0a\x02\x02\uffff\x02\x02\x03\uffff\x01\x02\x04\uffff\x02"+
            "\x02\x24\uffff\x02\x02\x01\uffff\x01\x02\x01\uffff\x0d\x02\x01"+
            "\uffff\x12\x02\x01\x01\x11\x02\x01\uffff\x17\x02\x06\uffff\x0d"+
            "\x02\x0b\uffff\x01\x02\x01\uffff\x02\x02\x05\uffff\x01\x02\x10"+
            "\uffff\x02\x02",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA55_eot = DFA.UnpackEncodedString(DFA55_eotS);
    static readonly short[] DFA55_eof = DFA.UnpackEncodedString(DFA55_eofS);
    static readonly char[] DFA55_min = DFA.UnpackEncodedStringToUnsignedChars(DFA55_minS);
    static readonly char[] DFA55_max = DFA.UnpackEncodedStringToUnsignedChars(DFA55_maxS);
    static readonly short[] DFA55_accept = DFA.UnpackEncodedString(DFA55_acceptS);
    static readonly short[] DFA55_special = DFA.UnpackEncodedString(DFA55_specialS);
    static readonly short[][] DFA55_transition = DFA.UnpackEncodedStringArray(DFA55_transitionS);

    protected class DFA55 : DFA
    {
        public DFA55(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = DFA55_eot;
            this.eof = DFA55_eof;
            this.min = DFA55_min;
            this.max = DFA55_max;
            this.accept = DFA55_accept;
            this.special = DFA55_special;
            this.transition = DFA55_transition;

        }

        override public string Description
        {
            get { return "424:43: ( '++' )?"; }
        }

    }


    protected internal int DFA55_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA55_1 = input.LA(1);

                   	 
                   	int index55_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred95_cs()) ) { s = 67; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index55_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae55 =
            new NoViableAltException(dfa.Description, 55, _s, input);
        dfa.Error(nvae55);
        throw nvae55;
    }
    const string DFA56_eotS =
        "\x44\uffff";
    const string DFA56_eofS =
        "\x01\x02\x43\uffff";
    const string DFA56_minS =
        "\x01\x1e\x01\x00\x42\uffff";
    const string DFA56_maxS =
        "\x01\u00e2\x01\x00\x42\uffff";
    const string DFA56_acceptS =
        "\x02\uffff\x01\x02\x40\uffff\x01\x01";
    const string DFA56_specialS =
        "\x01\uffff\x01\x00\x42\uffff}>";
    static readonly string[] DFA56_transitionS = {
            "\x0a\x02\x02\uffff\x02\x02\x03\uffff\x01\x02\x04\uffff\x02"+
            "\x02\x24\uffff\x02\x02\x01\uffff\x01\x02\x01\uffff\x0d\x02\x01"+
            "\uffff\x13\x02\x01\x01\x10\x02\x01\uffff\x17\x02\x06\uffff\x0d"+
            "\x02\x0b\uffff\x01\x02\x01\uffff\x02\x02\x05\uffff\x01\x02\x10"+
            "\uffff\x02\x02",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA56_eot = DFA.UnpackEncodedString(DFA56_eotS);
    static readonly short[] DFA56_eof = DFA.UnpackEncodedString(DFA56_eofS);
    static readonly char[] DFA56_min = DFA.UnpackEncodedStringToUnsignedChars(DFA56_minS);
    static readonly char[] DFA56_max = DFA.UnpackEncodedStringToUnsignedChars(DFA56_maxS);
    static readonly short[] DFA56_accept = DFA.UnpackEncodedString(DFA56_acceptS);
    static readonly short[] DFA56_special = DFA.UnpackEncodedString(DFA56_specialS);
    static readonly short[][] DFA56_transition = DFA.UnpackEncodedStringArray(DFA56_transitionS);

    protected class DFA56 : DFA
    {
        public DFA56(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;

        }

        override public string Description
        {
            get { return "424:51: ( '--' )?"; }
        }

    }


    protected internal int DFA56_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA56_1 = input.LA(1);

                   	 
                   	int index56_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred96_cs()) ) { s = 67; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index56_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae56 =
            new NoViableAltException(dfa.Description, 56, _s, input);
        dfa.Error(nvae56);
        throw nvae56;
    }
    const string DFA58_eotS =
        "\x1a\uffff";
    const string DFA58_eofS =
        "\x1a\uffff";
    const string DFA58_minS =
        "\x01\x1e\x01\x00\x08\uffff\x02\x00\x0b\uffff\x01\x00\x02\uffff";
    const string DFA58_maxS =
        "\x01\u00e2\x01\x00\x08\uffff\x02\x00\x0b\uffff\x01\x00\x02\uffff";
    const string DFA58_acceptS =
        "\x02\uffff\x01\x01\x15\uffff\x01\x02\x01\x03";
    const string DFA58_specialS =
        "\x01\uffff\x01\x00\x08\uffff\x01\x01\x01\x02\x0b\uffff\x01\x03"+
        "\x02\uffff}>";
    static readonly string[] DFA58_transitionS = {
            "\x01\x0a\x09\x02\x02\uffff\x01\x02\x04\uffff\x01\x17\x2a\uffff"+
            "\x02\x02\x03\uffff\x01\x17\x05\uffff\x07\x17\x01\uffff\x01\x17"+
            "\x01\x01\x01\x02\x02\uffff\x09\x02\x01\uffff\x06\x02\x02\uffff"+
            "\x0d\x02\x1e\uffff\x01\x0b\x0c\x17\x0b\uffff\x01\x17\x01\uffff"+
            "\x02\x17\x05\uffff\x01\x17\x10\uffff\x02\x17",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            ""
    };

    static readonly short[] DFA58_eot = DFA.UnpackEncodedString(DFA58_eotS);
    static readonly short[] DFA58_eof = DFA.UnpackEncodedString(DFA58_eofS);
    static readonly char[] DFA58_min = DFA.UnpackEncodedStringToUnsignedChars(DFA58_minS);
    static readonly char[] DFA58_max = DFA.UnpackEncodedStringToUnsignedChars(DFA58_maxS);
    static readonly short[] DFA58_accept = DFA.UnpackEncodedString(DFA58_acceptS);
    static readonly short[] DFA58_special = DFA.UnpackEncodedString(DFA58_specialS);
    static readonly short[][] DFA58_transition = DFA.UnpackEncodedStringArray(DFA58_transitionS);

    protected class DFA58 : DFA
    {
        public DFA58(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;

        }

        override public string Description
        {
            get { return "447:1: non_assignment_expression : ( conditional_expression | lambda_expression | query_expression );"; }
        }

    }


    protected internal int DFA58_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA58_1 = input.LA(1);

                   	 
                   	int index58_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred99_cs()) ) { s = 2; }

                   	else if ( (synpred100_cs()) ) { s = 24; }

                   	 
                   	input.Seek(index58_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA58_10 = input.LA(1);

                   	 
                   	int index58_10 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred99_cs()) ) { s = 2; }

                   	else if ( (synpred100_cs()) ) { s = 24; }

                   	 
                   	input.Seek(index58_10);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA58_11 = input.LA(1);

                   	 
                   	int index58_11 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred99_cs()) ) { s = 2; }

                   	else if ( (synpred100_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index58_11);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA58_23 = input.LA(1);

                   	 
                   	int index58_23 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred99_cs()) ) { s = 2; }

                   	else if ( (synpred100_cs()) ) { s = 24; }

                   	 
                   	input.Seek(index58_23);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae58 =
            new NoViableAltException(dfa.Description, 58, _s, input);
        dfa.Error(nvae58);
        throw nvae58;
    }
    const string DFA69_eotS =
        "\x10\uffff";
    const string DFA69_eofS =
        "\x10\uffff";
    const string DFA69_minS =
        "\x01\x1e\x07\uffff\x01\x00\x07\uffff";
    const string DFA69_maxS =
        "\x01\u00e2\x07\uffff\x01\x00\x07\uffff";
    const string DFA69_acceptS =
        "\x01\uffff\x01\x01\x0d\uffff\x01\x02";
    const string DFA69_specialS =
        "\x08\uffff\x01\x00\x07\uffff}>";
    static readonly string[] DFA69_transitionS = {
            "\x0a\x01\x07\uffff\x01\x01\x2a\uffff\x02\x01\x03\uffff\x01"+
            "\x01\x05\uffff\x07\x01\x01\uffff\x02\x01\x03\uffff\x09\x01\x09"+
            "\uffff\x06\x01\x01\x08\x06\x01\x1e\uffff\x0d\x01\x0b\uffff\x01"+
            "\x01\x01\uffff\x02\x01\x05\uffff\x01\x01\x10\uffff\x02\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA69_eot = DFA.UnpackEncodedString(DFA69_eotS);
    static readonly short[] DFA69_eof = DFA.UnpackEncodedString(DFA69_eofS);
    static readonly char[] DFA69_min = DFA.UnpackEncodedStringToUnsignedChars(DFA69_minS);
    static readonly char[] DFA69_max = DFA.UnpackEncodedStringToUnsignedChars(DFA69_maxS);
    static readonly short[] DFA69_accept = DFA.UnpackEncodedString(DFA69_acceptS);
    static readonly short[] DFA69_special = DFA.UnpackEncodedString(DFA69_specialS);
    static readonly short[][] DFA69_transition = DFA.UnpackEncodedStringArray(DFA69_transitionS);

    protected class DFA69 : DFA
    {
        public DFA69(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;

        }

        override public string Description
        {
            get { return "500:1: primary_or_array_creation_expression : ( primary_expression | array_creation_expression );"; }
        }

    }


    protected internal int DFA69_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA69_8 = input.LA(1);

                   	 
                   	int index69_8 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred112_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 15; }

                   	 
                   	input.Seek(index69_8);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae69 =
            new NoViableAltException(dfa.Description, 69, _s, input);
        dfa.Error(nvae69);
        throw nvae69;
    }
    const string DFA82_eotS =
        "\x11\uffff";
    const string DFA82_eofS =
        "\x11\uffff";
    const string DFA82_minS =
        "\x01\x1e\x07\uffff\x01\x00\x08\uffff";
    const string DFA82_maxS =
        "\x01\u00e2\x07\uffff\x01\x00\x08\uffff";
    const string DFA82_acceptS =
        "\x01\uffff\x01\x01\x08\uffff\x01\x04\x01\x05\x01\x06\x01\x07\x01"+
        "\x08\x01\x02\x01\x03";
    const string DFA82_specialS =
        "\x08\uffff\x01\x00\x08\uffff}>";
    static readonly string[] DFA82_transitionS = {
            "\x0a\x01\x07\uffff\x01\x01\x2a\uffff\x02\x01\x03\uffff\x01"+
            "\x01\x05\uffff\x07\x01\x01\uffff\x02\x01\x03\uffff\x09\x01\x09"+
            "\uffff\x06\x01\x01\x08\x01\x0a\x01\x01\x01\x0b\x01\x0c\x01\x0d"+
            "\x01\x0e\x1e\uffff\x0d\x01\x0b\uffff\x01\x01\x01\uffff\x02\x01"+
            "\x05\uffff\x01\x01\x10\uffff\x02\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA82_eot = DFA.UnpackEncodedString(DFA82_eotS);
    static readonly short[] DFA82_eof = DFA.UnpackEncodedString(DFA82_eofS);
    static readonly char[] DFA82_min = DFA.UnpackEncodedStringToUnsignedChars(DFA82_minS);
    static readonly char[] DFA82_max = DFA.UnpackEncodedStringToUnsignedChars(DFA82_maxS);
    static readonly short[] DFA82_accept = DFA.UnpackEncodedString(DFA82_acceptS);
    static readonly short[] DFA82_special = DFA.UnpackEncodedString(DFA82_specialS);
    static readonly short[][] DFA82_transition = DFA.UnpackEncodedStringArray(DFA82_transitionS);

    protected class DFA82 : DFA
    {
        public DFA82(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;

        }

        override public string Description
        {
            get { return "548:1: primary_expression : ( primary_expression_start ( primary_expression_part )* | delegate_creation_expression | anonymous_object_creation_expression | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );"; }
        }

    }


    protected internal int DFA82_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA82_8 = input.LA(1);

                   	 
                   	int index82_8 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred127_cs()) ) { s = 1; }

                   	else if ( (synpred128_cs()) ) { s = 15; }

                   	else if ( (synpred129_cs()) ) { s = 16; }

                   	 
                   	input.Seek(index82_8);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae82 =
            new NoViableAltException(dfa.Description, 82, _s, input);
        dfa.Error(nvae82);
        throw nvae82;
    }
    const string DFA81_eotS =
        "\x45\uffff";
    const string DFA81_eofS =
        "\x01\x01\x44\uffff";
    const string DFA81_minS =
        "\x01\x1e\x2b\uffff\x01\x00\x12\uffff\x01\x00\x03\uffff\x01\x00"+
        "\x01\uffff";
    const string DFA81_maxS =
        "\x01\u00e2\x2b\uffff\x01\x00\x12\uffff\x01\x00\x03\uffff\x01\x00"+
        "\x01\uffff";
    const string DFA81_acceptS =
        "\x01\uffff\x01\x02\x42\uffff\x01\x01";
    const string DFA81_specialS =
        "\x2c\uffff\x01\x00\x12\uffff\x01\x01\x03\uffff\x01\x02\x01\uffff}>";
    static readonly string[] DFA81_transitionS = {
            "\x0a\x01\x02\x43\x02\x01\x03\uffff\x01\x01\x04\uffff\x02\x01"+
            "\x24\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x02\x01\x01\x3f"+
            "\x0a\x01\x01\uffff\x01\x01\x01\x2c\x22\x01\x01\uffff\x17\x01"+
            "\x06\uffff\x0d\x01\x0b\uffff\x01\x01\x01\uffff\x02\x01\x05\uffff"+
            "\x01\x01\x10\uffff\x02\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "\x01\uffff",
            ""
    };

    static readonly short[] DFA81_eot = DFA.UnpackEncodedString(DFA81_eotS);
    static readonly short[] DFA81_eof = DFA.UnpackEncodedString(DFA81_eofS);
    static readonly char[] DFA81_min = DFA.UnpackEncodedStringToUnsignedChars(DFA81_minS);
    static readonly char[] DFA81_max = DFA.UnpackEncodedStringToUnsignedChars(DFA81_maxS);
    static readonly short[] DFA81_accept = DFA.UnpackEncodedString(DFA81_acceptS);
    static readonly short[] DFA81_special = DFA.UnpackEncodedString(DFA81_specialS);
    static readonly short[][] DFA81_transition = DFA.UnpackEncodedStringArray(DFA81_transitionS);

    protected class DFA81 : DFA
    {
        public DFA81(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 552:29: ( primary_expression_part )*"; }
        }

    }


    protected internal int DFA81_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA81_44 = input.LA(1);

                   	 
                   	int index81_44 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred126_cs()) ) { s = 68; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index81_44);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA81_63 = input.LA(1);

                   	 
                   	int index81_63 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred126_cs()) ) { s = 68; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index81_63);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA81_67 = input.LA(1);

                   	 
                   	int index81_67 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred126_cs()) ) { s = 68; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index81_67);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae81 =
            new NoViableAltException(dfa.Description, 81, _s, input);
        dfa.Error(nvae81);
        throw nvae81;
    }
    const string DFA88_eotS =
        "\x0a\uffff";
    const string DFA88_eofS =
        "\x02\uffff\x02\x01\x06\uffff";
    const string DFA88_minS =
        "\x01\x1e\x01\uffff\x02\x1e\x06\uffff";
    const string DFA88_maxS =
        "\x01\u00e2\x01\uffff\x02\u00e2\x06\uffff";
    const string DFA88_acceptS =
        "\x01\uffff\x01\x01\x02\uffff\x01\x02\x01\x03\x01\x05\x01\x06\x01"+
        "\x07\x01\x04";
    const string DFA88_specialS =
        "\x0a\uffff}>";
    static readonly string[] DFA88_transitionS = {
            "\x01\x02\x09\x01\x07\uffff\x01\x03\x2a\uffff\x01\x04\x01\x05"+
            "\x03\uffff\x01\x03\x05\uffff\x07\x03\x01\uffff\x01\x03\x01\x06"+
            "\x03\uffff\x09\x01\x09\uffff\x06\x01\x01\x07\x01\uffff\x01\x08"+
            "\x22\uffff\x0d\x03\x0b\uffff\x01\x03\x01\uffff\x02\x03\x05\uffff"+
            "\x01\x03\x10\uffff\x02\x03",
            "",
            "\x0e\x01\x03\uffff\x01\x01\x04\uffff\x02\x01\x23\uffff\x01"+
            "\x09\x02\x01\x01\uffff\x01\x01\x01\uffff\x0d\x01\x01\uffff\x24"+
            "\x01\x01\uffff\x17\x01\x06\uffff\x0d\x01\x0b\uffff\x01\x01\x01"+
            "\uffff\x02\x01\x05\uffff\x01\x01\x10\uffff\x02\x01",
            "\x0e\x01\x03\uffff\x01\x01\x04\uffff\x02\x01\x23\uffff\x01"+
            "\x09\x02\x01\x01\uffff\x01\x01\x01\uffff\x0d\x01\x01\uffff\x24"+
            "\x01\x01\uffff\x17\x01\x06\uffff\x0d\x01\x0b\uffff\x01\x01\x01"+
            "\uffff\x02\x01\x05\uffff\x01\x01\x10\uffff\x02\x01",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA88_eot = DFA.UnpackEncodedString(DFA88_eotS);
    static readonly short[] DFA88_eof = DFA.UnpackEncodedString(DFA88_eofS);
    static readonly char[] DFA88_min = DFA.UnpackEncodedStringToUnsignedChars(DFA88_minS);
    static readonly char[] DFA88_max = DFA.UnpackEncodedStringToUnsignedChars(DFA88_maxS);
    static readonly short[] DFA88_accept = DFA.UnpackEncodedString(DFA88_acceptS);
    static readonly short[] DFA88_special = DFA.UnpackEncodedString(DFA88_specialS);
    static readonly short[][] DFA88_transition = DFA.UnpackEncodedStringArray(DFA88_transitionS);

    protected class DFA88 : DFA
    {
        public DFA88(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;

        }

        override public string Description
        {
            get { return "561:1: primary_expression_start : ( ( predefined_type | identifier | literal ) ( generic_argument_list )? | 'this' ( bracket_expression )? | 'base' ( bracket_expression )? | identifier '::' identifier | paren_expression ( brackets_or_arguments )? | object_creation_expression | typeof_expression );"; }
        }

    }

    const string DFA84_eotS =
        "\x46\uffff";
    const string DFA84_eofS =
        "\x01\x02\x45\uffff";
    const string DFA84_minS =
        "\x01\x1e\x01\x00\x44\uffff";
    const string DFA84_maxS =
        "\x01\u00e2\x01\x00\x44\uffff";
    const string DFA84_acceptS =
        "\x02\uffff\x01\x02\x42\uffff\x01\x01";
    const string DFA84_specialS =
        "\x01\uffff\x01\x00\x44\uffff}>";
    static readonly string[] DFA84_transitionS = {
            "\x0e\x02\x03\uffff\x01\x02\x04\uffff\x02\x02\x24\uffff\x02"+
            "\x02\x01\uffff\x01\x02\x01\uffff\x0d\x02\x01\uffff\x0e\x02\x01"+
            "\x01\x15\x02\x01\uffff\x17\x02\x06\uffff\x0d\x02\x0b\uffff\x01"+
            "\x02\x01\uffff\x02\x02\x05\uffff\x01\x02\x10\uffff\x02\x02",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA84_eot = DFA.UnpackEncodedString(DFA84_eotS);
    static readonly short[] DFA84_eof = DFA.UnpackEncodedString(DFA84_eofS);
    static readonly char[] DFA84_min = DFA.UnpackEncodedStringToUnsignedChars(DFA84_minS);
    static readonly char[] DFA84_max = DFA.UnpackEncodedStringToUnsignedChars(DFA84_maxS);
    static readonly short[] DFA84_accept = DFA.UnpackEncodedString(DFA84_acceptS);
    static readonly short[] DFA84_special = DFA.UnpackEncodedString(DFA84_specialS);
    static readonly short[][] DFA84_transition = DFA.UnpackEncodedStringArray(DFA84_transitionS);

    protected class DFA84 : DFA
    {
        public DFA84(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;

        }

        override public string Description
        {
            get { return "565:45: ( generic_argument_list )?"; }
        }

    }


    protected internal int DFA84_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA84_1 = input.LA(1);

                   	 
                   	int index84_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred136_cs()) ) { s = 69; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index84_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae84 =
            new NoViableAltException(dfa.Description, 84, _s, input);
        dfa.Error(nvae84);
        throw nvae84;
    }
    const string DFA85_eotS =
        "\x45\uffff";
    const string DFA85_eofS =
        "\x01\x02\x44\uffff";
    const string DFA85_minS =
        "\x01\x1e\x01\x00\x43\uffff";
    const string DFA85_maxS =
        "\x01\u00e2\x01\x00\x43\uffff";
    const string DFA85_acceptS =
        "\x02\uffff\x01\x02\x41\uffff\x01\x01";
    const string DFA85_specialS =
        "\x01\uffff\x01\x00\x43\uffff}>";
    static readonly string[] DFA85_transitionS = {
            "\x0e\x02\x03\uffff\x01\x02\x04\uffff\x02\x02\x24\uffff\x02"+
            "\x02\x01\uffff\x01\x02\x01\uffff\x02\x02\x01\x01\x0a\x02\x01"+
            "\uffff\x24\x02\x01\uffff\x17\x02\x06\uffff\x0d\x02\x0b\uffff"+
            "\x01\x02\x01\uffff\x02\x02\x05\uffff\x01\x02\x10\uffff\x02\x02",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA85_eot = DFA.UnpackEncodedString(DFA85_eotS);
    static readonly short[] DFA85_eof = DFA.UnpackEncodedString(DFA85_eofS);
    static readonly char[] DFA85_min = DFA.UnpackEncodedStringToUnsignedChars(DFA85_minS);
    static readonly char[] DFA85_max = DFA.UnpackEncodedStringToUnsignedChars(DFA85_maxS);
    static readonly short[] DFA85_accept = DFA.UnpackEncodedString(DFA85_acceptS);
    static readonly short[] DFA85_special = DFA.UnpackEncodedString(DFA85_specialS);
    static readonly short[][] DFA85_transition = DFA.UnpackEncodedStringArray(DFA85_transitionS);

    protected class DFA85 : DFA
    {
        public DFA85(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;

        }

        override public string Description
        {
            get { return "566:14: ( bracket_expression )?"; }
        }

    }


    protected internal int DFA85_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA85_1 = input.LA(1);

                   	 
                   	int index85_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred138_cs()) ) { s = 68; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index85_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae85 =
            new NoViableAltException(dfa.Description, 85, _s, input);
        dfa.Error(nvae85);
        throw nvae85;
    }
    const string DFA86_eotS =
        "\x45\uffff";
    const string DFA86_eofS =
        "\x01\x02\x44\uffff";
    const string DFA86_minS =
        "\x01\x1e\x01\x00\x43\uffff";
    const string DFA86_maxS =
        "\x01\u00e2\x01\x00\x43\uffff";
    const string DFA86_acceptS =
        "\x02\uffff\x01\x02\x41\uffff\x01\x01";
    const string DFA86_specialS =
        "\x01\uffff\x01\x00\x43\uffff}>";
    static readonly string[] DFA86_transitionS = {
            "\x0e\x02\x03\uffff\x01\x02\x04\uffff\x02\x02\x24\uffff\x02"+
            "\x02\x01\uffff\x01\x02\x01\uffff\x02\x02\x01\x01\x0a\x02\x01"+
            "\uffff\x24\x02\x01\uffff\x17\x02\x06\uffff\x0d\x02\x0b\uffff"+
            "\x01\x02\x01\uffff\x02\x02\x05\uffff\x01\x02\x10\uffff\x02\x02",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA86_eot = DFA.UnpackEncodedString(DFA86_eotS);
    static readonly short[] DFA86_eof = DFA.UnpackEncodedString(DFA86_eofS);
    static readonly char[] DFA86_min = DFA.UnpackEncodedStringToUnsignedChars(DFA86_minS);
    static readonly char[] DFA86_max = DFA.UnpackEncodedStringToUnsignedChars(DFA86_maxS);
    static readonly short[] DFA86_accept = DFA.UnpackEncodedString(DFA86_acceptS);
    static readonly short[] DFA86_special = DFA.UnpackEncodedString(DFA86_specialS);
    static readonly short[][] DFA86_transition = DFA.UnpackEncodedStringArray(DFA86_transitionS);

    protected class DFA86 : DFA
    {
        public DFA86(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;

        }

        override public string Description
        {
            get { return "567:14: ( bracket_expression )?"; }
        }

    }


    protected internal int DFA86_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA86_1 = input.LA(1);

                   	 
                   	int index86_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred140_cs()) ) { s = 68; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index86_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae86 =
            new NoViableAltException(dfa.Description, 86, _s, input);
        dfa.Error(nvae86);
        throw nvae86;
    }
    const string DFA87_eotS =
        "\x45\uffff";
    const string DFA87_eofS =
        "\x01\x03\x44\uffff";
    const string DFA87_minS =
        "\x01\x1e\x02\x00\x42\uffff";
    const string DFA87_maxS =
        "\x01\u00e2\x02\x00\x42\uffff";
    const string DFA87_acceptS =
        "\x03\uffff\x01\x02\x40\uffff\x01\x01";
    const string DFA87_specialS =
        "\x01\uffff\x01\x00\x01\x01\x42\uffff}>";
    static readonly string[] DFA87_transitionS = {
            "\x0e\x03\x03\uffff\x01\x03\x04\uffff\x02\x03\x24\uffff\x02"+
            "\x03\x01\uffff\x01\x03\x01\uffff\x02\x03\x01\x01\x0a\x03\x01"+
            "\uffff\x01\x03\x01\x02\x22\x03\x01\uffff\x17\x03\x06\uffff\x0d"+
            "\x03\x0b\uffff\x01\x03\x01\uffff\x02\x03\x05\uffff\x01\x03\x10"+
            "\uffff\x02\x03",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA87_eot = DFA.UnpackEncodedString(DFA87_eotS);
    static readonly short[] DFA87_eof = DFA.UnpackEncodedString(DFA87_eofS);
    static readonly char[] DFA87_min = DFA.UnpackEncodedStringToUnsignedChars(DFA87_minS);
    static readonly char[] DFA87_max = DFA.UnpackEncodedStringToUnsignedChars(DFA87_maxS);
    static readonly short[] DFA87_accept = DFA.UnpackEncodedString(DFA87_acceptS);
    static readonly short[] DFA87_special = DFA.UnpackEncodedString(DFA87_specialS);
    static readonly short[][] DFA87_transition = DFA.UnpackEncodedStringArray(DFA87_transitionS);

    protected class DFA87 : DFA
    {
        public DFA87(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;

        }

        override public string Description
        {
            get { return "569:23: ( brackets_or_arguments )?"; }
        }

    }


    protected internal int DFA87_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA87_1 = input.LA(1);

                   	 
                   	int index87_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_cs()) ) { s = 68; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index87_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA87_2 = input.LA(1);

                   	 
                   	int index87_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred143_cs()) ) { s = 68; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index87_2);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae87 =
            new NoViableAltException(dfa.Description, 87, _s, input);
        dfa.Error(nvae87);
        throw nvae87;
    }
    const string DFA89_eotS =
        "\x45\uffff";
    const string DFA89_eofS =
        "\x01\x03\x44\uffff";
    const string DFA89_minS =
        "\x01\x1e\x02\x00\x42\uffff";
    const string DFA89_maxS =
        "\x01\u00e2\x02\x00\x42\uffff";
    const string DFA89_acceptS =
        "\x03\uffff\x01\x02\x40\uffff\x01\x01";
    const string DFA89_specialS =
        "\x01\uffff\x01\x00\x01\x01\x42\uffff}>";
    static readonly string[] DFA89_transitionS = {
            "\x0e\x03\x03\uffff\x01\x03\x04\uffff\x02\x03\x24\uffff\x02"+
            "\x03\x01\uffff\x01\x03\x01\uffff\x02\x03\x01\x01\x0a\x03\x01"+
            "\uffff\x01\x03\x01\x02\x22\x03\x01\uffff\x17\x03\x06\uffff\x0d"+
            "\x03\x0b\uffff\x01\x03\x01\uffff\x02\x03\x05\uffff\x01\x03\x10"+
            "\uffff\x02\x03",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA89_eot = DFA.UnpackEncodedString(DFA89_eotS);
    static readonly short[] DFA89_eof = DFA.UnpackEncodedString(DFA89_eofS);
    static readonly char[] DFA89_min = DFA.UnpackEncodedStringToUnsignedChars(DFA89_minS);
    static readonly char[] DFA89_max = DFA.UnpackEncodedStringToUnsignedChars(DFA89_maxS);
    static readonly short[] DFA89_accept = DFA.UnpackEncodedString(DFA89_acceptS);
    static readonly short[] DFA89_special = DFA.UnpackEncodedString(DFA89_specialS);
    static readonly short[][] DFA89_transition = DFA.UnpackEncodedStringArray(DFA89_transitionS);

    protected class DFA89 : DFA
    {
        public DFA89(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;

        }

        override public string Description
        {
            get { return "577:24: ( brackets_or_arguments )?"; }
        }

    }


    protected internal int DFA89_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA89_1 = input.LA(1);

                   	 
                   	int index89_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_cs()) ) { s = 68; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index89_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA89_2 = input.LA(1);

                   	 
                   	int index89_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred146_cs()) ) { s = 68; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index89_2);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae89 =
            new NoViableAltException(dfa.Description, 89, _s, input);
        dfa.Error(nvae89);
        throw nvae89;
    }
    const string DFA96_eotS =
        "\x46\uffff";
    const string DFA96_eofS =
        "\x01\x02\x45\uffff";
    const string DFA96_minS =
        "\x01\x1e\x01\x00\x44\uffff";
    const string DFA96_maxS =
        "\x01\u00e2\x01\x00\x44\uffff";
    const string DFA96_acceptS =
        "\x02\uffff\x01\x02\x42\uffff\x01\x01";
    const string DFA96_specialS =
        "\x01\uffff\x01\x00\x44\uffff}>";
    static readonly string[] DFA96_transitionS = {
            "\x0e\x02\x03\uffff\x01\x02\x04\uffff\x02\x02\x24\uffff\x02"+
            "\x02\x01\uffff\x01\x02\x01\uffff\x0d\x02\x01\uffff\x0e\x02\x01"+
            "\x01\x15\x02\x01\uffff\x17\x02\x06\uffff\x0d\x02\x0b\uffff\x01"+
            "\x02\x01\uffff\x02\x02\x05\uffff\x01\x02\x10\uffff\x02\x02",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA96_eot = DFA.UnpackEncodedString(DFA96_eotS);
    static readonly short[] DFA96_eof = DFA.UnpackEncodedString(DFA96_eofS);
    static readonly char[] DFA96_min = DFA.UnpackEncodedStringToUnsignedChars(DFA96_minS);
    static readonly char[] DFA96_max = DFA.UnpackEncodedStringToUnsignedChars(DFA96_maxS);
    static readonly short[] DFA96_accept = DFA.UnpackEncodedString(DFA96_acceptS);
    static readonly short[] DFA96_special = DFA.UnpackEncodedString(DFA96_specialS);
    static readonly short[][] DFA96_transition = DFA.UnpackEncodedStringArray(DFA96_transitionS);

    protected class DFA96 : DFA
    {
        public DFA96(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;

        }

        override public string Description
        {
            get { return "602:33: ( generic_argument_list )?"; }
        }

    }


    protected internal int DFA96_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA96_1 = input.LA(1);

                   	 
                   	int index96_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred153_cs()) ) { s = 69; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index96_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae96 =
            new NoViableAltException(dfa.Description, 96, _s, input);
        dfa.Error(nvae96);
        throw nvae96;
    }
    const string DFA98_eotS =
        "\x45\uffff";
    const string DFA98_eofS =
        "\x01\x02\x44\uffff";
    const string DFA98_minS =
        "\x01\x1e\x01\x00\x43\uffff";
    const string DFA98_maxS =
        "\x01\u00e2\x01\x00\x43\uffff";
    const string DFA98_acceptS =
        "\x02\uffff\x01\x02\x41\uffff\x01\x01";
    const string DFA98_specialS =
        "\x01\uffff\x01\x00\x43\uffff}>";
    static readonly string[] DFA98_transitionS = {
            "\x0e\x02\x03\uffff\x01\x02\x04\uffff\x02\x02\x24\uffff\x02"+
            "\x02\x01\uffff\x01\x02\x01\uffff\x0d\x02\x01\uffff\x01\x02\x01"+
            "\x01\x22\x02\x01\uffff\x17\x02\x06\uffff\x0d\x02\x0b\uffff\x01"+
            "\x02\x01\uffff\x02\x02\x05\uffff\x01\x02\x10\uffff\x02\x02",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA98_eot = DFA.UnpackEncodedString(DFA98_eotS);
    static readonly short[] DFA98_eof = DFA.UnpackEncodedString(DFA98_eofS);
    static readonly char[] DFA98_min = DFA.UnpackEncodedStringToUnsignedChars(DFA98_minS);
    static readonly char[] DFA98_max = DFA.UnpackEncodedStringToUnsignedChars(DFA98_maxS);
    static readonly short[] DFA98_accept = DFA.UnpackEncodedString(DFA98_acceptS);
    static readonly short[] DFA98_special = DFA.UnpackEncodedString(DFA98_specialS);
    static readonly short[][] DFA98_transition = DFA.UnpackEncodedStringArray(DFA98_transitionS);

    protected class DFA98 : DFA
    {
        public DFA98(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;

        }

        override public string Description
        {
            get { return "612:24: ( arguments )?"; }
        }

    }


    protected internal int DFA98_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA98_1 = input.LA(1);

                   	 
                   	int index98_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred155_cs()) ) { s = 68; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index98_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae98 =
            new NoViableAltException(dfa.Description, 98, _s, input);
        dfa.Error(nvae98);
        throw nvae98;
    }
    const string DFA99_eotS =
        "\x45\uffff";
    const string DFA99_eofS =
        "\x01\x01\x44\uffff";
    const string DFA99_minS =
        "\x01\x1e\x01\uffff\x01\x00\x42\uffff";
    const string DFA99_maxS =
        "\x01\u00e2\x01\uffff\x01\x00\x42\uffff";
    const string DFA99_acceptS =
        "\x01\uffff\x01\x02\x42\uffff\x01\x01";
    const string DFA99_specialS =
        "\x02\uffff\x01\x00\x42\uffff}>";
    static readonly string[] DFA99_transitionS = {
            "\x0e\x01\x03\uffff\x01\x01\x04\uffff\x02\x01\x24\uffff\x02"+
            "\x01\x01\uffff\x01\x01\x01\uffff\x02\x01\x01\x02\x0a\x01\x01"+
            "\uffff\x24\x01\x01\uffff\x17\x01\x06\uffff\x0d\x01\x0b\uffff"+
            "\x01\x01\x01\uffff\x02\x01\x05\uffff\x01\x01\x10\uffff\x02\x01",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA99_eot = DFA.UnpackEncodedString(DFA99_eotS);
    static readonly short[] DFA99_eof = DFA.UnpackEncodedString(DFA99_eofS);
    static readonly char[] DFA99_min = DFA.UnpackEncodedStringToUnsignedChars(DFA99_minS);
    static readonly char[] DFA99_max = DFA.UnpackEncodedStringToUnsignedChars(DFA99_maxS);
    static readonly short[] DFA99_accept = DFA.UnpackEncodedString(DFA99_acceptS);
    static readonly short[] DFA99_special = DFA.UnpackEncodedString(DFA99_specialS);
    static readonly short[][] DFA99_transition = DFA.UnpackEncodedStringArray(DFA99_transitionS);

    protected class DFA99 : DFA
    {
        public DFA99(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 613:16: ( bracket_expression )*"; }
        }

    }


    protected internal int DFA99_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA99_2 = input.LA(1);

                   	 
                   	int index99_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred157_cs()) ) { s = 68; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index99_2);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae99 =
            new NoViableAltException(dfa.Description, 99, _s, input);
        dfa.Error(nvae99);
        throw nvae99;
    }
    const string DFA104_eotS =
        "\x0a\uffff";
    const string DFA104_eofS =
        "\x0a\uffff";
    const string DFA104_minS =
        "\x01\x1e\x01\x00\x08\uffff";
    const string DFA104_maxS =
        "\x01\u00e2\x01\x00\x08\uffff";
    const string DFA104_acceptS =
        "\x02\uffff\x01\x01\x05\uffff\x01\x02\x01\uffff";
    const string DFA104_specialS =
        "\x01\uffff\x01\x00\x08\uffff}>";
    static readonly string[] DFA104_transitionS = {
            "\x0a\x02\x02\x08\x05\uffff\x01\x02\x2a\uffff\x02\x02\x03\uffff"+
            "\x01\x02\x01\uffff\x01\x08\x03\uffff\x07\x02\x01\uffff\x01\x02"+
            "\x01\x01\x03\uffff\x09\x02\x09\uffff\x06\x02\x25\uffff\x0d\x02"+
            "\x0b\uffff\x01\x02\x01\uffff\x02\x02\x05\uffff\x01\x02\x10\uffff"+
            "\x02\x02",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA104_eot = DFA.UnpackEncodedString(DFA104_eotS);
    static readonly short[] DFA104_eof = DFA.UnpackEncodedString(DFA104_eofS);
    static readonly char[] DFA104_min = DFA.UnpackEncodedStringToUnsignedChars(DFA104_minS);
    static readonly char[] DFA104_max = DFA.UnpackEncodedStringToUnsignedChars(DFA104_maxS);
    static readonly short[] DFA104_accept = DFA.UnpackEncodedString(DFA104_acceptS);
    static readonly short[] DFA104_special = DFA.UnpackEncodedString(DFA104_specialS);
    static readonly short[][] DFA104_transition = DFA.UnpackEncodedStringArray(DFA104_transitionS);

    protected class DFA104 : DFA
    {
        public DFA104(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;

        }

        override public string Description
        {
            get { return "665:21: ( access | access_part )"; }
        }

    }


    protected internal int DFA104_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA104_1 = input.LA(1);

                   	 
                   	int index104_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred176_cs()) ) { s = 2; }

                   	else if ( (true) ) { s = 8; }

                   	 
                   	input.Seek(index104_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae104 =
            new NoViableAltException(dfa.Description, 104, _s, input);
        dfa.Error(nvae104);
        throw nvae104;
    }
    const string DFA129_eotS =
        "\x13\uffff";
    const string DFA129_eofS =
        "\x13\uffff";
    const string DFA129_minS =
        "\x01\u008c\x01\x6e\x01\x1e\x01\x35\x02\x28\x02\uffff\x03\x1e\x01"+
        "\x00\x01\uffff\x04\x28\x02\x1e";
    const string DFA129_maxS =
        "\x01\u008c\x01\x6e\x01\u00e2\x01\x6f\x02\x7b\x02\uffff\x03\u00e2"+
        "\x01\x00\x01\uffff\x04\x7b\x02\u00e2";
    const string DFA129_acceptS =
        "\x06\uffff\x01\x01\x01\x03\x04\uffff\x01\x02\x06\uffff";
    const string DFA129_specialS =
        "\x0b\uffff\x01\x00\x07\uffff}>";
    static readonly string[] DFA129_transitionS = {
            "\x01\x01",
            "\x01\x02",
            "\x01\x04\x10\uffff\x01\x05\x2f\uffff\x01\x05\x05\uffff\x07"+
            "\x05\x01\uffff\x01\x05\x03\uffff\x01\x03\x09\x06\x09\uffff\x06"+
            "\x06\x25\uffff\x0d\x05\x0b\uffff\x01\x05\x01\uffff\x02\x05\x05"+
            "\uffff\x01\x05\x10\uffff\x02\x05",
            "\x01\x07\x39\uffff\x01\x06",
            "\x01\x0a\x0c\uffff\x01\x0b\x23\uffff\x01\x09\x07\uffff\x01"+
            "\x06\x0d\uffff\x02\x06\x0a\uffff\x01\x08",
            "\x01\x0a\x0c\uffff\x01\x0b\x23\uffff\x01\x09\x07\uffff\x01"+
            "\x06\x0d\uffff\x02\x06\x0a\uffff\x01\x08",
            "",
            "",
            "\x01\x06\x0c\uffff\x01\x0c\x03\uffff\x01\x06\x2f\uffff\x01"+
            "\x06\x02\uffff\x01\x0c\x02\uffff\x07\x06\x01\uffff\x01\x06\x03"+
            "\uffff\x0a\x06\x09\uffff\x06\x06\x25\uffff\x0d\x06\x0b\uffff"+
            "\x01\x06\x01\uffff\x02\x06\x05\uffff\x01\x06\x10\uffff\x02\x06",
            "\x01\x0d\x10\uffff\x01\x0e\x2f\uffff\x01\x0e\x05\uffff\x07"+
            "\x0e\x01\uffff\x01\x0e\x41\uffff\x0d\x0e\x0b\uffff\x01\x0e\x01"+
            "\uffff\x02\x0e\x05\uffff\x01\x0e\x10\uffff\x02\x0e",
            "\x01\x0f\x10\uffff\x01\x10\x2f\uffff\x01\x10\x05\uffff\x07"+
            "\x10\x01\uffff\x01\x10\x41\uffff\x0d\x10\x0b\uffff\x01\x10\x01"+
            "\uffff\x02\x10\x05\uffff\x01\x10\x10\uffff\x02\x10",
            "\x01\uffff",
            "",
            "\x01\x0a\x0c\uffff\x01\x0b\x2b\uffff\x01\x06\x0d\uffff\x02"+
            "\x06\x0a\uffff\x01\x11",
            "\x01\x0a\x0c\uffff\x01\x0b\x2b\uffff\x01\x06\x0d\uffff\x02"+
            "\x06\x0a\uffff\x01\x11",
            "\x01\x0a\x0c\uffff\x01\x0b\x2b\uffff\x01\x06\x0d\uffff\x02"+
            "\x06\x0a\uffff\x01\x12",
            "\x01\x0a\x0c\uffff\x01\x0b\x2b\uffff\x01\x06\x0d\uffff\x02"+
            "\x06\x0a\uffff\x01\x12",
            "\x01\x06\x0c\uffff\x01\x0c\x03\uffff\x01\x06\x2f\uffff\x01"+
            "\x06\x02\uffff\x01\x0c\x02\uffff\x07\x06\x01\uffff\x01\x06\x03"+
            "\uffff\x0a\x06\x09\uffff\x06\x06\x25\uffff\x0d\x06\x0b\uffff"+
            "\x01\x06\x01\uffff\x02\x06\x05\uffff\x01\x06\x10\uffff\x02\x06",
            "\x01\x06\x0c\uffff\x01\x0c\x03\uffff\x01\x06\x2f\uffff\x01"+
            "\x06\x02\uffff\x01\x0c\x02\uffff\x07\x06\x01\uffff\x01\x06\x03"+
            "\uffff\x0a\x06\x09\uffff\x06\x06\x25\uffff\x0d\x06\x0b\uffff"+
            "\x01\x06\x01\uffff\x02\x06\x05\uffff\x01\x06\x10\uffff\x02\x06"
    };

    static readonly short[] DFA129_eot = DFA.UnpackEncodedString(DFA129_eotS);
    static readonly short[] DFA129_eof = DFA.UnpackEncodedString(DFA129_eofS);
    static readonly char[] DFA129_min = DFA.UnpackEncodedStringToUnsignedChars(DFA129_minS);
    static readonly char[] DFA129_max = DFA.UnpackEncodedStringToUnsignedChars(DFA129_maxS);
    static readonly short[] DFA129_accept = DFA.UnpackEncodedString(DFA129_acceptS);
    static readonly short[] DFA129_special = DFA.UnpackEncodedString(DFA129_specialS);
    static readonly short[][] DFA129_transition = DFA.UnpackEncodedStringArray(DFA129_transitionS);

    protected class DFA129 : DFA
    {
        public DFA129(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;

        }

        override public string Description
        {
            get { return "783:1: typeof_expression : ( 'typeof' '(' type ')' | 'typeof' '(' unbound_type_name ')' | 'typeof' '(' 'void' ')' );"; }
        }

    }


    protected internal int DFA129_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA129_11 = input.LA(1);

                   	 
                   	int index129_11 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred204_cs()) ) { s = 6; }

                   	else if ( (synpred205_cs()) ) { s = 12; }

                   	 
                   	input.Seek(index129_11);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae129 =
            new NoViableAltException(dfa.Description, 129, _s, input);
        dfa.Error(nvae129);
        throw nvae129;
    }
    const string DFA156_eotS =
        "\x39\uffff";
    const string DFA156_eofS =
        "\x01\x01\x38\uffff";
    const string DFA156_minS =
        "\x01\x1e\x22\uffff\x01\x00\x15\uffff";
    const string DFA156_maxS =
        "\x01\u00e2\x22\uffff\x01\x00\x15\uffff";
    const string DFA156_acceptS =
        "\x01\uffff\x01\x02\x36\uffff\x01\x01";
    const string DFA156_specialS =
        "\x23\uffff\x01\x00\x15\uffff}>";
    static readonly string[] DFA156_transitionS = {
            "\x0a\x01\x02\uffff\x02\x01\x03\uffff\x01\x01\x04\uffff\x02"+
            "\x01\x24\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x01\x01\x01"+
            "\uffff\x0b\x01\x01\uffff\x02\x01\x01\x23\x21\x01\x01\uffff\x02"+
            "\x38\x0c\x01\x0f\uffff\x0d\x01\x0b\uffff\x01\x01\x01\uffff\x02"+
            "\x01\x05\uffff\x01\x01\x10\uffff\x02\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA156_eot = DFA.UnpackEncodedString(DFA156_eotS);
    static readonly short[] DFA156_eof = DFA.UnpackEncodedString(DFA156_eofS);
    static readonly char[] DFA156_min = DFA.UnpackEncodedStringToUnsignedChars(DFA156_minS);
    static readonly char[] DFA156_max = DFA.UnpackEncodedStringToUnsignedChars(DFA156_maxS);
    static readonly short[] DFA156_accept = DFA.UnpackEncodedString(DFA156_acceptS);
    static readonly short[] DFA156_special = DFA.UnpackEncodedString(DFA156_specialS);
    static readonly short[][] DFA156_transition = DFA.UnpackEncodedStringArray(DFA156_transitionS);

    protected class DFA156 : DFA
    {
        public DFA156(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 926:19: ( ( '*' | '/' | '%' ) unary_expression )*"; }
        }

    }


    protected internal int DFA156_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA156_35 = input.LA(1);

                   	 
                   	int index156_35 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred238_cs()) ) { s = 56; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index156_35);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae156 =
            new NoViableAltException(dfa.Description, 156, _s, input);
        dfa.Error(nvae156);
        throw nvae156;
    }
    const string DFA157_eotS =
        "\x39\uffff";
    const string DFA157_eofS =
        "\x01\x01\x38\uffff";
    const string DFA157_minS =
        "\x01\x1e\x1e\uffff\x02\x00\x18\uffff";
    const string DFA157_maxS =
        "\x01\u00e2\x1e\uffff\x02\x00\x18\uffff";
    const string DFA157_acceptS =
        "\x01\uffff\x01\x02\x36\uffff\x01\x01";
    const string DFA157_specialS =
        "\x1f\uffff\x01\x00\x01\x01\x18\uffff}>";
    static readonly string[] DFA157_transitionS = {
            "\x0a\x01\x02\uffff\x01\x20\x01\x01\x03\uffff\x01\x01\x04\uffff"+
            "\x02\x01\x24\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x01\x01"+
            "\x01\uffff\x0b\x01\x01\uffff\x0f\x01\x01\x1f\x14\x01\x03\uffff"+
            "\x0c\x01\x0f\uffff\x0d\x01\x0b\uffff\x01\x01\x01\uffff\x02\x01"+
            "\x05\uffff\x01\x01\x10\uffff\x02\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA157_eot = DFA.UnpackEncodedString(DFA157_eotS);
    static readonly short[] DFA157_eof = DFA.UnpackEncodedString(DFA157_eofS);
    static readonly char[] DFA157_min = DFA.UnpackEncodedStringToUnsignedChars(DFA157_minS);
    static readonly char[] DFA157_max = DFA.UnpackEncodedStringToUnsignedChars(DFA157_maxS);
    static readonly short[] DFA157_accept = DFA.UnpackEncodedString(DFA157_acceptS);
    static readonly short[] DFA157_special = DFA.UnpackEncodedString(DFA157_specialS);
    static readonly short[][] DFA157_transition = DFA.UnpackEncodedStringArray(DFA157_transitionS);

    protected class DFA157 : DFA
    {
        public DFA157(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 931:28: ( ( '+' | '-' ) multiplicative_expression )*"; }
        }

    }


    protected internal int DFA157_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA157_31 = input.LA(1);

                   	 
                   	int index157_31 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred240_cs()) ) { s = 56; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index157_31);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA157_32 = input.LA(1);

                   	 
                   	int index157_32 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred240_cs()) ) { s = 56; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index157_32);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae157 =
            new NoViableAltException(dfa.Description, 157, _s, input);
        dfa.Error(nvae157);
        throw nvae157;
    }
    const string DFA162_eotS =
        "\x36\uffff";
    const string DFA162_eofS =
        "\x01\x0c\x35\uffff";
    const string DFA162_minS =
        "\x01\x1e\x01\uffff\x33\x00\x01\uffff";
    const string DFA162_maxS =
        "\x01\u00e2\x01\uffff\x33\x00\x01\uffff";
    const string DFA162_acceptS =
        "\x01\uffff\x01\x01\x33\uffff\x01\x02";
    const string DFA162_specialS =
        "\x02\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01"+
        "\x06\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01"+
        "\x0e\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01"+
        "\x16\x01\x17\x01\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01"+
        "\x1e\x01\x1f\x01\x20\x01\x21\x01\x22\x01\x23\x01\x24\x01\x25\x01"+
        "\x26\x01\x27\x01\x28\x01\x29\x01\x2a\x01\x2b\x01\x2c\x01\x2d\x01"+
        "\x2e\x01\x2f\x01\x30\x01\x31\x01\x32\x01\uffff}>";
    static readonly string[] DFA162_transitionS = {
            "\x01\x25\x09\x27\x02\uffff\x01\x1e\x01\x01\x03\uffff\x01\x31"+
            "\x04\uffff\x01\x0d\x01\x0b\x24\uffff\x01\x28\x01\x29\x01\uffff"+
            "\x01\x0f\x01\uffff\x01\x31\x01\uffff\x01\x32\x01\x0a\x01\x0e"+
            "\x01\x10\x07\x31\x01\uffff\x01\x31\x01\x1c\x01\x21\x01\x09\x01"+
            "\x34\x09\x24\x01\x01\x01\x1d\x01\x1f\x01\x20\x01\x22\x01\x23"+
            "\x01\x03\x02\x33\x06\x24\x01\x2a\x01\x2c\x01\x2b\x01\x2d\x01"+
            "\x2e\x01\x2f\x01\x30\x04\uffff\x02\x01\x02\x35\x02\x02\x01\x04"+
            "\x01\x05\x01\x06\x01\x07\x01\x08\x0f\uffff\x01\x13\x01\x1a\x01"+
            "\x16\x01\x18\x01\x19\x01\x14\x01\x17\x02\x1b\x01\x11\x01\x12"+
            "\x01\x26\x01\x15\x0b\uffff\x01\x31\x01\uffff\x02\x31\x05\uffff"+
            "\x01\x31\x10\uffff\x02\x31",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            ""
    };

    static readonly short[] DFA162_eot = DFA.UnpackEncodedString(DFA162_eotS);
    static readonly short[] DFA162_eof = DFA.UnpackEncodedString(DFA162_eofS);
    static readonly char[] DFA162_min = DFA.UnpackEncodedStringToUnsignedChars(DFA162_minS);
    static readonly char[] DFA162_max = DFA.UnpackEncodedStringToUnsignedChars(DFA162_maxS);
    static readonly short[] DFA162_accept = DFA.UnpackEncodedString(DFA162_acceptS);
    static readonly short[] DFA162_special = DFA.UnpackEncodedString(DFA162_specialS);
    static readonly short[][] DFA162_transition = DFA.UnpackEncodedStringArray(DFA162_transitionS);

    protected class DFA162 : DFA
    {
        public DFA162(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = DFA162_eot;
            this.eof = DFA162_eof;
            this.min = DFA162_min;
            this.max = DFA162_max;
            this.accept = DFA162_accept;
            this.special = DFA162_special;
            this.transition = DFA162_transition;

        }

        override public string Description
        {
            get { return "943:3: ( ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* | ( ( 'is' | 'as' ) non_nullable_type )* )"; }
        }

    }


    protected internal int DFA162_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA162_2 = input.LA(1);

                   	 
                   	int index162_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA162_3 = input.LA(1);

                   	 
                   	int index162_3 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA162_4 = input.LA(1);

                   	 
                   	int index162_4 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_4);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA162_5 = input.LA(1);

                   	 
                   	int index162_5 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_5);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA162_6 = input.LA(1);

                   	 
                   	int index162_6 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_6);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA162_7 = input.LA(1);

                   	 
                   	int index162_7 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_7);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA162_8 = input.LA(1);

                   	 
                   	int index162_8 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_8);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA162_9 = input.LA(1);

                   	 
                   	int index162_9 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_9);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA162_10 = input.LA(1);

                   	 
                   	int index162_10 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_10);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 9 : 
                   	int LA162_11 = input.LA(1);

                   	 
                   	int index162_11 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_11);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 10 : 
                   	int LA162_12 = input.LA(1);

                   	 
                   	int index162_12 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_12);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 11 : 
                   	int LA162_13 = input.LA(1);

                   	 
                   	int index162_13 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_13);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 12 : 
                   	int LA162_14 = input.LA(1);

                   	 
                   	int index162_14 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_14);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 13 : 
                   	int LA162_15 = input.LA(1);

                   	 
                   	int index162_15 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_15);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 14 : 
                   	int LA162_16 = input.LA(1);

                   	 
                   	int index162_16 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_16);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 15 : 
                   	int LA162_17 = input.LA(1);

                   	 
                   	int index162_17 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_17);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 16 : 
                   	int LA162_18 = input.LA(1);

                   	 
                   	int index162_18 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_18);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 17 : 
                   	int LA162_19 = input.LA(1);

                   	 
                   	int index162_19 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_19);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 18 : 
                   	int LA162_20 = input.LA(1);

                   	 
                   	int index162_20 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_20);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 19 : 
                   	int LA162_21 = input.LA(1);

                   	 
                   	int index162_21 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_21);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 20 : 
                   	int LA162_22 = input.LA(1);

                   	 
                   	int index162_22 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_22);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 21 : 
                   	int LA162_23 = input.LA(1);

                   	 
                   	int index162_23 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_23);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 22 : 
                   	int LA162_24 = input.LA(1);

                   	 
                   	int index162_24 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_24);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 23 : 
                   	int LA162_25 = input.LA(1);

                   	 
                   	int index162_25 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_25);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 24 : 
                   	int LA162_26 = input.LA(1);

                   	 
                   	int index162_26 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_26);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 25 : 
                   	int LA162_27 = input.LA(1);

                   	 
                   	int index162_27 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_27);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 26 : 
                   	int LA162_28 = input.LA(1);

                   	 
                   	int index162_28 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_28);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 27 : 
                   	int LA162_29 = input.LA(1);

                   	 
                   	int index162_29 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_29);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 28 : 
                   	int LA162_30 = input.LA(1);

                   	 
                   	int index162_30 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_30);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 29 : 
                   	int LA162_31 = input.LA(1);

                   	 
                   	int index162_31 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_31);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 30 : 
                   	int LA162_32 = input.LA(1);

                   	 
                   	int index162_32 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_32);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 31 : 
                   	int LA162_33 = input.LA(1);

                   	 
                   	int index162_33 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_33);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 32 : 
                   	int LA162_34 = input.LA(1);

                   	 
                   	int index162_34 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_34);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 33 : 
                   	int LA162_35 = input.LA(1);

                   	 
                   	int index162_35 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_35);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 34 : 
                   	int LA162_36 = input.LA(1);

                   	 
                   	int index162_36 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_36);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 35 : 
                   	int LA162_37 = input.LA(1);

                   	 
                   	int index162_37 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_37);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 36 : 
                   	int LA162_38 = input.LA(1);

                   	 
                   	int index162_38 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_38);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 37 : 
                   	int LA162_39 = input.LA(1);

                   	 
                   	int index162_39 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_39);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 38 : 
                   	int LA162_40 = input.LA(1);

                   	 
                   	int index162_40 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_40);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 39 : 
                   	int LA162_41 = input.LA(1);

                   	 
                   	int index162_41 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_41);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 40 : 
                   	int LA162_42 = input.LA(1);

                   	 
                   	int index162_42 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_42);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 41 : 
                   	int LA162_43 = input.LA(1);

                   	 
                   	int index162_43 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_43);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 42 : 
                   	int LA162_44 = input.LA(1);

                   	 
                   	int index162_44 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_44);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 43 : 
                   	int LA162_45 = input.LA(1);

                   	 
                   	int index162_45 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_45);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 44 : 
                   	int LA162_46 = input.LA(1);

                   	 
                   	int index162_46 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_46);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 45 : 
                   	int LA162_47 = input.LA(1);

                   	 
                   	int index162_47 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_47);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 46 : 
                   	int LA162_48 = input.LA(1);

                   	 
                   	int index162_48 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_48);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 47 : 
                   	int LA162_49 = input.LA(1);

                   	 
                   	int index162_49 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_49);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 48 : 
                   	int LA162_50 = input.LA(1);

                   	 
                   	int index162_50 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_50);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 49 : 
                   	int LA162_51 = input.LA(1);

                   	 
                   	int index162_51 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_51);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 50 : 
                   	int LA162_52 = input.LA(1);

                   	 
                   	int index162_52 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred247_cs()) ) { s = 1; }

                   	else if ( (true) ) { s = 53; }

                   	 
                   	input.Seek(index162_52);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae162 =
            new NoViableAltException(dfa.Description, 162, _s, input);
        dfa.Error(nvae162);
        throw nvae162;
    }
    const string DFA164_eotS =
        "\x34\uffff";
    const string DFA164_eofS =
        "\x01\x01\x33\uffff";
    const string DFA164_minS =
        "\x01\x1e\x2d\uffff\x01\x00\x05\uffff";
    const string DFA164_maxS =
        "\x01\u00e2\x2d\uffff\x01\x00\x05\uffff";
    const string DFA164_acceptS =
        "\x01\uffff\x01\x02\x31\uffff\x01\x01";
    const string DFA164_specialS =
        "\x2e\uffff\x01\x00\x05\uffff}>";
    static readonly string[] DFA164_transitionS = {
            "\x0a\x01\x02\uffff\x01\x01\x04\uffff\x01\x01\x04\uffff\x02"+
            "\x01\x24\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x01\x01\x01"+
            "\uffff\x0b\x01\x01\uffff\x0e\x01\x01\uffff\x05\x01\x01\x2e\x0f"+
            "\x01\x0a\uffff\x05\x01\x0f\uffff\x0d\x01\x0b\uffff\x01\x01\x01"+
            "\uffff\x02\x01\x05\uffff\x01\x01\x10\uffff\x02\x01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA164_eot = DFA.UnpackEncodedString(DFA164_eotS);
    static readonly short[] DFA164_eof = DFA.UnpackEncodedString(DFA164_eofS);
    static readonly char[] DFA164_min = DFA.UnpackEncodedStringToUnsignedChars(DFA164_minS);
    static readonly char[] DFA164_max = DFA.UnpackEncodedStringToUnsignedChars(DFA164_maxS);
    static readonly short[] DFA164_accept = DFA.UnpackEncodedString(DFA164_acceptS);
    static readonly short[] DFA164_special = DFA.UnpackEncodedString(DFA164_specialS);
    static readonly short[][] DFA164_transition = DFA.UnpackEncodedStringArray(DFA164_transitionS);

    protected class DFA164 : DFA
    {
        public DFA164(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;

        }

        override public string Description
        {
            get { return "()* loopback of 956:22: ( '&' equality_expression )*"; }
        }

    }


    protected internal int DFA164_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA164_46 = input.LA(1);

                   	 
                   	int index164_46 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred252_cs()) ) { s = 51; }

                   	else if ( (true) ) { s = 1; }

                   	 
                   	input.Seek(index164_46);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae164 =
            new NoViableAltException(dfa.Description, 164, _s, input);
        dfa.Error(nvae164);
        throw nvae164;
    }
    const string DFA194_eotS =
        "\x1f\uffff";
    const string DFA194_eofS =
        "\x01\x03\x1e\uffff";
    const string DFA194_minS =
        "\x01\x1e\x02\x00\x01\uffff\x05\x00\x16\uffff";
    const string DFA194_maxS =
        "\x01\u00e2\x02\x00\x01\uffff\x05\x00\x16\uffff";
    const string DFA194_acceptS =
        "\x03\uffff\x01\x02\x05\uffff\x01\x01\x15\uffff";
    const string DFA194_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\uffff\x01\x02\x01\x03\x01\x04\x01"+
        "\x05\x01\x06\x16\uffff}>";
    static readonly string[] DFA194_transitionS = {
            "\x0a\x09\x02\uffff\x01\x09\x04\uffff\x01\x09\x2a\uffff\x02"+
            "\x09\x03\uffff\x01\x09\x05\uffff\x07\x09\x01\uffff\x03\x09\x02"+
            "\uffff\x09\x09\x01\uffff\x06\x09\x02\uffff\x0d\x09\x1e\uffff"+
            "\x01\x04\x01\x09\x01\x07\x02\x09\x01\x05\x01\x08\x02\x09\x01"+
            "\x01\x01\x02\x01\x09\x01\x06\x0b\uffff\x01\x09\x01\uffff\x02"+
            "\x09\x05\uffff\x01\x09\x10\uffff\x02\x09",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA194_eot = DFA.UnpackEncodedString(DFA194_eotS);
    static readonly short[] DFA194_eof = DFA.UnpackEncodedString(DFA194_eofS);
    static readonly char[] DFA194_min = DFA.UnpackEncodedStringToUnsignedChars(DFA194_minS);
    static readonly char[] DFA194_max = DFA.UnpackEncodedStringToUnsignedChars(DFA194_maxS);
    static readonly short[] DFA194_accept = DFA.UnpackEncodedString(DFA194_acceptS);
    static readonly short[] DFA194_special = DFA.UnpackEncodedString(DFA194_specialS);
    static readonly short[][] DFA194_transition = DFA.UnpackEncodedStringArray(DFA194_transitionS);

    protected class DFA194 : DFA
    {
        public DFA194(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 194;
            this.eot = DFA194_eot;
            this.eof = DFA194_eof;
            this.min = DFA194_min;
            this.max = DFA194_max;
            this.accept = DFA194_accept;
            this.special = DFA194_special;
            this.transition = DFA194_transition;

        }

        override public string Description
        {
            get { return "()+ loopback of 1110:2: ( ordering )+"; }
        }

    }


    protected internal int DFA194_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA194_1 = input.LA(1);

                   	 
                   	int index194_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred299_cs()) ) { s = 9; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index194_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA194_2 = input.LA(1);

                   	 
                   	int index194_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred299_cs()) ) { s = 9; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index194_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA194_4 = input.LA(1);

                   	 
                   	int index194_4 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred299_cs()) ) { s = 9; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index194_4);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA194_5 = input.LA(1);

                   	 
                   	int index194_5 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred299_cs()) ) { s = 9; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index194_5);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA194_6 = input.LA(1);

                   	 
                   	int index194_6 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred299_cs()) ) { s = 9; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index194_6);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA194_7 = input.LA(1);

                   	 
                   	int index194_7 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred299_cs()) ) { s = 9; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index194_7);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA194_8 = input.LA(1);

                   	 
                   	int index194_8 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred299_cs()) ) { s = 9; }

                   	else if ( (true) ) { s = 3; }

                   	 
                   	input.Seek(index194_8);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae194 =
            new NoViableAltException(dfa.Description, 194, _s, input);
        dfa.Error(nvae194);
        throw nvae194;
    }
    const string DFA209_eotS =
        "\x0e\uffff";
    const string DFA209_eofS =
        "\x0e\uffff";
    const string DFA209_minS =
        "\x01\x1e\x06\x00\x07\uffff";
    const string DFA209_maxS =
        "\x01\u00e2\x06\x00\x07\uffff";
    const string DFA209_acceptS =
        "\x07\uffff\x01\x07\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01"+
        "\x06";
    const string DFA209_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x07"+
        "\uffff}>";
    static readonly string[] DFA209_transitionS = {
            "\x01\x01\x10\uffff\x01\x02\x2f\uffff\x01\x02\x05\uffff\x07"+
            "\x02\x01\uffff\x01\x02\x03\uffff\x01\x04\x09\x03\x09\uffff\x06"+
            "\x03\x01\x07\x24\uffff\x0d\x02\x01\uffff\x01\x05\x03\uffff\x01"+
            "\x06\x05\uffff\x01\x02\x01\uffff\x02\x02\x05\uffff\x01\x02\x10"+
            "\uffff\x02\x02",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA209_eot = DFA.UnpackEncodedString(DFA209_eotS);
    static readonly short[] DFA209_eof = DFA.UnpackEncodedString(DFA209_eofS);
    static readonly char[] DFA209_min = DFA.UnpackEncodedStringToUnsignedChars(DFA209_minS);
    static readonly char[] DFA209_max = DFA.UnpackEncodedStringToUnsignedChars(DFA209_maxS);
    static readonly short[] DFA209_accept = DFA.UnpackEncodedString(DFA209_acceptS);
    static readonly short[] DFA209_special = DFA.UnpackEncodedString(DFA209_specialS);
    static readonly short[][] DFA209_transition = DFA.UnpackEncodedStringArray(DFA209_transitionS);

    protected class DFA209 : DFA
    {
        public DFA209(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 209;
            this.eot = DFA209_eot;
            this.eof = DFA209_eof;
            this.min = DFA209_min;
            this.max = DFA209_max;
            this.accept = DFA209_accept;
            this.special = DFA209_special;
            this.transition = DFA209_transition;

        }

        override public string Description
        {
            get { return "1184:1: type_parameter_constraint_list : ( ( primary_constraint ',' secondary_constraint_list ',' constructor_constraint ) | ( primary_constraint ',' secondary_constraint_list ) | ( primary_constraint ',' constructor_constraint ) | ( secondary_constraint_list ',' constructor_constraint ) | primary_constraint | secondary_constraint_list | constructor_constraint );"; }
        }

    }


    protected internal int DFA209_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA209_1 = input.LA(1);

                   	 
                   	int index209_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred323_cs()) ) { s = 8; }

                   	else if ( (synpred324_cs()) ) { s = 9; }

                   	else if ( (synpred325_cs()) ) { s = 10; }

                   	else if ( (synpred326_cs()) ) { s = 11; }

                   	else if ( (synpred327_cs()) ) { s = 12; }

                   	else if ( (synpred328_cs()) ) { s = 13; }

                   	 
                   	input.Seek(index209_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA209_2 = input.LA(1);

                   	 
                   	int index209_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred323_cs()) ) { s = 8; }

                   	else if ( (synpred324_cs()) ) { s = 9; }

                   	else if ( (synpred325_cs()) ) { s = 10; }

                   	else if ( (synpred326_cs()) ) { s = 11; }

                   	else if ( (synpred327_cs()) ) { s = 12; }

                   	else if ( (synpred328_cs()) ) { s = 13; }

                   	 
                   	input.Seek(index209_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA209_3 = input.LA(1);

                   	 
                   	int index209_3 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred323_cs()) ) { s = 8; }

                   	else if ( (synpred324_cs()) ) { s = 9; }

                   	else if ( (synpred325_cs()) ) { s = 10; }

                   	else if ( (synpred327_cs()) ) { s = 12; }

                   	 
                   	input.Seek(index209_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA209_4 = input.LA(1);

                   	 
                   	int index209_4 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred323_cs()) ) { s = 8; }

                   	else if ( (synpred324_cs()) ) { s = 9; }

                   	else if ( (synpred325_cs()) ) { s = 10; }

                   	else if ( (synpred327_cs()) ) { s = 12; }

                   	 
                   	input.Seek(index209_4);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA209_5 = input.LA(1);

                   	 
                   	int index209_5 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred323_cs()) ) { s = 8; }

                   	else if ( (synpred324_cs()) ) { s = 9; }

                   	else if ( (synpred325_cs()) ) { s = 10; }

                   	else if ( (synpred327_cs()) ) { s = 12; }

                   	 
                   	input.Seek(index209_5);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA209_6 = input.LA(1);

                   	 
                   	int index209_6 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred323_cs()) ) { s = 8; }

                   	else if ( (synpred324_cs()) ) { s = 9; }

                   	else if ( (synpred325_cs()) ) { s = 10; }

                   	else if ( (synpred327_cs()) ) { s = 12; }

                   	 
                   	input.Seek(index209_6);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae209 =
            new NoViableAltException(dfa.Description, 209, _s, input);
        dfa.Error(nvae209);
        throw nvae209;
    }
    const string DFA215_eotS =
        "\x20\uffff";
    const string DFA215_eofS =
        "\x20\uffff";
    const string DFA215_minS =
        "\x01\x1e\x02\x00\x01\uffff\x05\x00\x01\uffff\x07\x00\x01\uffff"+
        "\x02\x00\x0c\uffff";
    const string DFA215_maxS =
        "\x01\u00e2\x02\x00\x01\uffff\x05\x00\x01\uffff\x07\x00\x01\uffff"+
        "\x02\x00\x0c\uffff";
    const string DFA215_acceptS =
        "\x03\uffff\x01\x01\x05\uffff\x01\x02\x07\uffff\x01\x09\x02\uffff"+
        "\x01\x0b\x03\uffff\x01\x03\x01\x04\x01\x05\x01\x06\x01\x07\x01\x08"+
        "\x01\x0a\x01\x0c";
    const string DFA215_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\uffff\x01\x02\x01\x03\x01\x04\x01"+
        "\x05\x01\x06\x01\uffff\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01"+
        "\x0c\x01\x0d\x01\uffff\x01\x0e\x01\x0f\x0c\uffff}>";
    static readonly string[] DFA215_transitionS = {
            "\x01\x05\x0e\uffff\x01\x14\x01\uffff\x01\x0c\x2e\uffff\x01"+
            "\x0a\x01\x0c\x01\uffff\x01\x01\x03\uffff\x03\x0c\x01\x06\x03"+
            "\x0c\x01\uffff\x01\x0c\x03\uffff\x01\x08\x09\x07\x03\uffff\x01"+
            "\x11\x05\uffff\x06\x07\x01\x10\x05\uffff\x01\x14\x19\uffff\x01"+
            "\x02\x03\x0e\x01\x04\x0d\x0c\x01\x0b\x01\x13\x02\x0f\x01\x0d"+
            "\x01\x14\x01\x03\x02\x09\x02\x12\x01\x0c\x01\uffff\x02\x0c\x03"+
            "\uffff\x01\x14\x01\uffff\x01\x0c\x10\uffff\x02\x0c",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA215_eot = DFA.UnpackEncodedString(DFA215_eotS);
    static readonly short[] DFA215_eof = DFA.UnpackEncodedString(DFA215_eofS);
    static readonly char[] DFA215_min = DFA.UnpackEncodedStringToUnsignedChars(DFA215_minS);
    static readonly char[] DFA215_max = DFA.UnpackEncodedStringToUnsignedChars(DFA215_maxS);
    static readonly short[] DFA215_accept = DFA.UnpackEncodedString(DFA215_acceptS);
    static readonly short[] DFA215_special = DFA.UnpackEncodedString(DFA215_specialS);
    static readonly short[][] DFA215_transition = DFA.UnpackEncodedStringArray(DFA215_transitionS);

    protected class DFA215 : DFA
    {
        public DFA215(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 215;
            this.eot = DFA215_eot;
            this.eof = DFA215_eof;
            this.min = DFA215_min;
            this.max = DFA215_max;
            this.accept = DFA215_accept;
            this.special = DFA215_special;
            this.transition = DFA215_transition;

        }

        override public string Description
        {
            get { return "1229:1: class_member_declaration : ( constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | destructor_declaration | static_constructor_declaration | type_declaration | class_declaration );"; }
        }

    }


    protected internal int DFA215_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA215_1 = input.LA(1);

                   	 
                   	int index215_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred335_cs()) ) { s = 3; }

                   	else if ( (synpred336_cs()) ) { s = 9; }

                   	else if ( (synpred337_cs()) ) { s = 24; }

                   	else if ( (synpred338_cs()) ) { s = 25; }

                   	else if ( (synpred339_cs()) ) { s = 26; }

                   	else if ( (synpred340_cs()) ) { s = 27; }

                   	else if ( (synpred341_cs()) ) { s = 28; }

                   	else if ( (synpred342_cs()) ) { s = 29; }

                   	else if ( (synpred343_cs()) ) { s = 17; }

                   	else if ( (synpred344_cs()) ) { s = 30; }

                   	else if ( (synpred345_cs()) ) { s = 20; }

                   	else if ( (true) ) { s = 31; }

                   	 
                   	input.Seek(index215_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA215_2 = input.LA(1);

                   	 
                   	int index215_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred335_cs()) ) { s = 3; }

                   	else if ( (synpred336_cs()) ) { s = 9; }

                   	else if ( (synpred337_cs()) ) { s = 24; }

                   	else if ( (synpred338_cs()) ) { s = 25; }

                   	else if ( (synpred339_cs()) ) { s = 26; }

                   	else if ( (synpred340_cs()) ) { s = 27; }

                   	else if ( (synpred341_cs()) ) { s = 28; }

                   	else if ( (synpred342_cs()) ) { s = 29; }

                   	else if ( (synpred345_cs()) ) { s = 20; }

                   	else if ( (true) ) { s = 31; }

                   	 
                   	input.Seek(index215_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA215_4 = input.LA(1);

                   	 
                   	int index215_4 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred336_cs()) ) { s = 9; }

                   	else if ( (synpred337_cs()) ) { s = 24; }

                   	else if ( (synpred338_cs()) ) { s = 25; }

                   	else if ( (synpred339_cs()) ) { s = 26; }

                   	else if ( (synpred340_cs()) ) { s = 27; }

                   	else if ( (synpred341_cs()) ) { s = 28; }

                   	else if ( (synpred342_cs()) ) { s = 29; }

                   	else if ( (synpred343_cs()) ) { s = 17; }

                   	else if ( (synpred344_cs()) ) { s = 30; }

                   	else if ( (synpred345_cs()) ) { s = 20; }

                   	else if ( (true) ) { s = 31; }

                   	 
                   	input.Seek(index215_4);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA215_5 = input.LA(1);

                   	 
                   	int index215_5 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred336_cs()) ) { s = 9; }

                   	else if ( (synpred337_cs()) ) { s = 24; }

                   	else if ( (synpred338_cs()) ) { s = 25; }

                   	else if ( (synpred340_cs()) ) { s = 27; }

                   	else if ( (synpred342_cs()) ) { s = 29; }

                   	 
                   	input.Seek(index215_5);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA215_6 = input.LA(1);

                   	 
                   	int index215_6 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred336_cs()) ) { s = 9; }

                   	else if ( (synpred337_cs()) ) { s = 24; }

                   	else if ( (synpred338_cs()) ) { s = 25; }

                   	else if ( (synpred339_cs()) ) { s = 26; }

                   	else if ( (synpred340_cs()) ) { s = 27; }

                   	else if ( (synpred342_cs()) ) { s = 29; }

                   	 
                   	input.Seek(index215_6);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA215_7 = input.LA(1);

                   	 
                   	int index215_7 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred336_cs()) ) { s = 9; }

                   	else if ( (synpred337_cs()) ) { s = 24; }

                   	else if ( (synpred338_cs()) ) { s = 25; }

                   	else if ( (synpred340_cs()) ) { s = 27; }

                   	 
                   	input.Seek(index215_7);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA215_8 = input.LA(1);

                   	 
                   	int index215_8 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred336_cs()) ) { s = 9; }

                   	else if ( (synpred337_cs()) ) { s = 24; }

                   	else if ( (synpred338_cs()) ) { s = 25; }

                   	else if ( (synpred340_cs()) ) { s = 27; }

                   	 
                   	input.Seek(index215_8);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA215_10 = input.LA(1);

                   	 
                   	int index215_10 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred337_cs()) ) { s = 24; }

                   	else if ( (synpred338_cs()) ) { s = 25; }

                   	else if ( (synpred339_cs()) ) { s = 26; }

                   	else if ( (synpred340_cs()) ) { s = 27; }

                   	else if ( (synpred341_cs()) ) { s = 28; }

                   	else if ( (synpred342_cs()) ) { s = 29; }

                   	else if ( (synpred343_cs()) ) { s = 17; }

                   	else if ( (synpred344_cs()) ) { s = 30; }

                   	 
                   	input.Seek(index215_10);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA215_11 = input.LA(1);

                   	 
                   	int index215_11 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred337_cs()) ) { s = 24; }

                   	else if ( (synpred345_cs()) ) { s = 20; }

                   	else if ( (true) ) { s = 31; }

                   	 
                   	input.Seek(index215_11);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 9 : 
                   	int LA215_12 = input.LA(1);

                   	 
                   	int index215_12 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred336_cs()) ) { s = 9; }

                   	else if ( (synpred337_cs()) ) { s = 24; }

                   	else if ( (synpred338_cs()) ) { s = 25; }

                   	else if ( (synpred340_cs()) ) { s = 27; }

                   	else if ( (synpred342_cs()) ) { s = 29; }

                   	 
                   	input.Seek(index215_12);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 10 : 
                   	int LA215_13 = input.LA(1);

                   	 
                   	int index215_13 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred336_cs()) ) { s = 9; }

                   	else if ( (synpred337_cs()) ) { s = 24; }

                   	else if ( (synpred338_cs()) ) { s = 25; }

                   	else if ( (synpred339_cs()) ) { s = 26; }

                   	else if ( (synpred341_cs()) ) { s = 28; }

                   	else if ( (synpred344_cs()) ) { s = 30; }

                   	else if ( (synpred345_cs()) ) { s = 20; }

                   	else if ( (true) ) { s = 31; }

                   	 
                   	input.Seek(index215_13);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 11 : 
                   	int LA215_14 = input.LA(1);

                   	 
                   	int index215_14 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred335_cs()) ) { s = 3; }

                   	else if ( (synpred336_cs()) ) { s = 9; }

                   	else if ( (synpred337_cs()) ) { s = 24; }

                   	else if ( (synpred338_cs()) ) { s = 25; }

                   	else if ( (synpred339_cs()) ) { s = 26; }

                   	else if ( (synpred340_cs()) ) { s = 27; }

                   	else if ( (synpred342_cs()) ) { s = 29; }

                   	else if ( (synpred345_cs()) ) { s = 20; }

                   	else if ( (true) ) { s = 31; }

                   	 
                   	input.Seek(index215_14);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 12 : 
                   	int LA215_15 = input.LA(1);

                   	 
                   	int index215_15 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred337_cs()) ) { s = 24; }

                   	else if ( (synpred338_cs()) ) { s = 25; }

                   	else if ( (synpred339_cs()) ) { s = 26; }

                   	else if ( (synpred340_cs()) ) { s = 27; }

                   	else if ( (synpred345_cs()) ) { s = 20; }

                   	else if ( (true) ) { s = 31; }

                   	 
                   	input.Seek(index215_15);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 13 : 
                   	int LA215_16 = input.LA(1);

                   	 
                   	int index215_16 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred335_cs()) ) { s = 3; }

                   	else if ( (synpred336_cs()) ) { s = 9; }

                   	else if ( (synpred337_cs()) ) { s = 24; }

                   	else if ( (synpred338_cs()) ) { s = 25; }

                   	else if ( (synpred339_cs()) ) { s = 26; }

                   	else if ( (synpred340_cs()) ) { s = 27; }

                   	else if ( (synpred345_cs()) ) { s = 20; }

                   	else if ( (true) ) { s = 31; }

                   	 
                   	input.Seek(index215_16);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 14 : 
                   	int LA215_18 = input.LA(1);

                   	 
                   	int index215_18 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred337_cs()) ) { s = 24; }

                   	else if ( (synpred338_cs()) ) { s = 25; }

                   	else if ( (synpred339_cs()) ) { s = 26; }

                   	else if ( (synpred340_cs()) ) { s = 27; }

                   	 
                   	input.Seek(index215_18);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 15 : 
                   	int LA215_19 = input.LA(1);

                   	 
                   	int index215_19 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred345_cs()) ) { s = 20; }

                   	else if ( (true) ) { s = 31; }

                   	 
                   	input.Seek(index215_19);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae215 =
            new NoViableAltException(dfa.Description, 215, _s, input);
        dfa.Error(nvae215);
        throw nvae215;
    }
    const string DFA236_eotS =
        "\x0a\uffff";
    const string DFA236_eofS =
        "\x0a\uffff";
    const string DFA236_minS =
        "\x01\x1e\x01\x00\x01\uffff\x04\x00\x01\uffff\x01\x00\x01\uffff";
    const string DFA236_maxS =
        "\x01\u00e2\x01\x00\x01\uffff\x04\x00\x01\uffff\x01\x00\x01\uffff";
    const string DFA236_acceptS =
        "\x02\uffff\x01\x01\x04\uffff\x01\x02\x01\uffff\x01\x03";
    const string DFA236_specialS =
        "\x01\uffff\x01\x00\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x01"+
        "\uffff\x01\x05\x01\uffff}>";
    static readonly string[] DFA236_transitionS = {
            "\x01\x03\x10\uffff\x01\x08\x2a\uffff\x01\x02\x04\uffff\x01"+
            "\x08\x01\uffff\x01\x01\x03\uffff\x07\x08\x01\uffff\x01\x08\x03"+
            "\uffff\x01\x06\x09\x05\x07\uffff\x02\x02\x06\x05\x25\uffff\x0d"+
            "\x08\x0b\uffff\x01\x04\x01\x07\x02\x08\x05\uffff\x01\x08\x10"+
            "\uffff\x02\x08",
            "\x01\uffff",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "\x01\uffff",
            ""
    };

    static readonly short[] DFA236_eot = DFA.UnpackEncodedString(DFA236_eotS);
    static readonly short[] DFA236_eof = DFA.UnpackEncodedString(DFA236_eofS);
    static readonly char[] DFA236_min = DFA.UnpackEncodedStringToUnsignedChars(DFA236_minS);
    static readonly char[] DFA236_max = DFA.UnpackEncodedStringToUnsignedChars(DFA236_maxS);
    static readonly short[] DFA236_accept = DFA.UnpackEncodedString(DFA236_acceptS);
    static readonly short[] DFA236_special = DFA.UnpackEncodedString(DFA236_specialS);
    static readonly short[][] DFA236_transition = DFA.UnpackEncodedStringArray(DFA236_transitionS);

    protected class DFA236 : DFA
    {
        public DFA236(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 236;
            this.eot = DFA236_eot;
            this.eof = DFA236_eof;
            this.min = DFA236_min;
            this.max = DFA236_max;
            this.accept = DFA236_accept;
            this.special = DFA236_special;
            this.transition = DFA236_transition;

        }

        override public string Description
        {
            get { return "1338:1: formal_parameter : ( fixed_parameter | parameter_array | '__arglist' );"; }
        }

    }


    protected internal int DFA236_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA236_1 = input.LA(1);

                   	 
                   	int index236_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred389_cs()) ) { s = 2; }

                   	else if ( (synpred390_cs()) ) { s = 7; }

                   	 
                   	input.Seek(index236_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA236_3 = input.LA(1);

                   	 
                   	int index236_3 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred389_cs()) ) { s = 2; }

                   	else if ( (synpred390_cs()) ) { s = 7; }

                   	 
                   	input.Seek(index236_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA236_4 = input.LA(1);

                   	 
                   	int index236_4 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred389_cs()) ) { s = 2; }

                   	else if ( (synpred390_cs()) ) { s = 7; }

                   	else if ( (true) ) { s = 9; }

                   	 
                   	input.Seek(index236_4);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA236_5 = input.LA(1);

                   	 
                   	int index236_5 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred389_cs()) ) { s = 2; }

                   	else if ( (synpred390_cs()) ) { s = 7; }

                   	 
                   	input.Seek(index236_5);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA236_6 = input.LA(1);

                   	 
                   	int index236_6 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred389_cs()) ) { s = 2; }

                   	else if ( (synpred390_cs()) ) { s = 7; }

                   	 
                   	input.Seek(index236_6);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA236_8 = input.LA(1);

                   	 
                   	int index236_8 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred389_cs()) ) { s = 2; }

                   	else if ( (synpred390_cs()) ) { s = 7; }

                   	 
                   	input.Seek(index236_8);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae236 =
            new NoViableAltException(dfa.Description, 236, _s, input);
        dfa.Error(nvae236);
        throw nvae236;
    }
    const string DFA271_eotS =
        "\x12\uffff";
    const string DFA271_eofS =
        "\x12\uffff";
    const string DFA271_minS =
        "\x01\x2a\x09\uffff\x01\x2b\x07\uffff";
    const string DFA271_maxS =
        "\x01\u009c\x09\uffff\x01\x6e\x07\uffff";
    const string DFA271_acceptS =
        "\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01"+
        "\x07\x01\x08\x01\x09\x01\uffff\x01\x0b\x01\x0c\x01\x0e\x01\x0f\x01"+
        "\x10\x01\x0a\x01\x0d";
    const string DFA271_specialS =
        "\x12\uffff}>";
    static readonly string[] DFA271_transitionS = {
            "\x01\x02\x01\x0a\x43\uffff\x01\x03\x0b\uffff\x01\x0d\x01\x01"+
            "\x04\uffff\x01\x06\x10\uffff\x01\x04\x01\x05\x01\x09\x01\x0f"+
            "\x01\x0e\x02\uffff\x01\x0b\x01\x0c\x01\x08\x01\x07",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\x10\x42\uffff\x01\x11",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA271_eot = DFA.UnpackEncodedString(DFA271_eotS);
    static readonly short[] DFA271_eof = DFA.UnpackEncodedString(DFA271_eofS);
    static readonly char[] DFA271_min = DFA.UnpackEncodedStringToUnsignedChars(DFA271_minS);
    static readonly char[] DFA271_max = DFA.UnpackEncodedStringToUnsignedChars(DFA271_maxS);
    static readonly short[] DFA271_accept = DFA.UnpackEncodedString(DFA271_acceptS);
    static readonly short[] DFA271_special = DFA.UnpackEncodedString(DFA271_specialS);
    static readonly short[][] DFA271_transition = DFA.UnpackEncodedStringArray(DFA271_transitionS);

    protected class DFA271 : DFA
    {
        public DFA271(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 271;
            this.eot = DFA271_eot;
            this.eof = DFA271_eof;
            this.min = DFA271_min;
            this.max = DFA271_max;
            this.accept = DFA271_accept;
            this.special = DFA271_special;
            this.transition = DFA271_transition;

        }

        override public string Description
        {
            get { return "1509:1: overloadable_binary_operator : ( '+' | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );"; }
        }

    }

    const string DFA283_eotS =
        "\x0d\uffff";
    const string DFA283_eofS =
        "\x0d\uffff";
    const string DFA283_minS =
        "\x01\x5e\x03\x1e\x09\uffff";
    const string DFA283_maxS =
        "\x01\u00c0\x03\u00e2\x09\uffff";
    const string DFA283_acceptS =
        "\x04\uffff\x01\x01\x01\x02\x01\x07\x01\x03\x01\x04\x01\x08\x01"+
        "\x05\x01\x06\x01\x09";
    const string DFA283_specialS =
        "\x0d\uffff}>";
    static readonly string[] DFA283_transitionS = {
            "\x01\x01\x4f\uffff\x01\x02\x11\uffff\x01\x03",
            "\x01\x06\x10\uffff\x01\x06\x04\uffff\x01\x06\x2a\uffff\x01"+
            "\x06\x05\uffff\x07\x06\x01\uffff\x01\x06\x40\uffff\x01\x04\x0d"+
            "\x06\x04\uffff\x01\x05\x06\uffff\x01\x06\x01\uffff\x02\x06\x05"+
            "\uffff\x01\x06\x10\uffff\x02\x06",
            "\x01\x09\x10\uffff\x01\x09\x04\uffff\x01\x09\x29\uffff\x01"+
            "\x07\x01\x09\x05\uffff\x07\x09\x01\uffff\x01\x09\x41\uffff\x0d"+
            "\x09\x04\uffff\x01\x08\x06\uffff\x01\x09\x01\uffff\x02\x09\x05"+
            "\uffff\x01\x09\x10\uffff\x02\x09",
            "\x01\x0c\x10\uffff\x01\x0c\x04\uffff\x01\x0c\x29\uffff\x01"+
            "\x0a\x01\x0c\x05\uffff\x07\x0c\x01\uffff\x01\x0c\x40\uffff\x01"+
            "\x0b\x0d\x0c\x0b\uffff\x01\x0c\x01\uffff\x02\x0c\x05\uffff\x01"+
            "\x0c\x10\uffff\x02\x0c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA283_eot = DFA.UnpackEncodedString(DFA283_eotS);
    static readonly short[] DFA283_eof = DFA.UnpackEncodedString(DFA283_eofS);
    static readonly char[] DFA283_min = DFA.UnpackEncodedStringToUnsignedChars(DFA283_minS);
    static readonly char[] DFA283_max = DFA.UnpackEncodedStringToUnsignedChars(DFA283_maxS);
    static readonly short[] DFA283_accept = DFA.UnpackEncodedString(DFA283_acceptS);
    static readonly short[] DFA283_special = DFA.UnpackEncodedString(DFA283_specialS);
    static readonly short[][] DFA283_transition = DFA.UnpackEncodedStringArray(DFA283_transitionS);

    protected class DFA283 : DFA
    {
        public DFA283(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 283;
            this.eot = DFA283_eot;
            this.eof = DFA283_eof;
            this.min = DFA283_min;
            this.max = DFA283_max;
            this.accept = DFA283_accept;
            this.special = DFA283_special;
            this.transition = DFA283_transition;

        }

        override public string Description
        {
            get { return "1559:1: static_constructor_modifiers : ( 'extern' 'unsafe' 'static' | 'extern' 'static' ( 'unsafe' )? | 'unsafe' 'extern' 'static' | 'unsafe' 'static' ( 'extern' )? | 'static' 'extern' ( 'unsafe' )? | 'static' 'unsafe' ( 'extern' )? | 'extern' | 'unsafe' | 'static' );"; }
        }

    }

    const string DFA299_eotS =
        "\x1e\uffff";
    const string DFA299_eofS =
        "\x1e\uffff";
    const string DFA299_minS =
        "\x01\x1e\x02\x00\x01\uffff\x05\x00\x01\uffff\x08\x00\x0c\uffff";
    const string DFA299_maxS =
        "\x01\u00e2\x02\x00\x01\uffff\x05\x00\x01\uffff\x08\x00\x0c\uffff";
    const string DFA299_acceptS =
        "\x03\uffff\x01\x01\x05\uffff\x01\x02\x08\uffff\x01\x0a\x04\uffff"+
        "\x01\x03\x01\x04\x01\x05\x01\x06\x01\x07\x01\x08\x01\x09";
    const string DFA299_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\uffff\x01\x02\x01\x03\x01\x04\x01"+
        "\x05\x01\x06\x01\uffff\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01"+
        "\x0c\x01\x0d\x01\x0e\x0c\uffff}>";
    static readonly string[] DFA299_transitionS = {
            "\x01\x05\x0e\uffff\x01\x12\x01\uffff\x01\x0c\x2e\uffff\x01"+
            "\x0a\x01\x0c\x01\uffff\x01\x01\x03\uffff\x03\x0c\x01\x06\x03"+
            "\x0c\x01\uffff\x01\x0c\x03\uffff\x01\x08\x09\x07\x09\uffff\x06"+
            "\x07\x01\x10\x05\uffff\x01\x12\x19\uffff\x01\x02\x03\x0e\x01"+
            "\x04\x0d\x0c\x01\x0b\x01\x12\x02\x0f\x01\x0d\x01\x12\x01\x03"+
            "\x02\x09\x02\x11\x01\x0c\x01\uffff\x02\x0c\x03\uffff\x01\x12"+
            "\x01\uffff\x01\x0c\x10\uffff\x02\x0c",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA299_eot = DFA.UnpackEncodedString(DFA299_eotS);
    static readonly short[] DFA299_eof = DFA.UnpackEncodedString(DFA299_eofS);
    static readonly char[] DFA299_min = DFA.UnpackEncodedStringToUnsignedChars(DFA299_minS);
    static readonly char[] DFA299_max = DFA.UnpackEncodedStringToUnsignedChars(DFA299_maxS);
    static readonly short[] DFA299_accept = DFA.UnpackEncodedString(DFA299_acceptS);
    static readonly short[] DFA299_special = DFA.UnpackEncodedString(DFA299_specialS);
    static readonly short[][] DFA299_transition = DFA.UnpackEncodedStringArray(DFA299_transitionS);

    protected class DFA299 : DFA
    {
        public DFA299(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 299;
            this.eot = DFA299_eot;
            this.eof = DFA299_eof;
            this.min = DFA299_min;
            this.max = DFA299_max;
            this.accept = DFA299_accept;
            this.special = DFA299_special;
            this.transition = DFA299_transition;

        }

        override public string Description
        {
            get { return "1626:1: struct_member_declaration : ( constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | static_constructor_declaration | type_declaration );"; }
        }

    }


    protected internal int DFA299_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA299_1 = input.LA(1);

                   	 
                   	int index299_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred535_cs()) ) { s = 3; }

                   	else if ( (synpred536_cs()) ) { s = 9; }

                   	else if ( (synpred537_cs()) ) { s = 23; }

                   	else if ( (synpred538_cs()) ) { s = 24; }

                   	else if ( (synpred539_cs()) ) { s = 25; }

                   	else if ( (synpred540_cs()) ) { s = 26; }

                   	else if ( (synpred541_cs()) ) { s = 27; }

                   	else if ( (synpred542_cs()) ) { s = 28; }

                   	else if ( (synpred543_cs()) ) { s = 29; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index299_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA299_2 = input.LA(1);

                   	 
                   	int index299_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred535_cs()) ) { s = 3; }

                   	else if ( (synpred536_cs()) ) { s = 9; }

                   	else if ( (synpred537_cs()) ) { s = 23; }

                   	else if ( (synpred538_cs()) ) { s = 24; }

                   	else if ( (synpred539_cs()) ) { s = 25; }

                   	else if ( (synpred540_cs()) ) { s = 26; }

                   	else if ( (synpred541_cs()) ) { s = 27; }

                   	else if ( (synpred542_cs()) ) { s = 28; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index299_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA299_4 = input.LA(1);

                   	 
                   	int index299_4 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred536_cs()) ) { s = 9; }

                   	else if ( (synpred537_cs()) ) { s = 23; }

                   	else if ( (synpred538_cs()) ) { s = 24; }

                   	else if ( (synpred539_cs()) ) { s = 25; }

                   	else if ( (synpred540_cs()) ) { s = 26; }

                   	else if ( (synpred541_cs()) ) { s = 27; }

                   	else if ( (synpred542_cs()) ) { s = 28; }

                   	else if ( (synpred543_cs()) ) { s = 29; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index299_4);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA299_5 = input.LA(1);

                   	 
                   	int index299_5 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred536_cs()) ) { s = 9; }

                   	else if ( (synpred537_cs()) ) { s = 23; }

                   	else if ( (synpred538_cs()) ) { s = 24; }

                   	else if ( (synpred540_cs()) ) { s = 26; }

                   	else if ( (synpred542_cs()) ) { s = 28; }

                   	 
                   	input.Seek(index299_5);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA299_6 = input.LA(1);

                   	 
                   	int index299_6 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred536_cs()) ) { s = 9; }

                   	else if ( (synpred537_cs()) ) { s = 23; }

                   	else if ( (synpred538_cs()) ) { s = 24; }

                   	else if ( (synpred539_cs()) ) { s = 25; }

                   	else if ( (synpred540_cs()) ) { s = 26; }

                   	else if ( (synpred542_cs()) ) { s = 28; }

                   	 
                   	input.Seek(index299_6);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA299_7 = input.LA(1);

                   	 
                   	int index299_7 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred536_cs()) ) { s = 9; }

                   	else if ( (synpred537_cs()) ) { s = 23; }

                   	else if ( (synpred538_cs()) ) { s = 24; }

                   	else if ( (synpred540_cs()) ) { s = 26; }

                   	 
                   	input.Seek(index299_7);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA299_8 = input.LA(1);

                   	 
                   	int index299_8 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred536_cs()) ) { s = 9; }

                   	else if ( (synpred537_cs()) ) { s = 23; }

                   	else if ( (synpred538_cs()) ) { s = 24; }

                   	else if ( (synpred540_cs()) ) { s = 26; }

                   	 
                   	input.Seek(index299_8);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA299_10 = input.LA(1);

                   	 
                   	int index299_10 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred537_cs()) ) { s = 23; }

                   	else if ( (synpred538_cs()) ) { s = 24; }

                   	else if ( (synpred539_cs()) ) { s = 25; }

                   	else if ( (synpred540_cs()) ) { s = 26; }

                   	else if ( (synpred541_cs()) ) { s = 27; }

                   	else if ( (synpred542_cs()) ) { s = 28; }

                   	else if ( (synpred543_cs()) ) { s = 29; }

                   	 
                   	input.Seek(index299_10);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA299_11 = input.LA(1);

                   	 
                   	int index299_11 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred537_cs()) ) { s = 23; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index299_11);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 9 : 
                   	int LA299_12 = input.LA(1);

                   	 
                   	int index299_12 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred536_cs()) ) { s = 9; }

                   	else if ( (synpred537_cs()) ) { s = 23; }

                   	else if ( (synpred538_cs()) ) { s = 24; }

                   	else if ( (synpred540_cs()) ) { s = 26; }

                   	else if ( (synpred542_cs()) ) { s = 28; }

                   	 
                   	input.Seek(index299_12);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 10 : 
                   	int LA299_13 = input.LA(1);

                   	 
                   	int index299_13 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred536_cs()) ) { s = 9; }

                   	else if ( (synpred537_cs()) ) { s = 23; }

                   	else if ( (synpred538_cs()) ) { s = 24; }

                   	else if ( (synpred539_cs()) ) { s = 25; }

                   	else if ( (synpred541_cs()) ) { s = 27; }

                   	else if ( (synpred543_cs()) ) { s = 29; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index299_13);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 11 : 
                   	int LA299_14 = input.LA(1);

                   	 
                   	int index299_14 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred535_cs()) ) { s = 3; }

                   	else if ( (synpred536_cs()) ) { s = 9; }

                   	else if ( (synpred537_cs()) ) { s = 23; }

                   	else if ( (synpred538_cs()) ) { s = 24; }

                   	else if ( (synpred539_cs()) ) { s = 25; }

                   	else if ( (synpred540_cs()) ) { s = 26; }

                   	else if ( (synpred542_cs()) ) { s = 28; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index299_14);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 12 : 
                   	int LA299_15 = input.LA(1);

                   	 
                   	int index299_15 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred537_cs()) ) { s = 23; }

                   	else if ( (synpred538_cs()) ) { s = 24; }

                   	else if ( (synpred539_cs()) ) { s = 25; }

                   	else if ( (synpred540_cs()) ) { s = 26; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index299_15);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 13 : 
                   	int LA299_16 = input.LA(1);

                   	 
                   	int index299_16 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred535_cs()) ) { s = 3; }

                   	else if ( (synpred536_cs()) ) { s = 9; }

                   	else if ( (synpred537_cs()) ) { s = 23; }

                   	else if ( (synpred538_cs()) ) { s = 24; }

                   	else if ( (synpred539_cs()) ) { s = 25; }

                   	else if ( (synpred540_cs()) ) { s = 26; }

                   	else if ( (true) ) { s = 18; }

                   	 
                   	input.Seek(index299_16);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 14 : 
                   	int LA299_17 = input.LA(1);

                   	 
                   	int index299_17 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred537_cs()) ) { s = 23; }

                   	else if ( (synpred538_cs()) ) { s = 24; }

                   	else if ( (synpred539_cs()) ) { s = 25; }

                   	else if ( (synpred540_cs()) ) { s = 26; }

                   	 
                   	input.Seek(index299_17);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae299 =
            new NoViableAltException(dfa.Description, 299, _s, input);
        dfa.Error(nvae299);
        throw nvae299;
    }
    const string DFA310_eotS =
        "\x0c\uffff";
    const string DFA310_eofS =
        "\x0c\uffff";
    const string DFA310_minS =
        "\x01\x1e\x06\x00\x01\uffff\x01\x00\x03\uffff";
    const string DFA310_maxS =
        "\x01\u00e2\x06\x00\x01\uffff\x01\x00\x03\uffff";
    const string DFA310_acceptS =
        "\x07\uffff\x01\x02\x01\uffff\x01\x01\x01\x03\x01\x04";
    const string DFA310_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01"+
        "\uffff\x01\x06\x03\uffff}>";
    static readonly string[] DFA310_transitionS = {
            "\x01\x03\x10\uffff\x01\x08\x2e\uffff\x01\x07\x01\x08\x01\uffff"+
            "\x01\x01\x03\uffff\x03\x08\x01\x04\x03\x08\x01\uffff\x01\x08"+
            "\x03\uffff\x01\x06\x09\x05\x09\uffff\x06\x05\x01\x02\x1f\uffff"+
            "\x05\x07\x0d\x08\x02\uffff\x03\x07\x04\uffff\x02\x07\x01\x08"+
            "\x01\uffff\x02\x08\x05\uffff\x01\x08\x10\uffff\x02\x08",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "\x01\uffff",
            "",
            "",
            ""
    };

    static readonly short[] DFA310_eot = DFA.UnpackEncodedString(DFA310_eotS);
    static readonly short[] DFA310_eof = DFA.UnpackEncodedString(DFA310_eofS);
    static readonly char[] DFA310_min = DFA.UnpackEncodedStringToUnsignedChars(DFA310_minS);
    static readonly char[] DFA310_max = DFA.UnpackEncodedStringToUnsignedChars(DFA310_maxS);
    static readonly short[] DFA310_accept = DFA.UnpackEncodedString(DFA310_acceptS);
    static readonly short[] DFA310_special = DFA.UnpackEncodedString(DFA310_specialS);
    static readonly short[][] DFA310_transition = DFA.UnpackEncodedStringArray(DFA310_transitionS);

    protected class DFA310 : DFA
    {
        public DFA310(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 310;
            this.eot = DFA310_eot;
            this.eof = DFA310_eof;
            this.min = DFA310_min;
            this.max = DFA310_max;
            this.accept = DFA310_accept;
            this.special = DFA310_special;
            this.transition = DFA310_transition;

        }

        override public string Description
        {
            get { return "1674:1: interface_member_declaration : ( interface_property_declaration | interface_method_declaration | interface_event_declaration | interface_indexer_declaration );"; }
        }

    }


    protected internal int DFA310_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA310_1 = input.LA(1);

                   	 
                   	int index310_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred559_cs()) ) { s = 9; }

                   	else if ( (synpred560_cs()) ) { s = 7; }

                   	else if ( (synpred561_cs()) ) { s = 10; }

                   	else if ( (true) ) { s = 11; }

                   	 
                   	input.Seek(index310_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA310_2 = input.LA(1);

                   	 
                   	int index310_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred559_cs()) ) { s = 9; }

                   	else if ( (synpred560_cs()) ) { s = 7; }

                   	else if ( (synpred561_cs()) ) { s = 10; }

                   	else if ( (true) ) { s = 11; }

                   	 
                   	input.Seek(index310_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA310_3 = input.LA(1);

                   	 
                   	int index310_3 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred559_cs()) ) { s = 9; }

                   	else if ( (synpred560_cs()) ) { s = 7; }

                   	else if ( (true) ) { s = 11; }

                   	 
                   	input.Seek(index310_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA310_4 = input.LA(1);

                   	 
                   	int index310_4 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred559_cs()) ) { s = 9; }

                   	else if ( (synpred560_cs()) ) { s = 7; }

                   	else if ( (synpred561_cs()) ) { s = 10; }

                   	else if ( (true) ) { s = 11; }

                   	 
                   	input.Seek(index310_4);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA310_5 = input.LA(1);

                   	 
                   	int index310_5 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred559_cs()) ) { s = 9; }

                   	else if ( (synpred560_cs()) ) { s = 7; }

                   	else if ( (true) ) { s = 11; }

                   	 
                   	input.Seek(index310_5);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA310_6 = input.LA(1);

                   	 
                   	int index310_6 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred559_cs()) ) { s = 9; }

                   	else if ( (synpred560_cs()) ) { s = 7; }

                   	else if ( (true) ) { s = 11; }

                   	 
                   	input.Seek(index310_6);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA310_8 = input.LA(1);

                   	 
                   	int index310_8 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred559_cs()) ) { s = 9; }

                   	else if ( (synpred560_cs()) ) { s = 7; }

                   	else if ( (true) ) { s = 11; }

                   	 
                   	input.Seek(index310_8);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae310 =
            new NoViableAltException(dfa.Description, 310, _s, input);
        dfa.Error(nvae310);
        throw nvae310;
    }
    const string DFA338_eotS =
        "\x30\uffff";
    const string DFA338_eofS =
        "\x30\uffff";
    const string DFA338_minS =
        "\x01\x0d\x03\x00\x01\uffff\x01\x00\x17\uffff\x01\x00\x0e\uffff"+
        "\x01\x00\x03\uffff";
    const string DFA338_maxS =
        "\x01\u00e2\x03\x00\x01\uffff\x01\x00\x17\uffff\x01\x00\x0e\uffff"+
        "\x01\x00\x03\uffff";
    const string DFA338_acceptS =
        "\x04\uffff\x01\x02\x03\uffff\x01\x03\x26\uffff\x01\x01";
    const string DFA338_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\uffff\x01\x03\x17\uffff"+
        "\x01\x04\x0e\uffff\x01\x05\x03\uffff}>";
    static readonly string[] DFA338_transitionS = {
            "\x01\x08\x10\uffff\x01\x01\x09\x08\x02\uffff\x01\x08\x01\uffff"+
            "\x01\x08\x02\uffff\x01\x2c\x04\uffff\x01\x08\x25\uffff\x03\x08"+
            "\x02\uffff\x01\x2c\x05\uffff\x07\x2c\x01\x08\x01\x2c\x02\x08"+
            "\x01\uffff\x01\x04\x09\x03\x01\uffff\x06\x08\x02\uffff\x06\x03"+
            "\x07\x08\x1d\uffff\x01\x08\x01\x05\x0c\x2c\x06\uffff\x01\x04"+
            "\x04\uffff\x01\x2c\x01\uffff\x02\x2c\x04\uffff\x01\x08\x01\x02"+
            "\x01\x04\x01\uffff\x01\x08\x01\uffff\x09\x08\x02\uffff\x01\x08"+
            "\x01\x1d\x01\x2c",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff",
            "",
            "",
            ""
    };

    static readonly short[] DFA338_eot = DFA.UnpackEncodedString(DFA338_eotS);
    static readonly short[] DFA338_eof = DFA.UnpackEncodedString(DFA338_eofS);
    static readonly char[] DFA338_min = DFA.UnpackEncodedStringToUnsignedChars(DFA338_minS);
    static readonly char[] DFA338_max = DFA.UnpackEncodedStringToUnsignedChars(DFA338_maxS);
    static readonly short[] DFA338_accept = DFA.UnpackEncodedString(DFA338_acceptS);
    static readonly short[] DFA338_special = DFA.UnpackEncodedString(DFA338_specialS);
    static readonly short[][] DFA338_transition = DFA.UnpackEncodedStringArray(DFA338_transitionS);

    protected class DFA338 : DFA
    {
        public DFA338(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 338;
            this.eot = DFA338_eot;
            this.eof = DFA338_eof;
            this.min = DFA338_min;
            this.max = DFA338_max;
            this.accept = DFA338_accept;
            this.special = DFA338_special;
            this.transition = DFA338_transition;

        }

        override public string Description
        {
            get { return "1760:1: statement : ( labeled_statement | declaration_statement | embedded_statement );"; }
        }

    }


    protected internal int DFA338_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA338_1 = input.LA(1);

                   	 
                   	int index338_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred593_cs()) ) { s = 47; }

                   	else if ( (synpred594_cs()) ) { s = 4; }

                   	else if ( (true) ) { s = 8; }

                   	 
                   	input.Seek(index338_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA338_2 = input.LA(1);

                   	 
                   	int index338_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred593_cs()) ) { s = 47; }

                   	else if ( (synpred594_cs()) ) { s = 4; }

                   	else if ( (true) ) { s = 8; }

                   	 
                   	input.Seek(index338_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA338_3 = input.LA(1);

                   	 
                   	int index338_3 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred594_cs()) ) { s = 4; }

                   	else if ( (true) ) { s = 8; }

                   	 
                   	input.Seek(index338_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA338_5 = input.LA(1);

                   	 
                   	int index338_5 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred593_cs()) ) { s = 47; }

                   	else if ( (synpred594_cs()) ) { s = 4; }

                   	else if ( (true) ) { s = 8; }

                   	 
                   	input.Seek(index338_5);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA338_29 = input.LA(1);

                   	 
                   	int index338_29 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred593_cs()) ) { s = 47; }

                   	else if ( (synpred594_cs()) ) { s = 4; }

                   	else if ( (true) ) { s = 8; }

                   	 
                   	input.Seek(index338_29);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA338_44 = input.LA(1);

                   	 
                   	int index338_44 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred593_cs()) ) { s = 47; }

                   	else if ( (synpred594_cs()) ) { s = 4; }

                   	else if ( (true) ) { s = 8; }

                   	 
                   	input.Seek(index338_44);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae338 =
            new NoViableAltException(dfa.Description, 338, _s, input);
        dfa.Error(nvae338);
        throw nvae338;
    }
    const string DFA339_eotS =
        "\x13\uffff";
    const string DFA339_eofS =
        "\x13\uffff";
    const string DFA339_minS =
        "\x01\x0d\x01\x00\x02\uffff\x02\x34\x01\x1e\x0c\uffff";
    const string DFA339_maxS =
        "\x01\u00e2\x01\x00\x02\uffff\x02\x6e\x01\u00e2\x0c\uffff";
    const string DFA339_acceptS =
        "\x02\uffff\x01\x01\x01\x03\x03\uffff\x01\x04\x01\x05\x01\x06\x01"+
        "\x07\x01\x0a\x01\x0b\x01\x0d\x01\x0e\x01\x02\x01\x08\x01\x09\x01"+
        "\x0c";
    const string DFA339_specialS =
        "\x01\uffff\x01\x00\x11\uffff}>";
    static readonly string[] DFA339_transitionS = {
            "\x01\x07\x10\uffff\x0a\x03\x02\uffff\x01\x03\x01\uffff\x01"+
            "\x0c\x02\uffff\x01\x03\x04\uffff\x01\x01\x25\uffff\x02\x03\x01"+
            "\x02\x02\uffff\x01\x03\x05\uffff\x07\x03\x01\x09\x03\x03\x02"+
            "\uffff\x09\x03\x01\uffff\x06\x03\x02\uffff\x09\x03\x01\x04\x01"+
            "\x05\x02\x03\x1d\uffff\x01\x0d\x0d\x03\x0b\uffff\x01\x03\x01"+
            "\uffff\x02\x03\x04\uffff\x01\x0e\x01\x03\x02\uffff\x01\x07\x01"+
            "\uffff\x04\x08\x04\x09\x01\x0a\x02\uffff\x01\x0b\x01\x06\x01"+
            "\x03",
            "\x01\uffff",
            "",
            "",
            "\x01\x10\x27\uffff\x01\x10\x11\uffff\x01\x03",
            "\x01\x11\x27\uffff\x01\x11\x11\uffff\x01\x03",
            "\x01\x03\x09\uffff\x04\x03\x03\uffff\x01\x03\x04\uffff\x01"+
            "\x03\x24\uffff\x01\x03\x05\uffff\x04\x03\x02\uffff\x07\x03\x01"+
            "\x12\x04\x03\x0a\uffff\x02\x03\x02\uffff\x03\x03\x10\uffff\x18"+
            "\x03\x05\uffff\x0d\x03\x0b\uffff\x01\x03\x01\uffff\x02\x03\x05"+
            "\uffff\x01\x03\x08\uffff\x01\x12\x07\uffff\x02\x03",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA339_eot = DFA.UnpackEncodedString(DFA339_eotS);
    static readonly short[] DFA339_eof = DFA.UnpackEncodedString(DFA339_eofS);
    static readonly char[] DFA339_min = DFA.UnpackEncodedStringToUnsignedChars(DFA339_minS);
    static readonly char[] DFA339_max = DFA.UnpackEncodedStringToUnsignedChars(DFA339_maxS);
    static readonly short[] DFA339_accept = DFA.UnpackEncodedString(DFA339_acceptS);
    static readonly short[] DFA339_special = DFA.UnpackEncodedString(DFA339_specialS);
    static readonly short[][] DFA339_transition = DFA.UnpackEncodedStringArray(DFA339_transitionS);

    protected class DFA339 : DFA
    {
        public DFA339(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 339;
            this.eot = DFA339_eot;
            this.eof = DFA339_eof;
            this.min = DFA339_min;
            this.max = DFA339_max;
            this.accept = DFA339_accept;
            this.special = DFA339_special;
            this.transition = DFA339_transition;

        }

        override public string Description
        {
            get { return "1767:1: embedded_statement : ( block | empty_statement | expression_statement | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement );"; }
        }

    }


    protected internal int DFA339_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA339_1 = input.LA(1);

                   	 
                   	int index339_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred595_cs()) ) { s = 2; }

                   	else if ( (synpred596_cs()) ) { s = 15; }

                   	 
                   	input.Seek(index339_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae339 =
            new NoViableAltException(dfa.Description, 339, _s, input);
        dfa.Error(nvae339);
        throw nvae339;
    }
    const string DFA341_eotS =
        "\x19\uffff";
    const string DFA341_eofS =
        "\x19\uffff";
    const string DFA341_minS =
        "\x01\x1e\x01\x00\x17\uffff";
    const string DFA341_maxS =
        "\x01\u00e2\x01\x00\x17\uffff";
    const string DFA341_acceptS =
        "\x02\uffff\x01\x02\x15\uffff\x01\x01";
    const string DFA341_specialS =
        "\x01\uffff\x01\x00\x17\uffff}>";
    static readonly string[] DFA341_transitionS = {
            "\x0a\x02\x02\uffff\x01\x02\x04\uffff\x01\x02\x2a\uffff\x02"+
            "\x02\x03\uffff\x01\x02\x05\uffff\x07\x02\x01\uffff\x03\x02\x02"+
            "\uffff\x09\x02\x01\uffff\x05\x02\x01\x01\x02\uffff\x0d\x02\x1e"+
            "\uffff\x0d\x02\x0b\uffff\x01\x02\x01\uffff\x02\x02\x05\uffff"+
            "\x01\x02\x10\uffff\x02\x02",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA341_eot = DFA.UnpackEncodedString(DFA341_eotS);
    static readonly short[] DFA341_eof = DFA.UnpackEncodedString(DFA341_eofS);
    static readonly char[] DFA341_min = DFA.UnpackEncodedStringToUnsignedChars(DFA341_minS);
    static readonly char[] DFA341_max = DFA.UnpackEncodedStringToUnsignedChars(DFA341_maxS);
    static readonly short[] DFA341_accept = DFA.UnpackEncodedString(DFA341_acceptS);
    static readonly short[] DFA341_special = DFA.UnpackEncodedString(DFA341_specialS);
    static readonly short[][] DFA341_transition = DFA.UnpackEncodedStringArray(DFA341_transitionS);

    protected class DFA341 : DFA
    {
        public DFA341(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 341;
            this.eot = DFA341_eot;
            this.eof = DFA341_eof;
            this.min = DFA341_min;
            this.max = DFA341_max;
            this.accept = DFA341_accept;
            this.special = DFA341_special;
            this.transition = DFA341_transition;

        }

        override public string Description
        {
            get { return "1800:1: fixed_pointer_initializer : ( '&' variable_reference | expression );"; }
        }

    }


    protected internal int DFA341_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA341_1 = input.LA(1);

                   	 
                   	int index341_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred609_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 2; }

                   	 
                   	input.Seek(index341_1);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae341 =
            new NoViableAltException(dfa.Description, 341, _s, input);
        dfa.Error(nvae341);
        throw nvae341;
    }
    const string DFA352_eotS =
        "\x1b\uffff";
    const string DFA352_eofS =
        "\x1b\uffff";
    const string DFA352_minS =
        "\x01\x1e\x16\x00\x04\uffff";
    const string DFA352_maxS =
        "\x01\u00e2\x16\x00\x04\uffff";
    const string DFA352_acceptS =
        "\x17\uffff\x01\x01\x01\x03\x01\x04\x01\x02";
    const string DFA352_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01"+
        "\x06\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01"+
        "\x0e\x01\x0f\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x04"+
        "\uffff}>";
    static readonly string[] DFA352_transitionS = {
            "\x01\x02\x09\x07\x02\uffff\x01\x0a\x04\uffff\x01\x03\x2a\uffff"+
            "\x01\x04\x01\x05\x03\uffff\x01\x03\x05\uffff\x07\x03\x01\uffff"+
            "\x01\x03\x01\x01\x01\x0d\x02\uffff\x09\x06\x01\uffff\x01\x09"+
            "\x01\x0b\x01\x0c\x01\x0e\x01\x0f\x01\x16\x02\uffff\x06\x06\x01"+
            "\x08\x01\x11\x01\x10\x01\x12\x01\x13\x01\x14\x01\x15\x1e\uffff"+
            "\x0d\x03\x0b\uffff\x01\x03\x01\uffff\x02\x03\x05\uffff\x01\x03"+
            "\x10\uffff\x02\x03",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA352_eot = DFA.UnpackEncodedString(DFA352_eotS);
    static readonly short[] DFA352_eof = DFA.UnpackEncodedString(DFA352_eofS);
    static readonly char[] DFA352_min = DFA.UnpackEncodedStringToUnsignedChars(DFA352_minS);
    static readonly char[] DFA352_max = DFA.UnpackEncodedStringToUnsignedChars(DFA352_maxS);
    static readonly short[] DFA352_accept = DFA.UnpackEncodedString(DFA352_acceptS);
    static readonly short[] DFA352_special = DFA.UnpackEncodedString(DFA352_specialS);
    static readonly short[][] DFA352_transition = DFA.UnpackEncodedStringArray(DFA352_transitionS);

    protected class DFA352 : DFA
    {
        public DFA352(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 352;
            this.eot = DFA352_eot;
            this.eof = DFA352_eof;
            this.min = DFA352_min;
            this.max = DFA352_max;
            this.accept = DFA352_accept;
            this.special = DFA352_special;
            this.transition = DFA352_transition;

        }

        override public string Description
        {
            get { return "1894:1: statement_expression : ( invocation_expression | object_creation_expression | assignment | unary_expression );"; }
        }

    }


    protected internal int DFA352_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA352_1 = input.LA(1);

                   	 
                   	int index352_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred622_cs()) ) { s = 23; }

                   	else if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA352_2 = input.LA(1);

                   	 
                   	int index352_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred622_cs()) ) { s = 23; }

                   	else if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA352_3 = input.LA(1);

                   	 
                   	int index352_3 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred622_cs()) ) { s = 23; }

                   	else if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA352_4 = input.LA(1);

                   	 
                   	int index352_4 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred622_cs()) ) { s = 23; }

                   	else if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_4);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA352_5 = input.LA(1);

                   	 
                   	int index352_5 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred622_cs()) ) { s = 23; }

                   	else if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_5);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 5 : 
                   	int LA352_6 = input.LA(1);

                   	 
                   	int index352_6 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred622_cs()) ) { s = 23; }

                   	else if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_6);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 6 : 
                   	int LA352_7 = input.LA(1);

                   	 
                   	int index352_7 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred622_cs()) ) { s = 23; }

                   	else if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_7);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 7 : 
                   	int LA352_8 = input.LA(1);

                   	 
                   	int index352_8 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred623_cs()) ) { s = 26; }

                   	else if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_8);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 8 : 
                   	int LA352_9 = input.LA(1);

                   	 
                   	int index352_9 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_9);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 9 : 
                   	int LA352_10 = input.LA(1);

                   	 
                   	int index352_10 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_10);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 10 : 
                   	int LA352_11 = input.LA(1);

                   	 
                   	int index352_11 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_11);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 11 : 
                   	int LA352_12 = input.LA(1);

                   	 
                   	int index352_12 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_12);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 12 : 
                   	int LA352_13 = input.LA(1);

                   	 
                   	int index352_13 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_13);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 13 : 
                   	int LA352_14 = input.LA(1);

                   	 
                   	int index352_14 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_14);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 14 : 
                   	int LA352_15 = input.LA(1);

                   	 
                   	int index352_15 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_15);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 15 : 
                   	int LA352_16 = input.LA(1);

                   	 
                   	int index352_16 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_16);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 16 : 
                   	int LA352_17 = input.LA(1);

                   	 
                   	int index352_17 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_17);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 17 : 
                   	int LA352_18 = input.LA(1);

                   	 
                   	int index352_18 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_18);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 18 : 
                   	int LA352_19 = input.LA(1);

                   	 
                   	int index352_19 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_19);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 19 : 
                   	int LA352_20 = input.LA(1);

                   	 
                   	int index352_20 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_20);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 20 : 
                   	int LA352_21 = input.LA(1);

                   	 
                   	int index352_21 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_21);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 21 : 
                   	int LA352_22 = input.LA(1);

                   	 
                   	int index352_22 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred624_cs()) ) { s = 24; }

                   	else if ( (true) ) { s = 25; }

                   	 
                   	input.Seek(index352_22);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae352 =
            new NoViableAltException(dfa.Description, 352, _s, input);
        dfa.Error(nvae352);
        throw nvae352;
    }
    const string DFA363_eotS =
        "\x1a\uffff";
    const string DFA363_eofS =
        "\x1a\uffff";
    const string DFA363_minS =
        "\x01\x1e\x03\x00\x01\uffff\x01\x00\x14\uffff";
    const string DFA363_maxS =
        "\x01\u00e2\x03\x00\x01\uffff\x01\x00\x14\uffff";
    const string DFA363_acceptS =
        "\x04\uffff\x01\x01\x02\uffff\x01\x02\x12\uffff";
    const string DFA363_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\uffff\x01\x03\x14\uffff}>";
    static readonly string[] DFA363_transitionS = {
            "\x01\x01\x09\x07\x02\uffff\x01\x07\x04\uffff\x01\x05\x2a\uffff"+
            "\x02\x07\x03\uffff\x01\x05\x05\uffff\x07\x05\x01\uffff\x01\x05"+
            "\x02\x07\x01\uffff\x01\x04\x09\x03\x01\uffff\x06\x07\x02\uffff"+
            "\x06\x03\x07\x07\x1e\uffff\x0d\x05\x0b\uffff\x01\x05\x01\uffff"+
            "\x02\x05\x05\uffff\x01\x02\x01\x04\x0f\uffff\x02\x05",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static readonly short[] DFA363_eot = DFA.UnpackEncodedString(DFA363_eotS);
    static readonly short[] DFA363_eof = DFA.UnpackEncodedString(DFA363_eofS);
    static readonly char[] DFA363_min = DFA.UnpackEncodedStringToUnsignedChars(DFA363_minS);
    static readonly char[] DFA363_max = DFA.UnpackEncodedStringToUnsignedChars(DFA363_maxS);
    static readonly short[] DFA363_accept = DFA.UnpackEncodedString(DFA363_acceptS);
    static readonly short[] DFA363_special = DFA.UnpackEncodedString(DFA363_specialS);
    static readonly short[][] DFA363_transition = DFA.UnpackEncodedStringArray(DFA363_transitionS);

    protected class DFA363 : DFA
    {
        public DFA363(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 363;
            this.eot = DFA363_eot;
            this.eof = DFA363_eof;
            this.min = DFA363_min;
            this.max = DFA363_max;
            this.accept = DFA363_accept;
            this.special = DFA363_special;
            this.transition = DFA363_transition;

        }

        override public string Description
        {
            get { return "1974:1: for_initializer : ( local_variable_declaration | statement_expression_list );"; }
        }

    }


    protected internal int DFA363_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA363_1 = input.LA(1);

                   	 
                   	int index363_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred637_cs()) ) { s = 4; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index363_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA363_2 = input.LA(1);

                   	 
                   	int index363_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred637_cs()) ) { s = 4; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index363_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA363_3 = input.LA(1);

                   	 
                   	int index363_3 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred637_cs()) ) { s = 4; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index363_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA363_5 = input.LA(1);

                   	 
                   	int index363_5 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred637_cs()) ) { s = 4; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index363_5);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae363 =
            new NoViableAltException(dfa.Description, 363, _s, input);
        dfa.Error(nvae363);
        throw nvae363;
    }
    const string DFA376_eotS =
        "\x1b\uffff";
    const string DFA376_eofS =
        "\x1b\uffff";
    const string DFA376_minS =
        "\x01\x1e\x03\x00\x01\uffff\x01\x00\x14\uffff\x01\x00";
    const string DFA376_maxS =
        "\x01\u00e2\x03\x00\x01\uffff\x01\x00\x14\uffff\x01\x00";
    const string DFA376_acceptS =
        "\x04\uffff\x01\x01\x02\uffff\x01\x02\x13\uffff";
    const string DFA376_specialS =
        "\x01\uffff\x01\x00\x01\x01\x01\x02\x01\uffff\x01\x03\x14\uffff"+
        "\x01\x04}>";
    static readonly string[] DFA376_transitionS = {
            "\x01\x01\x09\x07\x02\uffff\x01\x07\x04\uffff\x01\x1a\x2a\uffff"+
            "\x02\x07\x03\uffff\x01\x1a\x05\uffff\x07\x1a\x01\uffff\x01\x1a"+
            "\x02\x07\x01\uffff\x01\x04\x09\x03\x01\uffff\x06\x07\x02\uffff"+
            "\x06\x03\x07\x07\x1e\uffff\x01\x05\x0c\x1a\x0b\uffff\x01\x1a"+
            "\x01\uffff\x02\x1a\x05\uffff\x01\x02\x01\x04\x0f\uffff\x02\x1a",
            "\x01\uffff",
            "\x01\uffff",
            "\x01\uffff",
            "",
            "\x01\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\x01\uffff"
    };

    static readonly short[] DFA376_eot = DFA.UnpackEncodedString(DFA376_eotS);
    static readonly short[] DFA376_eof = DFA.UnpackEncodedString(DFA376_eofS);
    static readonly char[] DFA376_min = DFA.UnpackEncodedStringToUnsignedChars(DFA376_minS);
    static readonly char[] DFA376_max = DFA.UnpackEncodedStringToUnsignedChars(DFA376_maxS);
    static readonly short[] DFA376_accept = DFA.UnpackEncodedString(DFA376_acceptS);
    static readonly short[] DFA376_special = DFA.UnpackEncodedString(DFA376_specialS);
    static readonly short[][] DFA376_transition = DFA.UnpackEncodedStringArray(DFA376_transitionS);

    protected class DFA376 : DFA
    {
        public DFA376(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 376;
            this.eot = DFA376_eot;
            this.eof = DFA376_eof;
            this.min = DFA376_min;
            this.max = DFA376_max;
            this.accept = DFA376_accept;
            this.special = DFA376_special;
            this.transition = DFA376_transition;

        }

        override public string Description
        {
            get { return "2088:1: resource_acquisition : ( local_variable_declaration | expression );"; }
        }

    }


    protected internal int DFA376_SpecialStateTransition(DFA dfa, int s, IIntStream _input) //throws NoViableAltException
    {
            ITokenStream input = (ITokenStream)_input;
    	int _s = s;
        switch ( s )
        {
               	case 0 : 
                   	int LA376_1 = input.LA(1);

                   	 
                   	int index376_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred654_cs()) ) { s = 4; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index376_1);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 1 : 
                   	int LA376_2 = input.LA(1);

                   	 
                   	int index376_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred654_cs()) ) { s = 4; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index376_2);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 2 : 
                   	int LA376_3 = input.LA(1);

                   	 
                   	int index376_3 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred654_cs()) ) { s = 4; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index376_3);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 3 : 
                   	int LA376_5 = input.LA(1);

                   	 
                   	int index376_5 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred654_cs()) ) { s = 4; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index376_5);
                   	if ( s >= 0 ) return s;
                   	break;
               	case 4 : 
                   	int LA376_26 = input.LA(1);

                   	 
                   	int index376_26 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (synpred654_cs()) ) { s = 4; }

                   	else if ( (true) ) { s = 7; }

                   	 
                   	input.Seek(index376_26);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (state.backtracking > 0) {state.failed = true; return -1;}
        NoViableAltException nvae376 =
            new NoViableAltException(dfa.Description, 376, _s, input);
        dfa.Error(nvae376);
        throw nvae376;
    }
 

    public static readonly BitSet FOLLOW_using_directives_in_compilation_unit224 = new BitSet(new ulong[]{0x0000300000000000UL,0x0000000241000000UL,0xF0007C0000010400UL,0x0000000000004003UL});
    public static readonly BitSet FOLLOW_global_attributes_in_compilation_unit231 = new BitSet(new ulong[]{0x0000300000000000UL,0x0000000241000000UL,0xF0007C0000010400UL,0x0000000000004003UL});
    public static readonly BitSet FOLLOW_namespace_declaration_in_compilation_unit238 = new BitSet(new ulong[]{0x0000300000000000UL,0x0000000241000000UL,0xF0007C0000010400UL,0x0000000000004003UL});
    public static readonly BitSet FOLLOW_namespace_body_in_compilation_unit243 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_88_in_namespace_declaration264 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_qualified_identifier_in_namespace_declaration268 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_namespace_block_in_namespace_declaration272 = new BitSet(new ulong[]{0x0010000000000002UL});
    public static readonly BitSet FOLLOW_SEMI_in_namespace_declaration276 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_qualified_identifier299 = new BitSet(new ulong[]{0x0000010000000002UL});
    public static readonly BitSet FOLLOW_DOT_in_qualified_identifier302 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_qualified_identifier304 = new BitSet(new ulong[]{0x0000010000000002UL});
    public static readonly BitSet FOLLOW_qid_start_in_qid327 = new BitSet(new ulong[]{0x0000030000000002UL});
    public static readonly BitSet FOLLOW_qid_part_in_qid329 = new BitSet(new ulong[]{0x0000030000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_qid_start350 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000002000000UL});
    public static readonly BitSet FOLLOW_89_in_qid_start353 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_qid_start355 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_qid_start359 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_90_in_qid_start365 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_91_in_qid_start370 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_predefined_type_in_qid_start375 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_literal_in_qid_start380 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_access_operator_in_qid_part402 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_qid_part406 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_qid_part410 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_92_in_namespace_block433 = new BitSet(new ulong[]{0x0000300000000000UL,0x0000000261000000UL,0xF0007C0000010400UL,0x0000000000004003UL});
    public static readonly BitSet FOLLOW_namespace_body_in_namespace_block437 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_namespace_block441 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_extern_alias_directives_in_namespace_body461 = new BitSet(new ulong[]{0x0000300000000002UL,0x0000000201000000UL,0xF0007C0000010400UL,0x0000000000004003UL});
    public static readonly BitSet FOLLOW_using_directives_in_namespace_body466 = new BitSet(new ulong[]{0x0000200000000002UL,0x0000000201000000UL,0xF0007C0000010400UL,0x0000000000004003UL});
    public static readonly BitSet FOLLOW_namespace_member_declarations_in_namespace_body471 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_extern_alias_directive_in_extern_alias_directives492 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_94_in_extern_alias_directive513 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000080000000UL});
    public static readonly BitSet FOLLOW_95_in_extern_alias_directive517 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_extern_alias_directive521 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_extern_alias_directive524 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_using_directive_in_using_directives544 = new BitSet(new ulong[]{0x0000100000000002UL});
    public static readonly BitSet FOLLOW_using_alias_directive_in_using_directive566 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_using_namespace_directive_in_using_directive571 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_USING_in_using_alias_directive593 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_using_alias_directive597 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000100000000UL});
    public static readonly BitSet FOLLOW_96_in_using_alias_directive601 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_namespace_or_type_name_in_using_alias_directive605 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_using_alias_directive609 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_USING_in_using_namespace_directive629 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_namespace_name_in_using_namespace_directive633 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_using_namespace_directive637 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_namespace_member_declaration_in_namespace_member_declarations657 = new BitSet(new ulong[]{0x0000200000000002UL,0x0000000201000000UL,0xF0007C0000010400UL,0x0000000000004003UL});
    public static readonly BitSet FOLLOW_namespace_declaration_in_namespace_member_declaration678 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_declaration_in_namespace_member_declaration683 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_class_declaration_in_type_declaration703 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_struct_declaration_in_type_declaration708 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_declaration_in_type_declaration713 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_enum_declaration_in_type_declaration718 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_delegate_declaration_in_type_declaration723 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_qualified_alias_member743 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000002000000UL});
    public static readonly BitSet FOLLOW_89_in_qualified_alias_member747 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_qualified_alias_member751 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_qualified_alias_member755 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_namespace_or_type_name_in_namespace_name778 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_namespace_or_type_name_in_type_name798 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_namespace_or_type_name822 = new BitSet(new ulong[]{0x0000010000000002UL,0x0800000002000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_namespace_or_type_name830 = new BitSet(new ulong[]{0x0000010000000002UL,0x0000000002000000UL});
    public static readonly BitSet FOLLOW_89_in_namespace_or_type_name835 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_namespace_or_type_name841 = new BitSet(new ulong[]{0x0000010000000002UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_namespace_or_type_name849 = new BitSet(new ulong[]{0x0000010000000002UL});
    public static readonly BitSet FOLLOW_DOT_in_namespace_or_type_name855 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_namespace_or_type_name863 = new BitSet(new ulong[]{0x0000010000000002UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_namespace_or_type_name871 = new BitSet(new ulong[]{0x0000010000000002UL});
    public static readonly BitSet FOLLOW_global_attribute_in_global_attributes915 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_97_in_global_attribute936 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000006000000000UL});
    public static readonly BitSet FOLLOW_global_attribute_target_specifier_in_global_attribute940 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_attribute_list_in_global_attribute944 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000C00000000UL});
    public static readonly BitSet FOLLOW_98_in_global_attribute948 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
    public static readonly BitSet FOLLOW_99_in_global_attribute953 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_global_attribute_target_in_global_attribute_target_specifier973 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
    public static readonly BitSet FOLLOW_100_in_global_attribute_target_specifier977 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_global_attribute_target0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attribute_sections_in_attributes1021 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attribute_section_in_attribute_sections1041 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_97_in_attribute_section1062 = new BitSet(new ulong[]{0x0000800040000000UL,0x00003FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_attribute_target_specifier_in_attribute_section1066 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_attribute_list_in_attribute_section1071 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000C00000000UL});
    public static readonly BitSet FOLLOW_98_in_attribute_section1075 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
    public static readonly BitSet FOLLOW_99_in_attribute_section1080 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attribute_target_in_attribute_target_specifier1100 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
    public static readonly BitSet FOLLOW_100_in_attribute_target_specifier1104 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_attribute_target0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attribute_in_attribute_list1172 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_attribute_list1175 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_attribute_in_attribute_list1181 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_type_name_in_attribute1206 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_attribute_arguments_in_attribute1210 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_110_in_attribute_arguments1231 = new BitSet(new ulong[]{0x002084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_positional_argument_list_in_attribute_arguments1235 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_attribute_arguments1239 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_110_in_attribute_arguments1245 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_positional_argument_list_in_attribute_arguments1249 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_attribute_arguments1253 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_named_argument_list_in_attribute_arguments1257 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_attribute_arguments1261 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_110_in_attribute_arguments1267 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_named_argument_list_in_attribute_arguments1271 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_attribute_arguments1275 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_positional_argument_in_positional_argument_list1299 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_positional_argument_list1302 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_positional_argument_in_positional_argument_list1308 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_attribute_argument_expression_in_positional_argument1332 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_named_argument_in_named_argument_list1356 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_named_argument_list1359 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_named_argument_in_named_argument_list1365 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_identifier_in_named_argument1389 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000100000000UL});
    public static readonly BitSet FOLLOW_96_in_named_argument1393 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_attribute_argument_expression_in_named_argument1397 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_attribute_argument_expression1417 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_name_in_type1443 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_type1451 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_type1456 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_type1460 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_type_name_in_type1466 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_type1468 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_type_name_in_type1474 = new BitSet(new ulong[]{0x0000000000000000UL,0x0001000000000000UL});
    public static readonly BitSet FOLLOW_112_in_type1476 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_name_in_type1481 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_predefined_type_in_type1486 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_type1488 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_type1494 = new BitSet(new ulong[]{0x0000000000000000UL,0x0001000000000000UL});
    public static readonly BitSet FOLLOW_112_in_type1496 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_predefined_type_in_type1501 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_113_in_type1506 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_type1510 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_type_name_in_non_nullable_type1532 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_non_nullable_type1540 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_non_nullable_type1545 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_non_nullable_type1549 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_type_name_in_non_nullable_type1555 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_non_nullable_type1557 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_type_name_in_non_nullable_type1563 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_predefined_type_in_non_nullable_type1568 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_non_nullable_type1570 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_non_nullable_type1576 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_113_in_non_nullable_type1581 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_non_nullable_type1585 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_type_in_type_list1606 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_type_list1609 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_type_list1611 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_type_in_class_type1633 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_non_array_type1652 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_array_type1671 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_integral_type0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_unmanaged_type1742 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_pointer_type1761 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_rank_specifier_in_rank_specifiers1780 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_97_in_rank_specifier1809 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000C00000000UL});
    public static readonly BitSet FOLLOW_dim_separators_in_rank_specifier1813 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
    public static readonly BitSet FOLLOW_99_in_rank_specifier1818 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_98_in_dim_separators1838 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_123_in_generic_argument_list1859 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_arguments_in_generic_argument_list1863 = new BitSet(new ulong[]{0x0000080000000000UL});
    public static readonly BitSet FOLLOW_GT_in_generic_argument_list1867 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_argument_in_type_arguments1891 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_type_arguments1894 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_argument_in_type_arguments1900 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_type_in_type_argument1925 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_type_variable_name1945 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_non_assignment_expression_in_expression1968 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_assignment_in_expression1973 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_cast_expression_in_unary_expression1993 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_124_in_unary_expression2002 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unary_expression_in_unary_expression2006 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MINUS_in_unary_expression2012 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unary_expression_in_unary_expression2016 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_125_in_unary_expression2022 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unary_expression_in_unary_expression2026 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_126_in_unary_expression2032 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unary_expression_in_unary_expression2036 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_111_in_unary_expression2042 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unary_expression_in_unary_expression2046 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_pre_increment_expression_in_unary_expression2051 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_pre_decrement_expression_in_unary_expression2057 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primary_or_array_creation_expression_in_unary_expression2063 = new BitSet(new ulong[]{0x0000000000000002UL,0x8000000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_127_in_unary_expression2067 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_128_in_unary_expression2072 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_pointer_indirection_expression_in_unary_expression2078 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_addressof_expression_in_unary_expression2083 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_127_in_pre_increment_expression2103 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unary_expression_in_pre_increment_expression2107 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_128_in_pre_decrement_expression2127 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unary_expression_in_pre_decrement_expression2131 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_111_in_pointer_indirection_expression2151 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unary_expression_in_pointer_indirection_expression2155 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_129_in_addressof_expression2175 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unary_expression_in_addressof_expression2179 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_conditional_expression_in_non_assignment_expression2199 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_lambda_expression_in_non_assignment_expression2204 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_query_expression_in_non_assignment_expression2209 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unary_expression_in_assignment2228 = new BitSet(new ulong[]{0x0000080000000000UL,0x0000000100000000UL,0x000001FF00000000UL});
    public static readonly BitSet FOLLOW_assignment_operator_in_assignment2232 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_assignment2236 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_variable_reference2257 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_argument_in_argument_list2283 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_argument_list2286 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFFFUL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_argument_in_argument_list2292 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_argument_name_in_argument2315 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFFFUL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_argument_value_in_argument2319 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_argument_value_in_argument2324 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_argument_name2343 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
    public static readonly BitSet FOLLOW_100_in_argument_name2347 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_argument_value2366 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ref_variable_reference_in_argument_value2372 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_130_in_argument_value2378 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_variable_reference_in_argument_value2382 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_131_in_ref_variable_reference2402 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_ref_variable_reference2404 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_namespace_or_type_name_in_ref_variable_reference2414 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_ref_variable_reference2422 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
    public static readonly BitSet FOLLOW_111_in_ref_variable_reference2428 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_ref_variable_reference2433 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_113_in_ref_variable_reference2440 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_ref_variable_reference2444 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_ref_variable_reference2449 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_ref_variable_reference2458 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000008UL});
    public static readonly BitSet FOLLOW_ref_variable_reference_in_ref_variable_reference2462 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_131_in_ref_variable_reference2467 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_variable_reference_in_ref_variable_reference2469 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primary_expression_in_primary_or_array_creation_expression2489 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_array_creation_expression_in_primary_or_array_creation_expression2495 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_tmember_in_texpr2516 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_tmember_in_tinvocation2540 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_tinvocation_part_in_tinvocation2544 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arguments_in_tinvocation_part2565 = new BitSet(new ulong[]{0x0000030000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_access_operator_in_tinvocation_part2571 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_tinvocation_in_tinvocation_part2576 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arguments_in_tinvocation_part2582 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400200000000UL});
    public static readonly BitSet FOLLOW_telement_part_in_tinvocation_part2587 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arguments_in_tinvocation_part2592 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_tmember_in_telement2619 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_telement_part_in_telement2623 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_telement_part2644 = new BitSet(new ulong[]{0x0000030000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_access_operator_in_telement_part2650 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_telement_in_telement_part2654 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_telement_part2660 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400200000000UL});
    public static readonly BitSet FOLLOW_tinvocation_part_in_telement_part2665 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_telement_part2670 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_identifier_in_tmember2695 = new BitSet(new ulong[]{0x0000030000000002UL});
    public static readonly BitSet FOLLOW_access_operator_in_tmember2700 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_tmember2704 = new BitSet(new ulong[]{0x0000030000000002UL});
    public static readonly BitSet FOLLOW_primary_expression_start_in_primary_expression2730 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000400200000000UL});
    public static readonly BitSet FOLLOW_primary_expression_part_in_primary_expression2734 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000400200000000UL});
    public static readonly BitSet FOLLOW_delegate_creation_expression_in_primary_expression2740 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_anonymous_object_creation_expression_in_primary_expression2749 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_sizeof_expression_in_primary_expression2755 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_checked_expression_in_primary_expression2766 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unchecked_expression_in_primary_expression2785 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_default_value_expression_in_primary_expression2802 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_anonymous_method_expression_in_primary_expression2815 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_predefined_type_in_primary_expression_start2840 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_identifier_in_primary_expression_start2844 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_literal_in_primary_expression_start2848 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_primary_expression_start2853 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_90_in_primary_expression_start2859 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_primary_expression_start2864 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_91_in_primary_expression_start2870 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_primary_expression_start2875 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_primary_expression_start2881 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000002000000UL});
    public static readonly BitSet FOLLOW_89_in_primary_expression_start2885 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_primary_expression_start2889 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_paren_expression_in_primary_expression_start2894 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000400200000000UL});
    public static readonly BitSet FOLLOW_brackets_or_arguments_in_primary_expression_start2898 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_object_creation_expression_in_primary_expression_start2904 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_typeof_expression_in_primary_expression_start2910 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_access_identifier_in_primary_expression_part2946 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000400200000000UL});
    public static readonly BitSet FOLLOW_brackets_or_arguments_in_primary_expression_part2950 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_brackets_or_arguments_in_primary_expression_part2956 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_access_identifier_in_element_part2977 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_element_part2981 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000400200000000UL});
    public static readonly BitSet FOLLOW_primary_expression_part_in_element_part2986 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_element_part2993 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_access_identifier_in_invocation_part3013 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_arguments_in_invocation_part3017 = new BitSet(new ulong[]{0x000080FFC0000002UL,0x07FC6FE08C000000UL,0x0FFF8000000017F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_primary_expression_start_in_invocation_part3021 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arguments_in_invocation_part3028 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_access_identifier_in_member_part3049 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_access_operator_in_access_identifier3069 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_access_identifier3073 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_access_identifier3077 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_110_in_paren_expression3098 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_paren_expression3102 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_paren_expression3106 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_brackets_or_arguments3126 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000400200000000UL});
    public static readonly BitSet FOLLOW_arguments_in_brackets_or_arguments3131 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arguments_in_brackets_or_arguments3137 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_brackets_or_arguments3141 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_set_in_access_operator0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_110_in_arguments3188 = new BitSet(new ulong[]{0x002084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFFFUL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_argument_list_in_arguments3192 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_arguments3197 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_97_in_bracket_expression3217 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE88C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_list_in_bracket_expression3221 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
    public static readonly BitSet FOLLOW_99_in_bracket_expression3226 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_member_access3247 = new BitSet(new ulong[]{0x0000010000000002UL});
    public static readonly BitSet FOLLOW_DOT_in_member_access3252 = new BitSet(new ulong[]{0x000080FFC0000000UL,0x07FC6FE08C000000UL,0x0FFF80000001FFF0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_primary_or_array_creation_expression_in_member_access3256 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_predefined_type0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_access_in_invocation_expression3404 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_arguments_in_invocation_expression3406 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_110_in_access3426 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_access3428 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_access3430 = new BitSet(new ulong[]{0x000083FFC0000000UL,0x07FC6FE28C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_access_in_access3435 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_access_part_in_access3447 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_qid_start_in_access3455 = new BitSet(new ulong[]{0x000083FFC0000002UL,0x07FC6FE28C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_access_part_in_access3459 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_qid_part_in_access_part3481 = new BitSet(new ulong[]{0x000083FFC0000002UL,0x07FC6FE28C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_access_part_in_access_part3483 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_access_part3493 = new BitSet(new ulong[]{0x000083FFC0000002UL,0x07FC6FE28C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_access_part_in_access_part3495 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arguments_in_access_part3505 = new BitSet(new ulong[]{0x000083FFC0000000UL,0x07FC6FE28C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_access_part_in_access_part3507 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_expression_list3542 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_expression_list3546 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_expression_list3552 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_138_in_object_creation_expression3576 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_object_creation_expression3580 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_110_in_object_creation_expression3589 = new BitSet(new ulong[]{0x002084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFFFUL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_argument_list_in_object_creation_expression3593 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_object_creation_expression3598 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression3602 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_object_or_collection_initializer_in_object_creation_expression3613 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_object_initializer_in_object_or_collection_initializer3636 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_collection_initializer_in_object_or_collection_initializer3642 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_92_in_object_initializer3668 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE0A0000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_member_initializer_list_in_object_initializer3672 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_object_initializer3677 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_92_in_object_initializer3683 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_member_initializer_list_in_object_initializer3687 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_object_initializer3691 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_object_initializer3695 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_initializer_in_member_initializer_list3719 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_member_initializer_list3723 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_member_initializer_in_member_initializer_list3729 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_member_initializer3753 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000100000000UL});
    public static readonly BitSet FOLLOW_96_in_member_initializer3757 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE09C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_initializer_value_in_member_initializer3761 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_initializer_value3781 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_object_or_collection_initializer_in_initializer_value3787 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_92_in_collection_initializer3807 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE09C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_element_initializer_list_in_collection_initializer3811 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000420000000UL});
    public static readonly BitSet FOLLOW_98_in_collection_initializer3815 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_collection_initializer3820 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_element_initializer_in_element_initializer_list3844 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_element_initializer_list3848 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE09C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_element_initializer_in_element_initializer_list3854 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_non_assignment_expression_in_element_initializer3878 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_92_in_element_initializer3884 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_list_in_element_initializer3888 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_element_initializer3892 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_138_in_array_creation_expression3912 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE280000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_non_array_type_in_array_creation_expression3917 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_97_in_array_creation_expression3919 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_list_in_array_creation_expression3923 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
    public static readonly BitSet FOLLOW_99_in_array_creation_expression3927 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000000210000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_array_creation_expression3931 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_array_initializer_in_array_creation_expression3936 = new BitSet(new ulong[]{0x0000030000000002UL});
    public static readonly BitSet FOLLOW_access_operator_in_array_creation_expression3942 = new BitSet(new ulong[]{0x000080FFC0000000UL,0x07FC6FE08C000000UL,0x0FFF80000001FFF0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_primary_expression_in_array_creation_expression3946 = new BitSet(new ulong[]{0x0000030000000002UL});
    public static readonly BitSet FOLLOW_array_type_in_array_creation_expression3954 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_array_initializer_in_array_creation_expression3958 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_rank_specifier_in_array_creation_expression3963 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_array_initializer_in_array_creation_expression3967 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_138_in_delegate_creation_expression3988 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_name_in_delegate_creation_expression3992 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_delegate_creation_expression3996 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_delegate_creation_expression4000 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_delegate_creation_expression4004 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_138_in_anonymous_object_creation_expression4024 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_anonymous_object_initializer_in_anonymous_object_creation_expression4028 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_92_in_anonymous_object_initializer4048 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE0A0000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_member_declarator_list_in_anonymous_object_initializer4052 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_anonymous_object_initializer4057 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_92_in_anonymous_object_initializer4063 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_member_declarator_list_in_anonymous_object_initializer4067 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_anonymous_object_initializer4071 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_anonymous_object_initializer4075 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_declarator_in_member_declarator_list4098 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_member_declarator_list4102 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_member_declarator_in_member_declarator_list4108 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_member_declarator4132 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_member_declarator4136 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_access_in_member_declarator4144 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_member_declarator4150 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000100000000UL});
    public static readonly BitSet FOLLOW_96_in_member_declarator4154 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_member_declarator4158 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_139_in_sizeof_expression4178 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_sizeof_expression4182 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unmanaged_type_in_sizeof_expression4186 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_sizeof_expression4190 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_140_in_typeof_expression4209 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_typeof_expression4213 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_typeof_expression4217 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_typeof_expression4221 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_140_in_typeof_expression4227 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_typeof_expression4229 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unbound_type_name_in_typeof_expression4233 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_typeof_expression4237 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_140_in_typeof_expression4243 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_typeof_expression4245 = new BitSet(new ulong[]{0x0000000000000000UL,0x0002000000000000UL});
    public static readonly BitSet FOLLOW_113_in_typeof_expression4247 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_typeof_expression4249 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unbound_type_name_start_in_unbound_type_name4273 = new BitSet(new ulong[]{0x0000010000000002UL});
    public static readonly BitSet FOLLOW_unbound_type_name_part_in_unbound_type_name4275 = new BitSet(new ulong[]{0x0000010000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_unbound_type_name_start4296 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000002000000UL});
    public static readonly BitSet FOLLOW_89_in_unbound_type_name_start4299 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_unbound_type_name_start4301 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name_start4305 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DOT_in_unbound_type_name_part4325 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_unbound_type_name_part4329 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_generic_dimension_specifier_in_unbound_type_name_part4333 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_123_in_generic_dimension_specifier4354 = new BitSet(new ulong[]{0x0000080000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_commas_in_generic_dimension_specifier4358 = new BitSet(new ulong[]{0x0000080000000000UL});
    public static readonly BitSet FOLLOW_GT_in_generic_dimension_specifier4363 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_98_in_commas4383 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_141_in_checked_expression4405 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_checked_expression4409 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_checked_expression4413 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_checked_expression4417 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_142_in_unchecked_expression4437 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_unchecked_expression4441 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_unchecked_expression4445 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_unchecked_expression4449 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_143_in_default_value_expression4469 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_default_value_expression4473 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_default_value_expression4477 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_default_value_expression4481 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_constant_expression4501 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_boolean_expression4520 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_144_in_anonymous_method_expression4539 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_explicit_anonymous_function_signature_in_anonymous_method_expression4543 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_block_in_anonymous_method_expression4548 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_110_in_explicit_anonymous_function_signature4567 = new BitSet(new ulong[]{0x0020800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003FCUL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature4571 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_explicit_anonymous_function_signature4576 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list4600 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_explicit_anonymous_function_parameter_list4605 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003FCUL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list4613 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter4637 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_explicit_anonymous_function_parameter4642 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_explicit_anonymous_function_parameter4646 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_anonymous_function_parameter_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_123_in_variant_generic_parameter_list4689 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_variant_type_parameters_in_variant_generic_parameter_list4693 = new BitSet(new ulong[]{0x0000080000000000UL});
    public static readonly BitSet FOLLOW_GT_in_variant_generic_parameter_list4697 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_variant_type_variable_name_in_variant_type_parameters4721 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_variant_type_parameters4724 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_variant_type_variable_name_in_variant_type_parameters4730 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_attributes_in_variant_type_variable_name4754 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_variance_annotation_in_variant_type_variable_name4759 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_variable_name_in_variant_type_variable_name4764 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_variance_annotation0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_123_in_generic_parameter_list4810 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_parameters_in_generic_parameter_list4814 = new BitSet(new ulong[]{0x0000080000000000UL});
    public static readonly BitSet FOLLOW_GT_in_generic_parameter_list4818 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributed_type_variable_name_in_type_parameters4842 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_type_parameters4845 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_attributed_type_variable_name_in_type_parameters4851 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_attributes_in_attributed_type_variable_name4875 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_variable_name_in_attributed_type_variable_name4880 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_110_in_cast_expression4900 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_namespace_or_type_name_in_cast_expression4913 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_cast_expression4918 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_cast_expression4924 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_cast_expression4929 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_namespace_or_type_name_in_cast_expression4939 = new BitSet(new ulong[]{0x0000000000000000UL,0x0001000000000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_cast_expression4944 = new BitSet(new ulong[]{0x0000000000000000UL,0x0001000000000000UL});
    public static readonly BitSet FOLLOW_112_in_cast_expression4950 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_cast_expression4954 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_namespace_or_type_name_in_cast_expression4964 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_cast_expression4969 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_cast_expression4975 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_113_in_cast_expression4982 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
    public static readonly BitSet FOLLOW_111_in_cast_expression4986 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_cast_expression4991 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_cast_expression5004 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE28C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_cast_expression5008 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE28C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unary_expression_in_cast_expression5011 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unary_expression_in_multiplicative_expression5033 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL,0x00000000000C0000UL});
    public static readonly BitSet FOLLOW_set_in_multiplicative_expression5038 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unary_expression_in_multiplicative_expression5048 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL,0x00000000000C0000UL});
    public static readonly BitSet FOLLOW_multiplicative_expression_in_additive_expression5070 = new BitSet(new ulong[]{0x0000040000000002UL,0x1000000000000000UL});
    public static readonly BitSet FOLLOW_set_in_additive_expression5073 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_multiplicative_expression_in_additive_expression5081 = new BitSet(new ulong[]{0x0000040000000002UL,0x1000000000000000UL});
    public static readonly BitSet FOLLOW_additive_expression_in_shift_expression5104 = new BitSet(new ulong[]{0x0000080000000002UL,0x0000000000000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_148_in_shift_expression5108 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_GT_in_shift_expression5110 = new BitSet(new ulong[]{0x0000080000000000UL});
    public static readonly BitSet FOLLOW_GT_in_shift_expression5112 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_additive_expression_in_shift_expression5115 = new BitSet(new ulong[]{0x0000080000000002UL,0x0000000000000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_shift_expression_in_relational_expression5137 = new BitSet(new ulong[]{0x0000080000000002UL,0x0800000000000000UL,0x0000000001E00000UL});
    public static readonly BitSet FOLLOW_set_in_relational_expression5149 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_shift_expression_in_relational_expression5161 = new BitSet(new ulong[]{0x0000080000000002UL,0x0800000000000000UL,0x0000000000600000UL});
    public static readonly BitSet FOLLOW_set_in_relational_expression5171 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_non_nullable_type_in_relational_expression5179 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000001800000UL});
    public static readonly BitSet FOLLOW_relational_expression_in_equality_expression5206 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000006000000UL});
    public static readonly BitSet FOLLOW_set_in_equality_expression5213 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_relational_expression_in_equality_expression5221 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000006000000UL});
    public static readonly BitSet FOLLOW_equality_expression_in_and_expression5243 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_129_in_and_expression5246 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_equality_expression_in_and_expression5250 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_and_expression_in_exclusive_or_expression5272 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000008000000UL});
    public static readonly BitSet FOLLOW_155_in_exclusive_or_expression5275 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_and_expression_in_exclusive_or_expression5279 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000008000000UL});
    public static readonly BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression5301 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_156_in_inclusive_or_expression5306 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression5310 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression5332 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_157_in_conditional_and_expression5337 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_inclusive_or_expression_in_conditional_and_expression5341 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression5363 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_158_in_conditional_or_expression5367 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_conditional_and_expression_in_conditional_or_expression5371 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_conditional_or_expression_in_null_coalescing_expression5393 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000080000000UL});
    public static readonly BitSet FOLLOW_159_in_null_coalescing_expression5398 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_null_coalescing_expression_in_null_coalescing_expression5402 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000080000000UL});
    public static readonly BitSet FOLLOW_null_coalescing_expression_in_conditional_expression5423 = new BitSet(new ulong[]{0x0000000000000002UL,0x0001000000000000UL});
    public static readonly BitSet FOLLOW_112_in_conditional_expression5428 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_conditional_expression5432 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
    public static readonly BitSet FOLLOW_100_in_conditional_expression5436 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_conditional_expression5440 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_92_in_array_initializer5464 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE4BC000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_variable_initializer_list_in_array_initializer5468 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000420000000UL});
    public static readonly BitSet FOLLOW_98_in_array_initializer5473 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_array_initializer5478 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_variable_initializer_in_variable_initializer_list5498 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_variable_initializer_list5501 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE09C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_variable_initializer_in_variable_initializer_list5503 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_96_in_assignment_operator5526 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_160_in_assignment_operator5530 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_161_in_assignment_operator5534 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_162_in_assignment_operator5538 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_163_in_assignment_operator5542 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_164_in_assignment_operator5546 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_165_in_assignment_operator5550 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_166_in_assignment_operator5554 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_167_in_assignment_operator5558 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_168_in_assignment_operator5562 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_GT_in_assignment_operator5566 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000400000UL});
    public static readonly BitSet FOLLOW_150_in_assignment_operator5568 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_anonymous_function_signature_in_lambda_expression5588 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000020000000000UL});
    public static readonly BitSet FOLLOW_169_in_lambda_expression5592 = new BitSet(new ulong[]{0x001084FFC0000000UL,0xF7FCEFE09C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_anonymous_function_body_in_lambda_expression5596 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_explicit_anonymous_function_signature_in_anonymous_function_signature5615 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_implicit_anonymous_function_signature_in_anonymous_function_signature5621 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_110_in_implicit_anonymous_function_signature5640 = new BitSet(new ulong[]{0x0020800040000000UL,0x00006FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_implicit_anonymous_function_signature5644 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_implicit_anonymous_function_signature5649 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_implicit_anonymous_function_parameter_list_in_implicit_anonymous_function_signature5654 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_implicit_anonymous_function_signature5659 = new BitSet(new ulong[]{0x0000800040000000UL,0x00006FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_signature5663 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list5684 = new BitSet(new ulong[]{0x0000800040000002UL,0x00006FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_implicit_anonymous_function_parameter5705 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_anonymous_function_body5724 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_anonymous_function_body5729 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_delegate_declaration5751 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x00007C0000010400UL});
    public static readonly BitSet FOLLOW_delegate_modifiers_in_delegate_declaration5756 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000010000UL});
    public static readonly BitSet FOLLOW_144_in_delegate_declaration5761 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_return_type_in_delegate_declaration5765 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_delegate_declaration5769 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800400000000000UL});
    public static readonly BitSet FOLLOW_variant_generic_parameter_list_in_delegate_declaration5772 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_delegate_declaration5780 = new BitSet(new ulong[]{0x0020800040000000UL,0x07FE2FE284000000UL,0x0FFF8000000003FCUL,0x0000000600010780UL});
    public static readonly BitSet FOLLOW_formal_parameter_list_in_delegate_declaration5784 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_delegate_declaration5789 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000000000000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_delegate_declaration5793 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_delegate_declaration5798 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_delegate_modifier_in_delegate_modifiers5820 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00007C0000000400UL});
    public static readonly BitSet FOLLOW_delegate_modifier_in_delegate_modifiers5823 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00007C0000000400UL});
    public static readonly BitSet FOLLOW_set_in_delegate_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_from_clause_in_query_expression5885 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_query_body_in_query_expression5889 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_175_in_from_clause5909 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_from_clause5913 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_from_clause5918 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000020000UL});
    public static readonly BitSet FOLLOW_145_in_from_clause5922 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_from_clause5926 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_query_body_clauses_in_query_body5946 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_select_or_group_clause_in_query_body5951 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0001000000000000UL});
    public static readonly BitSet FOLLOW_query_continuation_in_query_body5955 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_176_in_query_continuation5975 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_query_continuation5979 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_query_body_in_query_continuation5983 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_query_body_clause_in_query_body_clauses6002 = new BitSet(new ulong[]{0x000084FFC0000002UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_from_clause_in_query_body_clause6023 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_let_clause_in_query_body_clause6028 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_where_clause_in_query_body_clause6033 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_join_clause_in_query_body_clause6038 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_orderby_clause_in_query_body_clause6043 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_177_in_join_clause6062 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_join_clause6066 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_join_clause6071 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000020000UL});
    public static readonly BitSet FOLLOW_145_in_join_clause6075 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_join_clause6079 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0004000000000000UL});
    public static readonly BitSet FOLLOW_178_in_join_clause6083 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_join_clause6087 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0008000000000000UL});
    public static readonly BitSet FOLLOW_179_in_join_clause6091 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_join_clause6095 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0001000000000000UL});
    public static readonly BitSet FOLLOW_176_in_join_clause6098 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_join_clause6100 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_180_in_let_clause6122 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_let_clause6126 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000100000000UL});
    public static readonly BitSet FOLLOW_96_in_let_clause6130 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_let_clause6134 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_181_in_orderby_clause6153 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_ordering_list_in_orderby_clause6157 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ordering_in_ordering_list6177 = new BitSet(new ulong[]{0x000084FFC0000002UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_ordering6198 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00C0000000000000UL});
    public static readonly BitSet FOLLOW_ordering_direction_in_ordering6203 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_ordering_direction0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_select_clause_in_select_or_group_clause6249 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_group_clause_in_select_or_group_clause6254 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_184_in_select_clause6274 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_select_clause6278 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_185_in_group_clause6298 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_group_clause6302 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0400000000000000UL});
    public static readonly BitSet FOLLOW_186_in_group_clause6306 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_group_clause6310 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_187_in_where_clause6330 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_boolean_expression_in_where_clause6334 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_class_declaration6357 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0xF0007C0000000400UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_class_modifiers_in_class_declaration6360 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x3000000000000000UL});
    public static readonly BitSet FOLLOW_188_in_class_declaration6365 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
    public static readonly BitSet FOLLOW_189_in_class_declaration6369 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_class_declaration6372 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_generic_parameter_list_in_class_declaration6375 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_class_base_in_class_declaration6380 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_class_declaration6385 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_class_body_in_class_declaration6390 = new BitSet(new ulong[]{0x0010000000000002UL});
    public static readonly BitSet FOLLOW_SEMI_in_class_declaration6394 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_class_modifier_in_class_modifiers6415 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0xC0007C0000000400UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_set_in_class_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_100_in_class_base6487 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_class_type_in_class_base6491 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_class_base6494 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_interface_type_list_in_class_base6496 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_100_in_class_base6503 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_interface_type_list_in_class_base6507 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_name_in_interface_type_list6531 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_interface_type_list6534 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_name_in_interface_type_list6542 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_type_parameter_constraints_clause_in_type_parameter_constraints_clauses6566 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_187_in_type_parameter_constraints_clause6587 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_variable_name_in_type_parameter_constraints_clause6591 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
    public static readonly BitSet FOLLOW_100_in_type_parameter_constraints_clause6595 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE280000000UL,0x2FFF8000000207F4UL,0x0000000600010682UL});
    public static readonly BitSet FOLLOW_type_parameter_constraint_list_in_type_parameter_constraints_clause6599 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primary_constraint_in_type_parameter_constraint_list6620 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_type_parameter_constraint_list6626 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list6630 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_type_parameter_constraint_list6634 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE280000000UL,0x2FFF8000000207F4UL,0x0000000600010682UL});
    public static readonly BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list6638 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primary_constraint_in_type_parameter_constraint_list6645 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_type_parameter_constraint_list6651 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list6655 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primary_constraint_in_type_parameter_constraint_list6662 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_type_parameter_constraint_list6668 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE280000000UL,0x2FFF8000000207F4UL,0x0000000600010682UL});
    public static readonly BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list6672 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list6679 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_type_parameter_constraint_list6684 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE280000000UL,0x2FFF8000000207F4UL,0x0000000600010682UL});
    public static readonly BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list6688 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primary_constraint_in_type_parameter_constraint_list6694 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_secondary_constraint_list_in_type_parameter_constraint_list6699 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constructor_constraint_in_type_parameter_constraint_list6704 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_class_type_in_primary_constraint6725 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_189_in_primary_constraint6730 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_193_in_primary_constraint6735 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_secondary_constraint_in_secondary_constraint_list6759 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_secondary_constraint_list6762 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_secondary_constraint_in_secondary_constraint_list6768 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_type_name_in_secondary_constraint6793 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_variable_name_in_secondary_constraint6797 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_138_in_constructor_constraint6818 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_constructor_constraint6822 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_constructor_constraint6826 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_92_in_class_body6846 = new BitSet(new ulong[]{0x0000A00040000000UL,0x47FE2FE2E1000000UL,0xFFFFFC00000107F0UL,0x00000006000146FFUL});
    public static readonly BitSet FOLLOW_class_member_declarations_in_class_body6850 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_class_body6855 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_class_member_declaration_in_class_member_declarations6875 = new BitSet(new ulong[]{0x0000A00040000002UL,0x47FE2FE2C1000000UL,0xFFFFFC00000107F0UL,0x00000006000146FFUL});
    public static readonly BitSet FOLLOW_constant_declaration_in_class_member_declaration6896 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_field_declaration_in_class_member_declaration6901 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_method_declaration_in_class_member_declaration6906 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_property_declaration_in_class_member_declaration6911 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_event_declaration_in_class_member_declaration6916 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_indexer_declaration_in_class_member_declaration6921 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_operator_declaration_in_class_member_declaration6926 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constructor_declaration_in_class_member_declaration6931 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_destructor_declaration_in_class_member_declaration6936 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_static_constructor_declaration_in_class_member_declaration6941 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_declaration_in_class_member_declaration6946 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_class_declaration_in_class_member_declaration6952 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_constant_declaration6972 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x00003C0000000400UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_constant_modifiers_in_constant_declaration6977 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_194_in_constant_declaration6982 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_constant_declaration6986 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_constant_declarators_in_constant_declaration6990 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_constant_declaration6994 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constant_modifier_in_constant_modifiers7014 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00003C0000000400UL});
    public static readonly BitSet FOLLOW_set_in_constant_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_field_declaration7071 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFFFC00000007F0UL,0x0000000600010699UL});
    public static readonly BitSet FOLLOW_field_modifiers_in_field_declaration7076 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_field_declaration7081 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_variable_declarators_in_field_declaration7085 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_field_declaration7089 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_field_modifier_in_field_modifiers7110 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00007C0000000400UL,0x0000000000000019UL});
    public static readonly BitSet FOLLOW_set_in_field_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_variable_declarator_in_variable_declarators7183 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_variable_declarators7186 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_variable_declarator_in_variable_declarators7188 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_type_name_in_variable_declarator7211 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000100000000UL});
    public static readonly BitSet FOLLOW_96_in_variable_declarator7214 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE09C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_variable_initializer_in_variable_declarator7218 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_variable_initializer7242 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_array_initializer_in_variable_initializer7246 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_method_declaration_in_method_declarations7267 = new BitSet(new ulong[]{0x0000800040000002UL,0x07FE2FE2C0000000UL,0xDFFFFC00000007F0UL,0x00000006000106E1UL});
    public static readonly BitSet FOLLOW_method_header_in_method_declaration7289 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_method_body_in_method_declaration7293 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_method_header7315 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE0C0000000UL,0xDFFFFC00000007F0UL,0x00000006000106E1UL});
    public static readonly BitSet FOLLOW_method_modifiers_in_method_header7320 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x1FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_188_in_method_header7325 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_return_type_in_method_header7330 = new BitSet(new ulong[]{0x000080FFC0000000UL,0x07FC6FE08C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_member_name_in_method_header7334 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800400000000000UL});
    public static readonly BitSet FOLLOW_generic_parameter_list_in_method_header7338 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_method_header7344 = new BitSet(new ulong[]{0x0020800040000000UL,0x07FE2FE284000000UL,0x0FFF8000000003FCUL,0x0000000600010780UL});
    public static readonly BitSet FOLLOW_formal_parameter_list_in_method_header7348 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_method_header7353 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_method_header7357 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_method_modifier_in_method_modifiers7378 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL,0xC0007C0000000400UL,0x0000000000000061UL});
    public static readonly BitSet FOLLOW_set_in_method_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_return_type7464 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_113_in_return_type7469 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_return_type7471 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_block_in_method_body7492 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_formal_parameter_in_formal_parameter_list7516 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_formal_parameter_list7519 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE284000000UL,0x0FFF8000000003FCUL,0x0000000600010780UL});
    public static readonly BitSet FOLLOW_formal_parameter_in_formal_parameter_list7525 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_fixed_parameter_in_formal_parameter7549 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_parameter_array_in_formal_parameter7553 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_199_in_formal_parameter7557 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_fixed_parameter_in_fixed_parameters7577 = new BitSet(new ulong[]{0x0000800040000002UL,0x07FE2FE284000000UL,0x0FFF8000000003FCUL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_attributes_in_fixed_parameter7599 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE084000000UL,0x0FFF8000000003FCUL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_parameter_modifier_in_fixed_parameter7604 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_fixed_parameter7609 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_fixed_parameter7613 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000100000000UL});
    public static readonly BitSet FOLLOW_default_argument_in_fixed_parameter7615 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_96_in_default_argument7636 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_default_argument7638 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_parameter_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_parameter_array7685 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010780UL});
    public static readonly BitSet FOLLOW_200_in_parameter_array7690 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_array_type_in_parameter_array7695 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_parameter_array7699 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_property_declaration7719 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE0C0000000UL,0xCFFFFC00000007F0UL,0x00000006000106E1UL});
    public static readonly BitSet FOLLOW_property_modifiers_in_property_declaration7724 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_property_declaration7729 = new BitSet(new ulong[]{0x000080FFC0000000UL,0x07FC6FE08C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_member_name_in_property_declaration7733 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_92_in_property_declaration7737 = new BitSet(new ulong[]{0x0000C00000000000UL,0x0000000200000000UL,0x00003C0000000000UL});
    public static readonly BitSet FOLLOW_accessor_declarations_in_property_declaration7741 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_property_declaration7745 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_property_modifier_in_property_modifiers7766 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL,0xC0007C0000000400UL,0x0000000000000061UL});
    public static readonly BitSet FOLLOW_set_in_property_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_qid_in_member_name7851 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_generic_parameter_list_in_member_name7854 = new BitSet(new ulong[]{0x0000030000000000UL});
    public static readonly BitSet FOLLOW_qid_part_in_member_name7856 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_get_accessor_declaration_in_accessor_declarations7881 = new BitSet(new ulong[]{0x0000C00000000002UL,0x0000000200000000UL,0x00003C0000000000UL});
    public static readonly BitSet FOLLOW_set_accessor_declaration_in_accessor_declarations7885 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_accessor_declaration_in_accessor_declarations7893 = new BitSet(new ulong[]{0x0000400000000002UL,0x0000000200000000UL,0x00003C0000000000UL});
    public static readonly BitSet FOLLOW_get_accessor_declaration_in_accessor_declarations7897 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_get_accessor_declaration7919 = new BitSet(new ulong[]{0x0000400000000000UL,0x0000000000000000UL,0x00003C0000000000UL});
    public static readonly BitSet FOLLOW_accessor_modifier_in_get_accessor_declaration7924 = new BitSet(new ulong[]{0x0000400000000000UL});
    public static readonly BitSet FOLLOW_GET_in_get_accessor_declaration7929 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_accessor_body_in_get_accessor_declaration7933 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_set_accessor_declaration7953 = new BitSet(new ulong[]{0x0000800000000000UL,0x0000000000000000UL,0x00003C0000000000UL});
    public static readonly BitSet FOLLOW_accessor_modifier_in_set_accessor_declaration7958 = new BitSet(new ulong[]{0x0000800000000000UL});
    public static readonly BitSet FOLLOW_SET_in_set_accessor_declaration7963 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_accessor_body_in_set_accessor_declaration7967 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_170_in_accessor_modifier7988 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_171_in_accessor_modifier7992 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_172_in_accessor_modifier7996 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_173_in_accessor_modifier8000 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_171_in_accessor_modifier8005 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000100000000000UL});
    public static readonly BitSet FOLLOW_172_in_accessor_modifier8009 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_172_in_accessor_modifier8015 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000080000000000UL});
    public static readonly BitSet FOLLOW_171_in_accessor_modifier8019 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_accessor_body8041 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_event_declaration8065 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010040000000UL,0xC0007C0000000400UL,0x0000000000000061UL});
    public static readonly BitSet FOLLOW_event_modifiers_in_event_declaration8070 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010000000000UL});
    public static readonly BitSet FOLLOW_104_in_event_declaration8075 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_event_declaration8079 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_variable_declarators_in_event_declaration8083 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_event_declaration8087 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_event_declaration8095 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010040000000UL,0xC0007C0000000400UL,0x0000000000000061UL});
    public static readonly BitSet FOLLOW_event_modifiers_in_event_declaration8100 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010000000000UL});
    public static readonly BitSet FOLLOW_104_in_event_declaration8105 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_event_declaration8109 = new BitSet(new ulong[]{0x000080FFC0000000UL,0x07FC6FE08C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_member_name_in_event_declaration8113 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_92_in_event_declaration8117 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL,0x0000000000000000UL,0x0000000000000600UL});
    public static readonly BitSet FOLLOW_event_accessor_declarations_in_event_declaration8121 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_event_declaration8125 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_event_modifier_in_event_modifiers8146 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL,0xC0007C0000000400UL,0x0000000000000061UL});
    public static readonly BitSet FOLLOW_set_in_event_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations8234 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL,0x0000000000000000UL,0x0000000000000600UL});
    public static readonly BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations8238 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_remove_accessor_declaration_in_event_accessor_declarations8245 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL,0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_add_accessor_declaration_in_event_accessor_declarations8249 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_add_accessor_declaration8270 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000200UL});
    public static readonly BitSet FOLLOW_201_in_add_accessor_declaration8275 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_block_in_add_accessor_declaration8279 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_remove_accessor_declaration8299 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_202_in_remove_accessor_declaration8304 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_block_in_remove_accessor_declaration8308 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_indexer_declaration8328 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE2C0000000UL,0xCFFFFC00000007F0UL,0x00000006000106E0UL});
    public static readonly BitSet FOLLOW_indexer_modifiers_in_indexer_declaration8333 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE2C0000000UL,0xCFFFFC00000007F0UL,0x00000006000106E0UL});
    public static readonly BitSet FOLLOW_indexer_declarator_in_indexer_declaration8338 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_92_in_indexer_declaration8342 = new BitSet(new ulong[]{0x0000C00000000000UL,0x0000000200000000UL,0x00003C0000000000UL});
    public static readonly BitSet FOLLOW_accessor_declarations_in_indexer_declaration8346 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_indexer_declaration8350 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_indexer_modifier_in_indexer_modifiers8370 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL,0xC0007C0000000400UL,0x0000000000000060UL});
    public static readonly BitSet FOLLOW_set_in_indexer_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_indexer_declarator8451 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE084000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_name_in_indexer_declarator8456 = new BitSet(new ulong[]{0x0000010000000000UL});
    public static readonly BitSet FOLLOW_DOT_in_indexer_declarator8458 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000004000000UL});
    public static readonly BitSet FOLLOW_90_in_indexer_declarator8462 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_97_in_indexer_declarator8466 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE284000000UL,0x0FFF8000000003FCUL,0x0000000600010780UL});
    public static readonly BitSet FOLLOW_formal_parameter_list_in_indexer_declarator8470 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
    public static readonly BitSet FOLLOW_99_in_indexer_declarator8474 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_operator_declaration8494 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000240000000UL,0x0000440000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_operator_modifiers_in_operator_declaration8499 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600013680UL});
    public static readonly BitSet FOLLOW_operator_declarator_in_operator_declaration8503 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_operator_body_in_operator_declaration8507 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_operator_modifier_in_operator_modifiers8527 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000240000000UL,0x0000440000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_set_in_operator_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unary_operator_declarator_in_operator_declarator8580 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_binary_operator_declarator_in_operator_declarator8585 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_conversion_operator_declarator_in_operator_declarator8590 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_unary_operator_declarator8609 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_203_in_unary_operator_declarator8613 = new BitSet(new ulong[]{0x0000046000000000UL,0xF000000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_overloadable_unary_operator_in_unary_operator_declarator8617 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_unary_operator_declarator8621 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_unary_operator_declarator8625 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_unary_operator_declarator8629 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_unary_operator_declarator8633 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_overloadable_unary_operator0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_binary_operator_declarator8708 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_203_in_binary_operator_declarator8712 = new BitSet(new ulong[]{0x00000C0000000000UL,0x1800800000000000UL,0x000000001E7C0002UL});
    public static readonly BitSet FOLLOW_overloadable_binary_operator_in_binary_operator_declarator8716 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_binary_operator_declarator8720 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_binary_operator_declarator8724 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_binary_operator_declarator8728 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_binary_operator_declarator8732 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_binary_operator_declarator8736 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_binary_operator_declarator8740 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_binary_operator_declarator8744 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_124_in_overloadable_binary_operator8765 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MINUS_in_overloadable_binary_operator8769 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_111_in_overloadable_binary_operator8773 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_146_in_overloadable_binary_operator8777 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_147_in_overloadable_binary_operator8781 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_129_in_overloadable_binary_operator8785 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_156_in_overloadable_binary_operator8789 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_155_in_overloadable_binary_operator8793 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_148_in_overloadable_binary_operator8797 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_GT_in_overloadable_binary_operator8801 = new BitSet(new ulong[]{0x0000080000000000UL});
    public static readonly BitSet FOLLOW_GT_in_overloadable_binary_operator8803 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_153_in_overloadable_binary_operator8807 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_154_in_overloadable_binary_operator8811 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_GT_in_overloadable_binary_operator8815 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_123_in_overloadable_binary_operator8819 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_150_in_overloadable_binary_operator8823 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_149_in_overloadable_binary_operator8827 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_conversion_operator_declarator8848 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_203_in_conversion_operator_declarator8857 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_conversion_operator_declarator8861 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_conversion_operator_declarator8865 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_conversion_operator_declarator8869 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_conversion_operator_declarator8873 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_conversion_operator_declarator8877 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_operator_body8897 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_constructor_declaration8917 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE2C0000000UL,0x0FFFFC0000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_constructor_modifiers_in_constructor_declaration8922 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE2C0000000UL,0x0FFFFC0000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_constructor_declarator_in_constructor_declaration8927 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_constructor_body_in_constructor_declaration8931 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constructor_modifier_in_constructor_modifiers8951 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL,0x00007C0000000000UL});
    public static readonly BitSet FOLLOW_set_in_constructor_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_constructor_declarator9013 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_constructor_declarator9017 = new BitSet(new ulong[]{0x0020800040000000UL,0x07FE2FE284000000UL,0x0FFF8000000003FCUL,0x0000000600010780UL});
    public static readonly BitSet FOLLOW_formal_parameter_list_in_constructor_declarator9021 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_constructor_declarator9026 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000001000000000UL});
    public static readonly BitSet FOLLOW_constructor_initializer_in_constructor_declarator9030 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_100_in_constructor_initializer9051 = new BitSet(new ulong[]{0x0000000000000000UL,0x000000000C000000UL});
    public static readonly BitSet FOLLOW_set_in_constructor_initializer9055 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_constructor_initializer9065 = new BitSet(new ulong[]{0x002084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFFFUL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_argument_list_in_constructor_initializer9069 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_constructor_initializer9074 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_constructor_body9094 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_static_constructor_declaration9114 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000240000000UL,0x0000400000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_static_constructor_modifiers_in_static_constructor_declaration9119 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_static_constructor_declaration9122 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_static_constructor_declaration9126 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_static_constructor_declaration9130 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_static_constructor_body_in_static_constructor_declaration9133 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_94_in_static_constructor_modifiers9155 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_174_in_static_constructor_modifiers9157 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_192_in_static_constructor_modifiers9159 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_94_in_static_constructor_modifiers9164 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_192_in_static_constructor_modifiers9166 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_174_in_static_constructor_modifiers9168 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_174_in_static_constructor_modifiers9174 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_94_in_static_constructor_modifiers9176 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_192_in_static_constructor_modifiers9178 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_174_in_static_constructor_modifiers9183 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_192_in_static_constructor_modifiers9185 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_94_in_static_constructor_modifiers9187 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_192_in_static_constructor_modifiers9193 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_94_in_static_constructor_modifiers9195 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_174_in_static_constructor_modifiers9197 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_192_in_static_constructor_modifiers9203 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_174_in_static_constructor_modifiers9205 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_94_in_static_constructor_modifiers9207 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_94_in_static_constructor_modifiers9214 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_174_in_static_constructor_modifiers9219 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_192_in_static_constructor_modifiers9224 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_static_constructor_body9243 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_destructor_declaration9263 = new BitSet(new ulong[]{0x0000000000000000UL,0x4000000040000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_destructor_modifiers_in_destructor_declaration9268 = new BitSet(new ulong[]{0x0000000000000000UL,0x4000000000000000UL});
    public static readonly BitSet FOLLOW_126_in_destructor_declaration9273 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_destructor_declaration9276 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_destructor_declaration9280 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_destructor_declaration9284 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_destructor_body_in_destructor_declaration9289 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_94_in_destructor_modifiers9310 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_174_in_destructor_modifiers9313 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_94_in_destructor_modifiers9320 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_174_in_destructor_modifiers9322 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_destructor_body9344 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_struct_declaration9366 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x10007C0000000400UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_struct_modifiers_in_struct_declaration9371 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x1000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_188_in_struct_declaration9376 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_193_in_struct_declaration9381 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_struct_declaration9385 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_generic_parameter_list_in_struct_declaration9389 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_struct_interfaces_in_struct_declaration9395 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_struct_declaration9400 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_struct_body_in_struct_declaration9405 = new BitSet(new ulong[]{0x0010000000000002UL});
    public static readonly BitSet FOLLOW_SEMI_in_struct_declaration9409 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_struct_modifier_in_struct_modifiers9430 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00007C0000000400UL});
    public static readonly BitSet FOLLOW_set_in_struct_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_100_in_struct_interfaces9491 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_interface_type_list_in_struct_interfaces9495 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_92_in_struct_body9514 = new BitSet(new ulong[]{0x0000A00040000000UL,0x07FE2FE2E1000000UL,0xFFFFFC00000107F0UL,0x00000006000146FFUL});
    public static readonly BitSet FOLLOW_struct_member_declarations_in_struct_body9518 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_struct_body9523 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_struct_member_declaration_in_struct_member_declarations9542 = new BitSet(new ulong[]{0x0000A00040000002UL,0x07FE2FE2C1000000UL,0xFFFFFC00000107F0UL,0x00000006000146FFUL});
    public static readonly BitSet FOLLOW_constant_declaration_in_struct_member_declaration9563 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_field_declaration_in_struct_member_declaration9568 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_method_declaration_in_struct_member_declaration9573 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_property_declaration_in_struct_member_declaration9578 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_event_declaration_in_struct_member_declaration9583 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_indexer_declaration_in_struct_member_declaration9588 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_operator_declaration_in_struct_member_declaration9593 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constructor_declaration_in_struct_member_declaration9598 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_static_constructor_declaration_in_struct_member_declaration9603 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_declaration_in_struct_member_declaration9608 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_interface_declaration9630 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x10007C0000000400UL,0x0000000000004000UL});
    public static readonly BitSet FOLLOW_interface_modifiers_in_interface_declaration9635 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x1000000000000000UL,0x0000000000004000UL});
    public static readonly BitSet FOLLOW_188_in_interface_declaration9640 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000004000UL});
    public static readonly BitSet FOLLOW_206_in_interface_declaration9645 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_interface_declaration9649 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_variant_generic_parameter_list_in_interface_declaration9653 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_interface_base_in_interface_declaration9662 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_declaration9667 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_interface_body_in_interface_declaration9672 = new BitSet(new ulong[]{0x0010000000000002UL});
    public static readonly BitSet FOLLOW_SEMI_in_interface_declaration9676 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_modifier_in_interface_modifiers9699 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00007C0000000400UL});
    public static readonly BitSet FOLLOW_set_in_interface_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_100_in_interface_base9763 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_interface_type_list_in_interface_base9765 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_92_in_interface_body9785 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE2E0000000UL,0xCFFFFC00000007F0UL,0x00000006000106E1UL});
    public static readonly BitSet FOLLOW_interface_member_declarations_in_interface_body9789 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_interface_body9794 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_member_declaration_in_interface_member_declarations9814 = new BitSet(new ulong[]{0x0000800040000002UL,0x07FE2FE2C0000000UL,0xCFFFFC00000007F0UL,0x00000006000106E1UL});
    public static readonly BitSet FOLLOW_interface_property_declaration_in_interface_member_declaration9835 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_method_declaration_in_interface_member_declaration9841 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_event_declaration_in_interface_member_declaration9847 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_indexer_declaration_in_interface_member_declaration9853 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_interface_method_declaration9873 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE0C0000000UL,0xCFFFFC00000007F0UL,0x00000006000106E1UL});
    public static readonly BitSet FOLLOW_138_in_interface_method_declaration9878 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE0C0000000UL,0xCFFFFC00000007F0UL,0x00000006000106E1UL});
    public static readonly BitSet FOLLOW_method_modifiers_in_interface_method_declaration9883 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_return_type_in_interface_method_declaration9887 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_interface_method_declaration9891 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800400000000000UL});
    public static readonly BitSet FOLLOW_generic_parameter_list_in_interface_method_declaration9895 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_interface_method_declaration9903 = new BitSet(new ulong[]{0x0020800040000000UL,0x07FE2FE284000000UL,0x0FFF8000000003FCUL,0x0000000600010780UL});
    public static readonly BitSet FOLLOW_formal_parameter_list_in_interface_method_declaration9908 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_interface_method_declaration9913 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000000000000000UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_type_parameter_constraints_clauses_in_interface_method_declaration9918 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_interface_method_declaration9923 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_interface_property_declaration9943 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000007F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_138_in_interface_property_declaration9948 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_interface_property_declaration9953 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_interface_property_declaration9957 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_92_in_interface_property_declaration9961 = new BitSet(new ulong[]{0x0000C00000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_interface_accessor_declarations_in_interface_property_declaration9965 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_interface_property_declaration9969 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations9989 = new BitSet(new ulong[]{0x0000C00000000002UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations9993 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_set_accessor_declaration_in_interface_accessor_declarations9999 = new BitSet(new ulong[]{0x0000400000000002UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_interface_get_accessor_declaration_in_interface_accessor_declarations10003 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_interface_get_accessor_declaration10024 = new BitSet(new ulong[]{0x0000400000000000UL});
    public static readonly BitSet FOLLOW_GET_in_interface_get_accessor_declaration10029 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_interface_get_accessor_declaration10033 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_interface_set_accessor_declaration10055 = new BitSet(new ulong[]{0x0000800000000000UL});
    public static readonly BitSet FOLLOW_SET_in_interface_set_accessor_declaration10060 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_interface_set_accessor_declaration10064 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_interface_event_declaration10086 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010000000000UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_138_in_interface_event_declaration10091 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010000000000UL});
    public static readonly BitSet FOLLOW_104_in_interface_event_declaration10096 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_interface_event_declaration10100 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_interface_event_declaration10104 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_interface_event_declaration10108 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_interface_indexer_declaration10129 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000007F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_138_in_interface_indexer_declaration10135 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_interface_indexer_declaration10141 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000004000000UL});
    public static readonly BitSet FOLLOW_90_in_interface_indexer_declaration10145 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_97_in_interface_indexer_declaration10149 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE284000000UL,0x0FFF8000000003FCUL,0x0000000600010780UL});
    public static readonly BitSet FOLLOW_formal_parameter_list_in_interface_indexer_declaration10153 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
    public static readonly BitSet FOLLOW_99_in_interface_indexer_declaration10157 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_92_in_interface_indexer_declaration10161 = new BitSet(new ulong[]{0x0000C00000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_interface_accessor_declarations_in_interface_indexer_declaration10165 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_interface_indexer_declaration10169 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_enum_declaration10192 = new BitSet(new ulong[]{0x0000200000000000UL,0x0000000000000000UL,0x00003C0000000400UL});
    public static readonly BitSet FOLLOW_enum_modifiers_in_enum_declaration10197 = new BitSet(new ulong[]{0x0000200000000000UL});
    public static readonly BitSet FOLLOW_ENUM_in_enum_declaration10202 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_enum_declaration10206 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001010000000UL});
    public static readonly BitSet FOLLOW_enum_base_in_enum_declaration10210 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001010000000UL});
    public static readonly BitSet FOLLOW_enum_body_in_enum_declaration10215 = new BitSet(new ulong[]{0x0010000000000002UL});
    public static readonly BitSet FOLLOW_SEMI_in_enum_declaration10219 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_100_in_enum_base10242 = new BitSet(new ulong[]{0x0000000000000000UL,0x07FC000000000000UL});
    public static readonly BitSet FOLLOW_integral_type_in_enum_base10246 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_92_in_enum_body10266 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE2A0000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_enum_member_declarations_in_enum_body10269 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000420000000UL});
    public static readonly BitSet FOLLOW_98_in_enum_body10271 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_enum_body10278 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations10298 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_enum_member_declarations10301 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_enum_member_declaration_in_enum_member_declarations10303 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_attributes_in_enum_member_declaration10325 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_enum_member_declaration10330 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000100000000UL});
    public static readonly BitSet FOLLOW_96_in_enum_member_declaration10335 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_enum_member_declaration10339 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_enum_modifier_in_enum_modifiers10361 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00003C0000000400UL});
    public static readonly BitSet FOLLOW_set_in_enum_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_labeled_statement_in_statement10420 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_declaration_statement_in_statement10425 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_statement10430 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_embedded_statement10450 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_empty_statement_in_embedded_statement10455 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_statement_in_embedded_statement10460 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_selection_statement_in_embedded_statement10465 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_iteration_statement_in_embedded_statement10470 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_jump_statement_in_embedded_statement10475 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_try_statement_in_embedded_statement10480 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_checked_statement_in_embedded_statement10485 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unchecked_statement_in_embedded_statement10490 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_lock_statement_in_embedded_statement10495 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_using_statement_in_embedded_statement10500 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_yield_statement_in_embedded_statement10506 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unsafe_statement_in_embedded_statement10512 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_fixed_statement_in_embedded_statement10517 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_207_in_fixed_statement10536 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_fixed_statement10540 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_pointer_type_in_fixed_statement10544 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_fixed_pointer_declarators_in_fixed_statement10546 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_fixed_statement10550 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_fixed_statement10554 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators10574 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_fixed_pointer_declarators10579 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_fixed_pointer_declarator_in_fixed_pointer_declarators10583 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_identifier_in_fixed_pointer_declarator10605 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000100000000UL});
    public static readonly BitSet FOLLOW_96_in_fixed_pointer_declarator10609 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_fixed_pointer_initializer_in_fixed_pointer_declarator10613 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_129_in_fixed_pointer_initializer10633 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_variable_reference_in_fixed_pointer_initializer10637 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_fixed_pointer_initializer10645 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_174_in_unsafe_statement10664 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_block_in_unsafe_statement10668 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SEMI_in_block10687 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_92_in_block10692 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FEFFE0BC000000UL,0x0FFFC0000001FFF3UL,0x000000073FEB8684UL});
    public static readonly BitSet FOLLOW_statement_list_in_block10696 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_block10701 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_statement_in_statement_list10721 = new BitSet(new ulong[]{0x001094FFC0002002UL,0xF7FEFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FEB8684UL});
    public static readonly BitSet FOLLOW_SEMI_in_empty_statement10742 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_labeled_statement10762 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
    public static readonly BitSet FOLLOW_100_in_labeled_statement10766 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FEFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FEB8684UL});
    public static readonly BitSet FOLLOW_statement_in_labeled_statement10770 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_local_variable_declaration_in_declaration_statement10791 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_local_constant_declaration_in_declaration_statement10797 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_declaration_statement10800 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_local_variable_type_in_local_variable_declaration10820 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_local_variable_declarators_in_local_variable_declaration10824 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_local_variable_type10844 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_208_in_local_variable_type10849 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_209_in_local_variable_type10855 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators10874 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_local_variable_declarators10877 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_local_variable_declarator_in_local_variable_declarators10879 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_identifier_in_local_variable_declarator10901 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000100000000UL});
    public static readonly BitSet FOLLOW_96_in_local_variable_declarator10904 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE09C000000UL,0x0FFF80000001FFF3UL,0x0000000600050680UL});
    public static readonly BitSet FOLLOW_local_variable_initializer_in_local_variable_declarator10908 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_local_variable_initializer10933 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_array_initializer_in_local_variable_initializer10938 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_stackalloc_initializer_in_local_variable_initializer10944 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_210_in_stackalloc_initializer10963 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unmanaged_type_in_stackalloc_initializer10967 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_97_in_stackalloc_initializer10971 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_stackalloc_initializer10975 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
    public static readonly BitSet FOLLOW_99_in_stackalloc_initializer10979 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_194_in_local_constant_declaration10999 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_local_constant_declaration11003 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_constant_declarators_in_local_constant_declaration11007 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constant_declarator_in_constant_declarators11027 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_constant_declarators11030 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_constant_declarator_in_constant_declarators11032 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_identifier_in_constant_declarator11054 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000100000000UL});
    public static readonly BitSet FOLLOW_96_in_constant_declarator11059 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_constant_expression_in_constant_declarator11063 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_expression_statement11086 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_expression_statement11090 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_invocation_expression_in_statement_expression11110 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_object_creation_expression_in_statement_expression11115 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_assignment_in_statement_expression11120 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unary_expression_in_statement_expression11125 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_if_statement_in_selection_statement11144 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_switch_statement_in_selection_statement11149 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IF_in_if_statement11169 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_if_statement11173 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_boolean_expression_in_if_statement11177 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_if_statement11181 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_if_statement11185 = new BitSet(new ulong[]{0x0000000000000202UL});
    public static readonly BitSet FOLLOW_else_statement_in_if_statement11189 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ELSE_in_else_statement11211 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_else_statement11215 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_211_in_switch_statement11237 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_switch_statement11241 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_switch_statement11245 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_switch_statement11249 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_switch_block_in_switch_statement11253 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_92_in_switch_block11273 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL,0x0000000000008000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_switch_sections_in_switch_block11277 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_switch_block11282 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_switch_section_in_switch_sections11302 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000008000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_switch_labels_in_switch_section11323 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FEFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FEB8684UL});
    public static readonly BitSet FOLLOW_statement_list_in_switch_section11327 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_switch_label_in_switch_labels11347 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000008000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_212_in_switch_label11369 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_constant_expression_in_switch_label11373 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
    public static readonly BitSet FOLLOW_100_in_switch_label11377 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_143_in_switch_label11384 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
    public static readonly BitSet FOLLOW_100_in_switch_label11388 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_while_statement_in_iteration_statement11409 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_do_statement_in_iteration_statement11414 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_for_statement_in_iteration_statement11419 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_foreach_statement_in_iteration_statement11424 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_213_in_while_statement11444 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_while_statement11448 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_boolean_expression_in_while_statement11452 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_while_statement11456 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_while_statement11460 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_214_in_do_statement11480 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_do_statement11484 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000200000UL});
    public static readonly BitSet FOLLOW_213_in_do_statement11488 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_do_statement11492 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_boolean_expression_in_do_statement11496 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_do_statement11500 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_do_statement11504 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_215_in_for_statement11524 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_for_statement11528 = new BitSet(new ulong[]{0x001084FFC0000000UL,0xF7FEEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600030680UL});
    public static readonly BitSet FOLLOW_for_initializer_in_for_statement11532 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_for_statement11537 = new BitSet(new ulong[]{0x001084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_for_condition_in_for_statement11541 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_for_statement11546 = new BitSet(new ulong[]{0x002084FFC0000000UL,0xF7FEEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600030680UL});
    public static readonly BitSet FOLLOW_for_iterator_in_for_statement11550 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_for_statement11555 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_for_statement11559 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_local_variable_declaration_in_for_initializer11579 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_statement_expression_list_in_for_initializer11584 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_boolean_expression_in_for_condition11604 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_statement_expression_list_in_for_iterator11624 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_statement_expression_in_statement_expression_list11644 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_statement_expression_list11647 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FEEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600030680UL});
    public static readonly BitSet FOLLOW_statement_expression_in_statement_expression_list11649 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_216_in_foreach_statement11671 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_foreach_statement11675 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600030680UL});
    public static readonly BitSet FOLLOW_local_variable_type_in_foreach_statement11679 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_foreach_statement11683 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000020000UL});
    public static readonly BitSet FOLLOW_145_in_foreach_statement11687 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_foreach_statement11691 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_foreach_statement11695 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_foreach_statement11699 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_break_statement_in_jump_statement11719 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_continue_statement_in_jump_statement11724 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_goto_statement_in_jump_statement11729 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_return_statement_in_jump_statement11734 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_throw_statement_in_jump_statement11739 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_217_in_break_statement11759 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_break_statement11763 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_218_in_continue_statement11783 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_continue_statement11787 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_219_in_goto_statement11808 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_goto_statement11812 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_goto_statement11816 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_219_in_goto_statement11823 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_212_in_goto_statement11827 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_constant_expression_in_goto_statement11831 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_goto_statement11835 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_219_in_goto_statement11842 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000008000UL});
    public static readonly BitSet FOLLOW_143_in_goto_statement11846 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_goto_statement11850 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_108_in_return_statement11871 = new BitSet(new ulong[]{0x001084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_return_statement11875 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_return_statement11880 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_220_in_throw_statement11900 = new BitSet(new ulong[]{0x001084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_throw_statement11904 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_throw_statement11909 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_221_in_try_statement11935 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_block_in_try_statement11939 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_catch_clauses_in_try_statement11943 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000080000000UL});
    public static readonly BitSet FOLLOW_finally_clause_in_try_statement11947 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_221_in_try_statement11955 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_block_in_try_statement11959 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000080000000UL});
    public static readonly BitSet FOLLOW_finally_clause_in_try_statement11963 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_specific_catch_clauses_in_catch_clauses11984 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_general_catch_clause_in_catch_clauses11988 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_specific_catch_clauses_in_catch_clauses11996 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_general_catch_clause_in_catch_clauses12001 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_specific_catch_clause_in_specific_catch_clauses12022 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_222_in_specific_catch_clause12043 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_specific_catch_clause12047 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_class_type_in_specific_catch_clause12051 = new BitSet(new ulong[]{0x0020800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_identifier_in_specific_catch_clause12055 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_specific_catch_clause12060 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_block_in_specific_catch_clause12064 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_222_in_general_catch_clause12084 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_block_in_general_catch_clause12088 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_223_in_finally_clause12108 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_block_in_finally_clause12112 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_141_in_checked_statement12132 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_block_in_checked_statement12136 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_142_in_unchecked_statement12156 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_block_in_unchecked_statement12160 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_224_in_lock_statement12180 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_lock_statement12184 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_lock_statement12187 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_lock_statement12191 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_lock_statement12195 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_USING_in_using_statement12215 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_using_statement12219 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FEEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600030680UL});
    public static readonly BitSet FOLLOW_resource_acquisition_in_using_statement12224 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_using_statement12228 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
    public static readonly BitSet FOLLOW_embedded_statement_in_using_statement12233 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_local_variable_declaration_in_resource_acquisition12253 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_resource_acquisition12258 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_225_in_yield_statement12279 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000100000000000UL});
    public static readonly BitSet FOLLOW_108_in_yield_statement12283 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_in_yield_statement12287 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_yield_statement12291 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_225_in_yield_statement12298 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000002000000UL});
    public static readonly BitSet FOLLOW_217_in_yield_statement12302 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_yield_statement12306 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IDENTIFIER_in_identifier12328 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_also_keyword_in_identifier12334 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_literal0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_keyword0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_also_keyword0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_assignment_in_assignment_list14865 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_assignment_list14867 = new BitSet(new ulong[]{0x000084FFC0000002UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_field_declaration_in_field_declarations14877 = new BitSet(new ulong[]{0x0000800040000002UL,0x07FE2FE280000000UL,0x0FFFFC00000007F0UL,0x0000000600010699UL});
    public static readonly BitSet FOLLOW_property_declaration_in_property_declaration_list14886 = new BitSet(new ulong[]{0x0000800040000002UL,0x07FE2FE2C0000000UL,0xCFFFFC00000007F0UL,0x00000006000106E1UL});
    public static readonly BitSet FOLLOW_member_access_in_member_access_list14896 = new BitSet(new ulong[]{0x0000800040000002UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_constant_declaration_in_constant_declarations14905 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL,0x00003C0000000400UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_literal_in_literals14913 = new BitSet(new ulong[]{0x000080FFC0000002UL,0x07FC2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_delegate_declaration_in_delegate_declaration_list14922 = new BitSet(new ulong[]{0x0000200000000002UL,0x0000000201000000UL,0xF0007C0000010400UL,0x0000000000004003UL});
    public static readonly BitSet FOLLOW_local_variable_declaration_in_local_variable_declaration_list14932 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_local_variable_declaration_list14934 = new BitSet(new ulong[]{0x0000800040000002UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600030680UL});
    public static readonly BitSet FOLLOW_local_variable_initializer_in_local_variable_initializer_list14945 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_local_variable_initializer_list14947 = new BitSet(new ulong[]{0x000084FFC0000002UL,0xF7FCEFE09C000000UL,0x0FFF80000001FFF3UL,0x0000000600050680UL});
    public static readonly BitSet FOLLOW_expression_in_expression_list_test14958 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_expression_list_test14960 = new BitSet(new ulong[]{0x000084FFC0000002UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unary_expression_in_unary_expression_list14971 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_unary_expression_list14973 = new BitSet(new ulong[]{0x000084FFC0000002UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_invocation_expression_in_invocation_expression_list14984 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_invocation_expression_list14986 = new BitSet(new ulong[]{0x000080FFC0000002UL,0x07FC6FE08C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_primary_expression_in_primary_expression_list14997 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_primary_expression_list14999 = new BitSet(new ulong[]{0x000080FFC0000002UL,0x07FC6FE08C000000UL,0x0FFF80000001FFF0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_static_constructor_modifiers_in_static_constructor_modifiers_list15010 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_static_constructor_modifiers_list15012 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000240000000UL,0x0000400000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_using_directives_in_synpred1_cs224 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_namespace_declaration_in_synpred3_cs238 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_synpred8_cs359 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_synpred13_cs410 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_using_directive_in_synpred18_cs544 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_class_declaration_in_synpred22_cs703 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_struct_declaration_in_synpred23_cs708 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_declaration_in_synpred24_cs713 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_enum_declaration_in_synpred25_cs718 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_110_in_synpred47_cs1231 = new BitSet(new ulong[]{0x002084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_positional_argument_list_in_synpred47_cs1235 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_synpred47_cs1239 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_110_in_synpred48_cs1245 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_positional_argument_list_in_synpred48_cs1249 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_synpred48_cs1253 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_named_argument_list_in_synpred48_cs1257 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_synpred48_cs1261 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_98_in_synpred49_cs1302 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_positional_argument_in_synpred49_cs1308 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_name_in_synpred53_cs1443 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_synpred53_cs1451 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_synpred53_cs1456 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_synpred53_cs1460 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_type_name_in_synpred55_cs1466 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_synpred55_cs1468 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_type_name_in_synpred56_cs1474 = new BitSet(new ulong[]{0x0000000000000000UL,0x0001000000000000UL});
    public static readonly BitSet FOLLOW_112_in_synpred56_cs1476 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_name_in_synpred57_cs1481 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_predefined_type_in_synpred59_cs1486 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_synpred59_cs1488 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_synpred60_cs1494 = new BitSet(new ulong[]{0x0000000000000000UL,0x0001000000000000UL});
    public static readonly BitSet FOLLOW_112_in_synpred60_cs1496 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_predefined_type_in_synpred61_cs1501 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_111_in_synpred64_cs1549 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_name_in_synpred65_cs1532 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_synpred65_cs1540 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_synpred65_cs1545 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_synpred65_cs1549 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_synpred66_cs1557 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_name_in_synpred67_cs1555 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_synpred67_cs1557 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_type_name_in_synpred68_cs1563 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_111_in_synpred69_cs1570 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_predefined_type_in_synpred70_cs1568 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_synpred70_cs1570 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_synpred71_cs1576 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_111_in_synpred72_cs1585 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_non_assignment_expression_in_synpred86_cs1968 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_cast_expression_in_synpred87_cs1993 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_111_in_synpred92_cs2042 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unary_expression_in_synpred92_cs2046 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_127_in_synpred95_cs2067 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_128_in_synpred96_cs2072 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primary_or_array_creation_expression_in_synpred97_cs2063 = new BitSet(new ulong[]{0x0000000000000002UL,0x8000000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_127_in_synpred97_cs2067 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000001UL});
    public static readonly BitSet FOLLOW_128_in_synpred97_cs2072 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_pointer_indirection_expression_in_synpred98_cs2078 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_conditional_expression_in_synpred99_cs2199 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_lambda_expression_in_synpred100_cs2204 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_131_in_synpred111_cs2402 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_synpred111_cs2404 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_namespace_or_type_name_in_synpred111_cs2414 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_synpred111_cs2422 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
    public static readonly BitSet FOLLOW_111_in_synpred111_cs2428 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_synpred111_cs2433 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_113_in_synpred111_cs2440 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_synpred111_cs2444 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_synpred111_cs2449 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_synpred111_cs2458 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000008UL});
    public static readonly BitSet FOLLOW_ref_variable_reference_in_synpred111_cs2462 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primary_expression_in_synpred112_cs2489 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arguments_in_synpred115_cs2565 = new BitSet(new ulong[]{0x0000030000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_access_operator_in_synpred115_cs2571 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_tinvocation_in_synpred115_cs2576 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arguments_in_synpred117_cs2582 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400200000000UL});
    public static readonly BitSet FOLLOW_telement_part_in_synpred117_cs2587 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_synpred121_cs2644 = new BitSet(new ulong[]{0x0000030000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_access_operator_in_synpred121_cs2650 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_telement_in_synpred121_cs2654 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_synpred123_cs2660 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400200000000UL});
    public static readonly BitSet FOLLOW_tinvocation_part_in_synpred123_cs2665 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primary_expression_part_in_synpred126_cs2734 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primary_expression_start_in_synpred127_cs2730 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000400200000000UL});
    public static readonly BitSet FOLLOW_primary_expression_part_in_synpred127_cs2734 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000400200000000UL});
    public static readonly BitSet FOLLOW_delegate_creation_expression_in_synpred128_cs2740 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_anonymous_object_creation_expression_in_synpred129_cs2749 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_synpred136_cs2853 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_synpred138_cs2864 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_synpred140_cs2875 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_brackets_or_arguments_in_synpred143_cs2898 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_brackets_or_arguments_in_synpred146_cs2950 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_synpred148_cs2981 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_synpred153_cs3077 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_synpred154_cs3126 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arguments_in_synpred155_cs3131 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bracket_expression_in_synpred157_cs3141 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_access_in_synpred176_cs3435 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_access_part_in_synpred178_cs3459 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_access_part_in_synpred179_cs3483 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_access_part_in_synpred181_cs3495 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_92_in_synpred189_cs3668 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE0A0000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_member_initializer_list_in_synpred189_cs3672 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_synpred189_cs3677 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_non_array_type_in_synpred197_cs3917 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_97_in_synpred197_cs3919 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_expression_list_in_synpred197_cs3923 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
    public static readonly BitSet FOLLOW_99_in_synpred197_cs3927 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000000210000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_synpred197_cs3931 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_array_initializer_in_synpred197_cs3936 = new BitSet(new ulong[]{0x0000030000000002UL});
    public static readonly BitSet FOLLOW_access_operator_in_synpred197_cs3942 = new BitSet(new ulong[]{0x000080FFC0000000UL,0x07FC6FE08C000000UL,0x0FFF80000001FFF0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_primary_expression_in_synpred197_cs3946 = new BitSet(new ulong[]{0x0000030000000002UL});
    public static readonly BitSet FOLLOW_array_type_in_synpred198_cs3954 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_array_initializer_in_synpred198_cs3958 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_92_in_synpred200_cs4048 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE0A0000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_member_declarator_list_in_synpred200_cs4052 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_93_in_synpred200_cs4057 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_synpred202_cs4132 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
    public static readonly BitSet FOLLOW_generic_argument_list_in_synpred202_cs4136 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_member_access_in_synpred203_cs4144 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_140_in_synpred204_cs4209 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_synpred204_cs4213 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_synpred204_cs4217 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_synpred204_cs4221 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_140_in_synpred205_cs4227 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_110_in_synpred205_cs4229 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unbound_type_name_in_synpred205_cs4233 = new BitSet(new ulong[]{0x0020000000000000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_synpred205_cs4237 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_namespace_or_type_name_in_synpred226_cs4913 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_synpred226_cs4918 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_111_in_synpred226_cs4924 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800200000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_synpred226_cs4929 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_namespace_or_type_name_in_synpred229_cs4939 = new BitSet(new ulong[]{0x0000000000000000UL,0x0001000000000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_synpred229_cs4944 = new BitSet(new ulong[]{0x0000000000000000UL,0x0001000000000000UL});
    public static readonly BitSet FOLLOW_112_in_synpred229_cs4950 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_synpred229_cs4954 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_namespace_or_type_name_in_synpred232_cs4964 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_predefined_type_in_synpred232_cs4969 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_rank_specifiers_in_synpred232_cs4975 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_synpred238_cs5038 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_unary_expression_in_synpred238_cs5048 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_synpred240_cs5073 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_multiplicative_expression_in_synpred240_cs5081 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_synpred247_cs5149 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_shift_expression_in_synpred247_cs5161 = new BitSet(new ulong[]{0x0000080000000002UL,0x0800000000000000UL,0x0000000000600000UL});
    public static readonly BitSet FOLLOW_129_in_synpred252_cs5246 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_equality_expression_in_synpred252_cs5250 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_159_in_synpred257_cs5398 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_null_coalescing_expression_in_synpred257_cs5402 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_explicit_anonymous_function_signature_in_synpred272_cs5615 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_query_continuation_in_synpred291_cs5955 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ordering_in_synpred299_cs6177 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ordering_direction_in_synpred300_cs6203 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_100_in_synpred320_cs6487 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_class_type_in_synpred320_cs6491 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_synpred320_cs6494 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_interface_type_list_in_synpred320_cs6496 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primary_constraint_in_synpred323_cs6620 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_synpred323_cs6626 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_secondary_constraint_list_in_synpred323_cs6630 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_synpred323_cs6634 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE280000000UL,0x2FFF8000000207F4UL,0x0000000600010682UL});
    public static readonly BitSet FOLLOW_constructor_constraint_in_synpred323_cs6638 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primary_constraint_in_synpred324_cs6645 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_synpred324_cs6651 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_secondary_constraint_list_in_synpred324_cs6655 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primary_constraint_in_synpred325_cs6662 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_synpred325_cs6668 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE280000000UL,0x2FFF8000000207F4UL,0x0000000600010682UL});
    public static readonly BitSet FOLLOW_constructor_constraint_in_synpred325_cs6672 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_secondary_constraint_list_in_synpred326_cs6679 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
    public static readonly BitSet FOLLOW_98_in_synpred326_cs6684 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE280000000UL,0x2FFF8000000207F4UL,0x0000000600010682UL});
    public static readonly BitSet FOLLOW_constructor_constraint_in_synpred326_cs6688 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primary_constraint_in_synpred327_cs6694 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_secondary_constraint_list_in_synpred328_cs6699 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_name_in_synpred332_cs6793 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constant_declaration_in_synpred335_cs6896 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_field_declaration_in_synpred336_cs6901 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_method_declaration_in_synpred337_cs6906 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_property_declaration_in_synpred338_cs6911 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_event_declaration_in_synpred339_cs6916 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_indexer_declaration_in_synpred340_cs6921 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_operator_declaration_in_synpred341_cs6926 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constructor_declaration_in_synpred342_cs6931 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_destructor_declaration_in_synpred343_cs6936 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_static_constructor_declaration_in_synpred344_cs6941 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_declaration_in_synpred345_cs6946 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_synpred386_cs7464 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_fixed_parameter_in_synpred389_cs7549 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_parameter_array_in_synpred390_cs7553 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_generic_parameter_list_in_synpred413_cs7854 = new BitSet(new ulong[]{0x0000030000000000UL});
    public static readonly BitSet FOLLOW_qid_part_in_synpred413_cs7856 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_get_accessor_declaration_in_synpred415_cs7881 = new BitSet(new ulong[]{0x0000C00000000002UL,0x0000000200000000UL,0x00003C0000000000UL});
    public static readonly BitSet FOLLOW_set_accessor_declaration_in_synpred415_cs7885 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_attributes_in_synpred428_cs8065 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010040000000UL,0xC0007C0000000400UL,0x0000000000000061UL});
    public static readonly BitSet FOLLOW_event_modifiers_in_synpred428_cs8070 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010000000000UL});
    public static readonly BitSet FOLLOW_104_in_synpred428_cs8075 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_type_in_synpred428_cs8079 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_variable_declarators_in_synpred428_cs8083 = new BitSet(new ulong[]{0x0010000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_synpred428_cs8087 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_add_accessor_declaration_in_synpred443_cs8234 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL,0x0000000000000000UL,0x0000000000000600UL});
    public static readonly BitSet FOLLOW_remove_accessor_declaration_in_synpred443_cs8238 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unary_operator_declarator_in_synpred465_cs8580 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_binary_operator_declarator_in_synpred466_cs8585 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_94_in_synpred518_cs9310 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000400000000000UL});
    public static readonly BitSet FOLLOW_174_in_synpred518_cs9313 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constant_declaration_in_synpred535_cs9563 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_field_declaration_in_synpred536_cs9568 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_method_declaration_in_synpred537_cs9573 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_property_declaration_in_synpred538_cs9578 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_event_declaration_in_synpred539_cs9583 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_indexer_declaration_in_synpred540_cs9588 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_operator_declaration_in_synpred541_cs9593 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constructor_declaration_in_synpred542_cs9598 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_static_constructor_declaration_in_synpred543_cs9603 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_property_declaration_in_synpred559_cs9835 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_method_declaration_in_synpred560_cs9841 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_event_declaration_in_synpred561_cs9847 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_138_in_synpred563_cs9878 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interface_get_accessor_declaration_in_synpred571_cs9989 = new BitSet(new ulong[]{0x0000C00000000002UL,0x0000000200000000UL});
    public static readonly BitSet FOLLOW_interface_set_accessor_declaration_in_synpred571_cs9993 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_labeled_statement_in_synpred593_cs10420 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_declaration_statement_in_synpred594_cs10425 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_synpred595_cs10450 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_empty_statement_in_synpred596_cs10455 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_129_in_synpred609_cs10633 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
    public static readonly BitSet FOLLOW_variable_reference_in_synpred609_cs10637 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_type_in_synpred614_cs10844 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_208_in_synpred615_cs10849 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_invocation_expression_in_synpred622_cs11110 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_object_creation_expression_in_synpred623_cs11115 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_assignment_in_synpred624_cs11120 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_else_statement_in_synpred626_cs11189 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_local_variable_declaration_in_synpred637_cs11579 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_221_in_synpred648_cs11935 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
    public static readonly BitSet FOLLOW_block_in_synpred648_cs11939 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_catch_clauses_in_synpred648_cs11943 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000080000000UL});
    public static readonly BitSet FOLLOW_finally_clause_in_synpred648_cs11947 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_specific_catch_clauses_in_synpred650_cs11984 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000040000000UL});
    public static readonly BitSet FOLLOW_general_catch_clause_in_synpred650_cs11988 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_local_variable_declaration_in_synpred654_cs12253 = new BitSet(new ulong[]{0x0000000000000002UL});

}
