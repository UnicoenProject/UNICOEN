
        public static IUnifiedElement CreateSingle_input(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "single_input");
            /*
             * single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateFile_input(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "file_input");
            /*
             * file_input: (NEWLINE | stmt)* ENDMARKER
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateEval_input(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "eval_input");
            /*
             * eval_input: testlist NEWLINE* ENDMARKER
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateDecorator(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "decorator");
            /*
             * decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateDecorators(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "decorators");
            /*
             * decorators: decorator+
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateDecorated(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "decorated");
            /*
             * decorated: decorators (classdef | funcdef)
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateFuncdef(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "funcdef");
            /*
             * funcdef: 'def' NAME parameters ['->' test] ':' suite
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateParameters(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "parameters");
            /*
             * parameters: '(' [typedargslist] ')'
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateTypedargslist(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "typedargslist");
            /*
             * typedargslist: (tfpdef ['=' test] (',' tfpdef ['=' test])* [','
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateTfpdef(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "tfpdef");
            /*
             * tfpdef: NAME [':' test]
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateVarargslist(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "varargslist");
            /*
             * varargslist: (vfpdef ['=' test] (',' vfpdef ['=' test])* [','
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateVfpdef(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "vfpdef");
            /*
             * vfpdef: NAME
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateStmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "stmt");
            /*
             * stmt: simple_stmt | compound_stmt
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateSimple_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "simple_stmt");
            /*
             * simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateSmall_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "small_stmt");
            /*
             * small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt |
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateExpr_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "expr_stmt");
            /*
             * expr_stmt: testlist_star_expr (augassign (yield_expr|testlist) |
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateTestlist_star_expr(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "testlist_star_expr");
            /*
             * testlist_star_expr: (test|star_expr) (',' (test|star_expr))* [',']
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateAugassign(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "augassign");
            /*
             * augassign: ('+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' |
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateDel_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "del_stmt");
            /*
             * del_stmt: 'del' exprlist
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreatePass_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "pass_stmt");
            /*
             * pass_stmt: 'pass'
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateFlow_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "flow_stmt");
            /*
             * flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateBreak_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "break_stmt");
            /*
             * break_stmt: 'break'
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateContinue_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "continue_stmt");
            /*
             * continue_stmt: 'continue'
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateReturn_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "return_stmt");
            /*
             * return_stmt: 'return' [testlist]
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateYield_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "yield_stmt");
            /*
             * yield_stmt: yield_expr
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateRaise_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "raise_stmt");
            /*
             * raise_stmt: 'raise' [test ['from' test]]
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateImport_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "import_stmt");
            /*
             * import_stmt: import_name | import_from
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateImport_name(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "import_name");
            /*
             * import_name: 'import' dotted_as_names
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateImport_from(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "import_from");
            /*
             * import_from: ('from' (('.' | '...')* dotted_name | ('.' | '...')+)
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateImport_as_name(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "import_as_name");
            /*
             * import_as_name: NAME ['as' NAME]
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateDotted_as_name(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "dotted_as_name");
            /*
             * dotted_as_name: dotted_name ['as' NAME]
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateImport_as_names(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "import_as_names");
            /*
             * import_as_names: import_as_name (',' import_as_name)* [',']
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateDotted_as_names(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "dotted_as_names");
            /*
             * dotted_as_names: dotted_as_name (',' dotted_as_name)*
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateDotted_name(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "dotted_name");
            /*
             * dotted_name: NAME ('.' NAME)*
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateGlobal_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "global_stmt");
            /*
             * global_stmt: 'global' NAME (',' NAME)*
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateNonlocal_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "nonlocal_stmt");
            /*
             * nonlocal_stmt: 'nonlocal' NAME (',' NAME)*
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateAssert_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "assert_stmt");
            /*
             * assert_stmt: 'assert' test [',' test]
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateCompound_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "compound_stmt");
            /*
             * compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateIf_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "if_stmt");
            /*
             * if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateWhile_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "while_stmt");
            /*
             * while_stmt: 'while' test ':' suite ['else' ':' suite]
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateFor_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "for_stmt");
            /*
             * for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateTry_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "try_stmt");
            /*
             * try_stmt: ('try' ':' suite
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateWith_stmt(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "with_stmt");
            /*
             * with_stmt: 'with' with_item (',' with_item)*  ':' suite
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateWith_item(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "with_item");
            /*
             * with_item: test ['as' expr]
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateExcept_clause(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "except_clause");
            /*
             * except_clause: 'except' [test ['as' NAME]]
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateSuite(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "suite");
            /*
             * suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateTest(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "test");
            /*
             * test: or_test ['if' or_test 'else' test] | lambdef
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateTest_nocond(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "test_nocond");
            /*
             * test_nocond: or_test | lambdef_nocond
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateLambdef(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "lambdef");
            /*
             * lambdef: 'lambda' [varargslist] ':' test
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateLambdef_nocond(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "lambdef_nocond");
            /*
             * lambdef_nocond: 'lambda' [varargslist] ':' test_nocond
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateOr_test(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "or_test");
            /*
             * or_test: and_test ('or' and_test)*
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateAnd_test(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "and_test");
            /*
             * and_test: not_test ('and' not_test)*
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateNot_test(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "not_test");
            /*
             * not_test: 'not' not_test | comparison
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateComparison(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "comparison");
            /*
             * comparison: expr (comp_op expr)*
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateComp_op(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "comp_op");
            /*
             * comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not'
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateStar_expr(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "star_expr");
            /*
             * star_expr: '*' expr
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateExpr(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "expr");
            /*
             * expr: xor_expr ('|' xor_expr)*
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateXor_expr(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "xor_expr");
            /*
             * xor_expr: and_expr ('^' and_expr)*
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateAnd_expr(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "and_expr");
            /*
             * and_expr: shift_expr ('&' shift_expr)*
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateShift_expr(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "shift_expr");
            /*
             * shift_expr: arith_expr (('<<'|'>>') arith_expr)*
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateArith_expr(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "arith_expr");
            /*
             * arith_expr: term (('+'|'-') term)*
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateTerm(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "term");
            /*
             * term: factor (('*'|'/'|'%'|'//') factor)*
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateFactor(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "factor");
            /*
             * factor: ('+'|'-'|'~') factor | power
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreatePower(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "power");
            /*
             * power: atom trailer* ['**' factor]
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateAtom(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "atom");
            /*
             * atom: ('(' [yield_expr|testlist_comp] ')' |
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateTestlist_comp(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "testlist_comp");
            /*
             * testlist_comp: (test|star_expr) ( comp_for | (',' (test|star_expr))* [','] )
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateTrailer(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "trailer");
            /*
             * trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateSubscriptlist(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "subscriptlist");
            /*
             * subscriptlist: subscript (',' subscript)* [',']
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateSubscript(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "subscript");
            /*
             * subscript: test | [test] ':' [test] [sliceop]
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateSliceop(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "sliceop");
            /*
             * sliceop: ':' [test]
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateExprlist(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "exprlist");
            /*
             * exprlist: (expr|star_expr) (',' (expr|star_expr))* [',']
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateTestlist(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "testlist");
            /*
             * testlist: test (',' test)* [',']
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateDictorsetmaker(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "dictorsetmaker");
            /*
             * dictorsetmaker: ( (test ':' test (comp_for | (',' test ':' test)* [','])) |
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateClassdef(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "classdef");
            /*
             * classdef: 'class' NAME ['(' [arglist] ')'] ':' suite
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateArglist(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "arglist");
            /*
             * arglist: (argument ',')* (argument [',']
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateArgument(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "argument");
            /*
             * argument: test [comp_for] | test '=' test  # Really [keyword '='] test
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateComp_iter(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "comp_iter");
            /*
             * comp_iter: comp_for | comp_if
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateComp_for(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "comp_for");
            /*
             * comp_for: 'for' exprlist 'in' or_test [comp_iter]
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateComp_if(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "comp_if");
            /*
             * comp_if: 'if' test_nocond [comp_iter]
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateEncoding_decl(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "encoding_decl");
            /*
             * encoding_decl: NAME
             */
            throw new NotImplementedException(); //TODO: implement
        }

        public static IUnifiedElement CreateYield_expr(XElement node) {
            Contract.Requires(node != null);
            Contract.Requires(node.Name() == "yield_expr");
            /*
             * yield_expr: 'yield' [testlist]
             */
            throw new NotImplementedException(); //TODO: implement
        }
