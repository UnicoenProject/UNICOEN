program
	: LT!* sourceElements LT!* EOF!
	;
	
sourceElements
	: sourceElement (LT!* sourceElement)*
	;
	
sourceElement
	: functionDeclaration
	| statement
	;
	
// functions
functionDeclaration
	: 'function' LT!* Identifier LT!* formalParameterList LT!* functionBody
	;
	
functionExpression
	: 'function' LT!* Identifier? LT!* formalParameterList LT!* functionBody
	;
	
formalParameterList
	: '(' (LT!* Identifier (LT!* ',' LT!* Identifier)*)? LT!* ')'
	;

functionBody
	: '{' LT!* sourceElements LT!* '}'
	;

// statements
statement
	: statementBlock
	| variableStatement
	| emptyStatement
	| expressionStatement
	| ifStatement
	| iterationStatement
	| continueStatement
	| breakStatement
	| returnStatement
	| withStatement
	| labelledStatement
	| switchStatement
	| throwStatement
	| tryStatement
	;
	
statementBlock
	: '{' LT!* statementList? LT!* '}'
	;
	
statementList
	: statement (LT!* statement)*
	;
	
variableStatement
	: 'var' LT!* variableDeclarationList (LT | ';')
	;
	
variableDeclarationList
	: variableDeclaration (LT!* ',' LT!* variableDeclaration)*
	;
	
variableDeclarationListNoIn
	: variableDeclarationNoIn (LT!* ',' LT!* variableDeclarationNoIn)*
	;
	
variableDeclaration
	: Identifier LT!* initialiser?
	;
	
variableDeclarationNoIn
	: Identifier LT!* initialiserNoIn?
	;
	
initialiser
	: '=' LT!* assignmentExpression
	;
	
initialiserNoIn
	: '=' LT!* assignmentExpressionNoIn
	;
	
emptyStatement
	: ';'
	;
	
expressionStatement
	: expression (LT | ';')
	;
	
ifStatement
	: 'if' LT!* '(' LT!* expression LT!* ')' LT!* statement (LT!* 'else' LT!* statement)?
	;
	
iterationStatement
	: doWhileStatement
	| whileStatement
	| forStatement
	| forInStatement
	;
	
doWhileStatement
	: 'do' LT!* statement LT!* 'while' LT!* '(' expression ')' (LT | ';')
	;
	
whileStatement
	: 'while' LT!* '(' LT!* expression LT!* ')' LT!* statement
	;
	
forStatement
	: 'for' LT!* '(' (LT!* forStatementInitialiserPart)? LT!* ';' (LT!* expression)? LT!* ';' (LT!* expression)? LT!* ')' LT!* statement
	;
	
forStatementInitialiserPart
	: expressionNoIn
	| 'var' LT!* variableDeclarationListNoIn
	;
	
forInStatement
	: 'for' LT!* '(' LT!* forInStatementInitialiserPart LT!* 'in' LT!* expression LT!* ')' LT!* statement
	;
	
forInStatementInitialiserPart
	: leftHandSideExpression
	| 'var' LT!* variableDeclarationNoIn
	;

continueStatement
	: 'continue' Identifier? (LT | ';')
	;

breakStatement
	: 'break' Identifier? (LT | ';')
	;

returnStatement
	: 'return' expression? (LT | ';')
	;
	
withStatement
	: 'with' LT!* '(' LT!* expression LT!* ')' LT!* statement
	;

labelledStatement
	: Identifier LT!* ':' LT!* statement
	;
	
switchStatement
	: 'switch' LT!* '(' LT!* expression LT!* ')' LT!* caseBlock
	;
	
caseBlock
	: '{' (LT!* caseClause)* (LT!* defaultClause (LT!* caseClause)*)? LT!* '}'
	;

caseClause
	: 'case' LT!* expression LT!* ':' LT!* statementList?
	;
	
defaultClause
	: 'default' LT!* ':' LT!* statementList?
	;
	
throwStatement
	: 'throw' expression (LT | ';')
	;

tryStatement
	: 'try' LT!* statementBlock LT!* (finallyClause | catchClause (LT!* finallyClause)?)
	;
       
catchClause
	: 'catch' LT!* '(' LT!* Identifier LT!* ')' LT!* statementBlock
	;
	
finallyClause
	: 'finally' LT!* statementBlock
	;

// expressions
expression
	: assignmentExpression (LT!* ',' LT!* assignmentExpression)*
	;
	
expressionNoIn
	: assignmentExpressionNoIn (LT!* ',' LT!* assignmentExpressionNoIn)*
	;
	
assignmentExpression
	: conditionalExpression
	| leftHandSideExpression LT!* assignmentOperator LT!* assignmentExpression
	;
	
assignmentExpressionNoIn
	: conditionalExpressionNoIn
	| leftHandSideExpression LT!* assignmentOperator LT!* assignmentExpressionNoIn
	;
	
leftHandSideExpression
	: callExpression
	| newExpression
	;
	
newExpression
	: memberExpression
	| 'new' LT!* newExpression
	;
	
memberExpression
	: (primaryExpression | functionExpression | 'new' LT!* memberExpression LT!* arguments) (LT!* memberExpressionSuffix)*
	;
	
memberExpressionSuffix
	: indexSuffix
	| propertyReferenceSuffix
	;

callExpression
	: memberExpression LT!* arguments (LT!* callExpressionSuffix)*
	;
	
callExpressionSuffix
	: arguments
	| indexSuffix
	| propertyReferenceSuffix
	;

arguments
	: '(' (LT!* assignmentExpression (LT!* ',' LT!* assignmentExpression)*)? LT!* ')'
	;
	
indexSuffix
	: '[' LT!* expression LT!* ']'
	;	
	
propertyReferenceSuffix
	: '.' LT!* Identifier
	;
	
assignmentOperator
	: '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|='
	;

conditionalExpression
	: logicalORExpression (LT!* '?' LT!* assignmentExpression LT!* ':' LT!* assignmentExpression)?
	;

conditionalExpressionNoIn
	: logicalORExpressionNoIn (LT!* '?' LT!* assignmentExpressionNoIn LT!* ':' LT!* assignmentExpressionNoIn)?
	;

logicalORExpression
	: logicalANDExpression (LT!* '||' LT!* logicalANDExpression)*
	;
	
logicalORExpressionNoIn
	: logicalANDExpressionNoIn (LT!* '||' LT!* logicalANDExpressionNoIn)*
	;
	
logicalANDExpression
	: bitwiseORExpression (LT!* '&&' LT!* bitwiseORExpression)*
	;
	
logicalANDExpressionNoIn
	: bitwiseORExpressionNoIn (LT!* '&&' LT!* bitwiseORExpressionNoIn)*
	;
	
bitwiseORExpression
	: bitwiseXORExpression (LT!* '|' LT!* bitwiseXORExpression)*
	;
	
bitwiseORExpressionNoIn
	: bitwiseXORExpressionNoIn (LT!* '|' LT!* bitwiseXORExpressionNoIn)*
	;
	
bitwiseXORExpression
	: bitwiseANDExpression (LT!* '^' LT!* bitwiseANDExpression)*
	;
	
bitwiseXORExpressionNoIn
	: bitwiseANDExpressionNoIn (LT!* '^' LT!* bitwiseANDExpressionNoIn)*
	;
	
bitwiseANDExpression
	: equalityExpression (LT!* '&' LT!* equalityExpression)*
	;
	
bitwiseANDExpressionNoIn
	: equalityExpressionNoIn (LT!* '&' LT!* equalityExpressionNoIn)*
	;
	
equalityExpression
	: relationalExpression (LT!* ('==' | '!=' | '===' | '!==') LT!* relationalExpression)*
	;

equalityExpressionNoIn
	: relationalExpressionNoIn (LT!* ('==' | '!=' | '===' | '!==') LT!* relationalExpressionNoIn)*
	;
	
relationalExpression
	: shiftExpression (LT!* ('<' | '>' | '<=' | '>=' | 'instanceof' | 'in') LT!* shiftExpression)*
	;

relationalExpressionNoIn
	: shiftExpression (LT!* ('<' | '>' | '<=' | '>=' | 'instanceof') LT!* shiftExpression)*
	;

shiftExpression
	: additiveExpression (LT!* ('<<' | '>>' | '>>>') LT!* additiveExpression)*
	;

additiveExpression
	: multiplicativeExpression (LT!* ('+' | '-') LT!* multiplicativeExpression)*
	;

multiplicativeExpression
	: unaryExpression (LT!* ('*' | '/' | '%') LT!* unaryExpression)*
	;

unaryExpression
	: postfixExpression
	| ('delete' | 'void' | 'typeof' | '++' | '--' | '+' | '-' | '~' | '!') unaryExpression
	;
	
postfixExpression
	: leftHandSideExpression ('++' | '--')?
	;

primaryExpression
	: 'this'
	| Identifier
	| literal
	| arrayLiteral
	| objectLiteral
	| '(' LT!* expression LT!* ')'
	;
	
// arrayLiteral definition.
arrayLiteral
	: '[' LT!* assignmentExpression? (LT!* ',' (LT!* assignmentExpression)?)* LT!* ']'
	;
       
// objectLiteral definition.
objectLiteral
	: '{' LT!* propertyNameAndValue (LT!* ',' LT!* propertyNameAndValue)* LT!* '}'
	;
	
propertyNameAndValue
	: propertyName LT!* ':' LT!* assignmentExpression
	;

propertyName
	: Identifier
	| stringliteral
	| numericliteral
	;

// primitive literal definition.
literal
	: 'null'
	| 'true'
	| 'false'
	| stringliteral
	| numericliteral
	;

numericliteral
	: NumericLiteral
	;
	
stringliteral
	: StringLiteral
	;
