<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ICSharpCode.Editor</name>
    </assembly>
    <members>
        <member name="T:ICSharpCode.Editor.StringTextSource">
            <summary>
            Implements the ITextSource interface using a string.
            </summary>
        </member>
        <member name="T:ICSharpCode.Editor.ITextSource">
            <summary>
            A read-only view on a (potentially mutable) text source.
            The IDocument interfaces derives from this interface.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.ITextSource.CreateSnapshot">
            <summary>
            Creates an immutable snapshot of this text source.
            Unlike all other methods in this interface, this method is thread-safe.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.ITextSource.CreateSnapshot(System.Int32,System.Int32)">
            <summary>
            Creates an immutable snapshot of a part of this text source.
            Unlike all other methods in this interface, this method is thread-safe.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.ITextSource.CreateReader">
            <summary>
            Creates a new TextReader to read from this text source.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.ITextSource.CreateReader(System.Int32,System.Int32)">
            <summary>
            Creates a new TextReader to read from this text source.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.ITextSource.GetCharAt(System.Int32)">
            <summary>
            Gets a character at the specified position in the document.
            </summary>
            <paramref name="offset">The index of the character to get.</paramref>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset is outside the valid range (0 to TextLength-1).</exception>
            <returns>The character at the specified position.</returns>
            <remarks>This is the same as Text[offset], but is more efficient because
             it doesn't require creating a String object.</remarks>
        </member>
        <member name="M:ICSharpCode.Editor.ITextSource.GetText(System.Int32,System.Int32)">
            <summary>
            Retrieves the text for a portion of the document.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
            <remarks>This is the same as Text.Substring, but is more efficient because
             it doesn't require creating a String object for the whole document.</remarks>
        </member>
        <member name="M:ICSharpCode.Editor.ITextSource.GetText(ICSharpCode.Editor.ISegment)">
            <summary>
            Retrieves the text for a portion of the document.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
        </member>
        <member name="M:ICSharpCode.Editor.ITextSource.IndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets the index of the first occurrence of any character in the specified array.
            </summary>
            <param name="anyOf">Characters to search for</param>
            <param name="startIndex">Start index of the search.</param>
            <param name="count">Length of the area to search.</param>
            <returns>The first index where any character was found; or -1 if no occurrence was found.</returns>
        </member>
        <member name="P:ICSharpCode.Editor.ITextSource.Version">
            <summary>
            Gets a version identifier for this text source.
            Returns null for unversioned text sources.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.ITextSource.TextLength">
            <summary>
            Gets the total text length.
            </summary>
            <returns>The length of the text, in characters.</returns>
            <remarks>This is the same as Text.Length, but is more efficient because
             it doesn't require creating a String object.</remarks>
        </member>
        <member name="P:ICSharpCode.Editor.ITextSource.Text">
            <summary>
            Gets the whole text as string.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.StringTextSource.#ctor(System.String)">
            <summary>
            Creates a new StringTextSource with the given text.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.StringTextSource.CreateSnapshot">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.StringTextSource.CreateSnapshot(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.StringTextSource.CreateReader">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.StringTextSource.CreateReader(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.StringTextSource.GetCharAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.StringTextSource.GetText(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.StringTextSource.GetText(ICSharpCode.Editor.ISegment)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.StringTextSource.IndexOfAny(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.Editor.StringTextSource.TextLength">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.Editor.StringTextSource.Text">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.Editor.TextLocation">
            <summary>
            A line/column position.
            Text editor lines/columns are counted started from one.
            </summary>
            <remarks>
            The document provides the methods <see cref="M:ICSharpCode.Editor.IDocument.GetLocation(System.Int32)"/> and
            <see cref="M:ICSharpCode.Editor.IDocument.GetOffset(ICSharpCode.Editor.TextLocation)"/> to convert between offsets and TextLocations.
            </remarks>
        </member>
        <member name="F:ICSharpCode.Editor.TextLocation.MinLine">
            <summary>
            Constant of the minimum line.
            </summary>
        </member>
        <member name="F:ICSharpCode.Editor.TextLocation.MinColumn">
            <summary>
            Constant of the minimum column.
            </summary>
        </member>
        <member name="F:ICSharpCode.Editor.TextLocation.Empty">
            <summary>
            Represents no text location (0, 0).
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.TextLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a TextLocation instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.TextLocation.ToString">
            <summary>
            Gets a string representation for debugging purposes.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.TextLocation.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.TextLocation.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.TextLocation.Equals(ICSharpCode.Editor.TextLocation)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.TextLocation.op_Equality(ICSharpCode.Editor.TextLocation,ICSharpCode.Editor.TextLocation)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.TextLocation.op_Inequality(ICSharpCode.Editor.TextLocation,ICSharpCode.Editor.TextLocation)">
            <summary>
            Inequality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.TextLocation.op_LessThan(ICSharpCode.Editor.TextLocation,ICSharpCode.Editor.TextLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.TextLocation.op_GreaterThan(ICSharpCode.Editor.TextLocation,ICSharpCode.Editor.TextLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.TextLocation.op_LessThanOrEqual(ICSharpCode.Editor.TextLocation,ICSharpCode.Editor.TextLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.TextLocation.op_GreaterThanOrEqual(ICSharpCode.Editor.TextLocation,ICSharpCode.Editor.TextLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.TextLocation.CompareTo(ICSharpCode.Editor.TextLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.TextLocation.Line">
            <summary>
            Gets the line number.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.TextLocation.Column">
            <summary>
            Gets the column number.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.TextLocation.IsEmpty">
            <summary>
            Gets whether the TextLocation instance is empty.
            </summary>
        </member>
        <member name="T:ICSharpCode.Editor.ReadOnlyDocument">
            <summary>
            Read-only implementation of <see cref="T:ICSharpCode.Editor.IDocument"/>.
            </summary>
        </member>
        <member name="T:ICSharpCode.Editor.IDocument">
            <summary>
            A document representing a source code file for refactoring.
            Line and column counting starts at 1.
            Offset counting starts at 0.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.IDocument.GetLine(System.Int32)">
            <summary>
            Gets the document line with the specified number.
            </summary>
            <param name="lineNumber">The number of the line to retrieve. The first line has number 1.</param>
        </member>
        <member name="M:ICSharpCode.Editor.IDocument.GetLineByOffset(System.Int32)">
            <summary>
            Gets the document line that contains the specified offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.IDocument.GetOffset(System.Int32,System.Int32)">
            <summary>
            Gets the offset from a text location.
            </summary>
            <seealso cref="M:ICSharpCode.Editor.IDocument.GetLocation(System.Int32)"/>
        </member>
        <member name="M:ICSharpCode.Editor.IDocument.GetOffset(ICSharpCode.Editor.TextLocation)">
            <summary>
            Gets the offset from a text location.
            </summary>
            <seealso cref="M:ICSharpCode.Editor.IDocument.GetLocation(System.Int32)"/>
        </member>
        <member name="M:ICSharpCode.Editor.IDocument.GetLocation(System.Int32)">
            <summary>
            Gets the location from an offset.
            </summary>
            <seealso cref="M:ICSharpCode.Editor.IDocument.GetOffset(ICSharpCode.Editor.TextLocation)"/>
        </member>
        <member name="M:ICSharpCode.Editor.IDocument.Insert(System.Int32,System.String)">
            <summary>
            Inserts text.
            </summary>
            <param name="offset">The offset at which the text is inserted.</param>
            <param name="text">The new text.</param>
            <remarks>
            Anchors positioned exactly at the insertion offset will move according to their movement type.
            For AnchorMovementType.Default, they will move behind the inserted text.
            The caret will also move behind the inserted text.
            </remarks>
        </member>
        <member name="M:ICSharpCode.Editor.IDocument.Insert(System.Int32,System.String,ICSharpCode.Editor.AnchorMovementType)">
            <summary>
            Inserts text.
            </summary>
            <param name="offset">The offset at which the text is inserted.</param>
            <param name="text">The new text.</param>
            <param name="defaultAnchorMovementType">
            Anchors positioned exactly at the insertion offset will move according to the anchor's movement type.
            For AnchorMovementType.Default, they will move according to the movement type specified by this parameter.
            The caret will also move according to the <paramref name="defaultAnchorMovementType"/> parameter.
            </param>
        </member>
        <member name="M:ICSharpCode.Editor.IDocument.Remove(System.Int32,System.Int32)">
            <summary>
            Removes text.
            </summary>
            <param name="offset">Starting offset of the text to be removed.</param>
            <param name="length">Length of the text to be removed.</param>
        </member>
        <member name="M:ICSharpCode.Editor.IDocument.Replace(System.Int32,System.Int32,System.String)">
            <summary>
            Replaces text.
            </summary>
            <param name="offset">The starting offset of the text to be replaced.</param>
            <param name="length">The length of the text to be replaced.</param>
            <param name="newText">The new text.</param>
        </member>
        <member name="M:ICSharpCode.Editor.IDocument.StartUndoableAction">
            <summary>
            Make the document combine the following actions into a single
            action for undo purposes.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.IDocument.EndUndoableAction">
            <summary>
            Ends the undoable action started with <see cref="M:ICSharpCode.Editor.IDocument.StartUndoableAction"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.IDocument.OpenUndoGroup">
            <summary>
            Creates an undo group. Dispose the returned value to close the undo group.
            </summary>
            <returns>An object that closes the undo group when Dispose() is called.</returns>
        </member>
        <member name="M:ICSharpCode.Editor.IDocument.CreateAnchor(System.Int32)">
            <summary>
            Creates a new <see cref="T:ICSharpCode.Editor.ITextAnchor"/> at the specified offset.
            </summary>
            <inheritdoc cref="T:ICSharpCode.Editor.ITextAnchor" select="remarks|example"/>
        </member>
        <member name="P:ICSharpCode.Editor.IDocument.Text">
            <summary>
            Gets/Sets the text of the whole document..
            </summary>
        </member>
        <member name="E:ICSharpCode.Editor.IDocument.TextChanged">
            <summary>
            Is raised when the Text property changes.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.IDocument.TotalNumberOfLines">
            <summary>
            Gets the total number of lines in the document.
            </summary>
        </member>
        <member name="E:ICSharpCode.Editor.IDocument.Changing">
            <summary>
            This event is called directly before a change is applied to the document.
            </summary>
            <remarks>
            It is invalid to modify the document within this event handler.
            Aborting the change (by throwing an exception) is likely to cause corruption of data structures
            that listen to the Changing and Changed events.
            </remarks>
        </member>
        <member name="E:ICSharpCode.Editor.IDocument.Changed">
            <summary>
            This event is called directly after a change is applied to the document.
            </summary>
            <remarks>
            It is invalid to modify the document within this event handler.
            Aborting the event handler (by throwing an exception) is likely to cause corruption of data structures
            that listen to the Changing and Changed events.
            </remarks>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.#ctor(ICSharpCode.Editor.ITextSource)">
            <summary>
            Creates a new ReadOnlyDocument from the given text source.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.#ctor(System.String)">
            <summary>
            Creates a new ReadOnlyDocument from the given string.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.GetLine(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.GetLineByOffset(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.GetOffset(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.GetOffset(ICSharpCode.Editor.TextLocation)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.GetLocation(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.CreateAnchor(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.CreateSnapshot">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.CreateSnapshot(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.CreateReader">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.CreateReader(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.GetCharAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.GetText(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.GetText(ICSharpCode.Editor.ISegment)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.IndexOfAny(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.Editor.ReadOnlyDocument.GetService(System.Type)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.Editor.ReadOnlyDocument.Text">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.Editor.ReadOnlyDocument.TotalNumberOfLines">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.Editor.ReadOnlyDocument.TextLength">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.Editor.IDocumentLine">
            <summary>
            A line inside a <see cref="T:ICSharpCode.Editor.IDocument"/>.
            </summary>
        </member>
        <member name="T:ICSharpCode.Editor.ISegment">
            <summary>
            An (Offset,Length)-pair.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.ISegment.Offset">
            <summary>
            Gets the start offset of the segment.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.ISegment.Length">
            <summary>
            Gets the length of the segment.
            </summary>
            <remarks>Must not be negative.</remarks>
        </member>
        <member name="P:ICSharpCode.Editor.ISegment.EndOffset">
            <summary>
            Gets the end offset of the segment.
            </summary>
            <remarks>EndOffset = Offset + Length;</remarks>
        </member>
        <member name="P:ICSharpCode.Editor.IDocumentLine.TotalLength">
            <summary>
            Gets the length of this line, including the line delimiter.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.IDocumentLine.DelimiterLength">
            <summary>
            Gets the length of the line terminator.
            Returns 1 or 2; or 0 at the end of the document.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.IDocumentLine.LineNumber">
            <summary>
            Gets the number of this line.
            The first line has the number 1.
            </summary>
        </member>
        <member name="T:ICSharpCode.Editor.ITextAnchor">
            <summary>
            The TextAnchor class references an offset (a position between two characters).
            It automatically updates the offset when text is inserted/removed in front of the anchor.
            </summary>
            <remarks>
            <para>Use the <see cref="P:ICSharpCode.Editor.ITextAnchor.Offset"/> property to get the offset from a text anchor.
            Use the <see cref="M:ICSharpCode.Editor.IDocument.CreateAnchor(System.Int32)"/> method to create an anchor from an offset.
            </para>
            <para>
            The document will automatically update all text anchors; and because it uses weak references to do so,
            the garbage collector can simply collect the anchor object when you don't need it anymore.
            </para>
            <para>Moreover, the document is able to efficiently update a large number of anchors without having to look
            at each anchor object individually. Updating the offsets of all anchors usually only takes time logarithmic
            to the number of anchors. Retrieving the <see cref="P:ICSharpCode.Editor.ITextAnchor.Offset"/> property also runs in O(lg N).</para>
            </remarks>
            <example>
            Usage:
            <code>TextAnchor anchor = document.CreateAnchor(offset);
            ChangeMyDocument();
            int newOffset = anchor.Offset;
            </code>
            </example>
        </member>
        <member name="P:ICSharpCode.Editor.ITextAnchor.Location">
            <summary>
            Gets the text location of this anchor.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
        </member>
        <member name="P:ICSharpCode.Editor.ITextAnchor.Offset">
            <summary>
            Gets the offset of the text anchor.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
        </member>
        <member name="P:ICSharpCode.Editor.ITextAnchor.MovementType">
            <summary>
            Controls how the anchor moves.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.ITextAnchor.SurviveDeletion">
            <summary>
            Specifies whether the anchor survives deletion of the text containing it.
            <c>false</c>: The anchor is deleted when the a selection that includes the anchor is deleted.
            <c>true</c>: The anchor is not deleted.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.ITextAnchor.IsDeleted">
            <summary>
            Gets whether the anchor was deleted.
            </summary>
        </member>
        <member name="E:ICSharpCode.Editor.ITextAnchor.Deleted">
            <summary>
            Occurs after the anchor was deleted.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.ITextAnchor.Line">
            <summary>
            Gets the line number of the anchor.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
        </member>
        <member name="P:ICSharpCode.Editor.ITextAnchor.Column">
            <summary>
            Gets the column number of this anchor.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
        </member>
        <member name="T:ICSharpCode.Editor.ITextSourceVersion">
            <summary>
            Represents a version identifier for a text source.
            </summary>
            <remarks>
            Verions can be used to efficiently detect whether a document has changed and needs reparsing;
            or even to implement incremental parsers.
            It is a separate class from ITextBuffer to allow the GC to collect the text buffer while
            the version checkpoint is still in use.
            </remarks>
        </member>
        <member name="M:ICSharpCode.Editor.ITextSourceVersion.BelongsToSameDocumentAs(ICSharpCode.Editor.ITextSourceVersion)">
            <summary>
            Gets whether this checkpoint belongs to the same document as the other checkpoint.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.ITextSourceVersion.CompareAge(ICSharpCode.Editor.ITextSourceVersion)">
            <summary>
            Compares the age of this checkpoint to the other checkpoint.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <exception cref="T:System.ArgumentException">Raised if 'other' belongs to a different document than this version.</exception>
            <returns>-1 if this version is older than <paramref name="other"/>.
            0 if <c>this</c> version instance represents the same version as <paramref name="other"/>.
            1 if this version is newer than <paramref name="other"/>.</returns>
        </member>
        <member name="M:ICSharpCode.Editor.ITextSourceVersion.GetChangesTo(ICSharpCode.Editor.ITextSourceVersion)">
            <summary>
            Gets the changes from this checkpoint to the other checkpoint.
            If 'other' is older than this checkpoint, reverse changes are calculated.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <exception cref="T:System.ArgumentException">Raised if 'other' belongs to a different document than this checkpoint.</exception>
        </member>
        <member name="M:ICSharpCode.Editor.ITextSourceVersion.MoveOffsetTo(ICSharpCode.Editor.ITextSourceVersion,System.Int32,ICSharpCode.Editor.AnchorMovementType)">
            <summary>
            Calculates where the offset has moved in the other buffer version.
            </summary>
            <exception cref="T:System.ArgumentException">Raised if 'other' belongs to a different document than this checkpoint.</exception>
        </member>
        <member name="T:ICSharpCode.Editor.AnchorMovementType">
            <summary>
            Defines how a text anchor moves.
            </summary>
        </member>
        <member name="F:ICSharpCode.Editor.AnchorMovementType.Default">
            <summary>
            When text is inserted at the anchor position, the type of the insertion
            determines where the caret moves to. For normal insertions, the anchor will stay
            behind the inserted text.
            </summary>
        </member>
        <member name="F:ICSharpCode.Editor.AnchorMovementType.BeforeInsertion">
            <summary>
            Behaves like a start marker - when text is inserted at the anchor position, the anchor will stay
            before the inserted text.
            </summary>
        </member>
        <member name="F:ICSharpCode.Editor.AnchorMovementType.AfterInsertion">
            <summary>
            Behave like an end marker - when text is insered at the anchor position, the anchor will move
            after the inserted text.
            </summary>
        </member>
        <member name="T:ICSharpCode.Editor.TextChangeEventArgs">
            <summary>
            Describes a change of the document text.
            This class is thread-safe.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.TextChangeEventArgs.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a new TextChangeEventArgs object.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.TextChangeEventArgs.Offset">
            <summary>
            The offset at which the change occurs.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.TextChangeEventArgs.RemovedText">
            <summary>
            The text that was inserted.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.TextChangeEventArgs.RemovalLength">
            <summary>
            The number of characters removed.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.TextChangeEventArgs.InsertedText">
            <summary>
            The text that was inserted.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.TextChangeEventArgs.InsertionLength">
            <summary>
            The number of characters inserted.
            </summary>
        </member>
        <member name="T:ICSharpCode.Editor.ITextEditor">
            <summary>
            Interface for text editors.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.ITextEditor.JumpTo(System.Int32,System.Int32)">
            <summary>
            Sets the caret to the specified line/column and brings the caret into view.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.ITextEditor.Select(System.Int32,System.Int32)">
            <summary>
            Sets the selection.
            </summary>
            <param name="selectionStart">Start offset of the selection</param>
            <param name="selectionLength">Length of the selection</param>
        </member>
        <member name="P:ICSharpCode.Editor.ITextEditor.Document">
            <summary>
            Gets the document that is being edited.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.ITextEditor.Caret">
            <summary>
            Gets an object that represents the caret inside this text editor.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.ITextEditor.SelectionStart">
            <summary>
            Gets the start offset of the selection.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.ITextEditor.SelectionLength">
            <summary>
            Gets the length of the selection.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.ITextEditor.SelectedText">
            <summary>
            Gets/Sets the selected text.
            </summary>
        </member>
        <member name="T:ICSharpCode.Editor.ITextEditorCaret">
            <summary>
            Represents the caret in a text editor.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.ITextEditorCaret.Offset">
            <summary>
            Gets/Sets the caret offset;
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.ITextEditorCaret.Line">
            <summary>
            Gets/Sets the caret line number.
            Line numbers are counted starting from 1.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.ITextEditorCaret.Column">
            <summary>
            Gets/Sets the caret column number.
            Column numbers are counted starting from 1.
            </summary>
        </member>
        <member name="P:ICSharpCode.Editor.ITextEditorCaret.Location">
            <summary>
            Gets/sets the caret location.
            </summary>
        </member>
        <member name="E:ICSharpCode.Editor.ITextEditorCaret.LocationChanged">
            <summary>
            Is raised whenever the location of the caret has changed.
            </summary>
        </member>
        <member name="T:ICSharpCode.Editor.ISegmentExtensions">
            <summary>
            Extension methods for <see cref="T:ICSharpCode.Editor.ISegment"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.Editor.ISegmentExtensions.Contains(ICSharpCode.Editor.ISegment,System.Int32)">
            <summary>
            Gets whether the segment contains the offset.
            </summary>
            <returns>
            True, if offset is between segment.Start and segment.End (inclusive); otherwise, false.
            </returns>
        </member>
        <member name="M:ICSharpCode.Editor.ISegmentExtensions.Contains(ICSharpCode.Editor.ISegment,ICSharpCode.Editor.ISegment)">
            <summary>
            True, if the segment contains the specified segment, false otherwise.
            </summary>
        </member>
    </members>
</doc>
